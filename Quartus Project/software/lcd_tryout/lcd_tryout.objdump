
lcd_tryout.elf:     file format elf32-littlenios2
lcd_tryout.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080230

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00014374 memsz 0x00014374 flags r-x
    LOAD off    0x00015394 vaddr 0x00094394 paddr 0x0009df1c align 2**12
         filesz 0x00009b88 memsz 0x00009b88 flags rw-
    LOAD off    0x0001faa4 vaddr 0x000a7aa4 paddr 0x000a7aa4 align 2**12
         filesz 0x00000000 memsz 0x0001307c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013d2c  00080230  00080230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000438  00093f5c  00093f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00009b88  00094394  0009df1c  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0001307c  000a7aa4  000a7aa4  0001faa4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000bab20  000bab20  0001ef1c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001ef1c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001178  00000000  00000000  0001ef40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b5f3  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b03e  00000000  00000000  0004b6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000dd14  00000000  00000000  000566e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000029ec  00000000  00000000  00064400  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000044bc  00000000  00000000  00066dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ac15  00000000  00000000  0006b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00085ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001df0  00000000  00000000  00085ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008b8de  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008b8e1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008b8ed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008b8ee  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008b8ef  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0008b8fa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008b905  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0008b910  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  0008b91e  2**0
                  CONTENTS, READONLY
 26 .jdi          000057d1  00000000  00000000  0008b95c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00042ca9  00000000  00000000  0009112d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080230 l    d  .text	00000000 .text
00093f5c l    d  .rodata	00000000 .rodata
00094394 l    d  .rwdata	00000000 .rwdata
000a7aa4 l    d  .bss	00000000 .bss
000bab20 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lcd_tryout_bsp//obj/HAL/src/crt0.o
00080268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_exp.c
00000000 l    df *ABS*	00000000 e_exp.c
00094078 l     O .rodata	00000010 halF
00094068 l     O .rodata	00000010 ln2HI
00094058 l     O .rodata	00000010 ln2LO
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000867e0 l     F .text	00000008 __fp_unlock
000867f4 l     F .text	0000019c __sinit.part.1
00086990 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0009c3fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000884d4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000941d2 l     O .rodata	00000010 zeroes.4404
0008abe4 l     F .text	000000bc __sbprintf
000941e2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0008aea8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0009cc48 l     O .rwdata	00000020 lc_ctype_charset
0009cc28 l     O .rwdata	00000020 lc_message_charset
0009cc68 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00094210 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0008e9b0 l     F .text	000000fc __sprint_r.part.0
00094334 l     O .rodata	00000010 zeroes.4349
0008ffec l     F .text	000000bc __sbprintf
00094344 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000913bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000914d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000914fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000915f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000916d8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000917c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
000919a0 l     F .text	0000003c alt_get_errno
000919dc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00091c24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0009df0c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00091e98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00091fd4 l     F .text	00000034 alt_dev_reg
0009ce48 l     O .rwdata	00001060 jtag_uart_0
0009dea8 l     O .rwdata	0000002c lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000922c4 l     F .text	0000020c altera_avalon_jtag_uart_irq
000924d0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00093148 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00093804 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000a7ae4 g     O .bss	00000004 alt_instruction_exception_handler
0008e124 g     F .text	00000074 _mprec_log10
0008e210 g     F .text	0000008c __any_on
0008cccc g     F .text	00000054 _isatty_r
0009421c g     O .rodata	00000028 __mprec_tinytens
000918dc g     F .text	0000007c alt_main
00088400 g     F .text	000000c0 _puts_r
000baa20 g     O .bss	00000100 alt_irq
0008cdfc g     F .text	00000060 _lseek_r
0009df1c g       *ABS*	00000000 __flash_rwdata_start
00092b7c g     F .text	00000040 alt_up_character_lcd_send_cmd
0008c758 g     F .text	000000ac __sflags
0009128c g     F .text	00000088 .hidden __eqdf2
0008026c g     F .text	000000f8 Format_Conv1_W
0009ac0c g     O .rwdata	00000500 Fc2_W_raw
000bab20 g       *ABS*	00000000 __alt_heap_start
000883c4 g     F .text	0000003c printf
000904e4 g     F .text	0000009c _wcrtomb_r
000887f0 g     F .text	0000005c __sseek
00086b40 g     F .text	00000010 __sinit
0009038c g     F .text	00000140 __swbuf_r
0009bd4c g     O .rwdata	00000691 Image_Mask
0008cd20 g     F .text	0000007c _setlocale_r
00086998 g     F .text	00000078 __sfmoreglue
0009197c g     F .text	00000024 __malloc_unlock
000943b4 g     O .rwdata	00000010 Conv2_B
00082f38 g     F .text	00000440 .hidden __divsf3
000a7b10 g     O .bss	00000028 Softmax
0008d088 g     F .text	0000015c memmove
00086b28 g     F .text	00000018 _cleanup
00080364 g     F .text	0000013c Format_Conv2_W
0008d1e4 g     F .text	000000a8 _Balloc
00083864 g     F .text	00000070 .hidden __fixsfsi
00094444 g     O .rwdata	00000028 Fc2_B
00084c74 g     F .text	000000dc .hidden __gtdf2
00093b08 g     F .text	00000024 altera_nios2_gen2_irq_init
00086424 g     F .text	00000010 __errno
00092b08 g     F .text	00000074 get_DDRAM_addr
00094394 g     O .rwdata	00000020 Conv1_B
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
0009c3e0 g     O .rwdata	0000000a str_ans
00087550 g     F .text	0000005c _fstat_r
000a7ab0 g     O .bss	00000004 errno
0008876c g     F .text	00000008 __seofread
000a7ad0 g     O .bss	00000004 alt_argv
000a5ed4 g       *ABS*	00000000 _gp
000a7b38 g     O .bss	00001880 Pool1_Image
0009ccc8 g     O .rwdata	00000180 alt_fd_list
000932e8 g     F .text	00000090 alt_find_dev
0008cf40 g     F .text	00000148 memcpy
00092d24 g     F .text	00000050 alt_up_character_lcd_write_fd
000867e8 g     F .text	0000000c _cleanup_r
0008602c g     F .text	000000dc .hidden __floatsidf
000938e8 g     F .text	0000007c alt_io_redirect
00084d50 g     F .text	000000f4 .hidden __ltdf2
00093f5c g       *ABS*	00000000 __DTOR_END__
000884c0 g     F .text	00000014 puts
00093b2c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0008e860 g     F .text	00000074 __fpclassifyd
0008e080 g     F .text	000000a4 __ratio
0008ffd0 g     F .text	0000001c __vfiprintf_internal
000926c8 g     F .text	0000021c altera_avalon_jtag_uart_read
00088394 g     F .text	00000030 _printf_r
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0008298c g     F .text	00000064 .hidden __udivsi3
0009162c g     F .text	000000ac isatty
000a93b8 g     O .bss	00006200 Conv1_Image
00080cdc g     F .text	000002b4 Conv2
0009426c g     O .rodata	000000c8 __mprec_tens
0008cd9c g     F .text	0000000c __locale_charset
000a7abc g     O .bss	00000004 __malloc_top_pad
0009deec g     O .rwdata	00000004 __mb_cur_max
0008cdcc g     F .text	0000000c _localeconv_r
0008d618 g     F .text	0000003c __i2b
0008c804 g     F .text	000004c8 __sfvwrite_r
000886c4 g     F .text	00000054 _sbrk_r
0008e29c g     F .text	00000060 _read_r
0009b10c g     O .rwdata	00000c40 Input_Image_raw
0009df04 g     O .rwdata	00000004 alt_max_fd
00086434 g     F .text	000000f0 _fclose_r
000867b0 g     F .text	00000030 fflush
000a7ab8 g     O .bss	00000004 __malloc_max_sbrked_mem
00086108 g     F .text	00000110 .hidden __extendsfdf2
000af5b8 g     O .bss	00000c40 sum_value
000839f8 g     F .text	000008ac .hidden __adddf3
0008de28 g     F .text	0000010c __b2d
00090cc8 g     F .text	000005c4 .hidden __umoddi3
00091800 g     F .text	000000dc lseek
0009ded8 g     O .rwdata	00000004 __fdlib_version
0009dedc g     O .rwdata	00000004 _global_impure_ptr
0008e2fc g     F .text	00000564 _realloc_r
000bab20 g       *ABS*	00000000 __bss_end
00093714 g     F .text	000000f0 alt_iic_isr_register
00082388 g     F .text	000004e8 __ieee754_exp
00093a00 g     F .text	00000108 alt_tick
000906cc g     F .text	000005fc .hidden __udivdi3
000b01f8 g     O .bss	00000120 Conv1_W
000902e8 g     F .text	00000024 _fputwc_r
00094244 g     O .rodata	00000028 __mprec_bigtens
0008d3fc g     F .text	00000104 __s2b
00091314 g     F .text	000000a8 .hidden __floatunsidf
0008db68 g     F .text	00000060 __mcmp
00086b60 g     F .text	00000018 __fp_lock_all
000936c8 g     F .text	0000004c alt_ic_irq_enabled
000812fc g     F .text	00000148 Fc1
00093964 g     F .text	0000009c alt_alarm_stop
000a7ad8 g     O .bss	00000004 alt_irq_active
000870f0 g     F .text	00000444 _fseeko_r
000800fc g     F .exceptions	000000d4 alt_irq_handler
0009cca0 g     O .rwdata	00000028 alt_dev_null
00092fc4 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00093128 g     F .text	00000020 alt_dcache_flush_all
0008d500 g     F .text	00000068 __hi0bits
00085fac g     F .text	00000080 .hidden __fixdfsi
0009df1c g       *ABS*	00000000 __ram_rwdata_end
0009defc g     O .rwdata	00000008 alt_dev_list
00091ed4 g     F .text	00000100 write
000811dc g     F .text	00000120 Flatten
00083378 g     F .text	000000bc .hidden __gtsf2
00094394 g       *ABS*	00000000 __ram_rodata_end
00091538 g     F .text	000000b8 fstat
00084d50 g     F .text	000000f4 .hidden __ledf2
000b0318 g     O .bss	00001000 capturedImage
0008d8e0 g     F .text	00000140 __pow5mult
0008eac4 g     F .text	0000150c ___vfiprintf_internal_r
000a7ac8 g     O .bss	00000004 __nlocale_changed
000829f0 g     F .text	00000058 .hidden __umodsi3
00080708 g     F .text	0000004c CNN_MNIST_recognition
000bab20 g       *ABS*	00000000 end
00087534 g     F .text	0000001c fseeko
000870d4 g     F .text	0000001c fseek
00092204 g     F .text	000000c0 altera_avalon_jtag_uart_init
00080f90 g     F .text	0000024c MaxPool2
000801d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00093f5c g       *ABS*	00000000 __CTOR_LIST__
000d5730 g       *ABS*	00000000 __alt_stack_pointer
000863c0 g     F .text	00000064 .hidden __clzsi2
000928e4 g     F .text	00000224 altera_avalon_jtag_uart_write
000b1318 g     O .bss	00000c40 sum_n
00086b50 g     F .text	00000004 __sfp_lock_acquire
0008ce5c g     F .text	000000e4 memchr
00092c30 g     F .text	0000007c alt_up_character_lcd_write
000888ec g     F .text	000022dc ___vfprintf_internal_r
00086dc0 g     F .text	00000310 _free_r
0008cda8 g     F .text	00000010 __locale_mb_cur_max
00093da8 g     F .text	00000180 __call_exitprocs
000943c4 g     O .rwdata	00000080 Fc1_B
000b1f58 g     O .bss	00000028 FC2_Image
000a7ac4 g     O .bss	00000004 __mlocale_changed
0009dee4 g     O .rwdata	00000004 __malloc_sbrk_base
00080230 g     F .text	0000003c _start
000a7adc g     O .bss	00000004 _alt_tick_rate
0008da20 g     F .text	00000148 __lshift
000a7ae0 g     O .bss	00000004 _alt_nticks
00080754 g     F .text	00000038 Load_All
00091c60 g     F .text	00000104 read
00092040 g     F .text	00000060 alt_sys_init
00092e74 g     F .text	0000008c alt_up_character_lcd_shift_display
000838d4 g     F .text	00000124 .hidden __floatsisf
00088334 g     F .text	00000060 _open_r
00093c90 g     F .text	00000118 __register_exitproc
0008d654 g     F .text	0000028c __multiply
00092f00 g     F .text	0000008c alt_up_character_lcd_erase_pos
00092570 g     F .text	00000068 altera_avalon_jtag_uart_close
00082a48 g     F .text	00000028 .hidden __mulsi3
00094394 g       *ABS*	00000000 __ram_rwdata_start
00093f5c g       *ABS*	00000000 __ram_rodata_start
000a7ae8 g     O .bss	00000028 __malloc_current_mallinfo
0008df34 g     F .text	0000014c __d2b
000920a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00093480 g     F .text	000000c4 alt_get_fd
0008ae54 g     F .text	00000054 _close_r
000809fc g     F .text	000000a8 max
0009ded4 g     O .rwdata	00000004 pChar162
00093c14 g     F .text	0000007c memcmp
00092160 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000bab20 g       *ABS*	00000000 __alt_stack_base
000921b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00087734 g     F .text	000000dc _fwrite_r
00081920 g     F .text	000006ec Recognition
000a7aa8 g     O .bss	00000004 subop
0008ad00 g     F .text	00000154 __swsetup_r
000842a4 g     F .text	000009d0 .hidden __divdf3
00086a10 g     F .text	00000118 __sfp
0008e198 g     F .text	00000078 __copybits
0009c820 g     O .rwdata	00000408 __malloc_av_
00086b5c g     F .text	00000004 __sinit_lock_release
00084e44 g     F .text	0000086c .hidden __muldf3
00088718 g     F .text	00000054 __sread
000b1f80 g     O .bss	00000c40 Input_Image
00093378 g     F .text	00000108 alt_find_file
00093184 g     F .text	000000a4 alt_dev_llist_insert
00091958 g     F .text	00000024 __malloc_lock
00091de8 g     F .text	000000b0 sbrk
0009c3ec g     O .rwdata	0000000e str_pro
00086754 g     F .text	0000005c _fflush_r
000900a8 g     F .text	000000dc _calloc_r
00086c84 g     F .text	00000018 fopen
000a7aa4 g       *ABS*	00000000 __bss_start
0008820c g     F .text	00000128 memset
0008200c g     F .text	000001ec main
000b2bc0 g     O .bss	00000480 Conv2_W
000a7ad4 g     O .bss	00000004 alt_envp
000a7ab4 g     O .bss	00000004 __malloc_max_total_mem
000a7aac g     O .bss	00000001 recognize_flag
00092100 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008062c g     F .text	000000dc Format_InputImage
000904cc g     F .text	00000018 __swbuf
00094a0c g     O .rwdata	00006200 Fc1_W_raw
00092de8 g     F .text	0000008c alt_up_character_lcd_shift_cursor
0008884c g     F .text	00000008 __sclose
0008288c g     F .text	00000008 matherr
000d5730 g       *ABS*	00000000 __alt_heap_limit
00086524 g     F .text	00000014 fclose
00086218 g     F .text	000001a8 .hidden __truncdfsf2
0008b0d0 g     F .text	00001688 _dtoa_r
00087a00 g     F .text	0000080c _malloc_r
00090640 g     F .text	00000030 __ascii_wctomb
0009df08 g     O .rwdata	00000004 alt_errno
0009446c g     O .rwdata	00000120 Conv1_W_raw
000875ac g     F .text	000000c4 _fwalk
000b3040 g     O .bss	00000310 Flat_Image
000821f8 g     F .text	00000190 exp
00082894 g     F .text	00000084 .hidden __divsi3
00092bf4 g     F .text	0000003c alt_up_character_lcd_open_dev
00086c9c g     F .text	00000124 _malloc_trim_r
00093f5c g       *ABS*	00000000 __CTOR_END__
00083434 g     F .text	00000430 .hidden __mulsf3
00082870 g     F .text	0000001c finite
00092bbc g     F .text	00000038 alt_up_character_lcd_init
0008e8d4 g     F .text	000000dc strcmp
00093f5c g       *ABS*	00000000 __flash_rodata_start
00093f5c g       *ABS*	00000000 __DTOR_LIST__
0009128c g     F .text	00000088 .hidden __nedf2
00092008 g     F .text	00000038 alt_irq_init
00091d64 g     F .text	00000084 alt_release_fd
00092f8c g     F .text	00000038 alt_up_character_lcd_cursor_off
00094088 g     O .rodata	00000100 .hidden __clz_tab
000a7ac0 g     O .bss	00000004 _PathLocale
00093bc8 g     F .text	00000014 atexit
00083378 g     F .text	000000bc .hidden __gesf2
0009458c g     O .rwdata	00000480 Conv2_W_raw
0008aca0 g     F .text	00000060 _write_r
0008cdd8 g     F .text	00000018 setlocale
0009dee0 g     O .rwdata	00000004 _impure_ptr
000a7acc g     O .bss	00000004 alt_argc
00086538 g     F .text	0000021c __sflush_r
00093288 g     F .text	00000060 _do_dtors
0008cdc4 g     F .text	00000008 __locale_cjk_lang
000870d0 g     F .text	00000004 _fseek_r
000884f0 g     F .text	000001d4 __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
000b3350 g     O .bss	00000080 FC1_Image
0008ddc4 g     F .text	00000064 __ulp
00086b78 g     F .text	00000018 __fp_unlock_all
000b33d0 g     O .bss	00006200 Fc1_W
0009def4 g     O .rwdata	00000008 alt_fs_list
000a7aa4 g     O .bss	00000004 ans
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008cdf0 g     F .text	0000000c localeconv
00093564 g     F .text	00000050 alt_ic_isr_register
00087810 g     F .text	00000034 fwrite
00081588 g     F .text	00000398 Get_Answer
0009df1c g       *ABS*	00000000 _edata
000bab20 g       *ABS*	00000000 _end
000804a0 g     F .text	000000b0 Format_Fc1_W
00090184 g     F .text	00000164 __fputwc
00080230 g       *ABS*	00000000 __ram_exceptions_end
000925d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00080aa4 g     F .text	00000238 MaxPool1
000b95d0 g     O .bss	00000500 Fc2_W
0009363c g     F .text	0000008c alt_ic_irq_disable
00088774 g     F .text	0000007c __swrite
0009dee8 g     O .rwdata	00000004 __malloc_trim_threshold
0008cdb8 g     F .text	0000000c __locale_msgcharset
00093bdc g     F .text	00000038 exit
00087670 g     F .text	000000c4 _fwalk_reent
0008dbc8 g     F .text	000001fc __mdiff
000b9ad0 g     O .bss	00000c40 Conv2_Image
00082918 g     F .text	00000074 .hidden __modsi3
000d5730 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00086b54 g     F .text	00000004 __sfp_lock_release
00092cac g     F .text	00000078 alt_up_character_lcd_string
000ba710 g     O .bss	00000310 Pool2_Image
00086b90 g     F .text	000000f4 _fopen_r
00093f28 g     F .text	00000034 _exit
00092ffc g     F .text	0000012c alt_alarm_start
00087844 g     F .text	000001bc __smakebuf_r
00088854 g     F .text	00000098 strlen
00091ac8 g     F .text	0000015c open
00084c74 g     F .text	000000dc .hidden __gedf2
0008078c g     F .text	00000270 Conv1
0009def0 g     O .rwdata	00000004 __wctomb
0008eaac g     F .text	00000018 __sprint_r
00093544 g     F .text	00000020 alt_icache_flush_all
00092d74 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0009df10 g     O .rwdata	00000004 alt_priority_mask
000935b4 g     F .text	00000088 alt_ic_irq_enable
0008abc8 g     F .text	0000001c __vfprintf_internal
00090670 g     F .text	0000005c _wctomb_r
000856b0 g     F .text	000008fc .hidden __subdf3
0008d568 g     F .text	000000b0 __lo0bits
0009df14 g     O .rwdata	00000008 alt_alarm_list
00093228 g     F .text	00000060 _do_ctors
00090580 g     F .text	000000c0 wcrtomb
00081444 g     F .text	00000144 Fc2
000913f8 g     F .text	000000d8 close
00082a70 g     F .text	000004c8 .hidden __addsf3
00080550 g     F .text	000000dc Format_Fc2_W
00091740 g     F .text	00000084 alt_load
0009030c g     F .text	00000080 fputwc
00086b58 g     F .text	00000004 __sinit_lock_acquire
0008d2b4 g     F .text	00000148 __multadd
0008d28c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408c14 	ori	at,at,560
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800334 	movhi	r2,12
   80140:	10aa8804 	addi	r2,r2,-21984
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800334 	movhi	r2,12
   80158:	10aa8804 	addi	r2,r2,-21984
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801e4:	00bfffc4 	movi	r2,-1
   801e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801f0:	d0870417 	ldw	r2,7184(gp)
   801f4:	10000726 	beq	r2,zero,80214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801f8:	d0870417 	ldw	r2,7184(gp)
   801fc:	e0fffd17 	ldw	r3,-12(fp)
   80200:	e1bffe17 	ldw	r6,-8(fp)
   80204:	e17fff17 	ldw	r5,-4(fp)
   80208:	1809883a 	mov	r4,r3
   8020c:	103ee83a 	callr	r2
   80210:	00000206 	br	8021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80218:	0005883a 	mov	r2,zero
}
   8021c:	e037883a 	mov	sp,fp
   80220:	dfc00117 	ldw	ra,4(sp)
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00204 	addi	sp,sp,8
   8022c:	f800283a 	ret

Disassembly of section .text:

00080230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80230:	06c00374 	movhi	sp,13
    ori sp, sp, %lo(__alt_stack_pointer)
   80234:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
   80238:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   8023c:	d697b514 	ori	gp,gp,24276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80240:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   80244:	109ea914 	ori	r2,r2,31396

    movhi r3, %hi(__bss_end)
   80248:	00c002f4 	movhi	r3,11
    ori r3, r3, %lo(__bss_end)
   8024c:	18eac814 	ori	r3,r3,43808

    beq r2, r3, 1f
   80250:	10c00326 	beq	r2,r3,80260 <_start+0x30>

0:
    stw zero, (r2)
   80254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8025c:	10fffd36 	bltu	r2,r3,80254 <__alt_data_end+0xfffaab24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80260:	00917400 	call	91740 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80264:	00918dc0 	call	918dc <alt_main>

00080268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80268:	003fff06 	br	80268 <__alt_data_end+0xfffaab38>

0008026c <Format_Conv1_W>:
	0.478332608938, 0.343070626259, -0.665887057781, -0.175977796316, 0.409941256046, 0.062993645668, 0.089100502431, 0.278431415558,
	0.328728526831, 0.433134436607, -0.677383780479, -0.284945189953, 0.261582046747, 0.153381928802, 0.544657826424, 0.473581314087,
	0.491747796535, 0.376624584198, -0.783044278622, -0.143371194601, 0.130911856890, 0.325317472219, 0.481452137232, 0.419771283865,
};

void Format_Conv1_W() {
   8026c:	defffc04 	addi	sp,sp,-16
   80270:	df000315 	stw	fp,12(sp)
   80274:	df000304 	addi	fp,sp,12
	int i, j, k;
	for (i = 0; i < CONV_CORE_DIM; i++)
   80278:	e03ffd15 	stw	zero,-12(fp)
   8027c:	00003106 	br	80344 <Format_Conv1_W+0xd8>
		for (j = 0; j < CONV_CORE_DIM; j++)
   80280:	e03ffe15 	stw	zero,-8(fp)
   80284:	00002906 	br	8032c <Format_Conv1_W+0xc0>
			for (k = 0; k < CONV1_OUT_DIM; k++)
   80288:	e03fff15 	stw	zero,-4(fp)
   8028c:	00002106 	br	80314 <Format_Conv1_W+0xa8>
				Conv1_W[i][j][0][k] = Conv1_W_raw[i*CONV_CORE_DIM*CONV1_OUT_DIM + j * CONV1_OUT_DIM + k];
   80290:	e0fffd17 	ldw	r3,-12(fp)
   80294:	1805883a 	mov	r2,r3
   80298:	1085883a 	add	r2,r2,r2
   8029c:	10c7883a 	add	r3,r2,r3
   802a0:	e0bffe17 	ldw	r2,-8(fp)
   802a4:	1885883a 	add	r2,r3,r2
   802a8:	100690fa 	slli	r3,r2,3
   802ac:	e0bfff17 	ldw	r2,-4(fp)
   802b0:	1887883a 	add	r3,r3,r2
   802b4:	00800274 	movhi	r2,9
   802b8:	10911b04 	addi	r2,r2,17516
   802bc:	18c7883a 	add	r3,r3,r3
   802c0:	18c7883a 	add	r3,r3,r3
   802c4:	10c5883a 	add	r2,r2,r3
   802c8:	11400017 	ldw	r5,0(r2)
   802cc:	00c002f4 	movhi	r3,11
   802d0:	18c07e04 	addi	r3,r3,504
   802d4:	e13ffd17 	ldw	r4,-12(fp)
   802d8:	2005883a 	mov	r2,r4
   802dc:	1085883a 	add	r2,r2,r2
   802e0:	1105883a 	add	r2,r2,r4
   802e4:	e13ffe17 	ldw	r4,-8(fp)
   802e8:	1105883a 	add	r2,r2,r4
   802ec:	100890fa 	slli	r4,r2,3
   802f0:	e0bfff17 	ldw	r2,-4(fp)
   802f4:	2085883a 	add	r2,r4,r2
   802f8:	1085883a 	add	r2,r2,r2
   802fc:	1085883a 	add	r2,r2,r2
   80300:	1885883a 	add	r2,r3,r2
   80304:	11400015 	stw	r5,0(r2)

void Format_Conv1_W() {
	int i, j, k;
	for (i = 0; i < CONV_CORE_DIM; i++)
		for (j = 0; j < CONV_CORE_DIM; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
   80308:	e0bfff17 	ldw	r2,-4(fp)
   8030c:	10800044 	addi	r2,r2,1
   80310:	e0bfff15 	stw	r2,-4(fp)
   80314:	e0bfff17 	ldw	r2,-4(fp)
   80318:	10800210 	cmplti	r2,r2,8
   8031c:	103fdc1e 	bne	r2,zero,80290 <__alt_data_end+0xfffaab60>
};

void Format_Conv1_W() {
	int i, j, k;
	for (i = 0; i < CONV_CORE_DIM; i++)
		for (j = 0; j < CONV_CORE_DIM; j++)
   80320:	e0bffe17 	ldw	r2,-8(fp)
   80324:	10800044 	addi	r2,r2,1
   80328:	e0bffe15 	stw	r2,-8(fp)
   8032c:	e0bffe17 	ldw	r2,-8(fp)
   80330:	108000d0 	cmplti	r2,r2,3
   80334:	103fd41e 	bne	r2,zero,80288 <__alt_data_end+0xfffaab58>
	0.491747796535, 0.376624584198, -0.783044278622, -0.143371194601, 0.130911856890, 0.325317472219, 0.481452137232, 0.419771283865,
};

void Format_Conv1_W() {
	int i, j, k;
	for (i = 0; i < CONV_CORE_DIM; i++)
   80338:	e0bffd17 	ldw	r2,-12(fp)
   8033c:	10800044 	addi	r2,r2,1
   80340:	e0bffd15 	stw	r2,-12(fp)
   80344:	e0bffd17 	ldw	r2,-12(fp)
   80348:	108000d0 	cmplti	r2,r2,3
   8034c:	103fcc1e 	bne	r2,zero,80280 <__alt_data_end+0xfffaab50>
		for (j = 0; j < CONV_CORE_DIM; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
				Conv1_W[i][j][0][k] = Conv1_W_raw[i*CONV_CORE_DIM*CONV1_OUT_DIM + j * CONV1_OUT_DIM + k];
}
   80350:	0001883a 	nop
   80354:	e037883a 	mov	sp,fp
   80358:	df000017 	ldw	fp,0(sp)
   8035c:	dec00104 	addi	sp,sp,4
   80360:	f800283a 	ret

00080364 <Format_Conv2_W>:
	0.205775201321, 0.198324441910, -0.313278973103, -0.108250141144,
	0.233034908772, -0.175800949335, -0.178829267621, 0.143294408917,
	0.295787453651, -0.002093323506, -0.431369543076, -0.094434492290,
};

void Format_Conv2_W() {
   80364:	defffb04 	addi	sp,sp,-20
   80368:	df000415 	stw	fp,16(sp)
   8036c:	df000404 	addi	fp,sp,16
	int i, j, k, l;
	for (i = 0; i < CONV_CORE_DIM; i++)
   80370:	e03ffc15 	stw	zero,-16(fp)
   80374:	00004206 	br	80480 <Format_Conv2_W+0x11c>
		for (j = 0; j < CONV_CORE_DIM; j++)
   80378:	e03ffd15 	stw	zero,-12(fp)
   8037c:	00003a06 	br	80468 <Format_Conv2_W+0x104>
			for (k = 0; k < CONV1_OUT_DIM; k++)
   80380:	e03ffe15 	stw	zero,-8(fp)
   80384:	00003206 	br	80450 <Format_Conv2_W+0xec>
				for (l = 0; l < CONV2_OUT_DIM; l++)
   80388:	e03fff15 	stw	zero,-4(fp)
   8038c:	00002a06 	br	80438 <Format_Conv2_W+0xd4>
					Conv2_W[i][j][k][l] = Conv2_W_raw[i*CONV_CORE_DIM*CONV1_OUT_DIM*CONV2_OUT_DIM + j * CONV1_OUT_DIM*CONV2_OUT_DIM + k * CONV2_OUT_DIM + l];
   80390:	e0fffc17 	ldw	r3,-16(fp)
   80394:	1805883a 	mov	r2,r3
   80398:	1085883a 	add	r2,r2,r2
   8039c:	10c7883a 	add	r3,r2,r3
   803a0:	e0bffd17 	ldw	r2,-12(fp)
   803a4:	1885883a 	add	r2,r3,r2
   803a8:	100690fa 	slli	r3,r2,3
   803ac:	e0bffe17 	ldw	r2,-8(fp)
   803b0:	1885883a 	add	r2,r3,r2
   803b4:	1085883a 	add	r2,r2,r2
   803b8:	1085883a 	add	r2,r2,r2
   803bc:	1007883a 	mov	r3,r2
   803c0:	e0bfff17 	ldw	r2,-4(fp)
   803c4:	1887883a 	add	r3,r3,r2
   803c8:	00800274 	movhi	r2,9
   803cc:	10916304 	addi	r2,r2,17804
   803d0:	18c7883a 	add	r3,r3,r3
   803d4:	18c7883a 	add	r3,r3,r3
   803d8:	10c5883a 	add	r2,r2,r3
   803dc:	11400017 	ldw	r5,0(r2)
   803e0:	00c002f4 	movhi	r3,11
   803e4:	18caf004 	addi	r3,r3,11200
   803e8:	e13ffc17 	ldw	r4,-16(fp)
   803ec:	2005883a 	mov	r2,r4
   803f0:	1085883a 	add	r2,r2,r2
   803f4:	1105883a 	add	r2,r2,r4
   803f8:	e13ffd17 	ldw	r4,-12(fp)
   803fc:	1105883a 	add	r2,r2,r4
   80400:	100890fa 	slli	r4,r2,3
   80404:	e0bffe17 	ldw	r2,-8(fp)
   80408:	2085883a 	add	r2,r4,r2
   8040c:	1085883a 	add	r2,r2,r2
   80410:	1089883a 	add	r4,r2,r2
   80414:	e0bfff17 	ldw	r2,-4(fp)
   80418:	2085883a 	add	r2,r4,r2
   8041c:	1085883a 	add	r2,r2,r2
   80420:	1085883a 	add	r2,r2,r2
   80424:	1885883a 	add	r2,r3,r2
   80428:	11400015 	stw	r5,0(r2)
void Format_Conv2_W() {
	int i, j, k, l;
	for (i = 0; i < CONV_CORE_DIM; i++)
		for (j = 0; j < CONV_CORE_DIM; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
				for (l = 0; l < CONV2_OUT_DIM; l++)
   8042c:	e0bfff17 	ldw	r2,-4(fp)
   80430:	10800044 	addi	r2,r2,1
   80434:	e0bfff15 	stw	r2,-4(fp)
   80438:	e0bfff17 	ldw	r2,-4(fp)
   8043c:	10800110 	cmplti	r2,r2,4
   80440:	103fd31e 	bne	r2,zero,80390 <__alt_data_end+0xfffaac60>

void Format_Conv2_W() {
	int i, j, k, l;
	for (i = 0; i < CONV_CORE_DIM; i++)
		for (j = 0; j < CONV_CORE_DIM; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
   80444:	e0bffe17 	ldw	r2,-8(fp)
   80448:	10800044 	addi	r2,r2,1
   8044c:	e0bffe15 	stw	r2,-8(fp)
   80450:	e0bffe17 	ldw	r2,-8(fp)
   80454:	10800210 	cmplti	r2,r2,8
   80458:	103fcb1e 	bne	r2,zero,80388 <__alt_data_end+0xfffaac58>
};

void Format_Conv2_W() {
	int i, j, k, l;
	for (i = 0; i < CONV_CORE_DIM; i++)
		for (j = 0; j < CONV_CORE_DIM; j++)
   8045c:	e0bffd17 	ldw	r2,-12(fp)
   80460:	10800044 	addi	r2,r2,1
   80464:	e0bffd15 	stw	r2,-12(fp)
   80468:	e0bffd17 	ldw	r2,-12(fp)
   8046c:	108000d0 	cmplti	r2,r2,3
   80470:	103fc31e 	bne	r2,zero,80380 <__alt_data_end+0xfffaac50>
	0.295787453651, -0.002093323506, -0.431369543076, -0.094434492290,
};

void Format_Conv2_W() {
	int i, j, k, l;
	for (i = 0; i < CONV_CORE_DIM; i++)
   80474:	e0bffc17 	ldw	r2,-16(fp)
   80478:	10800044 	addi	r2,r2,1
   8047c:	e0bffc15 	stw	r2,-16(fp)
   80480:	e0bffc17 	ldw	r2,-16(fp)
   80484:	108000d0 	cmplti	r2,r2,3
   80488:	103fbb1e 	bne	r2,zero,80378 <__alt_data_end+0xfffaac48>
		for (j = 0; j < CONV_CORE_DIM; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
				for (l = 0; l < CONV2_OUT_DIM; l++)
					Conv2_W[i][j][k][l] = Conv2_W_raw[i*CONV_CORE_DIM*CONV1_OUT_DIM*CONV2_OUT_DIM + j * CONV1_OUT_DIM*CONV2_OUT_DIM + k * CONV2_OUT_DIM + l];
}
   8048c:	0001883a 	nop
   80490:	e037883a 	mov	sp,fp
   80494:	df000017 	ldw	fp,0(sp)
   80498:	dec00104 	addi	sp,sp,4
   8049c:	f800283a 	ret

000804a0 <Format_Fc1_W>:
	0.127178445458, 0.044816862792, -0.014662570320, -0.064520232379, -0.235376983881, 0.078899003565, -0.015371254645, 0.138617739081, -0.227005228400, -0.003924244549, -0.022568983957, 0.037855725735, -0.120621822774, -0.006319903303, 0.129499390721, 0.180929854512, -0.074028782547, 0.022562483326, 0.063590675592, -0.155227124691, -0.140079766512, -0.041597578675, -0.189778044820, -0.091260723770, 0.098542943597, 0.152349621058, -0.106747485697, -0.132662191987, -0.102049447596, 0.016493020579, -0.111835010350, 0.002606458962,
	0.003723835107, 0.106709659100, 0.016573708504, -0.078420624137, -0.108134247363, -0.129132419825, -0.074413180351, -0.045664742589, -0.200606361032, -0.061181746423, 0.021886354312, -0.031660411507, 0.039107158780, -0.151700735092, 0.197057485580, -0.113156080246, 0.103587836027, -0.017466291785, -0.079787246883, 0.174250438809, 0.026776086539, 0.138518333435, 0.047010373324, -0.020349677652, -0.044780287892, -0.067977577448, -0.043312080204, -0.039684034884, 0.014988371171, -0.051982332021, 0.040609173477, 0.043775539845,
	-0.035542078316, -0.023575557396, 0.042091764510, 0.197612598538, 0.000820584886, -0.121303014457, -0.045213054866, -0.046414125711, 0.026339301839, -0.060650255531, -0.080773353577, 0.015300501138, 0.158764556050, -0.001424677204, 0.162710338831, -0.016992481425, -0.015217824839, 0.016301445663, -0.047071058303, -0.014848603867, 0.050834346563, 0.066649317741, 0.160343617201, -0.034037679434, 0.037955723703, -0.042440604419, 0.045096464455, 0.071097336709, -0.084702648222, -0.073139488697, -0.005728538614, 0.055165097117,
};

void Format_Fc1_W() {
   804a0:	defffd04 	addi	sp,sp,-12
   804a4:	df000215 	stw	fp,8(sp)
   804a8:	df000204 	addi	fp,sp,8
	int i, j;
	for (i = 0; i < (IMAGE_DIM / 4)*(IMAGE_DIM / 4)*CONV2_OUT_DIM; i++)
   804ac:	e03ffe15 	stw	zero,-8(fp)
   804b0:	00001f06 	br	80530 <Format_Fc1_W+0x90>
		for (j = 0; j < FC1_OUT_DIM; j++)
   804b4:	e03fff15 	stw	zero,-4(fp)
   804b8:	00001706 	br	80518 <Format_Fc1_W+0x78>
			Fc1_W[i][j] = Fc1_W_raw[i*FC1_OUT_DIM + j];
   804bc:	e0bffe17 	ldw	r2,-8(fp)
   804c0:	1006917a 	slli	r3,r2,5
   804c4:	e0bfff17 	ldw	r2,-4(fp)
   804c8:	1887883a 	add	r3,r3,r2
   804cc:	00800274 	movhi	r2,9
   804d0:	10928304 	addi	r2,r2,18956
   804d4:	18c7883a 	add	r3,r3,r3
   804d8:	18c7883a 	add	r3,r3,r3
   804dc:	10c5883a 	add	r2,r2,r3
   804e0:	11000017 	ldw	r4,0(r2)
   804e4:	008002f4 	movhi	r2,11
   804e8:	108cf404 	addi	r2,r2,13264
   804ec:	e0fffe17 	ldw	r3,-8(fp)
   804f0:	180a917a 	slli	r5,r3,5
   804f4:	e0ffff17 	ldw	r3,-4(fp)
   804f8:	28c7883a 	add	r3,r5,r3
   804fc:	18c7883a 	add	r3,r3,r3
   80500:	18c7883a 	add	r3,r3,r3
   80504:	10c5883a 	add	r2,r2,r3
   80508:	11000015 	stw	r4,0(r2)
};

void Format_Fc1_W() {
	int i, j;
	for (i = 0; i < (IMAGE_DIM / 4)*(IMAGE_DIM / 4)*CONV2_OUT_DIM; i++)
		for (j = 0; j < FC1_OUT_DIM; j++)
   8050c:	e0bfff17 	ldw	r2,-4(fp)
   80510:	10800044 	addi	r2,r2,1
   80514:	e0bfff15 	stw	r2,-4(fp)
   80518:	e0bfff17 	ldw	r2,-4(fp)
   8051c:	10800810 	cmplti	r2,r2,32
   80520:	103fe61e 	bne	r2,zero,804bc <__alt_data_end+0xfffaad8c>
	-0.035542078316, -0.023575557396, 0.042091764510, 0.197612598538, 0.000820584886, -0.121303014457, -0.045213054866, -0.046414125711, 0.026339301839, -0.060650255531, -0.080773353577, 0.015300501138, 0.158764556050, -0.001424677204, 0.162710338831, -0.016992481425, -0.015217824839, 0.016301445663, -0.047071058303, -0.014848603867, 0.050834346563, 0.066649317741, 0.160343617201, -0.034037679434, 0.037955723703, -0.042440604419, 0.045096464455, 0.071097336709, -0.084702648222, -0.073139488697, -0.005728538614, 0.055165097117,
};

void Format_Fc1_W() {
	int i, j;
	for (i = 0; i < (IMAGE_DIM / 4)*(IMAGE_DIM / 4)*CONV2_OUT_DIM; i++)
   80524:	e0bffe17 	ldw	r2,-8(fp)
   80528:	10800044 	addi	r2,r2,1
   8052c:	e0bffe15 	stw	r2,-8(fp)
   80530:	e0bffe17 	ldw	r2,-8(fp)
   80534:	10803110 	cmplti	r2,r2,196
   80538:	103fde1e 	bne	r2,zero,804b4 <__alt_data_end+0xfffaad84>
		for (j = 0; j < FC1_OUT_DIM; j++)
			Fc1_W[i][j] = Fc1_W_raw[i*FC1_OUT_DIM + j];
}
   8053c:	0001883a 	nop
   80540:	e037883a 	mov	sp,fp
   80544:	df000017 	ldw	fp,0(sp)
   80548:	dec00104 	addi	sp,sp,4
   8054c:	f800283a 	ret

00080550 <Format_Fc2_W>:
	0.171521484852, -0.501652836800, -0.042966634035, -0.198097750545, 0.174215391278, -0.043280988932, 0.188503652811, -0.131451472640, 0.115259565413, 0.150849923491,
	-0.125158265233, -0.145960763097, 0.034650668502, -0.235801413655, 0.205909237266, 0.094551570714, 0.187727853656, -0.226710900664, 0.164939746261, 0.164889454842,
	-0.162963539362, 0.157234698534, 0.003025386482, -0.356876045465, 0.141815289855, 0.067782752216, 0.157360702753, -0.312196701765, 0.119925968349, -0.183696389198,
};

void Format_Fc2_W() {
   80550:	defffa04 	addi	sp,sp,-24
   80554:	dfc00515 	stw	ra,20(sp)
   80558:	df000415 	stw	fp,16(sp)
   8055c:	dc400315 	stw	r17,12(sp)
   80560:	dc000215 	stw	r16,8(sp)
   80564:	df000404 	addi	fp,sp,16
	int i, j;
	for (i = 0; i < FC1_OUT_DIM; i++)
   80568:	e03ffc15 	stw	zero,-16(fp)
   8056c:	00002406 	br	80600 <Format_Fc2_W+0xb0>
		for (j = 0; j < FC2_OUT_DIM; j++)
   80570:	e03ffd15 	stw	zero,-12(fp)
   80574:	00001c06 	br	805e8 <Format_Fc2_W+0x98>
			Fc2_W[i][j] = Fc2_W_raw[i*FC2_OUT_DIM + j];
   80578:	01400284 	movi	r5,10
   8057c:	e13ffc17 	ldw	r4,-16(fp)
   80580:	0082a480 	call	82a48 <__mulsi3>
   80584:	1007883a 	mov	r3,r2
   80588:	e0bffd17 	ldw	r2,-12(fp)
   8058c:	1887883a 	add	r3,r3,r2
   80590:	008002b4 	movhi	r2,10
   80594:	10ab0304 	addi	r2,r2,-21492
   80598:	18c7883a 	add	r3,r3,r3
   8059c:	18c7883a 	add	r3,r3,r3
   805a0:	10c5883a 	add	r2,r2,r3
   805a4:	14400017 	ldw	r17,0(r2)
   805a8:	04000334 	movhi	r16,12
   805ac:	84257404 	addi	r16,r16,-27184
   805b0:	e0bffc17 	ldw	r2,-16(fp)
   805b4:	01400284 	movi	r5,10
   805b8:	1009883a 	mov	r4,r2
   805bc:	0082a480 	call	82a48 <__mulsi3>
   805c0:	1007883a 	mov	r3,r2
   805c4:	e0bffd17 	ldw	r2,-12(fp)
   805c8:	1885883a 	add	r2,r3,r2
   805cc:	1085883a 	add	r2,r2,r2
   805d0:	1085883a 	add	r2,r2,r2
   805d4:	8085883a 	add	r2,r16,r2
   805d8:	14400015 	stw	r17,0(r2)
};

void Format_Fc2_W() {
	int i, j;
	for (i = 0; i < FC1_OUT_DIM; i++)
		for (j = 0; j < FC2_OUT_DIM; j++)
   805dc:	e0bffd17 	ldw	r2,-12(fp)
   805e0:	10800044 	addi	r2,r2,1
   805e4:	e0bffd15 	stw	r2,-12(fp)
   805e8:	e0bffd17 	ldw	r2,-12(fp)
   805ec:	10800290 	cmplti	r2,r2,10
   805f0:	103fe11e 	bne	r2,zero,80578 <__alt_data_end+0xfffaae48>
	-0.162963539362, 0.157234698534, 0.003025386482, -0.356876045465, 0.141815289855, 0.067782752216, 0.157360702753, -0.312196701765, 0.119925968349, -0.183696389198,
};

void Format_Fc2_W() {
	int i, j;
	for (i = 0; i < FC1_OUT_DIM; i++)
   805f4:	e0bffc17 	ldw	r2,-16(fp)
   805f8:	10800044 	addi	r2,r2,1
   805fc:	e0bffc15 	stw	r2,-16(fp)
   80600:	e0bffc17 	ldw	r2,-16(fp)
   80604:	10800810 	cmplti	r2,r2,32
   80608:	103fd91e 	bne	r2,zero,80570 <__alt_data_end+0xfffaae40>
		for (j = 0; j < FC2_OUT_DIM; j++)
			Fc2_W[i][j] = Fc2_W_raw[i*FC2_OUT_DIM + j];
}
   8060c:	0001883a 	nop
   80610:	e6fffe04 	addi	sp,fp,-8
   80614:	dfc00317 	ldw	ra,12(sp)
   80618:	df000217 	ldw	fp,8(sp)
   8061c:	dc400117 	ldw	r17,4(sp)
   80620:	dc000017 	ldw	r16,0(sp)
   80624:	dec00404 	addi	sp,sp,16
   80628:	f800283a 	ret

0008062c <Format_InputImage>:
0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
*/
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.0627451, 0.0941176, 0.0627451, 0.0117647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.113725, 0.584314, 0.803922, 0.952941, 0.968627, 0.945098, 0.839216, 0.505882, 0.0745098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.027451, 0.513725, 0.937255, 0.996078, 0.992157, 0.988235, 0.980392, 0.992157, 0.996078, 0.996078, 0.85098, 0.207843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0117647, 0.541176, 0.784314, 0.992157, 0.992157, 0.882353, 0.435294, 0.176471, 0.101961, 0.188235, 0.482353, 0.92549, 0.996078, 0.94902, 0.215686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0784314, 0.972549, 0.996078, 0.964706, 0.466667, 0.0431373, 0, 0, 0, 0, 0, 0.152941, 0.811765, 0.996078, 0.635294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00392157, 0.623529, 0.847059, 0.364706, 0, 0, 0, 0, 0, 0, 0, 0, 0.321569, 0.992157, 0.909804, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0745098, 0.972549, 0.984314, 0.12549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.101961, 0.976471, 0.980392, 0.113725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.498039, 0.992157, 0.882353, 0.0352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.172549, 0.937255, 0.992157, 0.443137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.658824, 0.996078, 0.788235, 0.027451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.129412, 0.952941, 0.992157, 0.294118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0705882, 0.792157, 0.996078, 0.905882, 0.0509804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.701961, 0.996078, 0.94902, 0.266667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.207843, 0.513725, 0.733333, 0.992157, 0.992157, 0.670588, 0.321569, 0.160784, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00392157, 0.211765, 0.72549, 0.92549, 0.988235, 0.996078, 0.996078, 0.996078, 0.996078, 0.996078, 0.992157, 0.972549, 0.878431, 0.788235, 0.509804, 0.305882, 0.0627451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.580392, 0.976471, 0.996078, 0.992157, 0.992157, 0.996078, 0.992157, 0.756863, 0.572549, 0.678431, 0.85098, 0.968627, 0.992157, 0.996078, 0.996078, 0.992157, 0.792157, 0.0117647, 0, 0, 0, 0, 0, 0, 0, 0, 0.0666667, 0.745098, 0.992157, 0.992157, 0.823529, 0.862745, 0.992157, 0.992157, 0.705882, 0.0313725, 0, 0, 0.00784314, 0.121569, 0.270588, 0.517647, 0.705882, 0.94902, 0.72549, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0.67451, 0.996078, 0.952941, 0.658824, 0.870588, 0.992157, 0.968627, 0.529412, 0.0352941, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0.141176, 0.976471, 0.992157, 0.882353, 0.984314, 0.996078, 0.87451, 0.243137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.109804, 0.92549, 0.996078, 0.996078, 0.984314, 0.580392, 0.0705882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.227451, 0.623529, 0.694118, 0.34902, 0.00392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

void Format_InputImage() {
   8062c:	defffa04 	addi	sp,sp,-24
   80630:	dfc00515 	stw	ra,20(sp)
   80634:	df000415 	stw	fp,16(sp)
   80638:	dc400315 	stw	r17,12(sp)
   8063c:	dc000215 	stw	r16,8(sp)
   80640:	df000404 	addi	fp,sp,16
	int i, j;
	for (i = 0; i < IMAGE_DIM; i++)
   80644:	e03ffc15 	stw	zero,-16(fp)
   80648:	00002406 	br	806dc <Format_InputImage+0xb0>
		for (j = 0; j < IMAGE_DIM; j++)
   8064c:	e03ffd15 	stw	zero,-12(fp)
   80650:	00001c06 	br	806c4 <Format_InputImage+0x98>
			Input_Image[i][j] = Input_Image_raw[i*IMAGE_DIM + j];
   80654:	01400704 	movi	r5,28
   80658:	e13ffc17 	ldw	r4,-16(fp)
   8065c:	0082a480 	call	82a48 <__mulsi3>
   80660:	1007883a 	mov	r3,r2
   80664:	e0bffd17 	ldw	r2,-12(fp)
   80668:	1887883a 	add	r3,r3,r2
   8066c:	008002b4 	movhi	r2,10
   80670:	10ac4304 	addi	r2,r2,-20212
   80674:	18c7883a 	add	r3,r3,r3
   80678:	18c7883a 	add	r3,r3,r3
   8067c:	10c5883a 	add	r2,r2,r3
   80680:	14400017 	ldw	r17,0(r2)
   80684:	040002f4 	movhi	r16,11
   80688:	8407e004 	addi	r16,r16,8064
   8068c:	e0bffc17 	ldw	r2,-16(fp)
   80690:	01400704 	movi	r5,28
   80694:	1009883a 	mov	r4,r2
   80698:	0082a480 	call	82a48 <__mulsi3>
   8069c:	1007883a 	mov	r3,r2
   806a0:	e0bffd17 	ldw	r2,-12(fp)
   806a4:	1885883a 	add	r2,r3,r2
   806a8:	1085883a 	add	r2,r2,r2
   806ac:	1085883a 	add	r2,r2,r2
   806b0:	8085883a 	add	r2,r16,r2
   806b4:	14400015 	stw	r17,0(r2)
};

void Format_InputImage() {
	int i, j;
	for (i = 0; i < IMAGE_DIM; i++)
		for (j = 0; j < IMAGE_DIM; j++)
   806b8:	e0bffd17 	ldw	r2,-12(fp)
   806bc:	10800044 	addi	r2,r2,1
   806c0:	e0bffd15 	stw	r2,-12(fp)
   806c4:	e0bffd17 	ldw	r2,-12(fp)
   806c8:	10800710 	cmplti	r2,r2,28
   806cc:	103fe11e 	bne	r2,zero,80654 <__alt_data_end+0xfffaaf24>
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.0627451, 0.0941176, 0.0627451, 0.0117647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.113725, 0.584314, 0.803922, 0.952941, 0.968627, 0.945098, 0.839216, 0.505882, 0.0745098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.027451, 0.513725, 0.937255, 0.996078, 0.992157, 0.988235, 0.980392, 0.992157, 0.996078, 0.996078, 0.85098, 0.207843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0117647, 0.541176, 0.784314, 0.992157, 0.992157, 0.882353, 0.435294, 0.176471, 0.101961, 0.188235, 0.482353, 0.92549, 0.996078, 0.94902, 0.215686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0784314, 0.972549, 0.996078, 0.964706, 0.466667, 0.0431373, 0, 0, 0, 0, 0, 0.152941, 0.811765, 0.996078, 0.635294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00392157, 0.623529, 0.847059, 0.364706, 0, 0, 0, 0, 0, 0, 0, 0, 0.321569, 0.992157, 0.909804, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0745098, 0.972549, 0.984314, 0.12549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.101961, 0.976471, 0.980392, 0.113725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.498039, 0.992157, 0.882353, 0.0352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.172549, 0.937255, 0.992157, 0.443137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.658824, 0.996078, 0.788235, 0.027451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.129412, 0.952941, 0.992157, 0.294118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0705882, 0.792157, 0.996078, 0.905882, 0.0509804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.701961, 0.996078, 0.94902, 0.266667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.207843, 0.513725, 0.733333, 0.992157, 0.992157, 0.670588, 0.321569, 0.160784, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00392157, 0.211765, 0.72549, 0.92549, 0.988235, 0.996078, 0.996078, 0.996078, 0.996078, 0.996078, 0.992157, 0.972549, 0.878431, 0.788235, 0.509804, 0.305882, 0.0627451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.580392, 0.976471, 0.996078, 0.992157, 0.992157, 0.996078, 0.992157, 0.756863, 0.572549, 0.678431, 0.85098, 0.968627, 0.992157, 0.996078, 0.996078, 0.992157, 0.792157, 0.0117647, 0, 0, 0, 0, 0, 0, 0, 0, 0.0666667, 0.745098, 0.992157, 0.992157, 0.823529, 0.862745, 0.992157, 0.992157, 0.705882, 0.0313725, 0, 0, 0.00784314, 0.121569, 0.270588, 0.517647, 0.705882, 0.94902, 0.72549, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0.67451, 0.996078, 0.952941, 0.658824, 0.870588, 0.992157, 0.968627, 0.529412, 0.0352941, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0.141176, 0.976471, 0.992157, 0.882353, 0.984314, 0.996078, 0.87451, 0.243137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.109804, 0.92549, 0.996078, 0.996078, 0.984314, 0.580392, 0.0705882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.227451, 0.623529, 0.694118, 0.34902, 0.00392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

void Format_InputImage() {
	int i, j;
	for (i = 0; i < IMAGE_DIM; i++)
   806d0:	e0bffc17 	ldw	r2,-16(fp)
   806d4:	10800044 	addi	r2,r2,1
   806d8:	e0bffc15 	stw	r2,-16(fp)
   806dc:	e0bffc17 	ldw	r2,-16(fp)
   806e0:	10800710 	cmplti	r2,r2,28
   806e4:	103fd91e 	bne	r2,zero,8064c <__alt_data_end+0xfffaaf1c>
		for (j = 0; j < IMAGE_DIM; j++)
			Input_Image[i][j] = Input_Image_raw[i*IMAGE_DIM + j];
}
   806e8:	0001883a 	nop
   806ec:	e6fffe04 	addi	sp,fp,-8
   806f0:	dfc00317 	ldw	ra,12(sp)
   806f4:	df000217 	ldw	fp,8(sp)
   806f8:	dc400117 	ldw	r17,4(sp)
   806fc:	dc000017 	ldw	r16,0(sp)
   80700:	dec00404 	addi	sp,sp,16
   80704:	f800283a 	ret

00080708 <CNN_MNIST_recognition>:
// FC Layer 2
void Fc2();
// Softmax and get the result
void Get_Answer();

int CNN_MNIST_recognition() {
   80708:	defffe04 	addi	sp,sp,-8
   8070c:	dfc00115 	stw	ra,4(sp)
   80710:	df000015 	stw	fp,0(sp)
   80714:	d839883a 	mov	fp,sp
	//LCD_Clear();
	Load_All();
   80718:	00807540 	call	80754 <Load_All>
	//*(pSEG) = 0xff00ffff + (9 << 20) + (6 << 16);  // 96%
	Conv1();
   8071c:	008078c0 	call	8078c <Conv1>
	MaxPool1();
   80720:	0080aa40 	call	80aa4 <MaxPool1>
	//*(pSEG) = 0xff00ffff + (9 << 20) + (7 << 16);  // 97%
	Conv2();
   80724:	0080cdc0 	call	80cdc <Conv2>
	MaxPool2();
   80728:	0080f900 	call	80f90 <MaxPool2>
	Flatten();
   8072c:	00811dc0 	call	811dc <Flatten>
	//*(pSEG) = 0xff00ffff + (9 << 20) + (8 << 16);  // 98%
	Fc1();
   80730:	00812fc0 	call	812fc <Fc1>
	//*(pSEG) = 0xff00ffff + (9 << 20) + (9 << 16);  // 99%
	Fc2();
   80734:	00814440 	call	81444 <Fc2>
	Get_Answer();
   80738:	00815880 	call	81588 <Get_Answer>
	return ans;
   8073c:	d086f417 	ldw	r2,7120(gp)
}
   80740:	e037883a 	mov	sp,fp
   80744:	dfc00117 	ldw	ra,4(sp)
   80748:	df000017 	ldw	fp,0(sp)
   8074c:	dec00204 	addi	sp,sp,8
   80750:	f800283a 	ret

00080754 <Load_All>:

void Load_All() {
   80754:	defffe04 	addi	sp,sp,-8
   80758:	dfc00115 	stw	ra,4(sp)
   8075c:	df000015 	stw	fp,0(sp)
   80760:	d839883a 	mov	fp,sp
	Format_Conv1_W();
   80764:	008026c0 	call	8026c <Format_Conv1_W>
	Format_Conv2_W();
   80768:	00803640 	call	80364 <Format_Conv2_W>
	Format_Fc1_W();
   8076c:	00804a00 	call	804a0 <Format_Fc1_W>
	Format_Fc2_W();
   80770:	00805500 	call	80550 <Format_Fc2_W>
	//Format_InputImage();
}
   80774:	0001883a 	nop
   80778:	e037883a 	mov	sp,fp
   8077c:	dfc00117 	ldw	ra,4(sp)
   80780:	df000017 	ldw	fp,0(sp)
   80784:	dec00204 	addi	sp,sp,8
   80788:	f800283a 	ret

0008078c <Conv1>:

void Conv1() {
   8078c:	defff504 	addi	sp,sp,-44
   80790:	dfc00a15 	stw	ra,40(sp)
   80794:	df000915 	stw	fp,36(sp)
   80798:	dc800815 	stw	r18,32(sp)
   8079c:	dc400715 	stw	r17,28(sp)
   807a0:	dc000615 	stw	r16,24(sp)
   807a4:	df000904 	addi	fp,sp,36
	int i, j, k;
	int i2, j2;
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM; i++)
   807a8:	e03ff715 	stw	zero,-36(fp)
   807ac:	00008706 	br	809cc <Conv1+0x240>
		for (j = 0; j < IMAGE_DIM; j++)
   807b0:	e03ff815 	stw	zero,-32(fp)
   807b4:	00007f06 	br	809b4 <Conv1+0x228>
			for (k = 0; k < CONV1_OUT_DIM; k++) {
   807b8:	e03ff915 	stw	zero,-28(fp)
   807bc:	00007706 	br	8099c <Conv1+0x210>
				tmp_ans = 0.0;
   807c0:	e03ffc15 	stw	zero,-16(fp)
				for (i2 = -CONV_RANGE; i2 <= CONV_RANGE; i2++)
   807c4:	00bfffc4 	movi	r2,-1
   807c8:	e0bffa15 	stw	r2,-24(fp)
   807cc:	00004806 	br	808f0 <Conv1+0x164>
					for (j2 = -CONV_RANGE; j2 <= CONV_RANGE; j2++)
   807d0:	00bfffc4 	movi	r2,-1
   807d4:	e0bffb15 	stw	r2,-20(fp)
   807d8:	00003f06 	br	808d8 <Conv1+0x14c>
						if (i + i2 >= 0 && j + j2 >= 0 && i + i2 < IMAGE_DIM && j + j2 < IMAGE_DIM)
   807dc:	e0fff717 	ldw	r3,-36(fp)
   807e0:	e0bffa17 	ldw	r2,-24(fp)
   807e4:	1885883a 	add	r2,r3,r2
   807e8:	10003816 	blt	r2,zero,808cc <Conv1+0x140>
   807ec:	e0fff817 	ldw	r3,-32(fp)
   807f0:	e0bffb17 	ldw	r2,-20(fp)
   807f4:	1885883a 	add	r2,r3,r2
   807f8:	10003416 	blt	r2,zero,808cc <Conv1+0x140>
   807fc:	e0fff717 	ldw	r3,-36(fp)
   80800:	e0bffa17 	ldw	r2,-24(fp)
   80804:	1885883a 	add	r2,r3,r2
   80808:	10800708 	cmpgei	r2,r2,28
   8080c:	10002f1e 	bne	r2,zero,808cc <Conv1+0x140>
   80810:	e0fff817 	ldw	r3,-32(fp)
   80814:	e0bffb17 	ldw	r2,-20(fp)
   80818:	1885883a 	add	r2,r3,r2
   8081c:	10800708 	cmpgei	r2,r2,28
   80820:	10002a1e 	bne	r2,zero,808cc <Conv1+0x140>
							tmp_ans += Conv1_W[CONV_MID + i2][CONV_MID + j2][0][k] * Input_Image[i + i2][j + j2];
   80824:	e0bffa17 	ldw	r2,-24(fp)
   80828:	11000044 	addi	r4,r2,1
   8082c:	e0bffb17 	ldw	r2,-20(fp)
   80830:	11400044 	addi	r5,r2,1
   80834:	00c002f4 	movhi	r3,11
   80838:	18c07e04 	addi	r3,r3,504
   8083c:	2005883a 	mov	r2,r4
   80840:	1085883a 	add	r2,r2,r2
   80844:	1105883a 	add	r2,r2,r4
   80848:	1145883a 	add	r2,r2,r5
   8084c:	100890fa 	slli	r4,r2,3
   80850:	e0bff917 	ldw	r2,-28(fp)
   80854:	2085883a 	add	r2,r4,r2
   80858:	1085883a 	add	r2,r2,r2
   8085c:	1085883a 	add	r2,r2,r2
   80860:	1885883a 	add	r2,r3,r2
   80864:	14800017 	ldw	r18,0(r2)
   80868:	e0fff717 	ldw	r3,-36(fp)
   8086c:	e0bffa17 	ldw	r2,-24(fp)
   80870:	1889883a 	add	r4,r3,r2
   80874:	e0fff817 	ldw	r3,-32(fp)
   80878:	e0bffb17 	ldw	r2,-20(fp)
   8087c:	18a3883a 	add	r17,r3,r2
   80880:	040002f4 	movhi	r16,11
   80884:	8407e004 	addi	r16,r16,8064
   80888:	01400704 	movi	r5,28
   8088c:	0082a480 	call	82a48 <__mulsi3>
   80890:	1445883a 	add	r2,r2,r17
   80894:	1085883a 	add	r2,r2,r2
   80898:	1085883a 	add	r2,r2,r2
   8089c:	8085883a 	add	r2,r16,r2
   808a0:	10c00017 	ldw	r3,0(r2)
   808a4:	180b883a 	mov	r5,r3
   808a8:	9009883a 	mov	r4,r18
   808ac:	00834340 	call	83434 <__mulsf3>
   808b0:	1007883a 	mov	r3,r2
   808b4:	1805883a 	mov	r2,r3
   808b8:	100b883a 	mov	r5,r2
   808bc:	e13ffc17 	ldw	r4,-16(fp)
   808c0:	0082a700 	call	82a70 <__addsf3>
   808c4:	1007883a 	mov	r3,r2
   808c8:	e0fffc15 	stw	r3,-16(fp)
	for (i = 0; i < IMAGE_DIM; i++)
		for (j = 0; j < IMAGE_DIM; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++) {
				tmp_ans = 0.0;
				for (i2 = -CONV_RANGE; i2 <= CONV_RANGE; i2++)
					for (j2 = -CONV_RANGE; j2 <= CONV_RANGE; j2++)
   808cc:	e0bffb17 	ldw	r2,-20(fp)
   808d0:	10800044 	addi	r2,r2,1
   808d4:	e0bffb15 	stw	r2,-20(fp)
   808d8:	e0bffb17 	ldw	r2,-20(fp)
   808dc:	10800090 	cmplti	r2,r2,2
   808e0:	103fbe1e 	bne	r2,zero,807dc <__alt_data_end+0xfffab0ac>
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM; i++)
		for (j = 0; j < IMAGE_DIM; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++) {
				tmp_ans = 0.0;
				for (i2 = -CONV_RANGE; i2 <= CONV_RANGE; i2++)
   808e4:	e0bffa17 	ldw	r2,-24(fp)
   808e8:	10800044 	addi	r2,r2,1
   808ec:	e0bffa15 	stw	r2,-24(fp)
   808f0:	e0bffa17 	ldw	r2,-24(fp)
   808f4:	10800090 	cmplti	r2,r2,2
   808f8:	103fb51e 	bne	r2,zero,807d0 <__alt_data_end+0xfffab0a0>
					for (j2 = -CONV_RANGE; j2 <= CONV_RANGE; j2++)
						if (i + i2 >= 0 && j + j2 >= 0 && i + i2 < IMAGE_DIM && j + j2 < IMAGE_DIM)
							tmp_ans += Conv1_W[CONV_MID + i2][CONV_MID + j2][0][k] * Input_Image[i + i2][j + j2];
				tmp_ans += Conv1_B[k];
   808fc:	00800274 	movhi	r2,9
   80900:	1090e504 	addi	r2,r2,17300
   80904:	e0fff917 	ldw	r3,-28(fp)
   80908:	18c7883a 	add	r3,r3,r3
   8090c:	18c7883a 	add	r3,r3,r3
   80910:	10c5883a 	add	r2,r2,r3
   80914:	10c00017 	ldw	r3,0(r2)
   80918:	180b883a 	mov	r5,r3
   8091c:	e13ffc17 	ldw	r4,-16(fp)
   80920:	0082a700 	call	82a70 <__addsf3>
   80924:	1007883a 	mov	r3,r2
   80928:	e0fffc15 	stw	r3,-16(fp)
				tmp_ans = RELU(tmp_ans);
   8092c:	000b883a 	mov	r5,zero
   80930:	e13ffc17 	ldw	r4,-16(fp)
   80934:	00833780 	call	83378 <__gesf2>
   80938:	0080020e 	bge	zero,r2,80944 <Conv1+0x1b8>
   8093c:	e0bffc17 	ldw	r2,-16(fp)
   80940:	00000106 	br	80948 <Conv1+0x1bc>
   80944:	0005883a 	mov	r2,zero
   80948:	e0bffc15 	stw	r2,-16(fp)
				Conv1_Image[i][j][k] = tmp_ans;
   8094c:	040002f4 	movhi	r16,11
   80950:	8424ee04 	addi	r16,r16,-27720
   80954:	e0bff717 	ldw	r2,-36(fp)
   80958:	01400704 	movi	r5,28
   8095c:	1009883a 	mov	r4,r2
   80960:	0082a480 	call	82a48 <__mulsi3>
   80964:	1007883a 	mov	r3,r2
   80968:	e0bff817 	ldw	r2,-32(fp)
   8096c:	1885883a 	add	r2,r3,r2
   80970:	100690fa 	slli	r3,r2,3
   80974:	e0bff917 	ldw	r2,-28(fp)
   80978:	1885883a 	add	r2,r3,r2
   8097c:	1085883a 	add	r2,r2,r2
   80980:	1085883a 	add	r2,r2,r2
   80984:	8085883a 	add	r2,r16,r2
   80988:	e0fffc17 	ldw	r3,-16(fp)
   8098c:	10c00015 	stw	r3,0(r2)
	int i, j, k;
	int i2, j2;
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM; i++)
		for (j = 0; j < IMAGE_DIM; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++) {
   80990:	e0bff917 	ldw	r2,-28(fp)
   80994:	10800044 	addi	r2,r2,1
   80998:	e0bff915 	stw	r2,-28(fp)
   8099c:	e0bff917 	ldw	r2,-28(fp)
   809a0:	10800210 	cmplti	r2,r2,8
   809a4:	103f861e 	bne	r2,zero,807c0 <__alt_data_end+0xfffab090>
void Conv1() {
	int i, j, k;
	int i2, j2;
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM; i++)
		for (j = 0; j < IMAGE_DIM; j++)
   809a8:	e0bff817 	ldw	r2,-32(fp)
   809ac:	10800044 	addi	r2,r2,1
   809b0:	e0bff815 	stw	r2,-32(fp)
   809b4:	e0bff817 	ldw	r2,-32(fp)
   809b8:	10800710 	cmplti	r2,r2,28
   809bc:	103f7e1e 	bne	r2,zero,807b8 <__alt_data_end+0xfffab088>

void Conv1() {
	int i, j, k;
	int i2, j2;
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM; i++)
   809c0:	e0bff717 	ldw	r2,-36(fp)
   809c4:	10800044 	addi	r2,r2,1
   809c8:	e0bff715 	stw	r2,-36(fp)
   809cc:	e0bff717 	ldw	r2,-36(fp)
   809d0:	10800710 	cmplti	r2,r2,28
   809d4:	103f761e 	bne	r2,zero,807b0 <__alt_data_end+0xfffab080>
							tmp_ans += Conv1_W[CONV_MID + i2][CONV_MID + j2][0][k] * Input_Image[i + i2][j + j2];
				tmp_ans += Conv1_B[k];
				tmp_ans = RELU(tmp_ans);
				Conv1_Image[i][j][k] = tmp_ans;
			}
}
   809d8:	0001883a 	nop
   809dc:	e6fffd04 	addi	sp,fp,-12
   809e0:	dfc00417 	ldw	ra,16(sp)
   809e4:	df000317 	ldw	fp,12(sp)
   809e8:	dc800217 	ldw	r18,8(sp)
   809ec:	dc400117 	ldw	r17,4(sp)
   809f0:	dc000017 	ldw	r16,0(sp)
   809f4:	dec00504 	addi	sp,sp,20
   809f8:	f800283a 	ret

000809fc <max>:

float max(float x1, float x2, float x3, float x4) {
   809fc:	defff904 	addi	sp,sp,-28
   80a00:	dfc00615 	stw	ra,24(sp)
   80a04:	df000515 	stw	fp,20(sp)
   80a08:	df000504 	addi	fp,sp,20
   80a0c:	e13ffc15 	stw	r4,-16(fp)
   80a10:	e17ffd15 	stw	r5,-12(fp)
   80a14:	e1bffe15 	stw	r6,-8(fp)
   80a18:	e1ffff15 	stw	r7,-4(fp)
	float ans = x1;
   80a1c:	e0bffc17 	ldw	r2,-16(fp)
   80a20:	e0bffb15 	stw	r2,-20(fp)
	ans = (x2 > ans) ? x2 : ans;
   80a24:	e17ffb17 	ldw	r5,-20(fp)
   80a28:	e13ffd17 	ldw	r4,-12(fp)
   80a2c:	00833780 	call	83378 <__gesf2>
   80a30:	0080020e 	bge	zero,r2,80a3c <max+0x40>
   80a34:	e0bffd17 	ldw	r2,-12(fp)
   80a38:	00000106 	br	80a40 <max+0x44>
   80a3c:	e0bffb17 	ldw	r2,-20(fp)
   80a40:	e0bffb15 	stw	r2,-20(fp)
	ans = (x3 > ans) ? x3 : ans;
   80a44:	e17ffb17 	ldw	r5,-20(fp)
   80a48:	e13ffe17 	ldw	r4,-8(fp)
   80a4c:	00833780 	call	83378 <__gesf2>
   80a50:	0080020e 	bge	zero,r2,80a5c <max+0x60>
   80a54:	e0bffe17 	ldw	r2,-8(fp)
   80a58:	00000106 	br	80a60 <max+0x64>
   80a5c:	e0bffb17 	ldw	r2,-20(fp)
   80a60:	e0bffb15 	stw	r2,-20(fp)
	ans = (x4 > ans) ? x4 : ans;
   80a64:	e17ffb17 	ldw	r5,-20(fp)
   80a68:	e13fff17 	ldw	r4,-4(fp)
   80a6c:	00833780 	call	83378 <__gesf2>
   80a70:	0080020e 	bge	zero,r2,80a7c <max+0x80>
   80a74:	e0bfff17 	ldw	r2,-4(fp)
   80a78:	00000106 	br	80a80 <max+0x84>
   80a7c:	e0bffb17 	ldw	r2,-20(fp)
   80a80:	e0bffb15 	stw	r2,-20(fp)
	return ans;
   80a84:	e0bffb17 	ldw	r2,-20(fp)
   80a88:	1007883a 	mov	r3,r2
}
   80a8c:	1805883a 	mov	r2,r3
   80a90:	e037883a 	mov	sp,fp
   80a94:	dfc00117 	ldw	ra,4(sp)
   80a98:	df000017 	ldw	fp,0(sp)
   80a9c:	dec00204 	addi	sp,sp,8
   80aa0:	f800283a 	ret

00080aa4 <MaxPool1>:

void MaxPool1() {
   80aa4:	defff604 	addi	sp,sp,-40
   80aa8:	dfc00915 	stw	ra,36(sp)
   80aac:	df000815 	stw	fp,32(sp)
   80ab0:	dd000715 	stw	r20,28(sp)
   80ab4:	dcc00615 	stw	r19,24(sp)
   80ab8:	dc800515 	stw	r18,20(sp)
   80abc:	dc400415 	stw	r17,16(sp)
   80ac0:	dc000315 	stw	r16,12(sp)
   80ac4:	df000804 	addi	fp,sp,32
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 2; i++)
   80ac8:	e03ff815 	stw	zero,-32(fp)
   80acc:	00007506 	br	80ca4 <MaxPool1+0x200>
		for (j = 0; j < IMAGE_DIM / 2; j++)
   80ad0:	e03ff915 	stw	zero,-28(fp)
   80ad4:	00006d06 	br	80c8c <MaxPool1+0x1e8>
			for (k = 0; k < CONV1_OUT_DIM; k++)
   80ad8:	e03ffa15 	stw	zero,-24(fp)
   80adc:	00006506 	br	80c74 <MaxPool1+0x1d0>
				Pool1_Image[i][j][k] = max(Conv1_Image[i * 2][j * 2][k],
   80ae0:	e0bff817 	ldw	r2,-32(fp)
   80ae4:	1085883a 	add	r2,r2,r2
   80ae8:	1007883a 	mov	r3,r2
   80aec:	e0bff917 	ldw	r2,-28(fp)
   80af0:	1085883a 	add	r2,r2,r2
   80af4:	1023883a 	mov	r17,r2
   80af8:	040002f4 	movhi	r16,11
   80afc:	8424ee04 	addi	r16,r16,-27720
   80b00:	01400704 	movi	r5,28
   80b04:	1809883a 	mov	r4,r3
   80b08:	0082a480 	call	82a48 <__mulsi3>
   80b0c:	1445883a 	add	r2,r2,r17
   80b10:	100690fa 	slli	r3,r2,3
   80b14:	e0bffa17 	ldw	r2,-24(fp)
   80b18:	1885883a 	add	r2,r3,r2
   80b1c:	1085883a 	add	r2,r2,r2
   80b20:	1085883a 	add	r2,r2,r2
   80b24:	8085883a 	add	r2,r16,r2
   80b28:	14800017 	ldw	r18,0(r2)
					Conv1_Image[i * 2 + 1][j * 2][k],
   80b2c:	e0bff817 	ldw	r2,-32(fp)
   80b30:	1085883a 	add	r2,r2,r2
   80b34:	10c00044 	addi	r3,r2,1
   80b38:	e0bff917 	ldw	r2,-28(fp)
   80b3c:	1085883a 	add	r2,r2,r2
   80b40:	1023883a 	mov	r17,r2
void MaxPool1() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
				Pool1_Image[i][j][k] = max(Conv1_Image[i * 2][j * 2][k],
   80b44:	040002f4 	movhi	r16,11
   80b48:	8424ee04 	addi	r16,r16,-27720
   80b4c:	01400704 	movi	r5,28
   80b50:	1809883a 	mov	r4,r3
   80b54:	0082a480 	call	82a48 <__mulsi3>
   80b58:	1445883a 	add	r2,r2,r17
   80b5c:	100690fa 	slli	r3,r2,3
   80b60:	e0bffa17 	ldw	r2,-24(fp)
   80b64:	1885883a 	add	r2,r3,r2
   80b68:	1085883a 	add	r2,r2,r2
   80b6c:	1085883a 	add	r2,r2,r2
   80b70:	8085883a 	add	r2,r16,r2
   80b74:	14c00017 	ldw	r19,0(r2)
					Conv1_Image[i * 2 + 1][j * 2][k],
					Conv1_Image[i * 2][j * 2 + 1][k],
   80b78:	e0bff817 	ldw	r2,-32(fp)
   80b7c:	1085883a 	add	r2,r2,r2
   80b80:	1007883a 	mov	r3,r2
   80b84:	e0bff917 	ldw	r2,-28(fp)
   80b88:	1085883a 	add	r2,r2,r2
   80b8c:	14400044 	addi	r17,r2,1
void MaxPool1() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
				Pool1_Image[i][j][k] = max(Conv1_Image[i * 2][j * 2][k],
   80b90:	040002f4 	movhi	r16,11
   80b94:	8424ee04 	addi	r16,r16,-27720
   80b98:	01400704 	movi	r5,28
   80b9c:	1809883a 	mov	r4,r3
   80ba0:	0082a480 	call	82a48 <__mulsi3>
   80ba4:	1445883a 	add	r2,r2,r17
   80ba8:	100690fa 	slli	r3,r2,3
   80bac:	e0bffa17 	ldw	r2,-24(fp)
   80bb0:	1885883a 	add	r2,r3,r2
   80bb4:	1085883a 	add	r2,r2,r2
   80bb8:	1085883a 	add	r2,r2,r2
   80bbc:	8085883a 	add	r2,r16,r2
   80bc0:	15000017 	ldw	r20,0(r2)
					Conv1_Image[i * 2 + 1][j * 2][k],
					Conv1_Image[i * 2][j * 2 + 1][k],
					Conv1_Image[i * 2 + 1][j * 2 + 1][k]);
   80bc4:	e0bff817 	ldw	r2,-32(fp)
   80bc8:	1085883a 	add	r2,r2,r2
   80bcc:	10c00044 	addi	r3,r2,1
   80bd0:	e0bff917 	ldw	r2,-28(fp)
   80bd4:	1085883a 	add	r2,r2,r2
   80bd8:	14400044 	addi	r17,r2,1
void MaxPool1() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
				Pool1_Image[i][j][k] = max(Conv1_Image[i * 2][j * 2][k],
   80bdc:	040002f4 	movhi	r16,11
   80be0:	8424ee04 	addi	r16,r16,-27720
   80be4:	01400704 	movi	r5,28
   80be8:	1809883a 	mov	r4,r3
   80bec:	0082a480 	call	82a48 <__mulsi3>
   80bf0:	1445883a 	add	r2,r2,r17
   80bf4:	100690fa 	slli	r3,r2,3
   80bf8:	e0bffa17 	ldw	r2,-24(fp)
   80bfc:	1885883a 	add	r2,r3,r2
   80c00:	1085883a 	add	r2,r2,r2
   80c04:	1085883a 	add	r2,r2,r2
   80c08:	8085883a 	add	r2,r16,r2
   80c0c:	10c00017 	ldw	r3,0(r2)
   80c10:	180f883a 	mov	r7,r3
   80c14:	a00d883a 	mov	r6,r20
   80c18:	980b883a 	mov	r5,r19
   80c1c:	9009883a 	mov	r4,r18
   80c20:	00809fc0 	call	809fc <max>
   80c24:	1023883a 	mov	r17,r2
   80c28:	040002b4 	movhi	r16,10
   80c2c:	841ece04 	addi	r16,r16,31544
   80c30:	e0bff817 	ldw	r2,-32(fp)
   80c34:	01400384 	movi	r5,14
   80c38:	1009883a 	mov	r4,r2
   80c3c:	0082a480 	call	82a48 <__mulsi3>
   80c40:	1007883a 	mov	r3,r2
   80c44:	e0bff917 	ldw	r2,-28(fp)
   80c48:	1885883a 	add	r2,r3,r2
   80c4c:	100690fa 	slli	r3,r2,3
   80c50:	e0bffa17 	ldw	r2,-24(fp)
   80c54:	1885883a 	add	r2,r3,r2
   80c58:	1085883a 	add	r2,r2,r2
   80c5c:	1085883a 	add	r2,r2,r2
   80c60:	8085883a 	add	r2,r16,r2
   80c64:	14400015 	stw	r17,0(r2)

void MaxPool1() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
			for (k = 0; k < CONV1_OUT_DIM; k++)
   80c68:	e0bffa17 	ldw	r2,-24(fp)
   80c6c:	10800044 	addi	r2,r2,1
   80c70:	e0bffa15 	stw	r2,-24(fp)
   80c74:	e0bffa17 	ldw	r2,-24(fp)
   80c78:	10800210 	cmplti	r2,r2,8
   80c7c:	103f981e 	bne	r2,zero,80ae0 <__alt_data_end+0xfffab3b0>
}

void MaxPool1() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
   80c80:	e0bff917 	ldw	r2,-28(fp)
   80c84:	10800044 	addi	r2,r2,1
   80c88:	e0bff915 	stw	r2,-28(fp)
   80c8c:	e0bff917 	ldw	r2,-28(fp)
   80c90:	10800390 	cmplti	r2,r2,14
   80c94:	103f901e 	bne	r2,zero,80ad8 <__alt_data_end+0xfffab3a8>
	return ans;
}

void MaxPool1() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 2; i++)
   80c98:	e0bff817 	ldw	r2,-32(fp)
   80c9c:	10800044 	addi	r2,r2,1
   80ca0:	e0bff815 	stw	r2,-32(fp)
   80ca4:	e0bff817 	ldw	r2,-32(fp)
   80ca8:	10800390 	cmplti	r2,r2,14
   80cac:	103f881e 	bne	r2,zero,80ad0 <__alt_data_end+0xfffab3a0>
			for (k = 0; k < CONV1_OUT_DIM; k++)
				Pool1_Image[i][j][k] = max(Conv1_Image[i * 2][j * 2][k],
					Conv1_Image[i * 2 + 1][j * 2][k],
					Conv1_Image[i * 2][j * 2 + 1][k],
					Conv1_Image[i * 2 + 1][j * 2 + 1][k]);
}
   80cb0:	0001883a 	nop
   80cb4:	e6fffb04 	addi	sp,fp,-20
   80cb8:	dfc00617 	ldw	ra,24(sp)
   80cbc:	df000517 	ldw	fp,20(sp)
   80cc0:	dd000417 	ldw	r20,16(sp)
   80cc4:	dcc00317 	ldw	r19,12(sp)
   80cc8:	dc800217 	ldw	r18,8(sp)
   80ccc:	dc400117 	ldw	r17,4(sp)
   80cd0:	dc000017 	ldw	r16,0(sp)
   80cd4:	dec00704 	addi	sp,sp,28
   80cd8:	f800283a 	ret

00080cdc <Conv2>:

void Conv2() {
   80cdc:	defff404 	addi	sp,sp,-48
   80ce0:	dfc00b15 	stw	ra,44(sp)
   80ce4:	df000a15 	stw	fp,40(sp)
   80ce8:	dc800915 	stw	r18,36(sp)
   80cec:	dc400815 	stw	r17,32(sp)
   80cf0:	dc000715 	stw	r16,28(sp)
   80cf4:	df000a04 	addi	fp,sp,40
	int i, j, k;
	int i2, j2, k2;
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM / 2; i++)
   80cf8:	e03ff615 	stw	zero,-40(fp)
   80cfc:	00009806 	br	80f60 <Conv2+0x284>
		for (j = 0; j < IMAGE_DIM / 2; j++)
   80d00:	e03ff715 	stw	zero,-36(fp)
   80d04:	00009006 	br	80f48 <Conv2+0x26c>
			for (k = 0; k < CONV2_OUT_DIM; k++) {
   80d08:	e03ff815 	stw	zero,-32(fp)
   80d0c:	00008806 	br	80f30 <Conv2+0x254>
				tmp_ans = 0.0;
   80d10:	e03ffc15 	stw	zero,-16(fp)
				for (i2 = -CONV_RANGE; i2 <= CONV_RANGE; i2++)
   80d14:	00bfffc4 	movi	r2,-1
   80d18:	e0bff915 	stw	r2,-28(fp)
   80d1c:	00005806 	br	80e80 <Conv2+0x1a4>
					for (j2 = -CONV_RANGE; j2 <= CONV_RANGE; j2++)
   80d20:	00bfffc4 	movi	r2,-1
   80d24:	e0bffa15 	stw	r2,-24(fp)
   80d28:	00004f06 	br	80e68 <Conv2+0x18c>
						for (k2 = -CONV_RANGE; k2 < CONV1_OUT_DIM; k2++)
   80d2c:	00bfffc4 	movi	r2,-1
   80d30:	e0bffb15 	stw	r2,-20(fp)
   80d34:	00004606 	br	80e50 <Conv2+0x174>
							if (i + i2 >= 0 && j + j2 >= 0 && i + i2 < IMAGE_DIM / 2 && j + j2 < IMAGE_DIM / 2)
   80d38:	e0fff617 	ldw	r3,-40(fp)
   80d3c:	e0bff917 	ldw	r2,-28(fp)
   80d40:	1885883a 	add	r2,r3,r2
   80d44:	10003f16 	blt	r2,zero,80e44 <Conv2+0x168>
   80d48:	e0fff717 	ldw	r3,-36(fp)
   80d4c:	e0bffa17 	ldw	r2,-24(fp)
   80d50:	1885883a 	add	r2,r3,r2
   80d54:	10003b16 	blt	r2,zero,80e44 <Conv2+0x168>
   80d58:	e0fff617 	ldw	r3,-40(fp)
   80d5c:	e0bff917 	ldw	r2,-28(fp)
   80d60:	1885883a 	add	r2,r3,r2
   80d64:	10800388 	cmpgei	r2,r2,14
   80d68:	1000361e 	bne	r2,zero,80e44 <Conv2+0x168>
   80d6c:	e0fff717 	ldw	r3,-36(fp)
   80d70:	e0bffa17 	ldw	r2,-24(fp)
   80d74:	1885883a 	add	r2,r3,r2
   80d78:	10800388 	cmpgei	r2,r2,14
   80d7c:	1000311e 	bne	r2,zero,80e44 <Conv2+0x168>
								tmp_ans += Conv2_W[CONV_MID + i2][CONV_MID + j2][k2][k] * Pool1_Image[i + i2][j + j2][k2];
   80d80:	e0bff917 	ldw	r2,-28(fp)
   80d84:	11000044 	addi	r4,r2,1
   80d88:	e0bffa17 	ldw	r2,-24(fp)
   80d8c:	11400044 	addi	r5,r2,1
   80d90:	00c002f4 	movhi	r3,11
   80d94:	18caf004 	addi	r3,r3,11200
   80d98:	2005883a 	mov	r2,r4
   80d9c:	1085883a 	add	r2,r2,r2
   80da0:	1105883a 	add	r2,r2,r4
   80da4:	1145883a 	add	r2,r2,r5
   80da8:	100890fa 	slli	r4,r2,3
   80dac:	e0bffb17 	ldw	r2,-20(fp)
   80db0:	2085883a 	add	r2,r4,r2
   80db4:	1085883a 	add	r2,r2,r2
   80db8:	1089883a 	add	r4,r2,r2
   80dbc:	e0bff817 	ldw	r2,-32(fp)
   80dc0:	2085883a 	add	r2,r4,r2
   80dc4:	1085883a 	add	r2,r2,r2
   80dc8:	1085883a 	add	r2,r2,r2
   80dcc:	1885883a 	add	r2,r3,r2
   80dd0:	14800017 	ldw	r18,0(r2)
   80dd4:	e0fff617 	ldw	r3,-40(fp)
   80dd8:	e0bff917 	ldw	r2,-28(fp)
   80ddc:	1889883a 	add	r4,r3,r2
   80de0:	e0fff717 	ldw	r3,-36(fp)
   80de4:	e0bffa17 	ldw	r2,-24(fp)
   80de8:	18a3883a 	add	r17,r3,r2
   80dec:	040002b4 	movhi	r16,10
   80df0:	841ece04 	addi	r16,r16,31544
   80df4:	01400384 	movi	r5,14
   80df8:	0082a480 	call	82a48 <__mulsi3>
   80dfc:	1445883a 	add	r2,r2,r17
   80e00:	100690fa 	slli	r3,r2,3
   80e04:	e0bffb17 	ldw	r2,-20(fp)
   80e08:	1885883a 	add	r2,r3,r2
   80e0c:	1085883a 	add	r2,r2,r2
   80e10:	1085883a 	add	r2,r2,r2
   80e14:	8085883a 	add	r2,r16,r2
   80e18:	10c00017 	ldw	r3,0(r2)
   80e1c:	180b883a 	mov	r5,r3
   80e20:	9009883a 	mov	r4,r18
   80e24:	00834340 	call	83434 <__mulsf3>
   80e28:	1007883a 	mov	r3,r2
   80e2c:	1805883a 	mov	r2,r3
   80e30:	100b883a 	mov	r5,r2
   80e34:	e13ffc17 	ldw	r4,-16(fp)
   80e38:	0082a700 	call	82a70 <__addsf3>
   80e3c:	1007883a 	mov	r3,r2
   80e40:	e0fffc15 	stw	r3,-16(fp)
		for (j = 0; j < IMAGE_DIM / 2; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++) {
				tmp_ans = 0.0;
				for (i2 = -CONV_RANGE; i2 <= CONV_RANGE; i2++)
					for (j2 = -CONV_RANGE; j2 <= CONV_RANGE; j2++)
						for (k2 = -CONV_RANGE; k2 < CONV1_OUT_DIM; k2++)
   80e44:	e0bffb17 	ldw	r2,-20(fp)
   80e48:	10800044 	addi	r2,r2,1
   80e4c:	e0bffb15 	stw	r2,-20(fp)
   80e50:	e0bffb17 	ldw	r2,-20(fp)
   80e54:	10800210 	cmplti	r2,r2,8
   80e58:	103fb71e 	bne	r2,zero,80d38 <__alt_data_end+0xfffab608>
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++) {
				tmp_ans = 0.0;
				for (i2 = -CONV_RANGE; i2 <= CONV_RANGE; i2++)
					for (j2 = -CONV_RANGE; j2 <= CONV_RANGE; j2++)
   80e5c:	e0bffa17 	ldw	r2,-24(fp)
   80e60:	10800044 	addi	r2,r2,1
   80e64:	e0bffa15 	stw	r2,-24(fp)
   80e68:	e0bffa17 	ldw	r2,-24(fp)
   80e6c:	10800090 	cmplti	r2,r2,2
   80e70:	103fae1e 	bne	r2,zero,80d2c <__alt_data_end+0xfffab5fc>
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++) {
				tmp_ans = 0.0;
				for (i2 = -CONV_RANGE; i2 <= CONV_RANGE; i2++)
   80e74:	e0bff917 	ldw	r2,-28(fp)
   80e78:	10800044 	addi	r2,r2,1
   80e7c:	e0bff915 	stw	r2,-28(fp)
   80e80:	e0bff917 	ldw	r2,-28(fp)
   80e84:	10800090 	cmplti	r2,r2,2
   80e88:	103fa51e 	bne	r2,zero,80d20 <__alt_data_end+0xfffab5f0>
					for (j2 = -CONV_RANGE; j2 <= CONV_RANGE; j2++)
						for (k2 = -CONV_RANGE; k2 < CONV1_OUT_DIM; k2++)
							if (i + i2 >= 0 && j + j2 >= 0 && i + i2 < IMAGE_DIM / 2 && j + j2 < IMAGE_DIM / 2)
								tmp_ans += Conv2_W[CONV_MID + i2][CONV_MID + j2][k2][k] * Pool1_Image[i + i2][j + j2][k2];
				tmp_ans += Conv2_B[k];
   80e8c:	00800274 	movhi	r2,9
   80e90:	1090ed04 	addi	r2,r2,17332
   80e94:	e0fff817 	ldw	r3,-32(fp)
   80e98:	18c7883a 	add	r3,r3,r3
   80e9c:	18c7883a 	add	r3,r3,r3
   80ea0:	10c5883a 	add	r2,r2,r3
   80ea4:	10c00017 	ldw	r3,0(r2)
   80ea8:	180b883a 	mov	r5,r3
   80eac:	e13ffc17 	ldw	r4,-16(fp)
   80eb0:	0082a700 	call	82a70 <__addsf3>
   80eb4:	1007883a 	mov	r3,r2
   80eb8:	e0fffc15 	stw	r3,-16(fp)
				tmp_ans = RELU(tmp_ans);
   80ebc:	000b883a 	mov	r5,zero
   80ec0:	e13ffc17 	ldw	r4,-16(fp)
   80ec4:	00833780 	call	83378 <__gesf2>
   80ec8:	0080020e 	bge	zero,r2,80ed4 <Conv2+0x1f8>
   80ecc:	e0bffc17 	ldw	r2,-16(fp)
   80ed0:	00000106 	br	80ed8 <Conv2+0x1fc>
   80ed4:	0005883a 	mov	r2,zero
   80ed8:	e0bffc15 	stw	r2,-16(fp)
				Conv2_Image[i][j][k] = tmp_ans;
   80edc:	04000334 	movhi	r16,12
   80ee0:	8426b404 	addi	r16,r16,-25904
   80ee4:	e0bff617 	ldw	r2,-40(fp)
   80ee8:	01400384 	movi	r5,14
   80eec:	1009883a 	mov	r4,r2
   80ef0:	0082a480 	call	82a48 <__mulsi3>
   80ef4:	1007883a 	mov	r3,r2
   80ef8:	e0bff717 	ldw	r2,-36(fp)
   80efc:	1885883a 	add	r2,r3,r2
   80f00:	1085883a 	add	r2,r2,r2
   80f04:	1087883a 	add	r3,r2,r2
   80f08:	e0bff817 	ldw	r2,-32(fp)
   80f0c:	1885883a 	add	r2,r3,r2
   80f10:	1085883a 	add	r2,r2,r2
   80f14:	1085883a 	add	r2,r2,r2
   80f18:	8085883a 	add	r2,r16,r2
   80f1c:	e0fffc17 	ldw	r3,-16(fp)
   80f20:	10c00015 	stw	r3,0(r2)
	int i, j, k;
	int i2, j2, k2;
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++) {
   80f24:	e0bff817 	ldw	r2,-32(fp)
   80f28:	10800044 	addi	r2,r2,1
   80f2c:	e0bff815 	stw	r2,-32(fp)
   80f30:	e0bff817 	ldw	r2,-32(fp)
   80f34:	10800110 	cmplti	r2,r2,4
   80f38:	103f751e 	bne	r2,zero,80d10 <__alt_data_end+0xfffab5e0>
void Conv2() {
	int i, j, k;
	int i2, j2, k2;
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM / 2; i++)
		for (j = 0; j < IMAGE_DIM / 2; j++)
   80f3c:	e0bff717 	ldw	r2,-36(fp)
   80f40:	10800044 	addi	r2,r2,1
   80f44:	e0bff715 	stw	r2,-36(fp)
   80f48:	e0bff717 	ldw	r2,-36(fp)
   80f4c:	10800390 	cmplti	r2,r2,14
   80f50:	103f6d1e 	bne	r2,zero,80d08 <__alt_data_end+0xfffab5d8>

void Conv2() {
	int i, j, k;
	int i2, j2, k2;
	float tmp_ans;
	for (i = 0; i < IMAGE_DIM / 2; i++)
   80f54:	e0bff617 	ldw	r2,-40(fp)
   80f58:	10800044 	addi	r2,r2,1
   80f5c:	e0bff615 	stw	r2,-40(fp)
   80f60:	e0bff617 	ldw	r2,-40(fp)
   80f64:	10800390 	cmplti	r2,r2,14
   80f68:	103f651e 	bne	r2,zero,80d00 <__alt_data_end+0xfffab5d0>
								tmp_ans += Conv2_W[CONV_MID + i2][CONV_MID + j2][k2][k] * Pool1_Image[i + i2][j + j2][k2];
				tmp_ans += Conv2_B[k];
				tmp_ans = RELU(tmp_ans);
				Conv2_Image[i][j][k] = tmp_ans;
			}
}
   80f6c:	0001883a 	nop
   80f70:	e6fffd04 	addi	sp,fp,-12
   80f74:	dfc00417 	ldw	ra,16(sp)
   80f78:	df000317 	ldw	fp,12(sp)
   80f7c:	dc800217 	ldw	r18,8(sp)
   80f80:	dc400117 	ldw	r17,4(sp)
   80f84:	dc000017 	ldw	r16,0(sp)
   80f88:	dec00504 	addi	sp,sp,20
   80f8c:	f800283a 	ret

00080f90 <MaxPool2>:

void MaxPool2() {
   80f90:	defff604 	addi	sp,sp,-40
   80f94:	dfc00915 	stw	ra,36(sp)
   80f98:	df000815 	stw	fp,32(sp)
   80f9c:	dd000715 	stw	r20,28(sp)
   80fa0:	dcc00615 	stw	r19,24(sp)
   80fa4:	dc800515 	stw	r18,20(sp)
   80fa8:	dc400415 	stw	r17,16(sp)
   80fac:	dc000315 	stw	r16,12(sp)
   80fb0:	df000804 	addi	fp,sp,32
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
   80fb4:	e03ff815 	stw	zero,-32(fp)
   80fb8:	00007a06 	br	811a4 <MaxPool2+0x214>
		for (j = 0; j < IMAGE_DIM / 4; j++)
   80fbc:	e03ff915 	stw	zero,-28(fp)
   80fc0:	00007206 	br	8118c <MaxPool2+0x1fc>
			for (k = 0; k < CONV2_OUT_DIM; k++)
   80fc4:	e03ffa15 	stw	zero,-24(fp)
   80fc8:	00006a06 	br	81174 <MaxPool2+0x1e4>
				Pool2_Image[i][j][k] = max(Conv2_Image[i * 2][j * 2][k],
   80fcc:	e0bff817 	ldw	r2,-32(fp)
   80fd0:	1085883a 	add	r2,r2,r2
   80fd4:	1007883a 	mov	r3,r2
   80fd8:	e0bff917 	ldw	r2,-28(fp)
   80fdc:	1085883a 	add	r2,r2,r2
   80fe0:	1023883a 	mov	r17,r2
   80fe4:	04000334 	movhi	r16,12
   80fe8:	8426b404 	addi	r16,r16,-25904
   80fec:	01400384 	movi	r5,14
   80ff0:	1809883a 	mov	r4,r3
   80ff4:	0082a480 	call	82a48 <__mulsi3>
   80ff8:	1445883a 	add	r2,r2,r17
   80ffc:	1085883a 	add	r2,r2,r2
   81000:	1087883a 	add	r3,r2,r2
   81004:	e0bffa17 	ldw	r2,-24(fp)
   81008:	1885883a 	add	r2,r3,r2
   8100c:	1085883a 	add	r2,r2,r2
   81010:	1085883a 	add	r2,r2,r2
   81014:	8085883a 	add	r2,r16,r2
   81018:	14800017 	ldw	r18,0(r2)
					Conv2_Image[i * 2 + 1][j * 2][k],
   8101c:	e0bff817 	ldw	r2,-32(fp)
   81020:	1085883a 	add	r2,r2,r2
   81024:	10c00044 	addi	r3,r2,1
   81028:	e0bff917 	ldw	r2,-28(fp)
   8102c:	1085883a 	add	r2,r2,r2
   81030:	1023883a 	mov	r17,r2
void MaxPool2() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
		for (j = 0; j < IMAGE_DIM / 4; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++)
				Pool2_Image[i][j][k] = max(Conv2_Image[i * 2][j * 2][k],
   81034:	04000334 	movhi	r16,12
   81038:	8426b404 	addi	r16,r16,-25904
   8103c:	01400384 	movi	r5,14
   81040:	1809883a 	mov	r4,r3
   81044:	0082a480 	call	82a48 <__mulsi3>
   81048:	1445883a 	add	r2,r2,r17
   8104c:	1085883a 	add	r2,r2,r2
   81050:	1087883a 	add	r3,r2,r2
   81054:	e0bffa17 	ldw	r2,-24(fp)
   81058:	1885883a 	add	r2,r3,r2
   8105c:	1085883a 	add	r2,r2,r2
   81060:	1085883a 	add	r2,r2,r2
   81064:	8085883a 	add	r2,r16,r2
   81068:	14c00017 	ldw	r19,0(r2)
					Conv2_Image[i * 2 + 1][j * 2][k],
					Conv2_Image[i * 2][j * 2 + 1][k],
   8106c:	e0bff817 	ldw	r2,-32(fp)
   81070:	1085883a 	add	r2,r2,r2
   81074:	1007883a 	mov	r3,r2
   81078:	e0bff917 	ldw	r2,-28(fp)
   8107c:	1085883a 	add	r2,r2,r2
   81080:	14400044 	addi	r17,r2,1
void MaxPool2() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
		for (j = 0; j < IMAGE_DIM / 4; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++)
				Pool2_Image[i][j][k] = max(Conv2_Image[i * 2][j * 2][k],
   81084:	04000334 	movhi	r16,12
   81088:	8426b404 	addi	r16,r16,-25904
   8108c:	01400384 	movi	r5,14
   81090:	1809883a 	mov	r4,r3
   81094:	0082a480 	call	82a48 <__mulsi3>
   81098:	1445883a 	add	r2,r2,r17
   8109c:	1085883a 	add	r2,r2,r2
   810a0:	1087883a 	add	r3,r2,r2
   810a4:	e0bffa17 	ldw	r2,-24(fp)
   810a8:	1885883a 	add	r2,r3,r2
   810ac:	1085883a 	add	r2,r2,r2
   810b0:	1085883a 	add	r2,r2,r2
   810b4:	8085883a 	add	r2,r16,r2
   810b8:	15000017 	ldw	r20,0(r2)
					Conv2_Image[i * 2 + 1][j * 2][k],
					Conv2_Image[i * 2][j * 2 + 1][k],
					Conv2_Image[i * 2 + 1][j * 2 + 1][k]);
   810bc:	e0bff817 	ldw	r2,-32(fp)
   810c0:	1085883a 	add	r2,r2,r2
   810c4:	10c00044 	addi	r3,r2,1
   810c8:	e0bff917 	ldw	r2,-28(fp)
   810cc:	1085883a 	add	r2,r2,r2
   810d0:	14400044 	addi	r17,r2,1
void MaxPool2() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
		for (j = 0; j < IMAGE_DIM / 4; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++)
				Pool2_Image[i][j][k] = max(Conv2_Image[i * 2][j * 2][k],
   810d4:	04000334 	movhi	r16,12
   810d8:	8426b404 	addi	r16,r16,-25904
   810dc:	01400384 	movi	r5,14
   810e0:	1809883a 	mov	r4,r3
   810e4:	0082a480 	call	82a48 <__mulsi3>
   810e8:	1445883a 	add	r2,r2,r17
   810ec:	1085883a 	add	r2,r2,r2
   810f0:	1087883a 	add	r3,r2,r2
   810f4:	e0bffa17 	ldw	r2,-24(fp)
   810f8:	1885883a 	add	r2,r3,r2
   810fc:	1085883a 	add	r2,r2,r2
   81100:	1085883a 	add	r2,r2,r2
   81104:	8085883a 	add	r2,r16,r2
   81108:	10c00017 	ldw	r3,0(r2)
   8110c:	180f883a 	mov	r7,r3
   81110:	a00d883a 	mov	r6,r20
   81114:	980b883a 	mov	r5,r19
   81118:	9009883a 	mov	r4,r18
   8111c:	00809fc0 	call	809fc <max>
   81120:	1023883a 	mov	r17,r2
   81124:	04000334 	movhi	r16,12
   81128:	8429c404 	addi	r16,r16,-22768
   8112c:	e0bff817 	ldw	r2,-32(fp)
   81130:	014001c4 	movi	r5,7
   81134:	1009883a 	mov	r4,r2
   81138:	0082a480 	call	82a48 <__mulsi3>
   8113c:	1007883a 	mov	r3,r2
   81140:	e0bff917 	ldw	r2,-28(fp)
   81144:	1885883a 	add	r2,r3,r2
   81148:	1085883a 	add	r2,r2,r2
   8114c:	1087883a 	add	r3,r2,r2
   81150:	e0bffa17 	ldw	r2,-24(fp)
   81154:	1885883a 	add	r2,r3,r2
   81158:	1085883a 	add	r2,r2,r2
   8115c:	1085883a 	add	r2,r2,r2
   81160:	8085883a 	add	r2,r16,r2
   81164:	14400015 	stw	r17,0(r2)

void MaxPool2() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
		for (j = 0; j < IMAGE_DIM / 4; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++)
   81168:	e0bffa17 	ldw	r2,-24(fp)
   8116c:	10800044 	addi	r2,r2,1
   81170:	e0bffa15 	stw	r2,-24(fp)
   81174:	e0bffa17 	ldw	r2,-24(fp)
   81178:	10800110 	cmplti	r2,r2,4
   8117c:	103f931e 	bne	r2,zero,80fcc <__alt_data_end+0xfffab89c>
}

void MaxPool2() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
		for (j = 0; j < IMAGE_DIM / 4; j++)
   81180:	e0bff917 	ldw	r2,-28(fp)
   81184:	10800044 	addi	r2,r2,1
   81188:	e0bff915 	stw	r2,-28(fp)
   8118c:	e0bff917 	ldw	r2,-28(fp)
   81190:	108001d0 	cmplti	r2,r2,7
   81194:	103f8b1e 	bne	r2,zero,80fc4 <__alt_data_end+0xfffab894>
			}
}

void MaxPool2() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
   81198:	e0bff817 	ldw	r2,-32(fp)
   8119c:	10800044 	addi	r2,r2,1
   811a0:	e0bff815 	stw	r2,-32(fp)
   811a4:	e0bff817 	ldw	r2,-32(fp)
   811a8:	108001d0 	cmplti	r2,r2,7
   811ac:	103f831e 	bne	r2,zero,80fbc <__alt_data_end+0xfffab88c>
			for (k = 0; k < CONV2_OUT_DIM; k++)
				Pool2_Image[i][j][k] = max(Conv2_Image[i * 2][j * 2][k],
					Conv2_Image[i * 2 + 1][j * 2][k],
					Conv2_Image[i * 2][j * 2 + 1][k],
					Conv2_Image[i * 2 + 1][j * 2 + 1][k]);
}
   811b0:	0001883a 	nop
   811b4:	e6fffb04 	addi	sp,fp,-20
   811b8:	dfc00617 	ldw	ra,24(sp)
   811bc:	df000517 	ldw	fp,20(sp)
   811c0:	dd000417 	ldw	r20,16(sp)
   811c4:	dcc00317 	ldw	r19,12(sp)
   811c8:	dc800217 	ldw	r18,8(sp)
   811cc:	dc400117 	ldw	r17,4(sp)
   811d0:	dc000017 	ldw	r16,0(sp)
   811d4:	dec00704 	addi	sp,sp,28
   811d8:	f800283a 	ret

000811dc <Flatten>:

void Flatten() {
   811dc:	defff904 	addi	sp,sp,-28
   811e0:	dfc00615 	stw	ra,24(sp)
   811e4:	df000515 	stw	fp,20(sp)
   811e8:	dc400415 	stw	r17,16(sp)
   811ec:	dc000315 	stw	r16,12(sp)
   811f0:	df000504 	addi	fp,sp,20
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
   811f4:	e03ffb15 	stw	zero,-20(fp)
   811f8:	00003506 	br	812d0 <Flatten+0xf4>
		for (j = 0; j < IMAGE_DIM / 4; j++)
   811fc:	e03ffc15 	stw	zero,-16(fp)
   81200:	00002d06 	br	812b8 <Flatten+0xdc>
			for (k = 0; k < CONV2_OUT_DIM; k++)
   81204:	e03ffd15 	stw	zero,-12(fp)
   81208:	00002506 	br	812a0 <Flatten+0xc4>
				Flat_Image[i*(IMAGE_DIM / 4)*CONV2_OUT_DIM + j * CONV2_OUT_DIM + k] = Pool2_Image[i][j][k];
   8120c:	014001c4 	movi	r5,7
   81210:	e13ffb17 	ldw	r4,-20(fp)
   81214:	0082a480 	call	82a48 <__mulsi3>
   81218:	1007883a 	mov	r3,r2
   8121c:	e0bffc17 	ldw	r2,-16(fp)
   81220:	1885883a 	add	r2,r3,r2
   81224:	1085883a 	add	r2,r2,r2
   81228:	1085883a 	add	r2,r2,r2
   8122c:	1007883a 	mov	r3,r2
   81230:	e0bffd17 	ldw	r2,-12(fp)
   81234:	18a3883a 	add	r17,r3,r2
   81238:	04000334 	movhi	r16,12
   8123c:	8429c404 	addi	r16,r16,-22768
   81240:	e0bffb17 	ldw	r2,-20(fp)
   81244:	014001c4 	movi	r5,7
   81248:	1009883a 	mov	r4,r2
   8124c:	0082a480 	call	82a48 <__mulsi3>
   81250:	1007883a 	mov	r3,r2
   81254:	e0bffc17 	ldw	r2,-16(fp)
   81258:	1885883a 	add	r2,r3,r2
   8125c:	1085883a 	add	r2,r2,r2
   81260:	1087883a 	add	r3,r2,r2
   81264:	e0bffd17 	ldw	r2,-12(fp)
   81268:	1885883a 	add	r2,r3,r2
   8126c:	1085883a 	add	r2,r2,r2
   81270:	1085883a 	add	r2,r2,r2
   81274:	8085883a 	add	r2,r16,r2
   81278:	11000017 	ldw	r4,0(r2)
   8127c:	008002f4 	movhi	r2,11
   81280:	108c1004 	addi	r2,r2,12352
   81284:	8c47883a 	add	r3,r17,r17
   81288:	18c7883a 	add	r3,r3,r3
   8128c:	10c5883a 	add	r2,r2,r3
   81290:	11000015 	stw	r4,0(r2)

void Flatten() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
		for (j = 0; j < IMAGE_DIM / 4; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++)
   81294:	e0bffd17 	ldw	r2,-12(fp)
   81298:	10800044 	addi	r2,r2,1
   8129c:	e0bffd15 	stw	r2,-12(fp)
   812a0:	e0bffd17 	ldw	r2,-12(fp)
   812a4:	10800110 	cmplti	r2,r2,4
   812a8:	103fd81e 	bne	r2,zero,8120c <__alt_data_end+0xfffabadc>
}

void Flatten() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
		for (j = 0; j < IMAGE_DIM / 4; j++)
   812ac:	e0bffc17 	ldw	r2,-16(fp)
   812b0:	10800044 	addi	r2,r2,1
   812b4:	e0bffc15 	stw	r2,-16(fp)
   812b8:	e0bffc17 	ldw	r2,-16(fp)
   812bc:	108001d0 	cmplti	r2,r2,7
   812c0:	103fd01e 	bne	r2,zero,81204 <__alt_data_end+0xfffabad4>
					Conv2_Image[i * 2 + 1][j * 2 + 1][k]);
}

void Flatten() {
	int i, j, k;
	for (i = 0; i < IMAGE_DIM / 4; i++)
   812c4:	e0bffb17 	ldw	r2,-20(fp)
   812c8:	10800044 	addi	r2,r2,1
   812cc:	e0bffb15 	stw	r2,-20(fp)
   812d0:	e0bffb17 	ldw	r2,-20(fp)
   812d4:	108001d0 	cmplti	r2,r2,7
   812d8:	103fc81e 	bne	r2,zero,811fc <__alt_data_end+0xfffabacc>
		for (j = 0; j < IMAGE_DIM / 4; j++)
			for (k = 0; k < CONV2_OUT_DIM; k++)
				Flat_Image[i*(IMAGE_DIM / 4)*CONV2_OUT_DIM + j * CONV2_OUT_DIM + k] = Pool2_Image[i][j][k];
}
   812dc:	0001883a 	nop
   812e0:	e6fffe04 	addi	sp,fp,-8
   812e4:	dfc00317 	ldw	ra,12(sp)
   812e8:	df000217 	ldw	fp,8(sp)
   812ec:	dc400117 	ldw	r17,4(sp)
   812f0:	dc000017 	ldw	r16,0(sp)
   812f4:	dec00404 	addi	sp,sp,16
   812f8:	f800283a 	ret

000812fc <Fc1>:

void Fc1() {
   812fc:	defffb04 	addi	sp,sp,-20
   81300:	dfc00415 	stw	ra,16(sp)
   81304:	df000315 	stw	fp,12(sp)
   81308:	df000304 	addi	fp,sp,12
	int i, j;
	float tmp_ans;
	for (i = 0; i < FC1_OUT_DIM; i++) {
   8130c:	e03ffd15 	stw	zero,-12(fp)
   81310:	00004306 	br	81420 <Fc1+0x124>
		tmp_ans = 0.0;
   81314:	e03fff15 	stw	zero,-4(fp)
		for (j = 0; j < (IMAGE_DIM / 4)*(IMAGE_DIM / 4)*CONV2_OUT_DIM; j++)
   81318:	e03ffe15 	stw	zero,-8(fp)
   8131c:	00001e06 	br	81398 <Fc1+0x9c>
			tmp_ans += Flat_Image[j] * Fc1_W[j][i];
   81320:	008002f4 	movhi	r2,11
   81324:	108c1004 	addi	r2,r2,12352
   81328:	e0fffe17 	ldw	r3,-8(fp)
   8132c:	18c7883a 	add	r3,r3,r3
   81330:	18c7883a 	add	r3,r3,r3
   81334:	10c5883a 	add	r2,r2,r3
   81338:	11800017 	ldw	r6,0(r2)
   8133c:	008002f4 	movhi	r2,11
   81340:	108cf404 	addi	r2,r2,13264
   81344:	e0fffe17 	ldw	r3,-8(fp)
   81348:	1808917a 	slli	r4,r3,5
   8134c:	e0fffd17 	ldw	r3,-12(fp)
   81350:	20c7883a 	add	r3,r4,r3
   81354:	18c7883a 	add	r3,r3,r3
   81358:	18c7883a 	add	r3,r3,r3
   8135c:	10c5883a 	add	r2,r2,r3
   81360:	10c00017 	ldw	r3,0(r2)
   81364:	180b883a 	mov	r5,r3
   81368:	3009883a 	mov	r4,r6
   8136c:	00834340 	call	83434 <__mulsf3>
   81370:	1007883a 	mov	r3,r2
   81374:	1805883a 	mov	r2,r3
   81378:	100b883a 	mov	r5,r2
   8137c:	e13fff17 	ldw	r4,-4(fp)
   81380:	0082a700 	call	82a70 <__addsf3>
   81384:	1007883a 	mov	r3,r2
   81388:	e0ffff15 	stw	r3,-4(fp)
void Fc1() {
	int i, j;
	float tmp_ans;
	for (i = 0; i < FC1_OUT_DIM; i++) {
		tmp_ans = 0.0;
		for (j = 0; j < (IMAGE_DIM / 4)*(IMAGE_DIM / 4)*CONV2_OUT_DIM; j++)
   8138c:	e0bffe17 	ldw	r2,-8(fp)
   81390:	10800044 	addi	r2,r2,1
   81394:	e0bffe15 	stw	r2,-8(fp)
   81398:	e0bffe17 	ldw	r2,-8(fp)
   8139c:	10803110 	cmplti	r2,r2,196
   813a0:	103fdf1e 	bne	r2,zero,81320 <__alt_data_end+0xfffabbf0>
			tmp_ans += Flat_Image[j] * Fc1_W[j][i];
		tmp_ans += Fc1_B[i];
   813a4:	00800274 	movhi	r2,9
   813a8:	1090f104 	addi	r2,r2,17348
   813ac:	e0fffd17 	ldw	r3,-12(fp)
   813b0:	18c7883a 	add	r3,r3,r3
   813b4:	18c7883a 	add	r3,r3,r3
   813b8:	10c5883a 	add	r2,r2,r3
   813bc:	10c00017 	ldw	r3,0(r2)
   813c0:	180b883a 	mov	r5,r3
   813c4:	e13fff17 	ldw	r4,-4(fp)
   813c8:	0082a700 	call	82a70 <__addsf3>
   813cc:	1007883a 	mov	r3,r2
   813d0:	e0ffff15 	stw	r3,-4(fp)
		tmp_ans = RELU(tmp_ans);
   813d4:	000b883a 	mov	r5,zero
   813d8:	e13fff17 	ldw	r4,-4(fp)
   813dc:	00833780 	call	83378 <__gesf2>
   813e0:	0080020e 	bge	zero,r2,813ec <Fc1+0xf0>
   813e4:	e0bfff17 	ldw	r2,-4(fp)
   813e8:	00000106 	br	813f0 <Fc1+0xf4>
   813ec:	0005883a 	mov	r2,zero
   813f0:	e0bfff15 	stw	r2,-4(fp)
		FC1_Image[i] = tmp_ans;
   813f4:	008002f4 	movhi	r2,11
   813f8:	108cd404 	addi	r2,r2,13136
   813fc:	e0fffd17 	ldw	r3,-12(fp)
   81400:	18c7883a 	add	r3,r3,r3
   81404:	18c7883a 	add	r3,r3,r3
   81408:	10c5883a 	add	r2,r2,r3
   8140c:	e0ffff17 	ldw	r3,-4(fp)
   81410:	10c00015 	stw	r3,0(r2)
}

void Fc1() {
	int i, j;
	float tmp_ans;
	for (i = 0; i < FC1_OUT_DIM; i++) {
   81414:	e0bffd17 	ldw	r2,-12(fp)
   81418:	10800044 	addi	r2,r2,1
   8141c:	e0bffd15 	stw	r2,-12(fp)
   81420:	e0bffd17 	ldw	r2,-12(fp)
   81424:	10800810 	cmplti	r2,r2,32
   81428:	103fba1e 	bne	r2,zero,81314 <__alt_data_end+0xfffabbe4>
			tmp_ans += Flat_Image[j] * Fc1_W[j][i];
		tmp_ans += Fc1_B[i];
		tmp_ans = RELU(tmp_ans);
		FC1_Image[i] = tmp_ans;
	}
}
   8142c:	0001883a 	nop
   81430:	e037883a 	mov	sp,fp
   81434:	dfc00117 	ldw	ra,4(sp)
   81438:	df000017 	ldw	fp,0(sp)
   8143c:	dec00204 	addi	sp,sp,8
   81440:	f800283a 	ret

00081444 <Fc2>:

void Fc2() {
   81444:	defff904 	addi	sp,sp,-28
   81448:	dfc00615 	stw	ra,24(sp)
   8144c:	df000515 	stw	fp,20(sp)
   81450:	dc400415 	stw	r17,16(sp)
   81454:	dc000315 	stw	r16,12(sp)
   81458:	df000504 	addi	fp,sp,20
	int i, j;
	float tmp_ans;
	for (i = 0; i < FC2_OUT_DIM; i++) {
   8145c:	e03ffb15 	stw	zero,-20(fp)
   81460:	00003e06 	br	8155c <Fc2+0x118>
		tmp_ans = 0.0;
   81464:	e03ffd15 	stw	zero,-12(fp)
		for (j = 0; j < FC1_OUT_DIM; j++)
   81468:	e03ffc15 	stw	zero,-16(fp)
   8146c:	00002106 	br	814f4 <Fc2+0xb0>
			tmp_ans += FC1_Image[j] * Fc2_W[j][i];
   81470:	008002f4 	movhi	r2,11
   81474:	108cd404 	addi	r2,r2,13136
   81478:	e0fffc17 	ldw	r3,-16(fp)
   8147c:	18c7883a 	add	r3,r3,r3
   81480:	18c7883a 	add	r3,r3,r3
   81484:	10c5883a 	add	r2,r2,r3
   81488:	14400017 	ldw	r17,0(r2)
   8148c:	04000334 	movhi	r16,12
   81490:	84257404 	addi	r16,r16,-27184
   81494:	e0bffc17 	ldw	r2,-16(fp)
   81498:	01400284 	movi	r5,10
   8149c:	1009883a 	mov	r4,r2
   814a0:	0082a480 	call	82a48 <__mulsi3>
   814a4:	1007883a 	mov	r3,r2
   814a8:	e0bffb17 	ldw	r2,-20(fp)
   814ac:	1885883a 	add	r2,r3,r2
   814b0:	1085883a 	add	r2,r2,r2
   814b4:	1085883a 	add	r2,r2,r2
   814b8:	8085883a 	add	r2,r16,r2
   814bc:	10c00017 	ldw	r3,0(r2)
   814c0:	180b883a 	mov	r5,r3
   814c4:	8809883a 	mov	r4,r17
   814c8:	00834340 	call	83434 <__mulsf3>
   814cc:	1007883a 	mov	r3,r2
   814d0:	1805883a 	mov	r2,r3
   814d4:	100b883a 	mov	r5,r2
   814d8:	e13ffd17 	ldw	r4,-12(fp)
   814dc:	0082a700 	call	82a70 <__addsf3>
   814e0:	1007883a 	mov	r3,r2
   814e4:	e0fffd15 	stw	r3,-12(fp)
void Fc2() {
	int i, j;
	float tmp_ans;
	for (i = 0; i < FC2_OUT_DIM; i++) {
		tmp_ans = 0.0;
		for (j = 0; j < FC1_OUT_DIM; j++)
   814e8:	e0bffc17 	ldw	r2,-16(fp)
   814ec:	10800044 	addi	r2,r2,1
   814f0:	e0bffc15 	stw	r2,-16(fp)
   814f4:	e0bffc17 	ldw	r2,-16(fp)
   814f8:	10800810 	cmplti	r2,r2,32
   814fc:	103fdc1e 	bne	r2,zero,81470 <__alt_data_end+0xfffabd40>
			tmp_ans += FC1_Image[j] * Fc2_W[j][i];
		tmp_ans += Fc2_B[i];
   81500:	00800274 	movhi	r2,9
   81504:	10911104 	addi	r2,r2,17476
   81508:	e0fffb17 	ldw	r3,-20(fp)
   8150c:	18c7883a 	add	r3,r3,r3
   81510:	18c7883a 	add	r3,r3,r3
   81514:	10c5883a 	add	r2,r2,r3
   81518:	10c00017 	ldw	r3,0(r2)
   8151c:	180b883a 	mov	r5,r3
   81520:	e13ffd17 	ldw	r4,-12(fp)
   81524:	0082a700 	call	82a70 <__addsf3>
   81528:	1007883a 	mov	r3,r2
   8152c:	e0fffd15 	stw	r3,-12(fp)
		FC2_Image[i] = tmp_ans;
   81530:	008002f4 	movhi	r2,11
   81534:	1087d604 	addi	r2,r2,8024
   81538:	e0fffb17 	ldw	r3,-20(fp)
   8153c:	18c7883a 	add	r3,r3,r3
   81540:	18c7883a 	add	r3,r3,r3
   81544:	10c5883a 	add	r2,r2,r3
   81548:	e0fffd17 	ldw	r3,-12(fp)
   8154c:	10c00015 	stw	r3,0(r2)
}

void Fc2() {
	int i, j;
	float tmp_ans;
	for (i = 0; i < FC2_OUT_DIM; i++) {
   81550:	e0bffb17 	ldw	r2,-20(fp)
   81554:	10800044 	addi	r2,r2,1
   81558:	e0bffb15 	stw	r2,-20(fp)
   8155c:	e0bffb17 	ldw	r2,-20(fp)
   81560:	10800290 	cmplti	r2,r2,10
   81564:	103fbf1e 	bne	r2,zero,81464 <__alt_data_end+0xfffabd34>
		for (j = 0; j < FC1_OUT_DIM; j++)
			tmp_ans += FC1_Image[j] * Fc2_W[j][i];
		tmp_ans += Fc2_B[i];
		FC2_Image[i] = tmp_ans;
	}
}
   81568:	0001883a 	nop
   8156c:	e6fffe04 	addi	sp,fp,-8
   81570:	dfc00317 	ldw	ra,12(sp)
   81574:	df000217 	ldw	fp,8(sp)
   81578:	dc400117 	ldw	r17,4(sp)
   8157c:	dc000017 	ldw	r16,0(sp)
   81580:	dec00404 	addi	sp,sp,16
   81584:	f800283a 	ret

00081588 <Get_Answer>:

void Get_Answer() {
   81588:	defff904 	addi	sp,sp,-28
   8158c:	dfc00615 	stw	ra,24(sp)
   81590:	df000515 	stw	fp,20(sp)
   81594:	dc000415 	stw	r16,16(sp)
   81598:	df000504 	addi	fp,sp,20
	float max = FC2_Image[0];
   8159c:	008002f4 	movhi	r2,11
   815a0:	1087d604 	addi	r2,r2,8024
   815a4:	10800017 	ldw	r2,0(r2)
   815a8:	e0bffb15 	stw	r2,-20(fp)
	int max_point = 0;
   815ac:	e03ffc15 	stw	zero,-16(fp)
	int i;
	for (i = 1; i < FC2_OUT_DIM; i++)
   815b0:	00800044 	movi	r2,1
   815b4:	e0bffd15 	stw	r2,-12(fp)
   815b8:	00001806 	br	8161c <Get_Answer+0x94>
		if (FC2_Image[i] > max) {
   815bc:	008002f4 	movhi	r2,11
   815c0:	1087d604 	addi	r2,r2,8024
   815c4:	e0fffd17 	ldw	r3,-12(fp)
   815c8:	18c7883a 	add	r3,r3,r3
   815cc:	18c7883a 	add	r3,r3,r3
   815d0:	10c5883a 	add	r2,r2,r3
   815d4:	10c00017 	ldw	r3,0(r2)
   815d8:	e17ffb17 	ldw	r5,-20(fp)
   815dc:	1809883a 	mov	r4,r3
   815e0:	00833780 	call	83378 <__gesf2>
   815e4:	00800a0e 	bge	zero,r2,81610 <Get_Answer+0x88>
			max = FC2_Image[i];
   815e8:	008002f4 	movhi	r2,11
   815ec:	1087d604 	addi	r2,r2,8024
   815f0:	e0fffd17 	ldw	r3,-12(fp)
   815f4:	18c7883a 	add	r3,r3,r3
   815f8:	18c7883a 	add	r3,r3,r3
   815fc:	10c5883a 	add	r2,r2,r3
   81600:	10800017 	ldw	r2,0(r2)
   81604:	e0bffb15 	stw	r2,-20(fp)
			max_point = i;
   81608:	e0bffd17 	ldw	r2,-12(fp)
   8160c:	e0bffc15 	stw	r2,-16(fp)

void Get_Answer() {
	float max = FC2_Image[0];
	int max_point = 0;
	int i;
	for (i = 1; i < FC2_OUT_DIM; i++)
   81610:	e0bffd17 	ldw	r2,-12(fp)
   81614:	10800044 	addi	r2,r2,1
   81618:	e0bffd15 	stw	r2,-12(fp)
   8161c:	e0bffd17 	ldw	r2,-12(fp)
   81620:	10800290 	cmplti	r2,r2,10
   81624:	103fe51e 	bne	r2,zero,815bc <__alt_data_end+0xfffabe8c>
		if (FC2_Image[i] > max) {
			max = FC2_Image[i];
			max_point = i;
		}
	float sum = 0.0;
   81628:	e03ffe15 	stw	zero,-8(fp)
	for(i = 0; i < FC2_OUT_DIM; i++) {
   8162c:	e03ffd15 	stw	zero,-12(fp)
   81630:	00002a06 	br	816dc <Get_Answer+0x154>
		Softmax[i] = exp(FC2_Image[i]);
   81634:	008002f4 	movhi	r2,11
   81638:	1087d604 	addi	r2,r2,8024
   8163c:	e0fffd17 	ldw	r3,-12(fp)
   81640:	18c7883a 	add	r3,r3,r3
   81644:	18c7883a 	add	r3,r3,r3
   81648:	10c5883a 	add	r2,r2,r3
   8164c:	10c00017 	ldw	r3,0(r2)
   81650:	1809883a 	mov	r4,r3
   81654:	00861080 	call	86108 <__extendsfdf2>
   81658:	100b883a 	mov	r5,r2
   8165c:	180d883a 	mov	r6,r3
   81660:	2809883a 	mov	r4,r5
   81664:	300b883a 	mov	r5,r6
   81668:	00821f80 	call	821f8 <exp>
   8166c:	100b883a 	mov	r5,r2
   81670:	180d883a 	mov	r6,r3
   81674:	2809883a 	mov	r4,r5
   81678:	300b883a 	mov	r5,r6
   8167c:	00862180 	call	86218 <__truncdfsf2>
   81680:	1009883a 	mov	r4,r2
   81684:	008002b4 	movhi	r2,10
   81688:	109ec404 	addi	r2,r2,31504
   8168c:	e0fffd17 	ldw	r3,-12(fp)
   81690:	18c7883a 	add	r3,r3,r3
   81694:	18c7883a 	add	r3,r3,r3
   81698:	10c5883a 	add	r2,r2,r3
   8169c:	11000015 	stw	r4,0(r2)
		sum += Softmax[i];
   816a0:	008002b4 	movhi	r2,10
   816a4:	109ec404 	addi	r2,r2,31504
   816a8:	e0fffd17 	ldw	r3,-12(fp)
   816ac:	18c7883a 	add	r3,r3,r3
   816b0:	18c7883a 	add	r3,r3,r3
   816b4:	10c5883a 	add	r2,r2,r3
   816b8:	10c00017 	ldw	r3,0(r2)
   816bc:	180b883a 	mov	r5,r3
   816c0:	e13ffe17 	ldw	r4,-8(fp)
   816c4:	0082a700 	call	82a70 <__addsf3>
   816c8:	1007883a 	mov	r3,r2
   816cc:	e0fffe15 	stw	r3,-8(fp)
		if (FC2_Image[i] > max) {
			max = FC2_Image[i];
			max_point = i;
		}
	float sum = 0.0;
	for(i = 0; i < FC2_OUT_DIM; i++) {
   816d0:	e0bffd17 	ldw	r2,-12(fp)
   816d4:	10800044 	addi	r2,r2,1
   816d8:	e0bffd15 	stw	r2,-12(fp)
   816dc:	e0bffd17 	ldw	r2,-12(fp)
   816e0:	10800290 	cmplti	r2,r2,10
   816e4:	103fd31e 	bne	r2,zero,81634 <__alt_data_end+0xfffabf04>
		Softmax[i] = exp(FC2_Image[i]);
		sum += Softmax[i];
	}
	for(i = 0; i < FC2_OUT_DIM; i++) {
   816e8:	e03ffd15 	stw	zero,-12(fp)
   816ec:	00001606 	br	81748 <Get_Answer+0x1c0>
		Softmax[i] /= sum;
   816f0:	008002b4 	movhi	r2,10
   816f4:	109ec404 	addi	r2,r2,31504
   816f8:	e0fffd17 	ldw	r3,-12(fp)
   816fc:	18c7883a 	add	r3,r3,r3
   81700:	18c7883a 	add	r3,r3,r3
   81704:	10c5883a 	add	r2,r2,r3
   81708:	10c00017 	ldw	r3,0(r2)
   8170c:	e17ffe17 	ldw	r5,-8(fp)
   81710:	1809883a 	mov	r4,r3
   81714:	0082f380 	call	82f38 <__divsf3>
   81718:	1007883a 	mov	r3,r2
   8171c:	1809883a 	mov	r4,r3
   81720:	008002b4 	movhi	r2,10
   81724:	109ec404 	addi	r2,r2,31504
   81728:	e0fffd17 	ldw	r3,-12(fp)
   8172c:	18c7883a 	add	r3,r3,r3
   81730:	18c7883a 	add	r3,r3,r3
   81734:	10c5883a 	add	r2,r2,r3
   81738:	11000015 	stw	r4,0(r2)
	float sum = 0.0;
	for(i = 0; i < FC2_OUT_DIM; i++) {
		Softmax[i] = exp(FC2_Image[i]);
		sum += Softmax[i];
	}
	for(i = 0; i < FC2_OUT_DIM; i++) {
   8173c:	e0bffd17 	ldw	r2,-12(fp)
   81740:	10800044 	addi	r2,r2,1
   81744:	e0bffd15 	stw	r2,-12(fp)
   81748:	e0bffd17 	ldw	r2,-12(fp)
   8174c:	10800290 	cmplti	r2,r2,10
   81750:	103fe71e 	bne	r2,zero,816f0 <__alt_data_end+0xfffabfc0>
		Softmax[i] /= sum;
	}
	ans = max_point;
   81754:	e0bffc17 	ldw	r2,-16(fp)
   81758:	d086f415 	stw	r2,7120(gp)

	max = -1;
   8175c:	00afe034 	movhi	r2,49024
   81760:	e0bffb15 	stw	r2,-20(fp)
	max_point = -1;
   81764:	00bfffc4 	movi	r2,-1
   81768:	e0bffc15 	stw	r2,-16(fp)
	for(i = 0; i < FC2_OUT_DIM; i++)
   8176c:	e03ffd15 	stw	zero,-12(fp)
   81770:	00001b06 	br	817e0 <Get_Answer+0x258>
		if(Softmax[i] > max && i != ans) {
   81774:	008002b4 	movhi	r2,10
   81778:	109ec404 	addi	r2,r2,31504
   8177c:	e0fffd17 	ldw	r3,-12(fp)
   81780:	18c7883a 	add	r3,r3,r3
   81784:	18c7883a 	add	r3,r3,r3
   81788:	10c5883a 	add	r2,r2,r3
   8178c:	10c00017 	ldw	r3,0(r2)
   81790:	e17ffb17 	ldw	r5,-20(fp)
   81794:	1809883a 	mov	r4,r3
   81798:	00833780 	call	83378 <__gesf2>
   8179c:	00800d0e 	bge	zero,r2,817d4 <Get_Answer+0x24c>
   817a0:	d086f417 	ldw	r2,7120(gp)
   817a4:	e0fffd17 	ldw	r3,-12(fp)
   817a8:	18800a26 	beq	r3,r2,817d4 <Get_Answer+0x24c>
			max_point = i;
   817ac:	e0bffd17 	ldw	r2,-12(fp)
   817b0:	e0bffc15 	stw	r2,-16(fp)
			max = Softmax[i];
   817b4:	008002b4 	movhi	r2,10
   817b8:	109ec404 	addi	r2,r2,31504
   817bc:	e0fffd17 	ldw	r3,-12(fp)
   817c0:	18c7883a 	add	r3,r3,r3
   817c4:	18c7883a 	add	r3,r3,r3
   817c8:	10c5883a 	add	r2,r2,r3
   817cc:	10800017 	ldw	r2,0(r2)
   817d0:	e0bffb15 	stw	r2,-20(fp)
	}
	ans = max_point;

	max = -1;
	max_point = -1;
	for(i = 0; i < FC2_OUT_DIM; i++)
   817d4:	e0bffd17 	ldw	r2,-12(fp)
   817d8:	10800044 	addi	r2,r2,1
   817dc:	e0bffd15 	stw	r2,-12(fp)
   817e0:	e0bffd17 	ldw	r2,-12(fp)
   817e4:	10800290 	cmplti	r2,r2,10
   817e8:	103fe21e 	bne	r2,zero,81774 <__alt_data_end+0xfffac044>
		if(Softmax[i] > max && i != ans) {
			max_point = i;
			max = Softmax[i];
		}
	subop = max_point;
   817ec:	e0bffc17 	ldw	r2,-16(fp)
   817f0:	d086f515 	stw	r2,7124(gp)

	printf("\nHere are the results:\n");
   817f4:	01000274 	movhi	r4,9
   817f8:	210fd704 	addi	r4,r4,16220
   817fc:	00884c00 	call	884c0 <puts>

	for(i = 0; i < FC2_OUT_DIM; i++)
   81800:	e03ffd15 	stw	zero,-12(fp)
   81804:	00003c06 	br	818f8 <Get_Answer+0x370>
		printf("Softmax[%d] = %d.%d\n", i, (int)(Softmax[i] * 100.0), ((int)(Softmax[i] * 1000.0) % 10));
   81808:	008002b4 	movhi	r2,10
   8180c:	109ec404 	addi	r2,r2,31504
   81810:	e0fffd17 	ldw	r3,-12(fp)
   81814:	18c7883a 	add	r3,r3,r3
   81818:	18c7883a 	add	r3,r3,r3
   8181c:	10c5883a 	add	r2,r2,r3
   81820:	10c00017 	ldw	r3,0(r2)
   81824:	1809883a 	mov	r4,r3
   81828:	00861080 	call	86108 <__extendsfdf2>
   8182c:	1011883a 	mov	r8,r2
   81830:	1813883a 	mov	r9,r3
   81834:	000d883a 	mov	r6,zero
   81838:	01d01674 	movhi	r7,16473
   8183c:	4009883a 	mov	r4,r8
   81840:	480b883a 	mov	r5,r9
   81844:	0084e440 	call	84e44 <__muldf3>
   81848:	1009883a 	mov	r4,r2
   8184c:	180b883a 	mov	r5,r3
   81850:	2005883a 	mov	r2,r4
   81854:	2807883a 	mov	r3,r5
   81858:	1009883a 	mov	r4,r2
   8185c:	180b883a 	mov	r5,r3
   81860:	0085fac0 	call	85fac <__fixdfsi>
   81864:	1021883a 	mov	r16,r2
   81868:	008002b4 	movhi	r2,10
   8186c:	109ec404 	addi	r2,r2,31504
   81870:	e0fffd17 	ldw	r3,-12(fp)
   81874:	18c7883a 	add	r3,r3,r3
   81878:	18c7883a 	add	r3,r3,r3
   8187c:	10c5883a 	add	r2,r2,r3
   81880:	10c00017 	ldw	r3,0(r2)
   81884:	1809883a 	mov	r4,r3
   81888:	00861080 	call	86108 <__extendsfdf2>
   8188c:	1011883a 	mov	r8,r2
   81890:	1813883a 	mov	r9,r3
   81894:	000d883a 	mov	r6,zero
   81898:	01d023f4 	movhi	r7,16527
   8189c:	39d00004 	addi	r7,r7,16384
   818a0:	4009883a 	mov	r4,r8
   818a4:	480b883a 	mov	r5,r9
   818a8:	0084e440 	call	84e44 <__muldf3>
   818ac:	1009883a 	mov	r4,r2
   818b0:	180b883a 	mov	r5,r3
   818b4:	2005883a 	mov	r2,r4
   818b8:	2807883a 	mov	r3,r5
   818bc:	1009883a 	mov	r4,r2
   818c0:	180b883a 	mov	r5,r3
   818c4:	0085fac0 	call	85fac <__fixdfsi>
   818c8:	01400284 	movi	r5,10
   818cc:	1009883a 	mov	r4,r2
   818d0:	00829180 	call	82918 <__modsi3>
   818d4:	100f883a 	mov	r7,r2
   818d8:	800d883a 	mov	r6,r16
   818dc:	e17ffd17 	ldw	r5,-12(fp)
   818e0:	01000274 	movhi	r4,9
   818e4:	210fdd04 	addi	r4,r4,16244
   818e8:	00883c40 	call	883c4 <printf>
		}
	subop = max_point;

	printf("\nHere are the results:\n");

	for(i = 0; i < FC2_OUT_DIM; i++)
   818ec:	e0bffd17 	ldw	r2,-12(fp)
   818f0:	10800044 	addi	r2,r2,1
   818f4:	e0bffd15 	stw	r2,-12(fp)
   818f8:	e0bffd17 	ldw	r2,-12(fp)
   818fc:	10800290 	cmplti	r2,r2,10
   81900:	103fc11e 	bne	r2,zero,81808 <__alt_data_end+0xfffac0d8>
		printf("Softmax[%d] = %d.%d\n", i, (int)(Softmax[i] * 100.0), ((int)(Softmax[i] * 1000.0) % 10));
}
   81904:	0001883a 	nop
   81908:	e6ffff04 	addi	sp,fp,-4
   8190c:	dfc00217 	ldw	ra,8(sp)
   81910:	df000117 	ldw	fp,4(sp)
   81914:	dc000017 	ldw	r16,0(sp)
   81918:	dec00304 	addi	sp,sp,12
   8191c:	f800283a 	ret

00081920 <Recognition>:
float sum_value[28][28], sum_n[28][28];
unsigned char recognize_flag;
unsigned int *pChar162 = LCD_0_BASE;


void Recognition() {
   81920:	defff704 	addi	sp,sp,-36
   81924:	dfc00815 	stw	ra,32(sp)
   81928:	df000715 	stw	fp,28(sp)
   8192c:	dc400615 	stw	r17,24(sp)
   81930:	dc000515 	stw	r16,20(sp)
   81934:	df000704 	addi	fp,sp,28
	int i, j;
	int tmp_i, tmp_j;



	for(i = 0; i < 28; i++){
   81938:	e03ff915 	stw	zero,-28(fp)
   8193c:	00002506 	br	819d4 <Recognition+0xb4>
		for(j = 0; j < 28; j++) {
   81940:	e03ffa15 	stw	zero,-24(fp)
   81944:	00001d06 	br	819bc <Recognition+0x9c>
			sum_value[i][j] = 0.0;
   81948:	040002f4 	movhi	r16,11
   8194c:	843d6e04 	addi	r16,r16,-2632
   81950:	e0bff917 	ldw	r2,-28(fp)
   81954:	01400704 	movi	r5,28
   81958:	1009883a 	mov	r4,r2
   8195c:	0082a480 	call	82a48 <__mulsi3>
   81960:	1007883a 	mov	r3,r2
   81964:	e0bffa17 	ldw	r2,-24(fp)
   81968:	1885883a 	add	r2,r3,r2
   8196c:	1085883a 	add	r2,r2,r2
   81970:	1085883a 	add	r2,r2,r2
   81974:	8085883a 	add	r2,r16,r2
   81978:	10000015 	stw	zero,0(r2)
			sum_n[i][j] = 0.0;
   8197c:	040002f4 	movhi	r16,11
   81980:	8404c604 	addi	r16,r16,4888
   81984:	e0bff917 	ldw	r2,-28(fp)
   81988:	01400704 	movi	r5,28
   8198c:	1009883a 	mov	r4,r2
   81990:	0082a480 	call	82a48 <__mulsi3>
   81994:	1007883a 	mov	r3,r2
   81998:	e0bffa17 	ldw	r2,-24(fp)
   8199c:	1885883a 	add	r2,r3,r2
   819a0:	1085883a 	add	r2,r2,r2
   819a4:	1085883a 	add	r2,r2,r2
   819a8:	8085883a 	add	r2,r16,r2
   819ac:	10000015 	stw	zero,0(r2)
	int tmp_i, tmp_j;



	for(i = 0; i < 28; i++){
		for(j = 0; j < 28; j++) {
   819b0:	e0bffa17 	ldw	r2,-24(fp)
   819b4:	10800044 	addi	r2,r2,1
   819b8:	e0bffa15 	stw	r2,-24(fp)
   819bc:	e0bffa17 	ldw	r2,-24(fp)
   819c0:	10800710 	cmplti	r2,r2,28
   819c4:	103fe01e 	bne	r2,zero,81948 <__alt_data_end+0xfffac218>
	int i, j;
	int tmp_i, tmp_j;



	for(i = 0; i < 28; i++){
   819c8:	e0bff917 	ldw	r2,-28(fp)
   819cc:	10800044 	addi	r2,r2,1
   819d0:	e0bff915 	stw	r2,-28(fp)
   819d4:	e0bff917 	ldw	r2,-28(fp)
   819d8:	10800710 	cmplti	r2,r2,28
   819dc:	103fd81e 	bne	r2,zero,81940 <__alt_data_end+0xfffac210>
			sum_value[i][j] = 0.0;
			sum_n[i][j] = 0.0;
		}
	}
	// Resize the digit from 64*64 to 28*28 for the CNN
	for(i = 0; i < 64; i++) {
   819e0:	e03ff915 	stw	zero,-28(fp)
   819e4:	00008f06 	br	81c24 <Recognition+0x304>
		for(j = 0; j < 64; j++) {
   819e8:	e03ffa15 	stw	zero,-24(fp)
   819ec:	00008706 	br	81c0c <Recognition+0x2ec>
			tmp_i = (int)((float)i * 28.0 / 64.0);
   819f0:	e13ff917 	ldw	r4,-28(fp)
   819f4:	00838d40 	call	838d4 <__floatsisf>
   819f8:	1007883a 	mov	r3,r2
   819fc:	1809883a 	mov	r4,r3
   81a00:	00861080 	call	86108 <__extendsfdf2>
   81a04:	1011883a 	mov	r8,r2
   81a08:	1813883a 	mov	r9,r3
   81a0c:	000d883a 	mov	r6,zero
   81a10:	01d00f34 	movhi	r7,16444
   81a14:	4009883a 	mov	r4,r8
   81a18:	480b883a 	mov	r5,r9
   81a1c:	0084e440 	call	84e44 <__muldf3>
   81a20:	1009883a 	mov	r4,r2
   81a24:	180b883a 	mov	r5,r3
   81a28:	2005883a 	mov	r2,r4
   81a2c:	2807883a 	mov	r3,r5
   81a30:	000d883a 	mov	r6,zero
   81a34:	01d01434 	movhi	r7,16464
   81a38:	1009883a 	mov	r4,r2
   81a3c:	180b883a 	mov	r5,r3
   81a40:	00842a40 	call	842a4 <__divdf3>
   81a44:	1009883a 	mov	r4,r2
   81a48:	180b883a 	mov	r5,r3
   81a4c:	2005883a 	mov	r2,r4
   81a50:	2807883a 	mov	r3,r5
   81a54:	1009883a 	mov	r4,r2
   81a58:	180b883a 	mov	r5,r3
   81a5c:	0085fac0 	call	85fac <__fixdfsi>
   81a60:	e0bffb15 	stw	r2,-20(fp)
			tmp_j = (int)((float)j * 28.0 / 64.0);
   81a64:	e13ffa17 	ldw	r4,-24(fp)
   81a68:	00838d40 	call	838d4 <__floatsisf>
   81a6c:	1007883a 	mov	r3,r2
   81a70:	1809883a 	mov	r4,r3
   81a74:	00861080 	call	86108 <__extendsfdf2>
   81a78:	1011883a 	mov	r8,r2
   81a7c:	1813883a 	mov	r9,r3
   81a80:	000d883a 	mov	r6,zero
   81a84:	01d00f34 	movhi	r7,16444
   81a88:	4009883a 	mov	r4,r8
   81a8c:	480b883a 	mov	r5,r9
   81a90:	0084e440 	call	84e44 <__muldf3>
   81a94:	1009883a 	mov	r4,r2
   81a98:	180b883a 	mov	r5,r3
   81a9c:	2005883a 	mov	r2,r4
   81aa0:	2807883a 	mov	r3,r5
   81aa4:	000d883a 	mov	r6,zero
   81aa8:	01d01434 	movhi	r7,16464
   81aac:	1009883a 	mov	r4,r2
   81ab0:	180b883a 	mov	r5,r3
   81ab4:	00842a40 	call	842a4 <__divdf3>
   81ab8:	1009883a 	mov	r4,r2
   81abc:	180b883a 	mov	r5,r3
   81ac0:	2005883a 	mov	r2,r4
   81ac4:	2807883a 	mov	r3,r5
   81ac8:	1009883a 	mov	r4,r2
   81acc:	180b883a 	mov	r5,r3
   81ad0:	0085fac0 	call	85fac <__fixdfsi>
   81ad4:	e0bffc15 	stw	r2,-16(fp)
			sum_value[tmp_i][tmp_j] += (capturedImage[i][j]);
   81ad8:	040002f4 	movhi	r16,11
   81adc:	843d6e04 	addi	r16,r16,-2632
   81ae0:	e0bffb17 	ldw	r2,-20(fp)
   81ae4:	01400704 	movi	r5,28
   81ae8:	1009883a 	mov	r4,r2
   81aec:	0082a480 	call	82a48 <__mulsi3>
   81af0:	1007883a 	mov	r3,r2
   81af4:	e0bffc17 	ldw	r2,-16(fp)
   81af8:	1885883a 	add	r2,r3,r2
   81afc:	1085883a 	add	r2,r2,r2
   81b00:	1085883a 	add	r2,r2,r2
   81b04:	8085883a 	add	r2,r16,r2
   81b08:	14000017 	ldw	r16,0(r2)
   81b0c:	008002f4 	movhi	r2,11
   81b10:	1080c604 	addi	r2,r2,792
   81b14:	e0fff917 	ldw	r3,-28(fp)
   81b18:	180691ba 	slli	r3,r3,6
   81b1c:	10c7883a 	add	r3,r2,r3
   81b20:	e0bffa17 	ldw	r2,-24(fp)
   81b24:	1885883a 	add	r2,r3,r2
   81b28:	10800003 	ldbu	r2,0(r2)
   81b2c:	10803fcc 	andi	r2,r2,255
   81b30:	1009883a 	mov	r4,r2
   81b34:	00838d40 	call	838d4 <__floatsisf>
   81b38:	1007883a 	mov	r3,r2
   81b3c:	180b883a 	mov	r5,r3
   81b40:	8009883a 	mov	r4,r16
   81b44:	0082a700 	call	82a70 <__addsf3>
   81b48:	1007883a 	mov	r3,r2
   81b4c:	1823883a 	mov	r17,r3
   81b50:	040002f4 	movhi	r16,11
   81b54:	843d6e04 	addi	r16,r16,-2632
   81b58:	e0bffb17 	ldw	r2,-20(fp)
   81b5c:	01400704 	movi	r5,28
   81b60:	1009883a 	mov	r4,r2
   81b64:	0082a480 	call	82a48 <__mulsi3>
   81b68:	1007883a 	mov	r3,r2
   81b6c:	e0bffc17 	ldw	r2,-16(fp)
   81b70:	1885883a 	add	r2,r3,r2
   81b74:	1085883a 	add	r2,r2,r2
   81b78:	1085883a 	add	r2,r2,r2
   81b7c:	8085883a 	add	r2,r16,r2
   81b80:	14400015 	stw	r17,0(r2)
			sum_n[tmp_i][tmp_j] += 1;
   81b84:	040002f4 	movhi	r16,11
   81b88:	8404c604 	addi	r16,r16,4888
   81b8c:	e0bffb17 	ldw	r2,-20(fp)
   81b90:	01400704 	movi	r5,28
   81b94:	1009883a 	mov	r4,r2
   81b98:	0082a480 	call	82a48 <__mulsi3>
   81b9c:	1007883a 	mov	r3,r2
   81ba0:	e0bffc17 	ldw	r2,-16(fp)
   81ba4:	1885883a 	add	r2,r3,r2
   81ba8:	1085883a 	add	r2,r2,r2
   81bac:	1085883a 	add	r2,r2,r2
   81bb0:	8085883a 	add	r2,r16,r2
   81bb4:	10c00017 	ldw	r3,0(r2)
   81bb8:	014fe034 	movhi	r5,16256
   81bbc:	1809883a 	mov	r4,r3
   81bc0:	0082a700 	call	82a70 <__addsf3>
   81bc4:	1007883a 	mov	r3,r2
   81bc8:	1823883a 	mov	r17,r3
   81bcc:	040002f4 	movhi	r16,11
   81bd0:	8404c604 	addi	r16,r16,4888
   81bd4:	e0bffb17 	ldw	r2,-20(fp)
   81bd8:	01400704 	movi	r5,28
   81bdc:	1009883a 	mov	r4,r2
   81be0:	0082a480 	call	82a48 <__mulsi3>
   81be4:	1007883a 	mov	r3,r2
   81be8:	e0bffc17 	ldw	r2,-16(fp)
   81bec:	1885883a 	add	r2,r3,r2
   81bf0:	1085883a 	add	r2,r2,r2
   81bf4:	1085883a 	add	r2,r2,r2
   81bf8:	8085883a 	add	r2,r16,r2
   81bfc:	14400015 	stw	r17,0(r2)
			sum_n[i][j] = 0.0;
		}
	}
	// Resize the digit from 64*64 to 28*28 for the CNN
	for(i = 0; i < 64; i++) {
		for(j = 0; j < 64; j++) {
   81c00:	e0bffa17 	ldw	r2,-24(fp)
   81c04:	10800044 	addi	r2,r2,1
   81c08:	e0bffa15 	stw	r2,-24(fp)
   81c0c:	e0bffa17 	ldw	r2,-24(fp)
   81c10:	10801010 	cmplti	r2,r2,64
   81c14:	103f761e 	bne	r2,zero,819f0 <__alt_data_end+0xfffac2c0>
			sum_value[i][j] = 0.0;
			sum_n[i][j] = 0.0;
		}
	}
	// Resize the digit from 64*64 to 28*28 for the CNN
	for(i = 0; i < 64; i++) {
   81c18:	e0bff917 	ldw	r2,-28(fp)
   81c1c:	10800044 	addi	r2,r2,1
   81c20:	e0bff915 	stw	r2,-28(fp)
   81c24:	e0bff917 	ldw	r2,-28(fp)
   81c28:	10801010 	cmplti	r2,r2,64
   81c2c:	103f6e1e 	bne	r2,zero,819e8 <__alt_data_end+0xfffac2b8>
			//printf("sum_value[%d] = %d.%d | CI = %d\n", tmp_i, (int)(sum_value[tmp_i][tmp_j] * 1.0), ((int)(sum_value[tmp_i][tmp_j] * 1000.0) % 10), (int)capturedImage[i][j]);
		}
		//printf(";\n");
	}

	for(i = 0; i < 28; i++){
   81c30:	e03ff915 	stw	zero,-28(fp)
   81c34:	00005206 	br	81d80 <Recognition+0x460>
		for(j = 0; j < 28; j++){
   81c38:	e03ffa15 	stw	zero,-24(fp)
   81c3c:	00004a06 	br	81d68 <Recognition+0x448>
			Input_Image[i][j] = 1.0 - sum_value[i][j] / (float)sum_n[i][j] / 255.0;
   81c40:	040002f4 	movhi	r16,11
   81c44:	843d6e04 	addi	r16,r16,-2632
   81c48:	e0bff917 	ldw	r2,-28(fp)
   81c4c:	01400704 	movi	r5,28
   81c50:	1009883a 	mov	r4,r2
   81c54:	0082a480 	call	82a48 <__mulsi3>
   81c58:	1007883a 	mov	r3,r2
   81c5c:	e0bffa17 	ldw	r2,-24(fp)
   81c60:	1885883a 	add	r2,r3,r2
   81c64:	1085883a 	add	r2,r2,r2
   81c68:	1085883a 	add	r2,r2,r2
   81c6c:	8085883a 	add	r2,r16,r2
   81c70:	14400017 	ldw	r17,0(r2)
   81c74:	040002f4 	movhi	r16,11
   81c78:	8404c604 	addi	r16,r16,4888
   81c7c:	e0bff917 	ldw	r2,-28(fp)
   81c80:	01400704 	movi	r5,28
   81c84:	1009883a 	mov	r4,r2
   81c88:	0082a480 	call	82a48 <__mulsi3>
   81c8c:	1007883a 	mov	r3,r2
   81c90:	e0bffa17 	ldw	r2,-24(fp)
   81c94:	1885883a 	add	r2,r3,r2
   81c98:	1085883a 	add	r2,r2,r2
   81c9c:	1085883a 	add	r2,r2,r2
   81ca0:	8085883a 	add	r2,r16,r2
   81ca4:	10c00017 	ldw	r3,0(r2)
   81ca8:	180b883a 	mov	r5,r3
   81cac:	8809883a 	mov	r4,r17
   81cb0:	0082f380 	call	82f38 <__divsf3>
   81cb4:	1007883a 	mov	r3,r2
   81cb8:	1805883a 	mov	r2,r3
   81cbc:	1009883a 	mov	r4,r2
   81cc0:	00861080 	call	86108 <__extendsfdf2>
   81cc4:	1011883a 	mov	r8,r2
   81cc8:	1813883a 	mov	r9,r3
   81ccc:	000d883a 	mov	r6,zero
   81cd0:	01d01c34 	movhi	r7,16496
   81cd4:	39f80004 	addi	r7,r7,-8192
   81cd8:	4009883a 	mov	r4,r8
   81cdc:	480b883a 	mov	r5,r9
   81ce0:	00842a40 	call	842a4 <__divdf3>
   81ce4:	1009883a 	mov	r4,r2
   81ce8:	180b883a 	mov	r5,r3
   81cec:	2005883a 	mov	r2,r4
   81cf0:	2807883a 	mov	r3,r5
   81cf4:	100d883a 	mov	r6,r2
   81cf8:	180f883a 	mov	r7,r3
   81cfc:	0009883a 	mov	r4,zero
   81d00:	014ffc34 	movhi	r5,16368
   81d04:	00856b00 	call	856b0 <__subdf3>
   81d08:	1009883a 	mov	r4,r2
   81d0c:	180b883a 	mov	r5,r3
   81d10:	2005883a 	mov	r2,r4
   81d14:	2807883a 	mov	r3,r5
   81d18:	1009883a 	mov	r4,r2
   81d1c:	180b883a 	mov	r5,r3
   81d20:	00862180 	call	86218 <__truncdfsf2>
   81d24:	1023883a 	mov	r17,r2
   81d28:	040002f4 	movhi	r16,11
   81d2c:	8407e004 	addi	r16,r16,8064
   81d30:	e0bff917 	ldw	r2,-28(fp)
   81d34:	01400704 	movi	r5,28
   81d38:	1009883a 	mov	r4,r2
   81d3c:	0082a480 	call	82a48 <__mulsi3>
   81d40:	1007883a 	mov	r3,r2
   81d44:	e0bffa17 	ldw	r2,-24(fp)
   81d48:	1885883a 	add	r2,r3,r2
   81d4c:	1085883a 	add	r2,r2,r2
   81d50:	1085883a 	add	r2,r2,r2
   81d54:	8085883a 	add	r2,r16,r2
   81d58:	14400015 	stw	r17,0(r2)
		}
		//printf(";\n");
	}

	for(i = 0; i < 28; i++){
		for(j = 0; j < 28; j++){
   81d5c:	e0bffa17 	ldw	r2,-24(fp)
   81d60:	10800044 	addi	r2,r2,1
   81d64:	e0bffa15 	stw	r2,-24(fp)
   81d68:	e0bffa17 	ldw	r2,-24(fp)
   81d6c:	10800710 	cmplti	r2,r2,28
   81d70:	103fb31e 	bne	r2,zero,81c40 <__alt_data_end+0xfffac510>
			//printf("sum_value[%d] = %d.%d | CI = %d\n", tmp_i, (int)(sum_value[tmp_i][tmp_j] * 1.0), ((int)(sum_value[tmp_i][tmp_j] * 1000.0) % 10), (int)capturedImage[i][j]);
		}
		//printf(";\n");
	}

	for(i = 0; i < 28; i++){
   81d74:	e0bff917 	ldw	r2,-28(fp)
   81d78:	10800044 	addi	r2,r2,1
   81d7c:	e0bff915 	stw	r2,-28(fp)
   81d80:	e0bff917 	ldw	r2,-28(fp)
   81d84:	10800710 	cmplti	r2,r2,28
   81d88:	103fab1e 	bne	r2,zero,81c38 <__alt_data_end+0xfffac508>
			//Input_Image[i][j] = sum_value[i][j] / (float)sum_n[i][j] / 255;
			//printf("%d.%d,", (int)(Input_Image[i][j] * 1.0), ((int)(Input_Image[i][j] * 1000.0) % 10));
		}
		//printf(";\n");
	}
	for(j = 0; j < 28; j++)
   81d8c:	e03ffa15 	stw	zero,-24(fp)
   81d90:	00000a06 	br	81dbc <Recognition+0x49c>
		Input_Image[0][j] = 0.0;
   81d94:	008002f4 	movhi	r2,11
   81d98:	1087e004 	addi	r2,r2,8064
   81d9c:	e0fffa17 	ldw	r3,-24(fp)
   81da0:	18c7883a 	add	r3,r3,r3
   81da4:	18c7883a 	add	r3,r3,r3
   81da8:	10c5883a 	add	r2,r2,r3
   81dac:	10000015 	stw	zero,0(r2)
			//Input_Image[i][j] = sum_value[i][j] / (float)sum_n[i][j] / 255;
			//printf("%d.%d,", (int)(Input_Image[i][j] * 1.0), ((int)(Input_Image[i][j] * 1000.0) % 10));
		}
		//printf(";\n");
	}
	for(j = 0; j < 28; j++)
   81db0:	e0bffa17 	ldw	r2,-24(fp)
   81db4:	10800044 	addi	r2,r2,1
   81db8:	e0bffa15 	stw	r2,-24(fp)
   81dbc:	e0bffa17 	ldw	r2,-24(fp)
   81dc0:	10800710 	cmplti	r2,r2,28
   81dc4:	103ff31e 	bne	r2,zero,81d94 <__alt_data_end+0xfffac664>
		Input_Image[0][j] = 0.0;

	// Start calculating
	CNN_MNIST_recognition();
   81dc8:	00807080 	call	80708 <CNN_MNIST_recognition>



	// Display the reliability of the two most possible numbers using the result of softmax
	int tmp2;
	tmp2 = (int)(Softmax[ans] * 100.0);
   81dcc:	d0c6f417 	ldw	r3,7120(gp)
   81dd0:	008002b4 	movhi	r2,10
   81dd4:	109ec404 	addi	r2,r2,31504
   81dd8:	18c7883a 	add	r3,r3,r3
   81ddc:	18c7883a 	add	r3,r3,r3
   81de0:	10c5883a 	add	r2,r2,r3
   81de4:	10c00017 	ldw	r3,0(r2)
   81de8:	1809883a 	mov	r4,r3
   81dec:	00861080 	call	86108 <__extendsfdf2>
   81df0:	1011883a 	mov	r8,r2
   81df4:	1813883a 	mov	r9,r3
   81df8:	000d883a 	mov	r6,zero
   81dfc:	01d01674 	movhi	r7,16473
   81e00:	4009883a 	mov	r4,r8
   81e04:	480b883a 	mov	r5,r9
   81e08:	0084e440 	call	84e44 <__muldf3>
   81e0c:	1009883a 	mov	r4,r2
   81e10:	180b883a 	mov	r5,r3
   81e14:	2005883a 	mov	r2,r4
   81e18:	2807883a 	mov	r3,r5
   81e1c:	1009883a 	mov	r4,r2
   81e20:	180b883a 	mov	r5,r3
   81e24:	0085fac0 	call	85fac <__fixdfsi>
   81e28:	e0bffd15 	stw	r2,-12(fp)
	str_pro[0] = 48 + ans;
   81e2c:	d086f417 	ldw	r2,7120(gp)
   81e30:	10800c04 	addi	r2,r2,48
   81e34:	1007883a 	mov	r3,r2
   81e38:	008002b4 	movhi	r2,10
   81e3c:	10b0fb04 	addi	r2,r2,-15380
   81e40:	10c00005 	stb	r3,0(r2)
	str_pro[2] = 48 + (tmp2 / 100);
   81e44:	e0bffd17 	ldw	r2,-12(fp)
   81e48:	01401904 	movi	r5,100
   81e4c:	1009883a 	mov	r4,r2
   81e50:	00828940 	call	82894 <__divsi3>
   81e54:	10800c04 	addi	r2,r2,48
   81e58:	1007883a 	mov	r3,r2
   81e5c:	008002b4 	movhi	r2,10
   81e60:	10b0fb04 	addi	r2,r2,-15380
   81e64:	10c00085 	stb	r3,2(r2)
	str_pro[3] = 48 + (tmp2 / 10 % 10);
   81e68:	e0bffd17 	ldw	r2,-12(fp)
   81e6c:	01400284 	movi	r5,10
   81e70:	1009883a 	mov	r4,r2
   81e74:	00828940 	call	82894 <__divsi3>
   81e78:	01400284 	movi	r5,10
   81e7c:	1009883a 	mov	r4,r2
   81e80:	00829180 	call	82918 <__modsi3>
   81e84:	10800c04 	addi	r2,r2,48
   81e88:	1007883a 	mov	r3,r2
   81e8c:	008002b4 	movhi	r2,10
   81e90:	10b0fb04 	addi	r2,r2,-15380
   81e94:	10c000c5 	stb	r3,3(r2)
	str_pro[4] = 48 + (tmp2 % 10);
   81e98:	e0bffd17 	ldw	r2,-12(fp)
   81e9c:	01400284 	movi	r5,10
   81ea0:	1009883a 	mov	r4,r2
   81ea4:	00829180 	call	82918 <__modsi3>
   81ea8:	10800c04 	addi	r2,r2,48
   81eac:	1007883a 	mov	r3,r2
   81eb0:	008002b4 	movhi	r2,10
   81eb4:	10b0fb04 	addi	r2,r2,-15380
   81eb8:	10c00105 	stb	r3,4(r2)

	tmp2 = (int)(Softmax[subop] * 100.0);
   81ebc:	d0c6f517 	ldw	r3,7124(gp)
   81ec0:	008002b4 	movhi	r2,10
   81ec4:	109ec404 	addi	r2,r2,31504
   81ec8:	18c7883a 	add	r3,r3,r3
   81ecc:	18c7883a 	add	r3,r3,r3
   81ed0:	10c5883a 	add	r2,r2,r3
   81ed4:	10c00017 	ldw	r3,0(r2)
   81ed8:	1809883a 	mov	r4,r3
   81edc:	00861080 	call	86108 <__extendsfdf2>
   81ee0:	1011883a 	mov	r8,r2
   81ee4:	1813883a 	mov	r9,r3
   81ee8:	000d883a 	mov	r6,zero
   81eec:	01d01674 	movhi	r7,16473
   81ef0:	4009883a 	mov	r4,r8
   81ef4:	480b883a 	mov	r5,r9
   81ef8:	0084e440 	call	84e44 <__muldf3>
   81efc:	1009883a 	mov	r4,r2
   81f00:	180b883a 	mov	r5,r3
   81f04:	2005883a 	mov	r2,r4
   81f08:	2807883a 	mov	r3,r5
   81f0c:	1009883a 	mov	r4,r2
   81f10:	180b883a 	mov	r5,r3
   81f14:	0085fac0 	call	85fac <__fixdfsi>
   81f18:	e0bffd15 	stw	r2,-12(fp)
	str_pro[7] = 48 + subop;
   81f1c:	d086f517 	ldw	r2,7124(gp)
   81f20:	10800c04 	addi	r2,r2,48
   81f24:	1007883a 	mov	r3,r2
   81f28:	008002b4 	movhi	r2,10
   81f2c:	10b0fb04 	addi	r2,r2,-15380
   81f30:	10c001c5 	stb	r3,7(r2)
	str_pro[9] = 48 + (tmp2 / 100);
   81f34:	e0bffd17 	ldw	r2,-12(fp)
   81f38:	01401904 	movi	r5,100
   81f3c:	1009883a 	mov	r4,r2
   81f40:	00828940 	call	82894 <__divsi3>
   81f44:	10800c04 	addi	r2,r2,48
   81f48:	1007883a 	mov	r3,r2
   81f4c:	008002b4 	movhi	r2,10
   81f50:	10b0fb04 	addi	r2,r2,-15380
   81f54:	10c00245 	stb	r3,9(r2)
	str_pro[10] = 48 + (tmp2 / 10 % 10);
   81f58:	e0bffd17 	ldw	r2,-12(fp)
   81f5c:	01400284 	movi	r5,10
   81f60:	1009883a 	mov	r4,r2
   81f64:	00828940 	call	82894 <__divsi3>
   81f68:	01400284 	movi	r5,10
   81f6c:	1009883a 	mov	r4,r2
   81f70:	00829180 	call	82918 <__modsi3>
   81f74:	10800c04 	addi	r2,r2,48
   81f78:	1007883a 	mov	r3,r2
   81f7c:	008002b4 	movhi	r2,10
   81f80:	10b0fb04 	addi	r2,r2,-15380
   81f84:	10c00285 	stb	r3,10(r2)
	str_pro[11] = 48 + (tmp2 % 10);
   81f88:	e0bffd17 	ldw	r2,-12(fp)
   81f8c:	01400284 	movi	r5,10
   81f90:	1009883a 	mov	r4,r2
   81f94:	00829180 	call	82918 <__modsi3>
   81f98:	10800c04 	addi	r2,r2,48
   81f9c:	1007883a 	mov	r3,r2
   81fa0:	008002b4 	movhi	r2,10
   81fa4:	10b0fb04 	addi	r2,r2,-15380
   81fa8:	10c002c5 	stb	r3,11(r2)
	//LCD_Disp(2, 0, str_pro, 13);

	// hahaha
	if((int)(Softmax[ans] * 100) < 65) {
   81fac:	d0c6f417 	ldw	r3,7120(gp)
   81fb0:	008002b4 	movhi	r2,10
   81fb4:	109ec404 	addi	r2,r2,31504
   81fb8:	18c7883a 	add	r3,r3,r3
   81fbc:	18c7883a 	add	r3,r3,r3
   81fc0:	10c5883a 	add	r2,r2,r3
   81fc4:	10c00017 	ldw	r3,0(r2)
   81fc8:	0150b234 	movhi	r5,17096
   81fcc:	1809883a 	mov	r4,r3
   81fd0:	00834340 	call	83434 <__mulsf3>
   81fd4:	1007883a 	mov	r3,r2
   81fd8:	1805883a 	mov	r2,r3
   81fdc:	1009883a 	mov	r4,r2
   81fe0:	00838640 	call	83864 <__fixsfsi>
		//LCD_Disp(2, 0, "Duo Lao A      ", 15);
		//*(pUser_SEG8) = 0xffff0000;
	}

	// When recognizing work is just finished, only 'clear screen' button is enabled.
	recognize_flag = 1;
   81fe4:	00800044 	movi	r2,1
   81fe8:	d086f605 	stb	r2,7128(gp)
}
   81fec:	0001883a 	nop
   81ff0:	e6fffe04 	addi	sp,fp,-8
   81ff4:	dfc00317 	ldw	ra,12(sp)
   81ff8:	df000217 	ldw	fp,8(sp)
   81ffc:	dc400117 	ldw	r17,4(sp)
   82000:	dc000017 	ldw	r16,0(sp)
   82004:	dec00404 	addi	sp,sp,16
   82008:	f800283a 	ret

0008200c <main>:

int main() {
   8200c:	defff404 	addi	sp,sp,-48
   82010:	dfc00b15 	stw	ra,44(sp)
   82014:	df000a15 	stw	fp,40(sp)
   82018:	df000a04 	addi	fp,sp,40
	printf("Welcome to MNIST classification. Turn on SW[2] to start\n(Leave ON to repeat // Turn OFF otherwise)\n");
   8201c:	01000274 	movhi	r4,9
   82020:	210fe304 	addi	r4,r4,16268
   82024:	00884c00 	call	884c0 <puts>
	int i, j, sw, count=0;
   82028:	e03ff815 	stw	zero,-32(fp)
	unsigned char pixel;

	FILE *fp;
	char s[] = "Hello\nWorld!";
   8202c:	00801204 	movi	r2,72
   82030:	e0bffc45 	stb	r2,-15(fp)
   82034:	00801944 	movi	r2,101
   82038:	e0bffc85 	stb	r2,-14(fp)
   8203c:	00801b04 	movi	r2,108
   82040:	e0bffcc5 	stb	r2,-13(fp)
   82044:	00801b04 	movi	r2,108
   82048:	e0bffd05 	stb	r2,-12(fp)
   8204c:	00801bc4 	movi	r2,111
   82050:	e0bffd45 	stb	r2,-11(fp)
   82054:	00800284 	movi	r2,10
   82058:	e0bffd85 	stb	r2,-10(fp)
   8205c:	008015c4 	movi	r2,87
   82060:	e0bffdc5 	stb	r2,-9(fp)
   82064:	00801bc4 	movi	r2,111
   82068:	e0bffe05 	stb	r2,-8(fp)
   8206c:	00801c84 	movi	r2,114
   82070:	e0bffe45 	stb	r2,-7(fp)
   82074:	00801b04 	movi	r2,108
   82078:	e0bffe85 	stb	r2,-6(fp)
   8207c:	00801904 	movi	r2,100
   82080:	e0bffec5 	stb	r2,-5(fp)
   82084:	00800844 	movi	r2,33
   82088:	e0bfff05 	stb	r2,-4(fp)
   8208c:	e03fff45 	stb	zero,-3(fp)
	alt_up_character_lcd_dev * char_lcd_dev;
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/lcd_0");
   82090:	01000274 	movhi	r4,9
   82094:	210ffc04 	addi	r4,r4,16368
   82098:	0092bf40 	call	92bf4 <alt_up_character_lcd_open_dev>
   8209c:	e0bff915 	stw	r2,-28(fp)


	while(1) {

		sw = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   820a0:	00800434 	movhi	r2,16
   820a4:	10840004 	addi	r2,r2,4096
   820a8:	10800037 	ldwio	r2,0(r2)
   820ac:	e0bffa15 	stw	r2,-24(fp)

		if (sw==4){
   820b0:	e0bffa17 	ldw	r2,-24(fp)
   820b4:	10800118 	cmpnei	r2,r2,4
   820b8:	103ff91e 	bne	r2,zero,820a0 <__alt_data_end+0xfffac970>
			fp = fopen(LCD_0_NAME, "w");
   820bc:	01400274 	movhi	r5,9
   820c0:	294fff04 	addi	r5,r5,16380
   820c4:	01000274 	movhi	r4,9
   820c8:	210ffc04 	addi	r4,r4,16368
   820cc:	0086c840 	call	86c84 <fopen>
   820d0:	e0bffb15 	stw	r2,-20(fp)
			for(i =0; i < 64; i++)
   820d4:	e03ff615 	stw	zero,-40(fp)
   820d8:	00001f06 	br	82158 <main+0x14c>
			  {
				  for(j=0; j < 64; j++)
   820dc:	e03ff715 	stw	zero,-36(fp)
   820e0:	00001706 	br	82140 <main+0x134>
				  {
					  IOWR_ALTERA_AVALON_PIO_DATA(READ_ADDRESS_BASE, count & 0xFFFFFFFFFFFF);
   820e4:	00800434 	movhi	r2,16
   820e8:	10840404 	addi	r2,r2,4112
   820ec:	e0fff817 	ldw	r3,-32(fp)
   820f0:	10c00035 	stwio	r3,0(r2)

					  pixel = IORD_ALTERA_AVALON_PIO_DATA(PIXEL_BASE);
   820f4:	00800434 	movhi	r2,16
   820f8:	10840804 	addi	r2,r2,4128
   820fc:	10800037 	ldwio	r2,0(r2)
   82100:	e0bffc05 	stb	r2,-16(fp)

					  capturedImage[i][j]= pixel;
   82104:	008002f4 	movhi	r2,11
   82108:	1080c604 	addi	r2,r2,792
   8210c:	e0fff617 	ldw	r3,-40(fp)
   82110:	180691ba 	slli	r3,r3,6
   82114:	10c7883a 	add	r3,r2,r3
   82118:	e0bff717 	ldw	r2,-36(fp)
   8211c:	1885883a 	add	r2,r3,r2
   82120:	e0fffc03 	ldbu	r3,-16(fp)
   82124:	10c00005 	stb	r3,0(r2)

					  count++;
   82128:	e0bff817 	ldw	r2,-32(fp)
   8212c:	10800044 	addi	r2,r2,1
   82130:	e0bff815 	stw	r2,-32(fp)

		if (sw==4){
			fp = fopen(LCD_0_NAME, "w");
			for(i =0; i < 64; i++)
			  {
				  for(j=0; j < 64; j++)
   82134:	e0bff717 	ldw	r2,-36(fp)
   82138:	10800044 	addi	r2,r2,1
   8213c:	e0bff715 	stw	r2,-36(fp)
   82140:	e0bff717 	ldw	r2,-36(fp)
   82144:	10801010 	cmplti	r2,r2,64
   82148:	103fe61e 	bne	r2,zero,820e4 <__alt_data_end+0xfffac9b4>

		sw = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);

		if (sw==4){
			fp = fopen(LCD_0_NAME, "w");
			for(i =0; i < 64; i++)
   8214c:	e0bff617 	ldw	r2,-40(fp)
   82150:	10800044 	addi	r2,r2,1
   82154:	e0bff615 	stw	r2,-40(fp)
   82158:	e0bff617 	ldw	r2,-40(fp)
   8215c:	10801010 	cmplti	r2,r2,64
   82160:	103fde1e 	bne	r2,zero,820dc <__alt_data_end+0xfffac9ac>
					  capturedImage[i][j]= pixel;

					  count++;
				  }
			  }
			printf("\nStarting Recognition: Please standby...\n");
   82164:	01000274 	movhi	r4,9
   82168:	21100004 	addi	r4,r4,16384
   8216c:	00884c00 	call	884c0 <puts>
			Recognition();
   82170:	00819200 	call	81920 <Recognition>

			if(fp){
   82174:	e0bffb17 	ldw	r2,-20(fp)
   82178:	10001626 	beq	r2,zero,821d4 <main+0x1c8>
				//fwrite("", strlen(""), 1, fp);
				str_ans[8] = 48 + ans;
   8217c:	d086f417 	ldw	r2,7120(gp)
   82180:	10800c04 	addi	r2,r2,48
   82184:	1007883a 	mov	r3,r2
   82188:	008002b4 	movhi	r2,10
   8218c:	10b0f804 	addi	r2,r2,-15392
   82190:	10c00205 	stb	r3,8(r2)
				fwrite(str_ans, strlen(str_ans), 1, fp);
   82194:	010002b4 	movhi	r4,10
   82198:	2130f804 	addi	r4,r4,-15392
   8219c:	00888540 	call	88854 <strlen>
   821a0:	e1fffb17 	ldw	r7,-20(fp)
   821a4:	01800044 	movi	r6,1
   821a8:	100b883a 	mov	r5,r2
   821ac:	010002b4 	movhi	r4,10
   821b0:	2130f804 	addi	r4,r4,-15392
   821b4:	00878100 	call	87810 <fwrite>
				fclose(fp);
   821b8:	e13ffb17 	ldw	r4,-20(fp)
   821bc:	00865240 	call	86524 <fclose>
				alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
   821c0:	000d883a 	mov	r6,zero
   821c4:	000b883a 	mov	r5,zero
   821c8:	e13ff917 	ldw	r4,-28(fp)
   821cc:	0092d740 	call	92d74 <alt_up_character_lcd_set_cursor_pos>
   821d0:	00000306 	br	821e0 <main+0x1d4>
			}
			else
				printf("File could not be open\n");
   821d4:	01000274 	movhi	r4,9
   821d8:	21100b04 	addi	r4,r4,16428
   821dc:	00884c00 	call	884c0 <puts>
			printf("Answer = %d\n", ans);
   821e0:	d086f417 	ldw	r2,7120(gp)
   821e4:	100b883a 	mov	r5,r2
   821e8:	01000274 	movhi	r4,9
   821ec:	21101104 	addi	r4,r4,16452
   821f0:	00883c40 	call	883c4 <printf>
		  }

	}
   821f4:	003faa06 	br	820a0 <__alt_data_end+0xfffac970>

000821f8 <exp>:
   821f8:	defff104 	addi	sp,sp,-60
   821fc:	dd000d15 	stw	r20,52(sp)
   82200:	050002b4 	movhi	r20,10
   82204:	dcc00c15 	stw	r19,48(sp)
   82208:	dc800b15 	stw	r18,44(sp)
   8220c:	dc400a15 	stw	r17,40(sp)
   82210:	dc000915 	stw	r16,36(sp)
   82214:	dfc00e15 	stw	ra,56(sp)
   82218:	a537b604 	addi	r20,r20,-8488
   8221c:	2027883a 	mov	r19,r4
   82220:	2825883a 	mov	r18,r5
   82224:	00823880 	call	82388 <__ieee754_exp>
   82228:	1821883a 	mov	r16,r3
   8222c:	a0c00017 	ldw	r3,0(r20)
   82230:	1023883a 	mov	r17,r2
   82234:	00bfffc4 	movi	r2,-1
   82238:	18802e26 	beq	r3,r2,822f4 <exp+0xfc>
   8223c:	9809883a 	mov	r4,r19
   82240:	900b883a 	mov	r5,r18
   82244:	00828700 	call	82870 <finite>
   82248:	10002a26 	beq	r2,zero,822f4 <exp+0xfc>
   8224c:	01bfbeb4 	movhi	r6,65274
   82250:	01d021b4 	movhi	r7,16518
   82254:	318e7bc4 	addi	r6,r6,14831
   82258:	39cb9084 	addi	r7,r7,11842
   8225c:	9809883a 	mov	r4,r19
   82260:	900b883a 	mov	r5,r18
   82264:	0084c740 	call	84c74 <__gedf2>
   82268:	00802c16 	blt	zero,r2,8231c <exp+0x124>
   8226c:	01b54b74 	movhi	r6,54573
   82270:	01f021f4 	movhi	r7,49287
   82274:	318c1444 	addi	r6,r6,12369
   82278:	39d24404 	addi	r7,r7,18704
   8227c:	9809883a 	mov	r4,r19
   82280:	900b883a 	mov	r5,r18
   82284:	0084d500 	call	84d50 <__ledf2>
   82288:	10001a0e 	bge	r2,zero,822f4 <exp+0xfc>
   8228c:	00800104 	movi	r2,4
   82290:	d8800015 	stw	r2,0(sp)
   82294:	a0c00017 	ldw	r3,0(r20)
   82298:	00800274 	movhi	r2,9
   8229c:	10901504 	addi	r2,r2,16468
   822a0:	d8800115 	stw	r2,4(sp)
   822a4:	d8000815 	stw	zero,32(sp)
   822a8:	dcc00415 	stw	r19,16(sp)
   822ac:	dc800515 	stw	r18,20(sp)
   822b0:	dcc00215 	stw	r19,8(sp)
   822b4:	dc800315 	stw	r18,12(sp)
   822b8:	d8000615 	stw	zero,24(sp)
   822bc:	d8000715 	stw	zero,28(sp)
   822c0:	00800084 	movi	r2,2
   822c4:	18802c26 	beq	r3,r2,82378 <exp+0x180>
   822c8:	d809883a 	mov	r4,sp
   822cc:	008288c0 	call	8288c <matherr>
   822d0:	10002926 	beq	r2,zero,82378 <exp+0x180>
   822d4:	d8800817 	ldw	r2,32(sp)
   822d8:	10000326 	beq	r2,zero,822e8 <exp+0xf0>
   822dc:	00864240 	call	86424 <__errno>
   822e0:	d8c00817 	ldw	r3,32(sp)
   822e4:	10c00015 	stw	r3,0(r2)
   822e8:	d8800617 	ldw	r2,24(sp)
   822ec:	d8c00717 	ldw	r3,28(sp)
   822f0:	00000206 	br	822fc <exp+0x104>
   822f4:	8805883a 	mov	r2,r17
   822f8:	8007883a 	mov	r3,r16
   822fc:	dfc00e17 	ldw	ra,56(sp)
   82300:	dd000d17 	ldw	r20,52(sp)
   82304:	dcc00c17 	ldw	r19,48(sp)
   82308:	dc800b17 	ldw	r18,44(sp)
   8230c:	dc400a17 	ldw	r17,40(sp)
   82310:	dc000917 	ldw	r16,36(sp)
   82314:	dec00f04 	addi	sp,sp,60
   82318:	f800283a 	ret
   8231c:	00c000c4 	movi	r3,3
   82320:	d8c00015 	stw	r3,0(sp)
   82324:	a0800017 	ldw	r2,0(r20)
   82328:	00c00274 	movhi	r3,9
   8232c:	18d01504 	addi	r3,r3,16468
   82330:	d8c00115 	stw	r3,4(sp)
   82334:	d8000815 	stw	zero,32(sp)
   82338:	dcc00415 	stw	r19,16(sp)
   8233c:	dc800515 	stw	r18,20(sp)
   82340:	dcc00215 	stw	r19,8(sp)
   82344:	dc800315 	stw	r18,12(sp)
   82348:	1000061e 	bne	r2,zero,82364 <exp+0x16c>
   8234c:	00b80034 	movhi	r2,57344
   82350:	d8800615 	stw	r2,24(sp)
   82354:	0091fc34 	movhi	r2,18416
   82358:	10bfffc4 	addi	r2,r2,-1
   8235c:	d8800715 	stw	r2,28(sp)
   82360:	003fd906 	br	822c8 <__alt_data_end+0xfffacb98>
   82364:	00dffc34 	movhi	r3,32752
   82368:	d8c00715 	stw	r3,28(sp)
   8236c:	d8000615 	stw	zero,24(sp)
   82370:	00c00084 	movi	r3,2
   82374:	10ffd41e 	bne	r2,r3,822c8 <__alt_data_end+0xfffacb98>
   82378:	00864240 	call	86424 <__errno>
   8237c:	00c00884 	movi	r3,34
   82380:	10c00015 	stw	r3,0(r2)
   82384:	003fd306 	br	822d4 <__alt_data_end+0xfffacba4>

00082388 <__ieee754_exp>:
   82388:	00e00034 	movhi	r3,32768
   8238c:	defff604 	addi	sp,sp,-40
   82390:	18ffffc4 	addi	r3,r3,-1
   82394:	009021b4 	movhi	r2,16518
   82398:	ddc00715 	stw	r23,28(sp)
   8239c:	dc400115 	stw	r17,4(sp)
   823a0:	dc000015 	stw	r16,0(sp)
   823a4:	dfc00915 	stw	ra,36(sp)
   823a8:	df000815 	stw	fp,32(sp)
   823ac:	dd800615 	stw	r22,24(sp)
   823b0:	dd400515 	stw	r21,20(sp)
   823b4:	dd000415 	stw	r20,16(sp)
   823b8:	dcc00315 	stw	r19,12(sp)
   823bc:	dc800215 	stw	r18,8(sp)
   823c0:	28c6703a 	and	r3,r5,r3
   823c4:	108b9044 	addi	r2,r2,11841
   823c8:	2821883a 	mov	r16,r5
   823cc:	2023883a 	mov	r17,r4
   823d0:	282ed7fa 	srli	r23,r5,31
   823d4:	10c00c2e 	bgeu	r2,r3,82408 <__ieee754_exp+0x80>
   823d8:	009ffc34 	movhi	r2,32752
   823dc:	10bfffc4 	addi	r2,r2,-1
   823e0:	10c08b2e 	bgeu	r2,r3,82610 <__ieee754_exp+0x288>
   823e4:	00800434 	movhi	r2,16
   823e8:	10bfffc4 	addi	r2,r2,-1
   823ec:	2884703a 	and	r2,r5,r2
   823f0:	1104b03a 	or	r2,r2,r4
   823f4:	1000fb1e 	bne	r2,zero,827e4 <__ieee754_exp+0x45c>
   823f8:	b8011a1e 	bne	r23,zero,82864 <__ieee754_exp+0x4dc>
   823fc:	2005883a 	mov	r2,r4
   82400:	2807883a 	mov	r3,r5
   82404:	00007606 	br	825e0 <__ieee754_exp+0x258>
   82408:	008ff5b4 	movhi	r2,16342
   8240c:	108b9084 	addi	r2,r2,11842
   82410:	10c0c336 	bltu	r2,r3,82720 <__ieee754_exp+0x398>
   82414:	008f8c34 	movhi	r2,15920
   82418:	10bfffc4 	addi	r2,r2,-1
   8241c:	10c0d52e 	bgeu	r2,r3,82774 <__ieee754_exp+0x3ec>
   82420:	0025883a 	mov	r18,zero
   82424:	880d883a 	mov	r6,r17
   82428:	800f883a 	mov	r7,r16
   8242c:	8809883a 	mov	r4,r17
   82430:	800b883a 	mov	r5,r16
   82434:	0084e440 	call	84e44 <__muldf3>
   82438:	019caff4 	movhi	r6,29375
   8243c:	01cf99b4 	movhi	r7,15974
   82440:	31a93404 	addi	r6,r6,-23344
   82444:	39cdda44 	addi	r7,r7,14185
   82448:	1009883a 	mov	r4,r2
   8244c:	180b883a 	mov	r5,r3
   82450:	1039883a 	mov	fp,r2
   82454:	182f883a 	mov	r23,r3
   82458:	0084e440 	call	84e44 <__muldf3>
   8245c:	01b174b4 	movhi	r6,50642
   82460:	01cfaf34 	movhi	r7,16060
   82464:	319afc44 	addi	r6,r6,27633
   82468:	39ef5044 	addi	r7,r7,-17087
   8246c:	1009883a 	mov	r4,r2
   82470:	180b883a 	mov	r5,r3
   82474:	00856b00 	call	856b0 <__subdf3>
   82478:	e00d883a 	mov	r6,fp
   8247c:	b80f883a 	mov	r7,r23
   82480:	1009883a 	mov	r4,r2
   82484:	180b883a 	mov	r5,r3
   82488:	0084e440 	call	84e44 <__muldf3>
   8248c:	01abc9b4 	movhi	r6,44838
   82490:	01cfc474 	movhi	r7,16145
   82494:	31b78b04 	addi	r6,r6,-8660
   82498:	39d59a84 	addi	r7,r7,22122
   8249c:	1009883a 	mov	r4,r2
   824a0:	180b883a 	mov	r5,r3
   824a4:	00839f80 	call	839f8 <__adddf3>
   824a8:	e00d883a 	mov	r6,fp
   824ac:	b80f883a 	mov	r7,r23
   824b0:	1009883a 	mov	r4,r2
   824b4:	180b883a 	mov	r5,r3
   824b8:	0084e440 	call	84e44 <__muldf3>
   824bc:	0185aff4 	movhi	r6,5823
   824c0:	01cfd9f4 	movhi	r7,16231
   824c4:	31af64c4 	addi	r6,r6,-17005
   824c8:	39f05b04 	addi	r7,r7,-16020
   824cc:	1009883a 	mov	r4,r2
   824d0:	180b883a 	mov	r5,r3
   824d4:	00856b00 	call	856b0 <__subdf3>
   824d8:	e00d883a 	mov	r6,fp
   824dc:	b80f883a 	mov	r7,r23
   824e0:	1009883a 	mov	r4,r2
   824e4:	180b883a 	mov	r5,r3
   824e8:	0084e440 	call	84e44 <__muldf3>
   824ec:	01955574 	movhi	r6,21845
   824f0:	01cff174 	movhi	r7,16325
   824f4:	31954f84 	addi	r6,r6,21822
   824f8:	39d55544 	addi	r7,r7,21845
   824fc:	1009883a 	mov	r4,r2
   82500:	180b883a 	mov	r5,r3
   82504:	00839f80 	call	839f8 <__adddf3>
   82508:	e00d883a 	mov	r6,fp
   8250c:	b80f883a 	mov	r7,r23
   82510:	1009883a 	mov	r4,r2
   82514:	180b883a 	mov	r5,r3
   82518:	0084e440 	call	84e44 <__muldf3>
   8251c:	100d883a 	mov	r6,r2
   82520:	180f883a 	mov	r7,r3
   82524:	8809883a 	mov	r4,r17
   82528:	800b883a 	mov	r5,r16
   8252c:	00856b00 	call	856b0 <__subdf3>
   82530:	1039883a 	mov	fp,r2
   82534:	182f883a 	mov	r23,r3
   82538:	9000ae26 	beq	r18,zero,827f4 <__ieee754_exp+0x46c>
   8253c:	8809883a 	mov	r4,r17
   82540:	800b883a 	mov	r5,r16
   82544:	100d883a 	mov	r6,r2
   82548:	180f883a 	mov	r7,r3
   8254c:	0084e440 	call	84e44 <__muldf3>
   82550:	e00d883a 	mov	r6,fp
   82554:	b80f883a 	mov	r7,r23
   82558:	0009883a 	mov	r4,zero
   8255c:	01500034 	movhi	r5,16384
   82560:	1023883a 	mov	r17,r2
   82564:	1821883a 	mov	r16,r3
   82568:	00856b00 	call	856b0 <__subdf3>
   8256c:	100d883a 	mov	r6,r2
   82570:	180f883a 	mov	r7,r3
   82574:	8809883a 	mov	r4,r17
   82578:	800b883a 	mov	r5,r16
   8257c:	00842a40 	call	842a4 <__divdf3>
   82580:	100d883a 	mov	r6,r2
   82584:	180f883a 	mov	r7,r3
   82588:	b009883a 	mov	r4,r22
   8258c:	a80b883a 	mov	r5,r21
   82590:	00856b00 	call	856b0 <__subdf3>
   82594:	a00d883a 	mov	r6,r20
   82598:	980f883a 	mov	r7,r19
   8259c:	1009883a 	mov	r4,r2
   825a0:	180b883a 	mov	r5,r3
   825a4:	00856b00 	call	856b0 <__subdf3>
   825a8:	0009883a 	mov	r4,zero
   825ac:	100d883a 	mov	r6,r2
   825b0:	180f883a 	mov	r7,r3
   825b4:	014ffc34 	movhi	r5,16368
   825b8:	00856b00 	call	856b0 <__subdf3>
   825bc:	013f00c4 	movi	r4,-1021
   825c0:	91007d0e 	bge	r18,r4,827b8 <__ieee754_exp+0x430>
   825c4:	9140fa04 	addi	r5,r18,1000
   825c8:	280a953a 	slli	r5,r5,20
   825cc:	000d883a 	mov	r6,zero
   825d0:	01c05c34 	movhi	r7,368
   825d4:	1009883a 	mov	r4,r2
   825d8:	28cb883a 	add	r5,r5,r3
   825dc:	0084e440 	call	84e44 <__muldf3>
   825e0:	dfc00917 	ldw	ra,36(sp)
   825e4:	df000817 	ldw	fp,32(sp)
   825e8:	ddc00717 	ldw	r23,28(sp)
   825ec:	dd800617 	ldw	r22,24(sp)
   825f0:	dd400517 	ldw	r21,20(sp)
   825f4:	dd000417 	ldw	r20,16(sp)
   825f8:	dcc00317 	ldw	r19,12(sp)
   825fc:	dc800217 	ldw	r18,8(sp)
   82600:	dc400117 	ldw	r17,4(sp)
   82604:	dc000017 	ldw	r16,0(sp)
   82608:	dec00a04 	addi	sp,sp,40
   8260c:	f800283a 	ret
   82610:	01bfbeb4 	movhi	r6,65274
   82614:	01d021b4 	movhi	r7,16518
   82618:	318e7bc4 	addi	r6,r6,14831
   8261c:	39cb9084 	addi	r7,r7,11842
   82620:	0084c740 	call	84c74 <__gedf2>
   82624:	00806716 	blt	zero,r2,827c4 <__ieee754_exp+0x43c>
   82628:	01b54b74 	movhi	r6,54573
   8262c:	01f021f4 	movhi	r7,49287
   82630:	318c1444 	addi	r6,r6,12369
   82634:	39d24404 	addi	r7,r7,18704
   82638:	8809883a 	mov	r4,r17
   8263c:	800b883a 	mov	r5,r16
   82640:	0084d500 	call	84d50 <__ledf2>
   82644:	10008716 	blt	r2,zero,82864 <__ieee754_exp+0x4dc>
   82648:	b82490fa 	slli	r18,r23,3
   8264c:	01994b34 	movhi	r6,25900
   82650:	01cffdf4 	movhi	r7,16375
   82654:	05c00274 	movhi	r23,9
   82658:	31a0bf84 	addi	r6,r6,-32002
   8265c:	39c551c4 	addi	r7,r7,5447
   82660:	8809883a 	mov	r4,r17
   82664:	800b883a 	mov	r5,r16
   82668:	bdd01e04 	addi	r23,r23,16504
   8266c:	0084e440 	call	84e44 <__muldf3>
   82670:	bca5883a 	add	r18,r23,r18
   82674:	91800017 	ldw	r6,0(r18)
   82678:	91c00117 	ldw	r7,4(r18)
   8267c:	1009883a 	mov	r4,r2
   82680:	180b883a 	mov	r5,r3
   82684:	00839f80 	call	839f8 <__adddf3>
   82688:	180b883a 	mov	r5,r3
   8268c:	1009883a 	mov	r4,r2
   82690:	0085fac0 	call	85fac <__fixdfsi>
   82694:	1009883a 	mov	r4,r2
   82698:	1025883a 	mov	r18,r2
   8269c:	008602c0 	call	8602c <__floatsidf>
   826a0:	01cff9b4 	movhi	r7,16358
   826a4:	39cb9084 	addi	r7,r7,11842
   826a8:	01bfb834 	movhi	r6,65248
   826ac:	1009883a 	mov	r4,r2
   826b0:	180b883a 	mov	r5,r3
   826b4:	102d883a 	mov	r22,r2
   826b8:	182b883a 	mov	r21,r3
   826bc:	0084e440 	call	84e44 <__muldf3>
   826c0:	100d883a 	mov	r6,r2
   826c4:	180f883a 	mov	r7,r3
   826c8:	8809883a 	mov	r4,r17
   826cc:	800b883a 	mov	r5,r16
   826d0:	00856b00 	call	856b0 <__subdf3>
   826d4:	018d5e74 	movhi	r6,13689
   826d8:	01cf7ab4 	movhi	r7,15850
   826dc:	b009883a 	mov	r4,r22
   826e0:	a80b883a 	mov	r5,r21
   826e4:	318f1d84 	addi	r6,r6,15478
   826e8:	39ce7bc4 	addi	r7,r7,14831
   826ec:	1029883a 	mov	r20,r2
   826f0:	1827883a 	mov	r19,r3
   826f4:	0084e440 	call	84e44 <__muldf3>
   826f8:	102d883a 	mov	r22,r2
   826fc:	182b883a 	mov	r21,r3
   82700:	b00d883a 	mov	r6,r22
   82704:	a80f883a 	mov	r7,r21
   82708:	a009883a 	mov	r4,r20
   8270c:	980b883a 	mov	r5,r19
   82710:	00856b00 	call	856b0 <__subdf3>
   82714:	1023883a 	mov	r17,r2
   82718:	1821883a 	mov	r16,r3
   8271c:	003f4106 	br	82424 <__alt_data_end+0xfffaccf4>
   82720:	008ffc74 	movhi	r2,16369
   82724:	10a8ac44 	addi	r2,r2,-23887
   82728:	10ffc736 	bltu	r2,r3,82648 <__alt_data_end+0xfffacf18>
   8272c:	b82290fa 	slli	r17,r23,3
   82730:	00800274 	movhi	r2,9
   82734:	10901a04 	addi	r2,r2,16488
   82738:	1445883a 	add	r2,r2,r17
   8273c:	11800017 	ldw	r6,0(r2)
   82740:	11c00117 	ldw	r7,4(r2)
   82744:	04800044 	movi	r18,1
   82748:	95e5c83a 	sub	r18,r18,r23
   8274c:	00856b00 	call	856b0 <__subdf3>
   82750:	1029883a 	mov	r20,r2
   82754:	00800274 	movhi	r2,9
   82758:	10901604 	addi	r2,r2,16472
   8275c:	1463883a 	add	r17,r2,r17
   82760:	1827883a 	mov	r19,r3
   82764:	8d800017 	ldw	r22,0(r17)
   82768:	8d400117 	ldw	r21,4(r17)
   8276c:	95e5c83a 	sub	r18,r18,r23
   82770:	003fe306 	br	82700 <__alt_data_end+0xfffacfd0>
   82774:	01a20034 	movhi	r6,34816
   82778:	01df8e34 	movhi	r7,32312
   8277c:	319d6704 	addi	r6,r6,30108
   82780:	39f90f04 	addi	r7,r7,-7108
   82784:	00839f80 	call	839f8 <__adddf3>
   82788:	000d883a 	mov	r6,zero
   8278c:	01cffc34 	movhi	r7,16368
   82790:	1009883a 	mov	r4,r2
   82794:	180b883a 	mov	r5,r3
   82798:	0084c740 	call	84c74 <__gedf2>
   8279c:	00bf200e 	bge	zero,r2,82420 <__alt_data_end+0xfffaccf0>
   827a0:	000d883a 	mov	r6,zero
   827a4:	01cffc34 	movhi	r7,16368
   827a8:	8809883a 	mov	r4,r17
   827ac:	800b883a 	mov	r5,r16
   827b0:	00839f80 	call	839f8 <__adddf3>
   827b4:	003f8a06 	br	825e0 <__alt_data_end+0xfffaceb0>
   827b8:	9020953a 	slli	r16,r18,20
   827bc:	80c7883a 	add	r3,r16,r3
   827c0:	003f8706 	br	825e0 <__alt_data_end+0xfffaceb0>
   827c4:	01a20034 	movhi	r6,34816
   827c8:	01df8e34 	movhi	r7,32312
   827cc:	319d6704 	addi	r6,r6,30108
   827d0:	39f90f04 	addi	r7,r7,-7108
   827d4:	3009883a 	mov	r4,r6
   827d8:	380b883a 	mov	r5,r7
   827dc:	0084e440 	call	84e44 <__muldf3>
   827e0:	003f7f06 	br	825e0 <__alt_data_end+0xfffaceb0>
   827e4:	200d883a 	mov	r6,r4
   827e8:	280f883a 	mov	r7,r5
   827ec:	00839f80 	call	839f8 <__adddf3>
   827f0:	003f7b06 	br	825e0 <__alt_data_end+0xfffaceb0>
   827f4:	8809883a 	mov	r4,r17
   827f8:	800b883a 	mov	r5,r16
   827fc:	100d883a 	mov	r6,r2
   82800:	180f883a 	mov	r7,r3
   82804:	0084e440 	call	84e44 <__muldf3>
   82808:	e009883a 	mov	r4,fp
   8280c:	b80b883a 	mov	r5,r23
   82810:	000d883a 	mov	r6,zero
   82814:	01d00034 	movhi	r7,16384
   82818:	1027883a 	mov	r19,r2
   8281c:	1825883a 	mov	r18,r3
   82820:	00856b00 	call	856b0 <__subdf3>
   82824:	9809883a 	mov	r4,r19
   82828:	900b883a 	mov	r5,r18
   8282c:	100d883a 	mov	r6,r2
   82830:	180f883a 	mov	r7,r3
   82834:	00842a40 	call	842a4 <__divdf3>
   82838:	880d883a 	mov	r6,r17
   8283c:	800f883a 	mov	r7,r16
   82840:	1009883a 	mov	r4,r2
   82844:	180b883a 	mov	r5,r3
   82848:	00856b00 	call	856b0 <__subdf3>
   8284c:	100d883a 	mov	r6,r2
   82850:	180f883a 	mov	r7,r3
   82854:	0009883a 	mov	r4,zero
   82858:	014ffc34 	movhi	r5,16368
   8285c:	00856b00 	call	856b0 <__subdf3>
   82860:	003f5f06 	br	825e0 <__alt_data_end+0xfffaceb0>
   82864:	0005883a 	mov	r2,zero
   82868:	0007883a 	mov	r3,zero
   8286c:	003f5c06 	br	825e0 <__alt_data_end+0xfffaceb0>

00082870 <finite>:
   82870:	00a00034 	movhi	r2,32768
   82874:	10bfffc4 	addi	r2,r2,-1
   82878:	288a703a 	and	r5,r5,r2
   8287c:	00e00434 	movhi	r3,32784
   82880:	28c5883a 	add	r2,r5,r3
   82884:	1004d7fa 	srli	r2,r2,31
   82888:	f800283a 	ret

0008288c <matherr>:
   8288c:	0005883a 	mov	r2,zero
   82890:	f800283a 	ret

00082894 <__divsi3>:
   82894:	20001b16 	blt	r4,zero,82904 <__divsi3+0x70>
   82898:	000f883a 	mov	r7,zero
   8289c:	28001616 	blt	r5,zero,828f8 <__divsi3+0x64>
   828a0:	200d883a 	mov	r6,r4
   828a4:	29001a2e 	bgeu	r5,r4,82910 <__divsi3+0x7c>
   828a8:	00800804 	movi	r2,32
   828ac:	00c00044 	movi	r3,1
   828b0:	00000106 	br	828b8 <__divsi3+0x24>
   828b4:	10000d26 	beq	r2,zero,828ec <__divsi3+0x58>
   828b8:	294b883a 	add	r5,r5,r5
   828bc:	10bfffc4 	addi	r2,r2,-1
   828c0:	18c7883a 	add	r3,r3,r3
   828c4:	293ffb36 	bltu	r5,r4,828b4 <__alt_data_end+0xfffad184>
   828c8:	0005883a 	mov	r2,zero
   828cc:	18000726 	beq	r3,zero,828ec <__divsi3+0x58>
   828d0:	0005883a 	mov	r2,zero
   828d4:	31400236 	bltu	r6,r5,828e0 <__divsi3+0x4c>
   828d8:	314dc83a 	sub	r6,r6,r5
   828dc:	10c4b03a 	or	r2,r2,r3
   828e0:	1806d07a 	srli	r3,r3,1
   828e4:	280ad07a 	srli	r5,r5,1
   828e8:	183ffa1e 	bne	r3,zero,828d4 <__alt_data_end+0xfffad1a4>
   828ec:	38000126 	beq	r7,zero,828f4 <__divsi3+0x60>
   828f0:	0085c83a 	sub	r2,zero,r2
   828f4:	f800283a 	ret
   828f8:	014bc83a 	sub	r5,zero,r5
   828fc:	39c0005c 	xori	r7,r7,1
   82900:	003fe706 	br	828a0 <__alt_data_end+0xfffad170>
   82904:	0109c83a 	sub	r4,zero,r4
   82908:	01c00044 	movi	r7,1
   8290c:	003fe306 	br	8289c <__alt_data_end+0xfffad16c>
   82910:	00c00044 	movi	r3,1
   82914:	003fee06 	br	828d0 <__alt_data_end+0xfffad1a0>

00082918 <__modsi3>:
   82918:	20001716 	blt	r4,zero,82978 <__modsi3+0x60>
   8291c:	000f883a 	mov	r7,zero
   82920:	2005883a 	mov	r2,r4
   82924:	28001216 	blt	r5,zero,82970 <__modsi3+0x58>
   82928:	2900162e 	bgeu	r5,r4,82984 <__modsi3+0x6c>
   8292c:	01800804 	movi	r6,32
   82930:	00c00044 	movi	r3,1
   82934:	00000106 	br	8293c <__modsi3+0x24>
   82938:	30000a26 	beq	r6,zero,82964 <__modsi3+0x4c>
   8293c:	294b883a 	add	r5,r5,r5
   82940:	31bfffc4 	addi	r6,r6,-1
   82944:	18c7883a 	add	r3,r3,r3
   82948:	293ffb36 	bltu	r5,r4,82938 <__alt_data_end+0xfffad208>
   8294c:	18000526 	beq	r3,zero,82964 <__modsi3+0x4c>
   82950:	1806d07a 	srli	r3,r3,1
   82954:	11400136 	bltu	r2,r5,8295c <__modsi3+0x44>
   82958:	1145c83a 	sub	r2,r2,r5
   8295c:	280ad07a 	srli	r5,r5,1
   82960:	183ffb1e 	bne	r3,zero,82950 <__alt_data_end+0xfffad220>
   82964:	38000126 	beq	r7,zero,8296c <__modsi3+0x54>
   82968:	0085c83a 	sub	r2,zero,r2
   8296c:	f800283a 	ret
   82970:	014bc83a 	sub	r5,zero,r5
   82974:	003fec06 	br	82928 <__alt_data_end+0xfffad1f8>
   82978:	0109c83a 	sub	r4,zero,r4
   8297c:	01c00044 	movi	r7,1
   82980:	003fe706 	br	82920 <__alt_data_end+0xfffad1f0>
   82984:	00c00044 	movi	r3,1
   82988:	003ff106 	br	82950 <__alt_data_end+0xfffad220>

0008298c <__udivsi3>:
   8298c:	200d883a 	mov	r6,r4
   82990:	2900152e 	bgeu	r5,r4,829e8 <__udivsi3+0x5c>
   82994:	28001416 	blt	r5,zero,829e8 <__udivsi3+0x5c>
   82998:	00800804 	movi	r2,32
   8299c:	00c00044 	movi	r3,1
   829a0:	00000206 	br	829ac <__udivsi3+0x20>
   829a4:	10000e26 	beq	r2,zero,829e0 <__udivsi3+0x54>
   829a8:	28000516 	blt	r5,zero,829c0 <__udivsi3+0x34>
   829ac:	294b883a 	add	r5,r5,r5
   829b0:	10bfffc4 	addi	r2,r2,-1
   829b4:	18c7883a 	add	r3,r3,r3
   829b8:	293ffa36 	bltu	r5,r4,829a4 <__alt_data_end+0xfffad274>
   829bc:	18000826 	beq	r3,zero,829e0 <__udivsi3+0x54>
   829c0:	0005883a 	mov	r2,zero
   829c4:	31400236 	bltu	r6,r5,829d0 <__udivsi3+0x44>
   829c8:	314dc83a 	sub	r6,r6,r5
   829cc:	10c4b03a 	or	r2,r2,r3
   829d0:	1806d07a 	srli	r3,r3,1
   829d4:	280ad07a 	srli	r5,r5,1
   829d8:	183ffa1e 	bne	r3,zero,829c4 <__alt_data_end+0xfffad294>
   829dc:	f800283a 	ret
   829e0:	0005883a 	mov	r2,zero
   829e4:	f800283a 	ret
   829e8:	00c00044 	movi	r3,1
   829ec:	003ff406 	br	829c0 <__alt_data_end+0xfffad290>

000829f0 <__umodsi3>:
   829f0:	2005883a 	mov	r2,r4
   829f4:	2900122e 	bgeu	r5,r4,82a40 <__umodsi3+0x50>
   829f8:	28001116 	blt	r5,zero,82a40 <__umodsi3+0x50>
   829fc:	01800804 	movi	r6,32
   82a00:	00c00044 	movi	r3,1
   82a04:	00000206 	br	82a10 <__umodsi3+0x20>
   82a08:	30000c26 	beq	r6,zero,82a3c <__umodsi3+0x4c>
   82a0c:	28000516 	blt	r5,zero,82a24 <__umodsi3+0x34>
   82a10:	294b883a 	add	r5,r5,r5
   82a14:	31bfffc4 	addi	r6,r6,-1
   82a18:	18c7883a 	add	r3,r3,r3
   82a1c:	293ffa36 	bltu	r5,r4,82a08 <__alt_data_end+0xfffad2d8>
   82a20:	18000626 	beq	r3,zero,82a3c <__umodsi3+0x4c>
   82a24:	1806d07a 	srli	r3,r3,1
   82a28:	11400136 	bltu	r2,r5,82a30 <__umodsi3+0x40>
   82a2c:	1145c83a 	sub	r2,r2,r5
   82a30:	280ad07a 	srli	r5,r5,1
   82a34:	183ffb1e 	bne	r3,zero,82a24 <__alt_data_end+0xfffad2f4>
   82a38:	f800283a 	ret
   82a3c:	f800283a 	ret
   82a40:	00c00044 	movi	r3,1
   82a44:	003ff706 	br	82a24 <__alt_data_end+0xfffad2f4>

00082a48 <__mulsi3>:
   82a48:	0005883a 	mov	r2,zero
   82a4c:	20000726 	beq	r4,zero,82a6c <__mulsi3+0x24>
   82a50:	20c0004c 	andi	r3,r4,1
   82a54:	2008d07a 	srli	r4,r4,1
   82a58:	18000126 	beq	r3,zero,82a60 <__mulsi3+0x18>
   82a5c:	1145883a 	add	r2,r2,r5
   82a60:	294b883a 	add	r5,r5,r5
   82a64:	203ffa1e 	bne	r4,zero,82a50 <__alt_data_end+0xfffad320>
   82a68:	f800283a 	ret
   82a6c:	f800283a 	ret

00082a70 <__addsf3>:
   82a70:	defffc04 	addi	sp,sp,-16
   82a74:	2004d7fa 	srli	r2,r4,31
   82a78:	280cd5fa 	srli	r6,r5,23
   82a7c:	dc000015 	stw	r16,0(sp)
   82a80:	00c02034 	movhi	r3,128
   82a84:	2020d5fa 	srli	r16,r4,23
   82a88:	280ed7fa 	srli	r7,r5,31
   82a8c:	18ffffc4 	addi	r3,r3,-1
   82a90:	dc400115 	stw	r17,4(sp)
   82a94:	1908703a 	and	r4,r3,r4
   82a98:	194a703a 	and	r5,r3,r5
   82a9c:	dfc00315 	stw	ra,12(sp)
   82aa0:	dc800215 	stw	r18,8(sp)
   82aa4:	14403fcc 	andi	r17,r2,255
   82aa8:	84003fcc 	andi	r16,r16,255
   82aac:	200890fa 	slli	r4,r4,3
   82ab0:	31803fcc 	andi	r6,r6,255
   82ab4:	280a90fa 	slli	r5,r5,3
   82ab8:	89c05026 	beq	r17,r7,82bfc <__addsf3+0x18c>
   82abc:	8185c83a 	sub	r2,r16,r6
   82ac0:	00807a0e 	bge	zero,r2,82cac <__addsf3+0x23c>
   82ac4:	30001e1e 	bne	r6,zero,82b40 <__addsf3+0xd0>
   82ac8:	28006d1e 	bne	r5,zero,82c80 <__addsf3+0x210>
   82acc:	208001cc 	andi	r2,r4,7
   82ad0:	10000426 	beq	r2,zero,82ae4 <__addsf3+0x74>
   82ad4:	208003cc 	andi	r2,r4,15
   82ad8:	00c00104 	movi	r3,4
   82adc:	10c00126 	beq	r2,r3,82ae4 <__addsf3+0x74>
   82ae0:	20c9883a 	add	r4,r4,r3
   82ae4:	2081002c 	andhi	r2,r4,1024
   82ae8:	10003926 	beq	r2,zero,82bd0 <__addsf3+0x160>
   82aec:	84000044 	addi	r16,r16,1
   82af0:	00803fc4 	movi	r2,255
   82af4:	80807826 	beq	r16,r2,82cd8 <__addsf3+0x268>
   82af8:	200891ba 	slli	r4,r4,6
   82afc:	8805883a 	mov	r2,r17
   82b00:	2008d27a 	srli	r4,r4,9
   82b04:	84003fcc 	andi	r16,r16,255
   82b08:	800695fa 	slli	r3,r16,23
   82b0c:	10803fcc 	andi	r2,r2,255
   82b10:	04002034 	movhi	r16,128
   82b14:	843fffc4 	addi	r16,r16,-1
   82b18:	100497fa 	slli	r2,r2,31
   82b1c:	2408703a 	and	r4,r4,r16
   82b20:	20e0b03a 	or	r16,r4,r3
   82b24:	8084b03a 	or	r2,r16,r2
   82b28:	dfc00317 	ldw	ra,12(sp)
   82b2c:	dc800217 	ldw	r18,8(sp)
   82b30:	dc400117 	ldw	r17,4(sp)
   82b34:	dc000017 	ldw	r16,0(sp)
   82b38:	dec00404 	addi	sp,sp,16
   82b3c:	f800283a 	ret
   82b40:	00c03fc4 	movi	r3,255
   82b44:	80ffe126 	beq	r16,r3,82acc <__alt_data_end+0xfffad39c>
   82b48:	29410034 	orhi	r5,r5,1024
   82b4c:	00c006c4 	movi	r3,27
   82b50:	18807516 	blt	r3,r2,82d28 <__addsf3+0x2b8>
   82b54:	00c00804 	movi	r3,32
   82b58:	1887c83a 	sub	r3,r3,r2
   82b5c:	28c6983a 	sll	r3,r5,r3
   82b60:	288ad83a 	srl	r5,r5,r2
   82b64:	1804c03a 	cmpne	r2,r3,zero
   82b68:	288ab03a 	or	r5,r5,r2
   82b6c:	2149c83a 	sub	r4,r4,r5
   82b70:	2081002c 	andhi	r2,r4,1024
   82b74:	10001426 	beq	r2,zero,82bc8 <__addsf3+0x158>
   82b78:	04810034 	movhi	r18,1024
   82b7c:	94bfffc4 	addi	r18,r18,-1
   82b80:	24a4703a 	and	r18,r4,r18
   82b84:	9009883a 	mov	r4,r18
   82b88:	00863c00 	call	863c0 <__clzsi2>
   82b8c:	10bffec4 	addi	r2,r2,-5
   82b90:	90a4983a 	sll	r18,r18,r2
   82b94:	14005416 	blt	r2,r16,82ce8 <__addsf3+0x278>
   82b98:	1405c83a 	sub	r2,r2,r16
   82b9c:	11000044 	addi	r4,r2,1
   82ba0:	00800804 	movi	r2,32
   82ba4:	1105c83a 	sub	r2,r2,r4
   82ba8:	9084983a 	sll	r2,r18,r2
   82bac:	9124d83a 	srl	r18,r18,r4
   82bb0:	0021883a 	mov	r16,zero
   82bb4:	1008c03a 	cmpne	r4,r2,zero
   82bb8:	9108b03a 	or	r4,r18,r4
   82bbc:	003fc306 	br	82acc <__alt_data_end+0xfffad39c>
   82bc0:	1000db26 	beq	r2,zero,82f30 <__addsf3+0x4c0>
   82bc4:	1009883a 	mov	r4,r2
   82bc8:	208001cc 	andi	r2,r4,7
   82bcc:	103fc11e 	bne	r2,zero,82ad4 <__alt_data_end+0xfffad3a4>
   82bd0:	2006d0fa 	srli	r3,r4,3
   82bd4:	01003fc4 	movi	r4,255
   82bd8:	8805883a 	mov	r2,r17
   82bdc:	8100241e 	bne	r16,r4,82c70 <__addsf3+0x200>
   82be0:	18006e26 	beq	r3,zero,82d9c <__addsf3+0x32c>
   82be4:	19001034 	orhi	r4,r3,64
   82be8:	00c02034 	movhi	r3,128
   82bec:	18ffffc4 	addi	r3,r3,-1
   82bf0:	043fffc4 	movi	r16,-1
   82bf4:	20c8703a 	and	r4,r4,r3
   82bf8:	003fc206 	br	82b04 <__alt_data_end+0xfffad3d4>
   82bfc:	8187c83a 	sub	r3,r16,r6
   82c00:	00c03e0e 	bge	zero,r3,82cfc <__addsf3+0x28c>
   82c04:	30002326 	beq	r6,zero,82c94 <__addsf3+0x224>
   82c08:	01803fc4 	movi	r6,255
   82c0c:	81bfaf26 	beq	r16,r6,82acc <__alt_data_end+0xfffad39c>
   82c10:	29410034 	orhi	r5,r5,1024
   82c14:	018006c4 	movi	r6,27
   82c18:	30c07416 	blt	r6,r3,82dec <__addsf3+0x37c>
   82c1c:	01800804 	movi	r6,32
   82c20:	30cdc83a 	sub	r6,r6,r3
   82c24:	298c983a 	sll	r6,r5,r6
   82c28:	28cad83a 	srl	r5,r5,r3
   82c2c:	3006c03a 	cmpne	r3,r6,zero
   82c30:	28cab03a 	or	r5,r5,r3
   82c34:	2149883a 	add	r4,r4,r5
   82c38:	20c1002c 	andhi	r3,r4,1024
   82c3c:	183fe226 	beq	r3,zero,82bc8 <__alt_data_end+0xfffad498>
   82c40:	84000044 	addi	r16,r16,1
   82c44:	00c03fc4 	movi	r3,255
   82c48:	80c05426 	beq	r16,r3,82d9c <__addsf3+0x32c>
   82c4c:	00bf0034 	movhi	r2,64512
   82c50:	10bfffc4 	addi	r2,r2,-1
   82c54:	20c0004c 	andi	r3,r4,1
   82c58:	2088703a 	and	r4,r4,r2
   82c5c:	2008d07a 	srli	r4,r4,1
   82c60:	20c8b03a 	or	r4,r4,r3
   82c64:	003f9906 	br	82acc <__alt_data_end+0xfffad39c>
   82c68:	0007883a 	mov	r3,zero
   82c6c:	0005883a 	mov	r2,zero
   82c70:	01002034 	movhi	r4,128
   82c74:	213fffc4 	addi	r4,r4,-1
   82c78:	1908703a 	and	r4,r3,r4
   82c7c:	003fa106 	br	82b04 <__alt_data_end+0xfffad3d4>
   82c80:	10bfffc4 	addi	r2,r2,-1
   82c84:	103fb926 	beq	r2,zero,82b6c <__alt_data_end+0xfffad43c>
   82c88:	00c03fc4 	movi	r3,255
   82c8c:	80ffaf1e 	bne	r16,r3,82b4c <__alt_data_end+0xfffad41c>
   82c90:	003f8e06 	br	82acc <__alt_data_end+0xfffad39c>
   82c94:	283f8d26 	beq	r5,zero,82acc <__alt_data_end+0xfffad39c>
   82c98:	18ffffc4 	addi	r3,r3,-1
   82c9c:	183fe526 	beq	r3,zero,82c34 <__alt_data_end+0xfffad504>
   82ca0:	01803fc4 	movi	r6,255
   82ca4:	81bfdb1e 	bne	r16,r6,82c14 <__alt_data_end+0xfffad4e4>
   82ca8:	003f8806 	br	82acc <__alt_data_end+0xfffad39c>
   82cac:	1000201e 	bne	r2,zero,82d30 <__addsf3+0x2c0>
   82cb0:	80800044 	addi	r2,r16,1
   82cb4:	10803fcc 	andi	r2,r2,255
   82cb8:	01800044 	movi	r6,1
   82cbc:	3080450e 	bge	r6,r2,82dd4 <__addsf3+0x364>
   82cc0:	2165c83a 	sub	r18,r4,r5
   82cc4:	90c1002c 	andhi	r3,r18,1024
   82cc8:	18002b26 	beq	r3,zero,82d78 <__addsf3+0x308>
   82ccc:	2925c83a 	sub	r18,r5,r4
   82cd0:	3823883a 	mov	r17,r7
   82cd4:	003fab06 	br	82b84 <__alt_data_end+0xfffad454>
   82cd8:	8805883a 	mov	r2,r17
   82cdc:	043fffc4 	movi	r16,-1
   82ce0:	0009883a 	mov	r4,zero
   82ce4:	003f8706 	br	82b04 <__alt_data_end+0xfffad3d4>
   82ce8:	013f0034 	movhi	r4,64512
   82cec:	213fffc4 	addi	r4,r4,-1
   82cf0:	80a1c83a 	sub	r16,r16,r2
   82cf4:	9108703a 	and	r4,r18,r4
   82cf8:	003f7406 	br	82acc <__alt_data_end+0xfffad39c>
   82cfc:	1800411e 	bne	r3,zero,82e04 <__addsf3+0x394>
   82d00:	80c00044 	addi	r3,r16,1
   82d04:	19c03fcc 	andi	r7,r3,255
   82d08:	01800044 	movi	r6,1
   82d0c:	31c0260e 	bge	r6,r7,82da8 <__addsf3+0x338>
   82d10:	01803fc4 	movi	r6,255
   82d14:	19802126 	beq	r3,r6,82d9c <__addsf3+0x32c>
   82d18:	2149883a 	add	r4,r4,r5
   82d1c:	2008d07a 	srli	r4,r4,1
   82d20:	1821883a 	mov	r16,r3
   82d24:	003f6906 	br	82acc <__alt_data_end+0xfffad39c>
   82d28:	01400044 	movi	r5,1
   82d2c:	003f8f06 	br	82b6c <__alt_data_end+0xfffad43c>
   82d30:	8000151e 	bne	r16,zero,82d88 <__addsf3+0x318>
   82d34:	20002f26 	beq	r4,zero,82df4 <__addsf3+0x384>
   82d38:	0084303a 	nor	r2,zero,r2
   82d3c:	10000a26 	beq	r2,zero,82d68 <__addsf3+0x2f8>
   82d40:	00c03fc4 	movi	r3,255
   82d44:	30c02b26 	beq	r6,r3,82df4 <__addsf3+0x384>
   82d48:	00c006c4 	movi	r3,27
   82d4c:	18806d16 	blt	r3,r2,82f04 <__addsf3+0x494>
   82d50:	00c00804 	movi	r3,32
   82d54:	1887c83a 	sub	r3,r3,r2
   82d58:	20c6983a 	sll	r3,r4,r3
   82d5c:	2084d83a 	srl	r2,r4,r2
   82d60:	1808c03a 	cmpne	r4,r3,zero
   82d64:	1108b03a 	or	r4,r2,r4
   82d68:	2909c83a 	sub	r4,r5,r4
   82d6c:	3021883a 	mov	r16,r6
   82d70:	3823883a 	mov	r17,r7
   82d74:	003f7e06 	br	82b70 <__alt_data_end+0xfffad440>
   82d78:	903f821e 	bne	r18,zero,82b84 <__alt_data_end+0xfffad454>
   82d7c:	0005883a 	mov	r2,zero
   82d80:	0021883a 	mov	r16,zero
   82d84:	003fba06 	br	82c70 <__alt_data_end+0xfffad540>
   82d88:	00c03fc4 	movi	r3,255
   82d8c:	30c01926 	beq	r6,r3,82df4 <__addsf3+0x384>
   82d90:	0085c83a 	sub	r2,zero,r2
   82d94:	21010034 	orhi	r4,r4,1024
   82d98:	003feb06 	br	82d48 <__alt_data_end+0xfffad618>
   82d9c:	043fffc4 	movi	r16,-1
   82da0:	0009883a 	mov	r4,zero
   82da4:	003f5706 	br	82b04 <__alt_data_end+0xfffad3d4>
   82da8:	80004a1e 	bne	r16,zero,82ed4 <__addsf3+0x464>
   82dac:	20005926 	beq	r4,zero,82f14 <__addsf3+0x4a4>
   82db0:	283f4626 	beq	r5,zero,82acc <__alt_data_end+0xfffad39c>
   82db4:	2149883a 	add	r4,r4,r5
   82db8:	2081002c 	andhi	r2,r4,1024
   82dbc:	103f8226 	beq	r2,zero,82bc8 <__alt_data_end+0xfffad498>
   82dc0:	00bf0034 	movhi	r2,64512
   82dc4:	10bfffc4 	addi	r2,r2,-1
   82dc8:	3021883a 	mov	r16,r6
   82dcc:	2088703a 	and	r4,r4,r2
   82dd0:	003f3e06 	br	82acc <__alt_data_end+0xfffad39c>
   82dd4:	8000121e 	bne	r16,zero,82e20 <__addsf3+0x3b0>
   82dd8:	2000261e 	bne	r4,zero,82e74 <__addsf3+0x404>
   82ddc:	283fa226 	beq	r5,zero,82c68 <__alt_data_end+0xfffad538>
   82de0:	2809883a 	mov	r4,r5
   82de4:	3823883a 	mov	r17,r7
   82de8:	003f3806 	br	82acc <__alt_data_end+0xfffad39c>
   82dec:	01400044 	movi	r5,1
   82df0:	003f9006 	br	82c34 <__alt_data_end+0xfffad504>
   82df4:	2809883a 	mov	r4,r5
   82df8:	3021883a 	mov	r16,r6
   82dfc:	3823883a 	mov	r17,r7
   82e00:	003f3206 	br	82acc <__alt_data_end+0xfffad39c>
   82e04:	80000c1e 	bne	r16,zero,82e38 <__addsf3+0x3c8>
   82e08:	20002f26 	beq	r4,zero,82ec8 <__addsf3+0x458>
   82e0c:	00c6303a 	nor	r3,zero,r3
   82e10:	18002b1e 	bne	r3,zero,82ec0 <__addsf3+0x450>
   82e14:	2149883a 	add	r4,r4,r5
   82e18:	3021883a 	mov	r16,r6
   82e1c:	003f8606 	br	82c38 <__alt_data_end+0xfffad508>
   82e20:	20001b1e 	bne	r4,zero,82e90 <__addsf3+0x420>
   82e24:	28003926 	beq	r5,zero,82f0c <__addsf3+0x49c>
   82e28:	2809883a 	mov	r4,r5
   82e2c:	3823883a 	mov	r17,r7
   82e30:	04003fc4 	movi	r16,255
   82e34:	003f2506 	br	82acc <__alt_data_end+0xfffad39c>
   82e38:	01c03fc4 	movi	r7,255
   82e3c:	31c02226 	beq	r6,r7,82ec8 <__addsf3+0x458>
   82e40:	00c7c83a 	sub	r3,zero,r3
   82e44:	21010034 	orhi	r4,r4,1024
   82e48:	01c006c4 	movi	r7,27
   82e4c:	38c03616 	blt	r7,r3,82f28 <__addsf3+0x4b8>
   82e50:	01c00804 	movi	r7,32
   82e54:	38cfc83a 	sub	r7,r7,r3
   82e58:	21ce983a 	sll	r7,r4,r7
   82e5c:	20c6d83a 	srl	r3,r4,r3
   82e60:	3808c03a 	cmpne	r4,r7,zero
   82e64:	1906b03a 	or	r3,r3,r4
   82e68:	1949883a 	add	r4,r3,r5
   82e6c:	3021883a 	mov	r16,r6
   82e70:	003f7106 	br	82c38 <__alt_data_end+0xfffad508>
   82e74:	283f1526 	beq	r5,zero,82acc <__alt_data_end+0xfffad39c>
   82e78:	2145c83a 	sub	r2,r4,r5
   82e7c:	10c1002c 	andhi	r3,r2,1024
   82e80:	183f4f26 	beq	r3,zero,82bc0 <__alt_data_end+0xfffad490>
   82e84:	2909c83a 	sub	r4,r5,r4
   82e88:	3823883a 	mov	r17,r7
   82e8c:	003f0f06 	br	82acc <__alt_data_end+0xfffad39c>
   82e90:	28001a26 	beq	r5,zero,82efc <__addsf3+0x48c>
   82e94:	2008d0fa 	srli	r4,r4,3
   82e98:	2080102c 	andhi	r2,r4,64
   82e9c:	10000526 	beq	r2,zero,82eb4 <__addsf3+0x444>
   82ea0:	280ad0fa 	srli	r5,r5,3
   82ea4:	2880102c 	andhi	r2,r5,64
   82ea8:	1000021e 	bne	r2,zero,82eb4 <__addsf3+0x444>
   82eac:	2809883a 	mov	r4,r5
   82eb0:	3823883a 	mov	r17,r7
   82eb4:	200890fa 	slli	r4,r4,3
   82eb8:	04003fc4 	movi	r16,255
   82ebc:	003f0306 	br	82acc <__alt_data_end+0xfffad39c>
   82ec0:	01c03fc4 	movi	r7,255
   82ec4:	31ffe01e 	bne	r6,r7,82e48 <__alt_data_end+0xfffad718>
   82ec8:	2809883a 	mov	r4,r5
   82ecc:	3021883a 	mov	r16,r6
   82ed0:	003efe06 	br	82acc <__alt_data_end+0xfffad39c>
   82ed4:	20001126 	beq	r4,zero,82f1c <__addsf3+0x4ac>
   82ed8:	28000826 	beq	r5,zero,82efc <__addsf3+0x48c>
   82edc:	2008d0fa 	srli	r4,r4,3
   82ee0:	2080102c 	andhi	r2,r4,64
   82ee4:	103ff326 	beq	r2,zero,82eb4 <__alt_data_end+0xfffad784>
   82ee8:	280ad0fa 	srli	r5,r5,3
   82eec:	2880102c 	andhi	r2,r5,64
   82ef0:	103ff01e 	bne	r2,zero,82eb4 <__alt_data_end+0xfffad784>
   82ef4:	2809883a 	mov	r4,r5
   82ef8:	003fee06 	br	82eb4 <__alt_data_end+0xfffad784>
   82efc:	04003fc4 	movi	r16,255
   82f00:	003ef206 	br	82acc <__alt_data_end+0xfffad39c>
   82f04:	01000044 	movi	r4,1
   82f08:	003f9706 	br	82d68 <__alt_data_end+0xfffad638>
   82f0c:	0005883a 	mov	r2,zero
   82f10:	003f3406 	br	82be4 <__alt_data_end+0xfffad4b4>
   82f14:	2809883a 	mov	r4,r5
   82f18:	003eec06 	br	82acc <__alt_data_end+0xfffad39c>
   82f1c:	2809883a 	mov	r4,r5
   82f20:	04003fc4 	movi	r16,255
   82f24:	003ee906 	br	82acc <__alt_data_end+0xfffad39c>
   82f28:	00c00044 	movi	r3,1
   82f2c:	003fce06 	br	82e68 <__alt_data_end+0xfffad738>
   82f30:	0005883a 	mov	r2,zero
   82f34:	003f4e06 	br	82c70 <__alt_data_end+0xfffad540>

00082f38 <__divsf3>:
   82f38:	defff504 	addi	sp,sp,-44
   82f3c:	200cd5fa 	srli	r6,r4,23
   82f40:	dcc00415 	stw	r19,16(sp)
   82f44:	2026d7fa 	srli	r19,r4,31
   82f48:	00c02034 	movhi	r3,128
   82f4c:	dd800715 	stw	r22,28(sp)
   82f50:	dd000515 	stw	r20,20(sp)
   82f54:	dc800315 	stw	r18,12(sp)
   82f58:	18ffffc4 	addi	r3,r3,-1
   82f5c:	dfc00a15 	stw	ra,40(sp)
   82f60:	df000915 	stw	fp,36(sp)
   82f64:	ddc00815 	stw	r23,32(sp)
   82f68:	dd400615 	stw	r21,24(sp)
   82f6c:	dc400215 	stw	r17,8(sp)
   82f70:	dc000115 	stw	r16,4(sp)
   82f74:	35003fcc 	andi	r20,r6,255
   82f78:	1924703a 	and	r18,r3,r4
   82f7c:	9d803fcc 	andi	r22,r19,255
   82f80:	a0005226 	beq	r20,zero,830cc <__divsf3+0x194>
   82f84:	00803fc4 	movi	r2,255
   82f88:	a0802e26 	beq	r20,r2,83044 <__divsf3+0x10c>
   82f8c:	91002034 	orhi	r4,r18,128
   82f90:	202490fa 	slli	r18,r4,3
   82f94:	a53fe044 	addi	r20,r20,-127
   82f98:	0021883a 	mov	r16,zero
   82f9c:	002f883a 	mov	r23,zero
   82fa0:	280cd5fa 	srli	r6,r5,23
   82fa4:	282ad7fa 	srli	r21,r5,31
   82fa8:	00c02034 	movhi	r3,128
   82fac:	18ffffc4 	addi	r3,r3,-1
   82fb0:	31803fcc 	andi	r6,r6,255
   82fb4:	1962703a 	and	r17,r3,r5
   82fb8:	af003fcc 	andi	fp,r21,255
   82fbc:	30004a26 	beq	r6,zero,830e8 <__divsf3+0x1b0>
   82fc0:	00803fc4 	movi	r2,255
   82fc4:	30804526 	beq	r6,r2,830dc <__divsf3+0x1a4>
   82fc8:	89402034 	orhi	r5,r17,128
   82fcc:	282290fa 	slli	r17,r5,3
   82fd0:	31bfe044 	addi	r6,r6,-127
   82fd4:	000b883a 	mov	r5,zero
   82fd8:	2c20b03a 	or	r16,r5,r16
   82fdc:	802090ba 	slli	r16,r16,2
   82fe0:	00800234 	movhi	r2,8
   82fe4:	108c0104 	addi	r2,r2,12292
   82fe8:	80a1883a 	add	r16,r16,r2
   82fec:	81000017 	ldw	r4,0(r16)
   82ff0:	9d46f03a 	xor	r3,r19,r21
   82ff4:	180f883a 	mov	r7,r3
   82ff8:	18803fcc 	andi	r2,r3,255
   82ffc:	a18dc83a 	sub	r6,r20,r6
   83000:	2000683a 	jmp	r4
   83004:	000831e8 	cmpgeui	zero,zero,8391
   83008:	0008306c 	andhi	zero,zero,8385
   8300c:	000831dc 	xori	zero,zero,8391
   83010:	00083058 	cmpnei	zero,zero,8385
   83014:	000831dc 	xori	zero,zero,8391
   83018:	000831b4 	movhi	zero,8390
   8301c:	000831dc 	xori	zero,zero,8391
   83020:	00083058 	cmpnei	zero,zero,8385
   83024:	0008306c 	andhi	zero,zero,8385
   83028:	0008306c 	andhi	zero,zero,8385
   8302c:	000831b4 	movhi	zero,8390
   83030:	00083058 	cmpnei	zero,zero,8385
   83034:	000832c8 	cmpgei	zero,zero,8395
   83038:	000832c8 	cmpgei	zero,zero,8395
   8303c:	000832c8 	cmpgei	zero,zero,8395
   83040:	0008327c 	xorhi	zero,zero,8393
   83044:	9000581e 	bne	r18,zero,831a8 <__divsf3+0x270>
   83048:	04000204 	movi	r16,8
   8304c:	05c00084 	movi	r23,2
   83050:	003fd306 	br	82fa0 <__alt_data_end+0xfffad870>
   83054:	0023883a 	mov	r17,zero
   83058:	e02d883a 	mov	r22,fp
   8305c:	282f883a 	mov	r23,r5
   83060:	00800084 	movi	r2,2
   83064:	b8808f1e 	bne	r23,r2,832a4 <__divsf3+0x36c>
   83068:	b005883a 	mov	r2,r22
   8306c:	11c0004c 	andi	r7,r2,1
   83070:	013fffc4 	movi	r4,-1
   83074:	000d883a 	mov	r6,zero
   83078:	21003fcc 	andi	r4,r4,255
   8307c:	200895fa 	slli	r4,r4,23
   83080:	38803fcc 	andi	r2,r7,255
   83084:	00c02034 	movhi	r3,128
   83088:	100497fa 	slli	r2,r2,31
   8308c:	18ffffc4 	addi	r3,r3,-1
   83090:	30c6703a 	and	r3,r6,r3
   83094:	1906b03a 	or	r3,r3,r4
   83098:	1884b03a 	or	r2,r3,r2
   8309c:	dfc00a17 	ldw	ra,40(sp)
   830a0:	df000917 	ldw	fp,36(sp)
   830a4:	ddc00817 	ldw	r23,32(sp)
   830a8:	dd800717 	ldw	r22,28(sp)
   830ac:	dd400617 	ldw	r21,24(sp)
   830b0:	dd000517 	ldw	r20,20(sp)
   830b4:	dcc00417 	ldw	r19,16(sp)
   830b8:	dc800317 	ldw	r18,12(sp)
   830bc:	dc400217 	ldw	r17,8(sp)
   830c0:	dc000117 	ldw	r16,4(sp)
   830c4:	dec00b04 	addi	sp,sp,44
   830c8:	f800283a 	ret
   830cc:	90002b1e 	bne	r18,zero,8317c <__divsf3+0x244>
   830d0:	04000104 	movi	r16,4
   830d4:	05c00044 	movi	r23,1
   830d8:	003fb106 	br	82fa0 <__alt_data_end+0xfffad870>
   830dc:	8800251e 	bne	r17,zero,83174 <__divsf3+0x23c>
   830e0:	01400084 	movi	r5,2
   830e4:	00000206 	br	830f0 <__divsf3+0x1b8>
   830e8:	88001a1e 	bne	r17,zero,83154 <__divsf3+0x21c>
   830ec:	01400044 	movi	r5,1
   830f0:	8160b03a 	or	r16,r16,r5
   830f4:	802090ba 	slli	r16,r16,2
   830f8:	00c00234 	movhi	r3,8
   830fc:	18cc4504 	addi	r3,r3,12564
   83100:	80e1883a 	add	r16,r16,r3
   83104:	80c00017 	ldw	r3,0(r16)
   83108:	9d44f03a 	xor	r2,r19,r21
   8310c:	a18dc83a 	sub	r6,r20,r6
   83110:	1800683a 	jmp	r3
   83114:	0008306c 	andhi	zero,zero,8385
   83118:	0008306c 	andhi	zero,zero,8385
   8311c:	000832b8 	rdprs	zero,zero,8394
   83120:	00083054 	movui	zero,8385
   83124:	000832b8 	rdprs	zero,zero,8394
   83128:	000831b4 	movhi	zero,8390
   8312c:	000832b8 	rdprs	zero,zero,8394
   83130:	00083054 	movui	zero,8385
   83134:	0008306c 	andhi	zero,zero,8385
   83138:	0008306c 	andhi	zero,zero,8385
   8313c:	000831b4 	movhi	zero,8390
   83140:	00083054 	movui	zero,8385
   83144:	000832c8 	cmpgei	zero,zero,8395
   83148:	000832c8 	cmpgei	zero,zero,8395
   8314c:	000832c8 	cmpgei	zero,zero,8395
   83150:	000832e0 	cmpeqi	zero,zero,8395
   83154:	8809883a 	mov	r4,r17
   83158:	00863c00 	call	863c0 <__clzsi2>
   8315c:	10fffec4 	addi	r3,r2,-5
   83160:	10801d84 	addi	r2,r2,118
   83164:	88e2983a 	sll	r17,r17,r3
   83168:	008dc83a 	sub	r6,zero,r2
   8316c:	000b883a 	mov	r5,zero
   83170:	003f9906 	br	82fd8 <__alt_data_end+0xfffad8a8>
   83174:	014000c4 	movi	r5,3
   83178:	003f9706 	br	82fd8 <__alt_data_end+0xfffad8a8>
   8317c:	9009883a 	mov	r4,r18
   83180:	d9400015 	stw	r5,0(sp)
   83184:	00863c00 	call	863c0 <__clzsi2>
   83188:	10fffec4 	addi	r3,r2,-5
   8318c:	11801d84 	addi	r6,r2,118
   83190:	90e4983a 	sll	r18,r18,r3
   83194:	01a9c83a 	sub	r20,zero,r6
   83198:	0021883a 	mov	r16,zero
   8319c:	002f883a 	mov	r23,zero
   831a0:	d9400017 	ldw	r5,0(sp)
   831a4:	003f7e06 	br	82fa0 <__alt_data_end+0xfffad870>
   831a8:	04000304 	movi	r16,12
   831ac:	05c000c4 	movi	r23,3
   831b0:	003f7b06 	br	82fa0 <__alt_data_end+0xfffad870>
   831b4:	01802034 	movhi	r6,128
   831b8:	000f883a 	mov	r7,zero
   831bc:	31bfffc4 	addi	r6,r6,-1
   831c0:	013fffc4 	movi	r4,-1
   831c4:	003fac06 	br	83078 <__alt_data_end+0xfffad948>
   831c8:	01400044 	movi	r5,1
   831cc:	2909c83a 	sub	r4,r5,r4
   831d0:	00c006c4 	movi	r3,27
   831d4:	19004b0e 	bge	r3,r4,83304 <__divsf3+0x3cc>
   831d8:	114e703a 	and	r7,r2,r5
   831dc:	0009883a 	mov	r4,zero
   831e0:	000d883a 	mov	r6,zero
   831e4:	003fa406 	br	83078 <__alt_data_end+0xfffad948>
   831e8:	9006917a 	slli	r3,r18,5
   831ec:	8822917a 	slli	r17,r17,5
   831f0:	1c40372e 	bgeu	r3,r17,832d0 <__divsf3+0x398>
   831f4:	31bfffc4 	addi	r6,r6,-1
   831f8:	010006c4 	movi	r4,27
   831fc:	000b883a 	mov	r5,zero
   83200:	180f883a 	mov	r7,r3
   83204:	294b883a 	add	r5,r5,r5
   83208:	18c7883a 	add	r3,r3,r3
   8320c:	38000116 	blt	r7,zero,83214 <__divsf3+0x2dc>
   83210:	1c400236 	bltu	r3,r17,8321c <__divsf3+0x2e4>
   83214:	1c47c83a 	sub	r3,r3,r17
   83218:	29400054 	ori	r5,r5,1
   8321c:	213fffc4 	addi	r4,r4,-1
   83220:	203ff71e 	bne	r4,zero,83200 <__alt_data_end+0xfffadad0>
   83224:	1806c03a 	cmpne	r3,r3,zero
   83228:	1962b03a 	or	r17,r3,r5
   8322c:	31001fc4 	addi	r4,r6,127
   83230:	013fe50e 	bge	zero,r4,831c8 <__alt_data_end+0xfffada98>
   83234:	88c001cc 	andi	r3,r17,7
   83238:	18000426 	beq	r3,zero,8324c <__divsf3+0x314>
   8323c:	88c003cc 	andi	r3,r17,15
   83240:	01400104 	movi	r5,4
   83244:	19400126 	beq	r3,r5,8324c <__divsf3+0x314>
   83248:	8963883a 	add	r17,r17,r5
   8324c:	88c2002c 	andhi	r3,r17,2048
   83250:	18000426 	beq	r3,zero,83264 <__divsf3+0x32c>
   83254:	00fe0034 	movhi	r3,63488
   83258:	18ffffc4 	addi	r3,r3,-1
   8325c:	31002004 	addi	r4,r6,128
   83260:	88e2703a 	and	r17,r17,r3
   83264:	00c03f84 	movi	r3,254
   83268:	193f8016 	blt	r3,r4,8306c <__alt_data_end+0xfffad93c>
   8326c:	880c91ba 	slli	r6,r17,6
   83270:	11c0004c 	andi	r7,r2,1
   83274:	300cd27a 	srli	r6,r6,9
   83278:	003f7f06 	br	83078 <__alt_data_end+0xfffad948>
   8327c:	9080102c 	andhi	r2,r18,64
   83280:	10000226 	beq	r2,zero,8328c <__divsf3+0x354>
   83284:	8880102c 	andhi	r2,r17,64
   83288:	10001826 	beq	r2,zero,832ec <__divsf3+0x3b4>
   8328c:	00802034 	movhi	r2,128
   83290:	91801034 	orhi	r6,r18,64
   83294:	10bfffc4 	addi	r2,r2,-1
   83298:	980f883a 	mov	r7,r19
   8329c:	308c703a 	and	r6,r6,r2
   832a0:	003fc706 	br	831c0 <__alt_data_end+0xfffada90>
   832a4:	008000c4 	movi	r2,3
   832a8:	b8802d26 	beq	r23,r2,83360 <__divsf3+0x428>
   832ac:	00c00044 	movi	r3,1
   832b0:	b005883a 	mov	r2,r22
   832b4:	b8ffdd1e 	bne	r23,r3,8322c <__alt_data_end+0xfffadafc>
   832b8:	11c0004c 	andi	r7,r2,1
   832bc:	0009883a 	mov	r4,zero
   832c0:	000d883a 	mov	r6,zero
   832c4:	003f6c06 	br	83078 <__alt_data_end+0xfffad948>
   832c8:	9023883a 	mov	r17,r18
   832cc:	003f6406 	br	83060 <__alt_data_end+0xfffad930>
   832d0:	1c47c83a 	sub	r3,r3,r17
   832d4:	01000684 	movi	r4,26
   832d8:	01400044 	movi	r5,1
   832dc:	003fc806 	br	83200 <__alt_data_end+0xfffadad0>
   832e0:	9080102c 	andhi	r2,r18,64
   832e4:	103fe926 	beq	r2,zero,8328c <__alt_data_end+0xfffadb5c>
   832e8:	0023883a 	mov	r17,zero
   832ec:	00802034 	movhi	r2,128
   832f0:	89801034 	orhi	r6,r17,64
   832f4:	10bfffc4 	addi	r2,r2,-1
   832f8:	a80f883a 	mov	r7,r21
   832fc:	308c703a 	and	r6,r6,r2
   83300:	003faf06 	br	831c0 <__alt_data_end+0xfffada90>
   83304:	01c00804 	movi	r7,32
   83308:	390fc83a 	sub	r7,r7,r4
   8330c:	89ce983a 	sll	r7,r17,r7
   83310:	890ad83a 	srl	r5,r17,r4
   83314:	380ec03a 	cmpne	r7,r7,zero
   83318:	29cab03a 	or	r5,r5,r7
   8331c:	28c001cc 	andi	r3,r5,7
   83320:	18000426 	beq	r3,zero,83334 <__divsf3+0x3fc>
   83324:	28c003cc 	andi	r3,r5,15
   83328:	01000104 	movi	r4,4
   8332c:	19000126 	beq	r3,r4,83334 <__divsf3+0x3fc>
   83330:	290b883a 	add	r5,r5,r4
   83334:	28c1002c 	andhi	r3,r5,1024
   83338:	18000426 	beq	r3,zero,8334c <__divsf3+0x414>
   8333c:	11c0004c 	andi	r7,r2,1
   83340:	01000044 	movi	r4,1
   83344:	000d883a 	mov	r6,zero
   83348:	003f4b06 	br	83078 <__alt_data_end+0xfffad948>
   8334c:	280a91ba 	slli	r5,r5,6
   83350:	11c0004c 	andi	r7,r2,1
   83354:	0009883a 	mov	r4,zero
   83358:	280cd27a 	srli	r6,r5,9
   8335c:	003f4606 	br	83078 <__alt_data_end+0xfffad948>
   83360:	00802034 	movhi	r2,128
   83364:	89801034 	orhi	r6,r17,64
   83368:	10bfffc4 	addi	r2,r2,-1
   8336c:	b00f883a 	mov	r7,r22
   83370:	308c703a 	and	r6,r6,r2
   83374:	003f9206 	br	831c0 <__alt_data_end+0xfffada90>

00083378 <__gesf2>:
   83378:	2004d5fa 	srli	r2,r4,23
   8337c:	2806d5fa 	srli	r3,r5,23
   83380:	01802034 	movhi	r6,128
   83384:	31bfffc4 	addi	r6,r6,-1
   83388:	10803fcc 	andi	r2,r2,255
   8338c:	01c03fc4 	movi	r7,255
   83390:	3110703a 	and	r8,r6,r4
   83394:	18c03fcc 	andi	r3,r3,255
   83398:	314c703a 	and	r6,r6,r5
   8339c:	2008d7fa 	srli	r4,r4,31
   833a0:	280ad7fa 	srli	r5,r5,31
   833a4:	11c01926 	beq	r2,r7,8340c <__gesf2+0x94>
   833a8:	01c03fc4 	movi	r7,255
   833ac:	19c00f26 	beq	r3,r7,833ec <__gesf2+0x74>
   833b0:	1000061e 	bne	r2,zero,833cc <__gesf2+0x54>
   833b4:	400f003a 	cmpeq	r7,r8,zero
   833b8:	1800071e 	bne	r3,zero,833d8 <__gesf2+0x60>
   833bc:	3000061e 	bne	r6,zero,833d8 <__gesf2+0x60>
   833c0:	0005883a 	mov	r2,zero
   833c4:	40000e1e 	bne	r8,zero,83400 <__gesf2+0x88>
   833c8:	f800283a 	ret
   833cc:	18000a1e 	bne	r3,zero,833f8 <__gesf2+0x80>
   833d0:	30000b26 	beq	r6,zero,83400 <__gesf2+0x88>
   833d4:	000f883a 	mov	r7,zero
   833d8:	29403fcc 	andi	r5,r5,255
   833dc:	38000726 	beq	r7,zero,833fc <__gesf2+0x84>
   833e0:	28000826 	beq	r5,zero,83404 <__gesf2+0x8c>
   833e4:	00800044 	movi	r2,1
   833e8:	f800283a 	ret
   833ec:	303ff026 	beq	r6,zero,833b0 <__alt_data_end+0xfffadc80>
   833f0:	00bfff84 	movi	r2,-2
   833f4:	f800283a 	ret
   833f8:	29403fcc 	andi	r5,r5,255
   833fc:	21400526 	beq	r4,r5,83414 <__gesf2+0x9c>
   83400:	203ff826 	beq	r4,zero,833e4 <__alt_data_end+0xfffadcb4>
   83404:	00bfffc4 	movi	r2,-1
   83408:	f800283a 	ret
   8340c:	403fe626 	beq	r8,zero,833a8 <__alt_data_end+0xfffadc78>
   83410:	003ff706 	br	833f0 <__alt_data_end+0xfffadcc0>
   83414:	18bffa16 	blt	r3,r2,83400 <__alt_data_end+0xfffadcd0>
   83418:	10c00216 	blt	r2,r3,83424 <__gesf2+0xac>
   8341c:	323ff836 	bltu	r6,r8,83400 <__alt_data_end+0xfffadcd0>
   83420:	4180022e 	bgeu	r8,r6,8342c <__gesf2+0xb4>
   83424:	203fef1e 	bne	r4,zero,833e4 <__alt_data_end+0xfffadcb4>
   83428:	003ff606 	br	83404 <__alt_data_end+0xfffadcd4>
   8342c:	0005883a 	mov	r2,zero
   83430:	f800283a 	ret

00083434 <__mulsf3>:
   83434:	defff504 	addi	sp,sp,-44
   83438:	dc000115 	stw	r16,4(sp)
   8343c:	2020d5fa 	srli	r16,r4,23
   83440:	dd400615 	stw	r21,24(sp)
   83444:	202ad7fa 	srli	r21,r4,31
   83448:	dc800315 	stw	r18,12(sp)
   8344c:	04802034 	movhi	r18,128
   83450:	df000915 	stw	fp,36(sp)
   83454:	dd000515 	stw	r20,20(sp)
   83458:	94bfffc4 	addi	r18,r18,-1
   8345c:	dfc00a15 	stw	ra,40(sp)
   83460:	ddc00815 	stw	r23,32(sp)
   83464:	dd800715 	stw	r22,28(sp)
   83468:	dcc00415 	stw	r19,16(sp)
   8346c:	dc400215 	stw	r17,8(sp)
   83470:	84003fcc 	andi	r16,r16,255
   83474:	9124703a 	and	r18,r18,r4
   83478:	a829883a 	mov	r20,r21
   8347c:	af003fcc 	andi	fp,r21,255
   83480:	80005426 	beq	r16,zero,835d4 <__mulsf3+0x1a0>
   83484:	00803fc4 	movi	r2,255
   83488:	80802f26 	beq	r16,r2,83548 <__mulsf3+0x114>
   8348c:	91002034 	orhi	r4,r18,128
   83490:	202490fa 	slli	r18,r4,3
   83494:	843fe044 	addi	r16,r16,-127
   83498:	0023883a 	mov	r17,zero
   8349c:	002f883a 	mov	r23,zero
   834a0:	2804d5fa 	srli	r2,r5,23
   834a4:	282cd7fa 	srli	r22,r5,31
   834a8:	01002034 	movhi	r4,128
   834ac:	213fffc4 	addi	r4,r4,-1
   834b0:	10803fcc 	andi	r2,r2,255
   834b4:	2166703a 	and	r19,r4,r5
   834b8:	b1803fcc 	andi	r6,r22,255
   834bc:	10004c26 	beq	r2,zero,835f0 <__mulsf3+0x1bc>
   834c0:	00c03fc4 	movi	r3,255
   834c4:	10c04726 	beq	r2,r3,835e4 <__mulsf3+0x1b0>
   834c8:	99002034 	orhi	r4,r19,128
   834cc:	202690fa 	slli	r19,r4,3
   834d0:	10bfe044 	addi	r2,r2,-127
   834d4:	0007883a 	mov	r3,zero
   834d8:	80a1883a 	add	r16,r16,r2
   834dc:	010003c4 	movi	r4,15
   834e0:	1c44b03a 	or	r2,r3,r17
   834e4:	b56af03a 	xor	r21,r22,r21
   834e8:	81c00044 	addi	r7,r16,1
   834ec:	20806b36 	bltu	r4,r2,8369c <__mulsf3+0x268>
   834f0:	100490ba 	slli	r2,r2,2
   834f4:	01000234 	movhi	r4,8
   834f8:	210d4204 	addi	r4,r4,13576
   834fc:	1105883a 	add	r2,r2,r4
   83500:	10800017 	ldw	r2,0(r2)
   83504:	1000683a 	jmp	r2
   83508:	0008369c 	xori	zero,zero,8410
   8350c:	0008355c 	xori	zero,zero,8405
   83510:	0008355c 	xori	zero,zero,8405
   83514:	00083558 	cmpnei	zero,zero,8405
   83518:	00083680 	call	8368 <__alt_mem_onchip_memory2_0-0x77c98>
   8351c:	00083680 	call	8368 <__alt_mem_onchip_memory2_0-0x77c98>
   83520:	0008366c 	andhi	zero,zero,8409
   83524:	00083558 	cmpnei	zero,zero,8405
   83528:	00083680 	call	8368 <__alt_mem_onchip_memory2_0-0x77c98>
   8352c:	0008366c 	andhi	zero,zero,8409
   83530:	00083680 	call	8368 <__alt_mem_onchip_memory2_0-0x77c98>
   83534:	00083558 	cmpnei	zero,zero,8405
   83538:	0008368c 	andi	zero,zero,8410
   8353c:	0008368c 	andi	zero,zero,8410
   83540:	0008368c 	andi	zero,zero,8410
   83544:	0008379c 	xori	zero,zero,8414
   83548:	90003b1e 	bne	r18,zero,83638 <__mulsf3+0x204>
   8354c:	04400204 	movi	r17,8
   83550:	05c00084 	movi	r23,2
   83554:	003fd206 	br	834a0 <__alt_data_end+0xfffadd70>
   83558:	302b883a 	mov	r21,r6
   8355c:	00800084 	movi	r2,2
   83560:	18802626 	beq	r3,r2,835fc <__mulsf3+0x1c8>
   83564:	008000c4 	movi	r2,3
   83568:	1880b826 	beq	r3,r2,8384c <__mulsf3+0x418>
   8356c:	00800044 	movi	r2,1
   83570:	1880af1e 	bne	r3,r2,83830 <__mulsf3+0x3fc>
   83574:	a829883a 	mov	r20,r21
   83578:	0007883a 	mov	r3,zero
   8357c:	0009883a 	mov	r4,zero
   83580:	18803fcc 	andi	r2,r3,255
   83584:	100695fa 	slli	r3,r2,23
   83588:	a0803fcc 	andi	r2,r20,255
   8358c:	100a97fa 	slli	r5,r2,31
   83590:	00802034 	movhi	r2,128
   83594:	10bfffc4 	addi	r2,r2,-1
   83598:	2084703a 	and	r2,r4,r2
   8359c:	10c4b03a 	or	r2,r2,r3
   835a0:	1144b03a 	or	r2,r2,r5
   835a4:	dfc00a17 	ldw	ra,40(sp)
   835a8:	df000917 	ldw	fp,36(sp)
   835ac:	ddc00817 	ldw	r23,32(sp)
   835b0:	dd800717 	ldw	r22,28(sp)
   835b4:	dd400617 	ldw	r21,24(sp)
   835b8:	dd000517 	ldw	r20,20(sp)
   835bc:	dcc00417 	ldw	r19,16(sp)
   835c0:	dc800317 	ldw	r18,12(sp)
   835c4:	dc400217 	ldw	r17,8(sp)
   835c8:	dc000117 	ldw	r16,4(sp)
   835cc:	dec00b04 	addi	sp,sp,44
   835d0:	f800283a 	ret
   835d4:	90000d1e 	bne	r18,zero,8360c <__mulsf3+0x1d8>
   835d8:	04400104 	movi	r17,4
   835dc:	05c00044 	movi	r23,1
   835e0:	003faf06 	br	834a0 <__alt_data_end+0xfffadd70>
   835e4:	9806c03a 	cmpne	r3,r19,zero
   835e8:	18c00084 	addi	r3,r3,2
   835ec:	003fba06 	br	834d8 <__alt_data_end+0xfffadda8>
   835f0:	9800141e 	bne	r19,zero,83644 <__mulsf3+0x210>
   835f4:	00c00044 	movi	r3,1
   835f8:	003fb706 	br	834d8 <__alt_data_end+0xfffadda8>
   835fc:	a829883a 	mov	r20,r21
   83600:	00ffffc4 	movi	r3,-1
   83604:	0009883a 	mov	r4,zero
   83608:	003fdd06 	br	83580 <__alt_data_end+0xfffade50>
   8360c:	9009883a 	mov	r4,r18
   83610:	d9400015 	stw	r5,0(sp)
   83614:	00863c00 	call	863c0 <__clzsi2>
   83618:	10fffec4 	addi	r3,r2,-5
   8361c:	10801d84 	addi	r2,r2,118
   83620:	90e4983a 	sll	r18,r18,r3
   83624:	00a1c83a 	sub	r16,zero,r2
   83628:	0023883a 	mov	r17,zero
   8362c:	002f883a 	mov	r23,zero
   83630:	d9400017 	ldw	r5,0(sp)
   83634:	003f9a06 	br	834a0 <__alt_data_end+0xfffadd70>
   83638:	04400304 	movi	r17,12
   8363c:	05c000c4 	movi	r23,3
   83640:	003f9706 	br	834a0 <__alt_data_end+0xfffadd70>
   83644:	9809883a 	mov	r4,r19
   83648:	d9800015 	stw	r6,0(sp)
   8364c:	00863c00 	call	863c0 <__clzsi2>
   83650:	10fffec4 	addi	r3,r2,-5
   83654:	10801d84 	addi	r2,r2,118
   83658:	98e6983a 	sll	r19,r19,r3
   8365c:	0085c83a 	sub	r2,zero,r2
   83660:	0007883a 	mov	r3,zero
   83664:	d9800017 	ldw	r6,0(sp)
   83668:	003f9b06 	br	834d8 <__alt_data_end+0xfffadda8>
   8366c:	01002034 	movhi	r4,128
   83670:	0029883a 	mov	r20,zero
   83674:	213fffc4 	addi	r4,r4,-1
   83678:	00ffffc4 	movi	r3,-1
   8367c:	003fc006 	br	83580 <__alt_data_end+0xfffade50>
   83680:	9027883a 	mov	r19,r18
   83684:	b807883a 	mov	r3,r23
   83688:	003fb406 	br	8355c <__alt_data_end+0xfffade2c>
   8368c:	9027883a 	mov	r19,r18
   83690:	e02b883a 	mov	r21,fp
   83694:	b807883a 	mov	r3,r23
   83698:	003fb006 	br	8355c <__alt_data_end+0xfffade2c>
   8369c:	9028d43a 	srli	r20,r18,16
   836a0:	982cd43a 	srli	r22,r19,16
   836a4:	94bfffcc 	andi	r18,r18,65535
   836a8:	9cffffcc 	andi	r19,r19,65535
   836ac:	980b883a 	mov	r5,r19
   836b0:	9009883a 	mov	r4,r18
   836b4:	d9c00015 	stw	r7,0(sp)
   836b8:	0082a480 	call	82a48 <__mulsi3>
   836bc:	a00b883a 	mov	r5,r20
   836c0:	9809883a 	mov	r4,r19
   836c4:	1023883a 	mov	r17,r2
   836c8:	0082a480 	call	82a48 <__mulsi3>
   836cc:	a009883a 	mov	r4,r20
   836d0:	b00b883a 	mov	r5,r22
   836d4:	1027883a 	mov	r19,r2
   836d8:	0082a480 	call	82a48 <__mulsi3>
   836dc:	b00b883a 	mov	r5,r22
   836e0:	9009883a 	mov	r4,r18
   836e4:	1029883a 	mov	r20,r2
   836e8:	0082a480 	call	82a48 <__mulsi3>
   836ec:	8806d43a 	srli	r3,r17,16
   836f0:	14c5883a 	add	r2,r2,r19
   836f4:	d9c00017 	ldw	r7,0(sp)
   836f8:	1885883a 	add	r2,r3,r2
   836fc:	14c0022e 	bgeu	r2,r19,83708 <__mulsf3+0x2d4>
   83700:	00c00074 	movhi	r3,1
   83704:	a0e9883a 	add	r20,r20,r3
   83708:	1026943a 	slli	r19,r2,16
   8370c:	8c7fffcc 	andi	r17,r17,65535
   83710:	1004d43a 	srli	r2,r2,16
   83714:	9c63883a 	add	r17,r19,r17
   83718:	882691ba 	slli	r19,r17,6
   8371c:	1505883a 	add	r2,r2,r20
   83720:	8822d6ba 	srli	r17,r17,26
   83724:	100891ba 	slli	r4,r2,6
   83728:	9826c03a 	cmpne	r19,r19,zero
   8372c:	9c62b03a 	or	r17,r19,r17
   83730:	8926b03a 	or	r19,r17,r4
   83734:	9882002c 	andhi	r2,r19,2048
   83738:	10000426 	beq	r2,zero,8374c <__mulsf3+0x318>
   8373c:	9804d07a 	srli	r2,r19,1
   83740:	9900004c 	andi	r4,r19,1
   83744:	3821883a 	mov	r16,r7
   83748:	1126b03a 	or	r19,r2,r4
   8374c:	80c01fc4 	addi	r3,r16,127
   83750:	00c0210e 	bge	zero,r3,837d8 <__mulsf3+0x3a4>
   83754:	988001cc 	andi	r2,r19,7
   83758:	10000426 	beq	r2,zero,8376c <__mulsf3+0x338>
   8375c:	988003cc 	andi	r2,r19,15
   83760:	01000104 	movi	r4,4
   83764:	11000126 	beq	r2,r4,8376c <__mulsf3+0x338>
   83768:	9927883a 	add	r19,r19,r4
   8376c:	9882002c 	andhi	r2,r19,2048
   83770:	10000426 	beq	r2,zero,83784 <__mulsf3+0x350>
   83774:	00be0034 	movhi	r2,63488
   83778:	10bfffc4 	addi	r2,r2,-1
   8377c:	80c02004 	addi	r3,r16,128
   83780:	98a6703a 	and	r19,r19,r2
   83784:	00803f84 	movi	r2,254
   83788:	10ff9c16 	blt	r2,r3,835fc <__alt_data_end+0xfffadecc>
   8378c:	980891ba 	slli	r4,r19,6
   83790:	a829883a 	mov	r20,r21
   83794:	2008d27a 	srli	r4,r4,9
   83798:	003f7906 	br	83580 <__alt_data_end+0xfffade50>
   8379c:	9080102c 	andhi	r2,r18,64
   837a0:	10000826 	beq	r2,zero,837c4 <__mulsf3+0x390>
   837a4:	9880102c 	andhi	r2,r19,64
   837a8:	1000061e 	bne	r2,zero,837c4 <__mulsf3+0x390>
   837ac:	00802034 	movhi	r2,128
   837b0:	99001034 	orhi	r4,r19,64
   837b4:	10bfffc4 	addi	r2,r2,-1
   837b8:	b029883a 	mov	r20,r22
   837bc:	2088703a 	and	r4,r4,r2
   837c0:	003fad06 	br	83678 <__alt_data_end+0xfffadf48>
   837c4:	00802034 	movhi	r2,128
   837c8:	91001034 	orhi	r4,r18,64
   837cc:	10bfffc4 	addi	r2,r2,-1
   837d0:	2088703a 	and	r4,r4,r2
   837d4:	003fa806 	br	83678 <__alt_data_end+0xfffadf48>
   837d8:	00800044 	movi	r2,1
   837dc:	10c7c83a 	sub	r3,r2,r3
   837e0:	008006c4 	movi	r2,27
   837e4:	10ff6316 	blt	r2,r3,83574 <__alt_data_end+0xfffade44>
   837e8:	00800804 	movi	r2,32
   837ec:	10c5c83a 	sub	r2,r2,r3
   837f0:	9884983a 	sll	r2,r19,r2
   837f4:	98c6d83a 	srl	r3,r19,r3
   837f8:	1004c03a 	cmpne	r2,r2,zero
   837fc:	1884b03a 	or	r2,r3,r2
   83800:	10c001cc 	andi	r3,r2,7
   83804:	18000426 	beq	r3,zero,83818 <__mulsf3+0x3e4>
   83808:	10c003cc 	andi	r3,r2,15
   8380c:	01000104 	movi	r4,4
   83810:	19000126 	beq	r3,r4,83818 <__mulsf3+0x3e4>
   83814:	1105883a 	add	r2,r2,r4
   83818:	10c1002c 	andhi	r3,r2,1024
   8381c:	18000626 	beq	r3,zero,83838 <__mulsf3+0x404>
   83820:	a829883a 	mov	r20,r21
   83824:	00c00044 	movi	r3,1
   83828:	0009883a 	mov	r4,zero
   8382c:	003f5406 	br	83580 <__alt_data_end+0xfffade50>
   83830:	3821883a 	mov	r16,r7
   83834:	003fc506 	br	8374c <__alt_data_end+0xfffae01c>
   83838:	100491ba 	slli	r2,r2,6
   8383c:	a829883a 	mov	r20,r21
   83840:	0007883a 	mov	r3,zero
   83844:	1008d27a 	srli	r4,r2,9
   83848:	003f4d06 	br	83580 <__alt_data_end+0xfffade50>
   8384c:	00802034 	movhi	r2,128
   83850:	99001034 	orhi	r4,r19,64
   83854:	10bfffc4 	addi	r2,r2,-1
   83858:	a829883a 	mov	r20,r21
   8385c:	2088703a 	and	r4,r4,r2
   83860:	003f8506 	br	83678 <__alt_data_end+0xfffadf48>

00083864 <__fixsfsi>:
   83864:	200ad5fa 	srli	r5,r4,23
   83868:	00c02034 	movhi	r3,128
   8386c:	18ffffc4 	addi	r3,r3,-1
   83870:	29403fcc 	andi	r5,r5,255
   83874:	00801f84 	movi	r2,126
   83878:	1906703a 	and	r3,r3,r4
   8387c:	2008d7fa 	srli	r4,r4,31
   83880:	11400e0e 	bge	r2,r5,838bc <__fixsfsi+0x58>
   83884:	00802744 	movi	r2,157
   83888:	11400816 	blt	r2,r5,838ac <__fixsfsi+0x48>
   8388c:	00802544 	movi	r2,149
   83890:	18c02034 	orhi	r3,r3,128
   83894:	11400b0e 	bge	r2,r5,838c4 <__fixsfsi+0x60>
   83898:	28bfda84 	addi	r2,r5,-150
   8389c:	1884983a 	sll	r2,r3,r2
   838a0:	20000726 	beq	r4,zero,838c0 <__fixsfsi+0x5c>
   838a4:	0085c83a 	sub	r2,zero,r2
   838a8:	f800283a 	ret
   838ac:	00a00034 	movhi	r2,32768
   838b0:	10bfffc4 	addi	r2,r2,-1
   838b4:	2085883a 	add	r2,r4,r2
   838b8:	f800283a 	ret
   838bc:	0005883a 	mov	r2,zero
   838c0:	f800283a 	ret
   838c4:	00802584 	movi	r2,150
   838c8:	1145c83a 	sub	r2,r2,r5
   838cc:	1884d83a 	srl	r2,r3,r2
   838d0:	003ff306 	br	838a0 <__alt_data_end+0xfffae170>

000838d4 <__floatsisf>:
   838d4:	defffd04 	addi	sp,sp,-12
   838d8:	dfc00215 	stw	ra,8(sp)
   838dc:	dc400115 	stw	r17,4(sp)
   838e0:	dc000015 	stw	r16,0(sp)
   838e4:	20003526 	beq	r4,zero,839bc <__floatsisf+0xe8>
   838e8:	2021883a 	mov	r16,r4
   838ec:	2022d7fa 	srli	r17,r4,31
   838f0:	20003616 	blt	r4,zero,839cc <__floatsisf+0xf8>
   838f4:	8009883a 	mov	r4,r16
   838f8:	00863c00 	call	863c0 <__clzsi2>
   838fc:	00c02784 	movi	r3,158
   83900:	1887c83a 	sub	r3,r3,r2
   83904:	01002584 	movi	r4,150
   83908:	20c01416 	blt	r4,r3,8395c <__floatsisf+0x88>
   8390c:	20c9c83a 	sub	r4,r4,r3
   83910:	8120983a 	sll	r16,r16,r4
   83914:	00802034 	movhi	r2,128
   83918:	10bfffc4 	addi	r2,r2,-1
   8391c:	8809883a 	mov	r4,r17
   83920:	80a0703a 	and	r16,r16,r2
   83924:	18803fcc 	andi	r2,r3,255
   83928:	100695fa 	slli	r3,r2,23
   8392c:	20803fcc 	andi	r2,r4,255
   83930:	100897fa 	slli	r4,r2,31
   83934:	00802034 	movhi	r2,128
   83938:	10bfffc4 	addi	r2,r2,-1
   8393c:	8084703a 	and	r2,r16,r2
   83940:	10c4b03a 	or	r2,r2,r3
   83944:	1104b03a 	or	r2,r2,r4
   83948:	dfc00217 	ldw	ra,8(sp)
   8394c:	dc400117 	ldw	r17,4(sp)
   83950:	dc000017 	ldw	r16,0(sp)
   83954:	dec00304 	addi	sp,sp,12
   83958:	f800283a 	ret
   8395c:	01002644 	movi	r4,153
   83960:	20c01c16 	blt	r4,r3,839d4 <__floatsisf+0x100>
   83964:	20c9c83a 	sub	r4,r4,r3
   83968:	8120983a 	sll	r16,r16,r4
   8396c:	013f0034 	movhi	r4,64512
   83970:	213fffc4 	addi	r4,r4,-1
   83974:	814001cc 	andi	r5,r16,7
   83978:	8108703a 	and	r4,r16,r4
   8397c:	28000426 	beq	r5,zero,83990 <__floatsisf+0xbc>
   83980:	840003cc 	andi	r16,r16,15
   83984:	01400104 	movi	r5,4
   83988:	81400126 	beq	r16,r5,83990 <__floatsisf+0xbc>
   8398c:	2149883a 	add	r4,r4,r5
   83990:	2141002c 	andhi	r5,r4,1024
   83994:	28000526 	beq	r5,zero,839ac <__floatsisf+0xd8>
   83998:	00c027c4 	movi	r3,159
   8399c:	1887c83a 	sub	r3,r3,r2
   839a0:	00bf0034 	movhi	r2,64512
   839a4:	10bfffc4 	addi	r2,r2,-1
   839a8:	2088703a 	and	r4,r4,r2
   839ac:	202091ba 	slli	r16,r4,6
   839b0:	8809883a 	mov	r4,r17
   839b4:	8020d27a 	srli	r16,r16,9
   839b8:	003fda06 	br	83924 <__alt_data_end+0xfffae1f4>
   839bc:	0009883a 	mov	r4,zero
   839c0:	0007883a 	mov	r3,zero
   839c4:	0021883a 	mov	r16,zero
   839c8:	003fd606 	br	83924 <__alt_data_end+0xfffae1f4>
   839cc:	0121c83a 	sub	r16,zero,r4
   839d0:	003fc806 	br	838f4 <__alt_data_end+0xfffae1c4>
   839d4:	01002e44 	movi	r4,185
   839d8:	20c9c83a 	sub	r4,r4,r3
   839dc:	01400144 	movi	r5,5
   839e0:	8108983a 	sll	r4,r16,r4
   839e4:	288bc83a 	sub	r5,r5,r2
   839e8:	8160d83a 	srl	r16,r16,r5
   839ec:	2008c03a 	cmpne	r4,r4,zero
   839f0:	8120b03a 	or	r16,r16,r4
   839f4:	003fdd06 	br	8396c <__alt_data_end+0xfffae23c>

000839f8 <__adddf3>:
   839f8:	02c00434 	movhi	r11,16
   839fc:	5affffc4 	addi	r11,r11,-1
   83a00:	2806d7fa 	srli	r3,r5,31
   83a04:	2ad4703a 	and	r10,r5,r11
   83a08:	3ad2703a 	and	r9,r7,r11
   83a0c:	3804d53a 	srli	r2,r7,20
   83a10:	3018d77a 	srli	r12,r6,29
   83a14:	280ad53a 	srli	r5,r5,20
   83a18:	501490fa 	slli	r10,r10,3
   83a1c:	2010d77a 	srli	r8,r4,29
   83a20:	481290fa 	slli	r9,r9,3
   83a24:	380ed7fa 	srli	r7,r7,31
   83a28:	defffb04 	addi	sp,sp,-20
   83a2c:	dc800215 	stw	r18,8(sp)
   83a30:	dc400115 	stw	r17,4(sp)
   83a34:	dc000015 	stw	r16,0(sp)
   83a38:	dfc00415 	stw	ra,16(sp)
   83a3c:	dcc00315 	stw	r19,12(sp)
   83a40:	1c803fcc 	andi	r18,r3,255
   83a44:	2c01ffcc 	andi	r16,r5,2047
   83a48:	5210b03a 	or	r8,r10,r8
   83a4c:	202290fa 	slli	r17,r4,3
   83a50:	1081ffcc 	andi	r2,r2,2047
   83a54:	4b12b03a 	or	r9,r9,r12
   83a58:	300c90fa 	slli	r6,r6,3
   83a5c:	91c07526 	beq	r18,r7,83c34 <__adddf3+0x23c>
   83a60:	8087c83a 	sub	r3,r16,r2
   83a64:	00c0ab0e 	bge	zero,r3,83d14 <__adddf3+0x31c>
   83a68:	10002a1e 	bne	r2,zero,83b14 <__adddf3+0x11c>
   83a6c:	4984b03a 	or	r2,r9,r6
   83a70:	1000961e 	bne	r2,zero,83ccc <__adddf3+0x2d4>
   83a74:	888001cc 	andi	r2,r17,7
   83a78:	10000726 	beq	r2,zero,83a98 <__adddf3+0xa0>
   83a7c:	888003cc 	andi	r2,r17,15
   83a80:	00c00104 	movi	r3,4
   83a84:	10c00426 	beq	r2,r3,83a98 <__adddf3+0xa0>
   83a88:	88c7883a 	add	r3,r17,r3
   83a8c:	1c63803a 	cmpltu	r17,r3,r17
   83a90:	4451883a 	add	r8,r8,r17
   83a94:	1823883a 	mov	r17,r3
   83a98:	4080202c 	andhi	r2,r8,128
   83a9c:	10005926 	beq	r2,zero,83c04 <__adddf3+0x20c>
   83aa0:	84000044 	addi	r16,r16,1
   83aa4:	0081ffc4 	movi	r2,2047
   83aa8:	8080ba26 	beq	r16,r2,83d94 <__adddf3+0x39c>
   83aac:	00bfe034 	movhi	r2,65408
   83ab0:	10bfffc4 	addi	r2,r2,-1
   83ab4:	4090703a 	and	r8,r8,r2
   83ab8:	4004977a 	slli	r2,r8,29
   83abc:	4010927a 	slli	r8,r8,9
   83ac0:	8822d0fa 	srli	r17,r17,3
   83ac4:	8401ffcc 	andi	r16,r16,2047
   83ac8:	4010d33a 	srli	r8,r8,12
   83acc:	9007883a 	mov	r3,r18
   83ad0:	1444b03a 	or	r2,r2,r17
   83ad4:	8401ffcc 	andi	r16,r16,2047
   83ad8:	8020953a 	slli	r16,r16,20
   83adc:	18c03fcc 	andi	r3,r3,255
   83ae0:	01000434 	movhi	r4,16
   83ae4:	213fffc4 	addi	r4,r4,-1
   83ae8:	180697fa 	slli	r3,r3,31
   83aec:	4110703a 	and	r8,r8,r4
   83af0:	4410b03a 	or	r8,r8,r16
   83af4:	40c6b03a 	or	r3,r8,r3
   83af8:	dfc00417 	ldw	ra,16(sp)
   83afc:	dcc00317 	ldw	r19,12(sp)
   83b00:	dc800217 	ldw	r18,8(sp)
   83b04:	dc400117 	ldw	r17,4(sp)
   83b08:	dc000017 	ldw	r16,0(sp)
   83b0c:	dec00504 	addi	sp,sp,20
   83b10:	f800283a 	ret
   83b14:	0081ffc4 	movi	r2,2047
   83b18:	80bfd626 	beq	r16,r2,83a74 <__alt_data_end+0xfffae344>
   83b1c:	4a402034 	orhi	r9,r9,128
   83b20:	00800e04 	movi	r2,56
   83b24:	10c09f16 	blt	r2,r3,83da4 <__adddf3+0x3ac>
   83b28:	008007c4 	movi	r2,31
   83b2c:	10c0c216 	blt	r2,r3,83e38 <__adddf3+0x440>
   83b30:	00800804 	movi	r2,32
   83b34:	10c5c83a 	sub	r2,r2,r3
   83b38:	488a983a 	sll	r5,r9,r2
   83b3c:	30c8d83a 	srl	r4,r6,r3
   83b40:	3084983a 	sll	r2,r6,r2
   83b44:	48c6d83a 	srl	r3,r9,r3
   83b48:	290cb03a 	or	r6,r5,r4
   83b4c:	1004c03a 	cmpne	r2,r2,zero
   83b50:	308cb03a 	or	r6,r6,r2
   83b54:	898dc83a 	sub	r6,r17,r6
   83b58:	89a3803a 	cmpltu	r17,r17,r6
   83b5c:	40d1c83a 	sub	r8,r8,r3
   83b60:	4451c83a 	sub	r8,r8,r17
   83b64:	3023883a 	mov	r17,r6
   83b68:	4080202c 	andhi	r2,r8,128
   83b6c:	10002326 	beq	r2,zero,83bfc <__adddf3+0x204>
   83b70:	04c02034 	movhi	r19,128
   83b74:	9cffffc4 	addi	r19,r19,-1
   83b78:	44e6703a 	and	r19,r8,r19
   83b7c:	98007626 	beq	r19,zero,83d58 <__adddf3+0x360>
   83b80:	9809883a 	mov	r4,r19
   83b84:	00863c00 	call	863c0 <__clzsi2>
   83b88:	10fffe04 	addi	r3,r2,-8
   83b8c:	010007c4 	movi	r4,31
   83b90:	20c07716 	blt	r4,r3,83d70 <__adddf3+0x378>
   83b94:	00800804 	movi	r2,32
   83b98:	10c5c83a 	sub	r2,r2,r3
   83b9c:	8884d83a 	srl	r2,r17,r2
   83ba0:	98d0983a 	sll	r8,r19,r3
   83ba4:	88e2983a 	sll	r17,r17,r3
   83ba8:	1204b03a 	or	r2,r2,r8
   83bac:	1c007416 	blt	r3,r16,83d80 <__adddf3+0x388>
   83bb0:	1c21c83a 	sub	r16,r3,r16
   83bb4:	82000044 	addi	r8,r16,1
   83bb8:	00c007c4 	movi	r3,31
   83bbc:	1a009116 	blt	r3,r8,83e04 <__adddf3+0x40c>
   83bc0:	00c00804 	movi	r3,32
   83bc4:	1a07c83a 	sub	r3,r3,r8
   83bc8:	8a08d83a 	srl	r4,r17,r8
   83bcc:	88e2983a 	sll	r17,r17,r3
   83bd0:	10c6983a 	sll	r3,r2,r3
   83bd4:	1210d83a 	srl	r8,r2,r8
   83bd8:	8804c03a 	cmpne	r2,r17,zero
   83bdc:	1906b03a 	or	r3,r3,r4
   83be0:	18a2b03a 	or	r17,r3,r2
   83be4:	0021883a 	mov	r16,zero
   83be8:	003fa206 	br	83a74 <__alt_data_end+0xfffae344>
   83bec:	1890b03a 	or	r8,r3,r2
   83bf0:	40017d26 	beq	r8,zero,841e8 <__adddf3+0x7f0>
   83bf4:	1011883a 	mov	r8,r2
   83bf8:	1823883a 	mov	r17,r3
   83bfc:	888001cc 	andi	r2,r17,7
   83c00:	103f9e1e 	bne	r2,zero,83a7c <__alt_data_end+0xfffae34c>
   83c04:	4004977a 	slli	r2,r8,29
   83c08:	8822d0fa 	srli	r17,r17,3
   83c0c:	4010d0fa 	srli	r8,r8,3
   83c10:	9007883a 	mov	r3,r18
   83c14:	1444b03a 	or	r2,r2,r17
   83c18:	0101ffc4 	movi	r4,2047
   83c1c:	81002426 	beq	r16,r4,83cb0 <__adddf3+0x2b8>
   83c20:	8120703a 	and	r16,r16,r4
   83c24:	01000434 	movhi	r4,16
   83c28:	213fffc4 	addi	r4,r4,-1
   83c2c:	4110703a 	and	r8,r8,r4
   83c30:	003fa806 	br	83ad4 <__alt_data_end+0xfffae3a4>
   83c34:	8089c83a 	sub	r4,r16,r2
   83c38:	01005e0e 	bge	zero,r4,83db4 <__adddf3+0x3bc>
   83c3c:	10002b26 	beq	r2,zero,83cec <__adddf3+0x2f4>
   83c40:	0081ffc4 	movi	r2,2047
   83c44:	80bf8b26 	beq	r16,r2,83a74 <__alt_data_end+0xfffae344>
   83c48:	4a402034 	orhi	r9,r9,128
   83c4c:	00800e04 	movi	r2,56
   83c50:	1100a40e 	bge	r2,r4,83ee4 <__adddf3+0x4ec>
   83c54:	498cb03a 	or	r6,r9,r6
   83c58:	300ac03a 	cmpne	r5,r6,zero
   83c5c:	0013883a 	mov	r9,zero
   83c60:	2c4b883a 	add	r5,r5,r17
   83c64:	2c63803a 	cmpltu	r17,r5,r17
   83c68:	4a11883a 	add	r8,r9,r8
   83c6c:	8a11883a 	add	r8,r17,r8
   83c70:	2823883a 	mov	r17,r5
   83c74:	4080202c 	andhi	r2,r8,128
   83c78:	103fe026 	beq	r2,zero,83bfc <__alt_data_end+0xfffae4cc>
   83c7c:	84000044 	addi	r16,r16,1
   83c80:	0081ffc4 	movi	r2,2047
   83c84:	8080d226 	beq	r16,r2,83fd0 <__adddf3+0x5d8>
   83c88:	00bfe034 	movhi	r2,65408
   83c8c:	10bfffc4 	addi	r2,r2,-1
   83c90:	4090703a 	and	r8,r8,r2
   83c94:	880ad07a 	srli	r5,r17,1
   83c98:	400897fa 	slli	r4,r8,31
   83c9c:	88c0004c 	andi	r3,r17,1
   83ca0:	28e2b03a 	or	r17,r5,r3
   83ca4:	4010d07a 	srli	r8,r8,1
   83ca8:	2462b03a 	or	r17,r4,r17
   83cac:	003f7106 	br	83a74 <__alt_data_end+0xfffae344>
   83cb0:	4088b03a 	or	r4,r8,r2
   83cb4:	20014526 	beq	r4,zero,841cc <__adddf3+0x7d4>
   83cb8:	01000434 	movhi	r4,16
   83cbc:	42000234 	orhi	r8,r8,8
   83cc0:	213fffc4 	addi	r4,r4,-1
   83cc4:	4110703a 	and	r8,r8,r4
   83cc8:	003f8206 	br	83ad4 <__alt_data_end+0xfffae3a4>
   83ccc:	18ffffc4 	addi	r3,r3,-1
   83cd0:	1800491e 	bne	r3,zero,83df8 <__adddf3+0x400>
   83cd4:	898bc83a 	sub	r5,r17,r6
   83cd8:	8963803a 	cmpltu	r17,r17,r5
   83cdc:	4251c83a 	sub	r8,r8,r9
   83ce0:	4451c83a 	sub	r8,r8,r17
   83ce4:	2823883a 	mov	r17,r5
   83ce8:	003f9f06 	br	83b68 <__alt_data_end+0xfffae438>
   83cec:	4984b03a 	or	r2,r9,r6
   83cf0:	103f6026 	beq	r2,zero,83a74 <__alt_data_end+0xfffae344>
   83cf4:	213fffc4 	addi	r4,r4,-1
   83cf8:	2000931e 	bne	r4,zero,83f48 <__adddf3+0x550>
   83cfc:	898d883a 	add	r6,r17,r6
   83d00:	3463803a 	cmpltu	r17,r6,r17
   83d04:	4251883a 	add	r8,r8,r9
   83d08:	8a11883a 	add	r8,r17,r8
   83d0c:	3023883a 	mov	r17,r6
   83d10:	003fd806 	br	83c74 <__alt_data_end+0xfffae544>
   83d14:	1800541e 	bne	r3,zero,83e68 <__adddf3+0x470>
   83d18:	80800044 	addi	r2,r16,1
   83d1c:	1081ffcc 	andi	r2,r2,2047
   83d20:	00c00044 	movi	r3,1
   83d24:	1880a00e 	bge	r3,r2,83fa8 <__adddf3+0x5b0>
   83d28:	8989c83a 	sub	r4,r17,r6
   83d2c:	8905803a 	cmpltu	r2,r17,r4
   83d30:	4267c83a 	sub	r19,r8,r9
   83d34:	98a7c83a 	sub	r19,r19,r2
   83d38:	9880202c 	andhi	r2,r19,128
   83d3c:	10006326 	beq	r2,zero,83ecc <__adddf3+0x4d4>
   83d40:	3463c83a 	sub	r17,r6,r17
   83d44:	4a07c83a 	sub	r3,r9,r8
   83d48:	344d803a 	cmpltu	r6,r6,r17
   83d4c:	19a7c83a 	sub	r19,r3,r6
   83d50:	3825883a 	mov	r18,r7
   83d54:	983f8a1e 	bne	r19,zero,83b80 <__alt_data_end+0xfffae450>
   83d58:	8809883a 	mov	r4,r17
   83d5c:	00863c00 	call	863c0 <__clzsi2>
   83d60:	10800804 	addi	r2,r2,32
   83d64:	10fffe04 	addi	r3,r2,-8
   83d68:	010007c4 	movi	r4,31
   83d6c:	20ff890e 	bge	r4,r3,83b94 <__alt_data_end+0xfffae464>
   83d70:	10bff604 	addi	r2,r2,-40
   83d74:	8884983a 	sll	r2,r17,r2
   83d78:	0023883a 	mov	r17,zero
   83d7c:	1c3f8c0e 	bge	r3,r16,83bb0 <__alt_data_end+0xfffae480>
   83d80:	023fe034 	movhi	r8,65408
   83d84:	423fffc4 	addi	r8,r8,-1
   83d88:	80e1c83a 	sub	r16,r16,r3
   83d8c:	1210703a 	and	r8,r2,r8
   83d90:	003f3806 	br	83a74 <__alt_data_end+0xfffae344>
   83d94:	9007883a 	mov	r3,r18
   83d98:	0011883a 	mov	r8,zero
   83d9c:	0005883a 	mov	r2,zero
   83da0:	003f4c06 	br	83ad4 <__alt_data_end+0xfffae3a4>
   83da4:	498cb03a 	or	r6,r9,r6
   83da8:	300cc03a 	cmpne	r6,r6,zero
   83dac:	0007883a 	mov	r3,zero
   83db0:	003f6806 	br	83b54 <__alt_data_end+0xfffae424>
   83db4:	20009c1e 	bne	r4,zero,84028 <__adddf3+0x630>
   83db8:	80800044 	addi	r2,r16,1
   83dbc:	1141ffcc 	andi	r5,r2,2047
   83dc0:	01000044 	movi	r4,1
   83dc4:	2140670e 	bge	r4,r5,83f64 <__adddf3+0x56c>
   83dc8:	0101ffc4 	movi	r4,2047
   83dcc:	11007f26 	beq	r2,r4,83fcc <__adddf3+0x5d4>
   83dd0:	898d883a 	add	r6,r17,r6
   83dd4:	4247883a 	add	r3,r8,r9
   83dd8:	3451803a 	cmpltu	r8,r6,r17
   83ddc:	40d1883a 	add	r8,r8,r3
   83de0:	402297fa 	slli	r17,r8,31
   83de4:	300cd07a 	srli	r6,r6,1
   83de8:	4010d07a 	srli	r8,r8,1
   83dec:	1021883a 	mov	r16,r2
   83df0:	89a2b03a 	or	r17,r17,r6
   83df4:	003f1f06 	br	83a74 <__alt_data_end+0xfffae344>
   83df8:	0081ffc4 	movi	r2,2047
   83dfc:	80bf481e 	bne	r16,r2,83b20 <__alt_data_end+0xfffae3f0>
   83e00:	003f1c06 	br	83a74 <__alt_data_end+0xfffae344>
   83e04:	843ff844 	addi	r16,r16,-31
   83e08:	01000804 	movi	r4,32
   83e0c:	1406d83a 	srl	r3,r2,r16
   83e10:	41005026 	beq	r8,r4,83f54 <__adddf3+0x55c>
   83e14:	01001004 	movi	r4,64
   83e18:	2211c83a 	sub	r8,r4,r8
   83e1c:	1204983a 	sll	r2,r2,r8
   83e20:	88a2b03a 	or	r17,r17,r2
   83e24:	8822c03a 	cmpne	r17,r17,zero
   83e28:	1c62b03a 	or	r17,r3,r17
   83e2c:	0011883a 	mov	r8,zero
   83e30:	0021883a 	mov	r16,zero
   83e34:	003f7106 	br	83bfc <__alt_data_end+0xfffae4cc>
   83e38:	193ff804 	addi	r4,r3,-32
   83e3c:	00800804 	movi	r2,32
   83e40:	4908d83a 	srl	r4,r9,r4
   83e44:	18804526 	beq	r3,r2,83f5c <__adddf3+0x564>
   83e48:	00801004 	movi	r2,64
   83e4c:	10c5c83a 	sub	r2,r2,r3
   83e50:	4886983a 	sll	r3,r9,r2
   83e54:	198cb03a 	or	r6,r3,r6
   83e58:	300cc03a 	cmpne	r6,r6,zero
   83e5c:	218cb03a 	or	r6,r4,r6
   83e60:	0007883a 	mov	r3,zero
   83e64:	003f3b06 	br	83b54 <__alt_data_end+0xfffae424>
   83e68:	80002a26 	beq	r16,zero,83f14 <__adddf3+0x51c>
   83e6c:	0101ffc4 	movi	r4,2047
   83e70:	11006826 	beq	r2,r4,84014 <__adddf3+0x61c>
   83e74:	00c7c83a 	sub	r3,zero,r3
   83e78:	42002034 	orhi	r8,r8,128
   83e7c:	01000e04 	movi	r4,56
   83e80:	20c07c16 	blt	r4,r3,84074 <__adddf3+0x67c>
   83e84:	010007c4 	movi	r4,31
   83e88:	20c0da16 	blt	r4,r3,841f4 <__adddf3+0x7fc>
   83e8c:	01000804 	movi	r4,32
   83e90:	20c9c83a 	sub	r4,r4,r3
   83e94:	4114983a 	sll	r10,r8,r4
   83e98:	88cad83a 	srl	r5,r17,r3
   83e9c:	8908983a 	sll	r4,r17,r4
   83ea0:	40c6d83a 	srl	r3,r8,r3
   83ea4:	5162b03a 	or	r17,r10,r5
   83ea8:	2008c03a 	cmpne	r4,r4,zero
   83eac:	8922b03a 	or	r17,r17,r4
   83eb0:	3463c83a 	sub	r17,r6,r17
   83eb4:	48c7c83a 	sub	r3,r9,r3
   83eb8:	344d803a 	cmpltu	r6,r6,r17
   83ebc:	1991c83a 	sub	r8,r3,r6
   83ec0:	1021883a 	mov	r16,r2
   83ec4:	3825883a 	mov	r18,r7
   83ec8:	003f2706 	br	83b68 <__alt_data_end+0xfffae438>
   83ecc:	24d0b03a 	or	r8,r4,r19
   83ed0:	40001b1e 	bne	r8,zero,83f40 <__adddf3+0x548>
   83ed4:	0005883a 	mov	r2,zero
   83ed8:	0007883a 	mov	r3,zero
   83edc:	0021883a 	mov	r16,zero
   83ee0:	003f4d06 	br	83c18 <__alt_data_end+0xfffae4e8>
   83ee4:	008007c4 	movi	r2,31
   83ee8:	11003c16 	blt	r2,r4,83fdc <__adddf3+0x5e4>
   83eec:	00800804 	movi	r2,32
   83ef0:	1105c83a 	sub	r2,r2,r4
   83ef4:	488e983a 	sll	r7,r9,r2
   83ef8:	310ad83a 	srl	r5,r6,r4
   83efc:	3084983a 	sll	r2,r6,r2
   83f00:	4912d83a 	srl	r9,r9,r4
   83f04:	394ab03a 	or	r5,r7,r5
   83f08:	1004c03a 	cmpne	r2,r2,zero
   83f0c:	288ab03a 	or	r5,r5,r2
   83f10:	003f5306 	br	83c60 <__alt_data_end+0xfffae530>
   83f14:	4448b03a 	or	r4,r8,r17
   83f18:	20003e26 	beq	r4,zero,84014 <__adddf3+0x61c>
   83f1c:	00c6303a 	nor	r3,zero,r3
   83f20:	18003a1e 	bne	r3,zero,8400c <__adddf3+0x614>
   83f24:	3463c83a 	sub	r17,r6,r17
   83f28:	4a07c83a 	sub	r3,r9,r8
   83f2c:	344d803a 	cmpltu	r6,r6,r17
   83f30:	1991c83a 	sub	r8,r3,r6
   83f34:	1021883a 	mov	r16,r2
   83f38:	3825883a 	mov	r18,r7
   83f3c:	003f0a06 	br	83b68 <__alt_data_end+0xfffae438>
   83f40:	2023883a 	mov	r17,r4
   83f44:	003f0d06 	br	83b7c <__alt_data_end+0xfffae44c>
   83f48:	0081ffc4 	movi	r2,2047
   83f4c:	80bf3f1e 	bne	r16,r2,83c4c <__alt_data_end+0xfffae51c>
   83f50:	003ec806 	br	83a74 <__alt_data_end+0xfffae344>
   83f54:	0005883a 	mov	r2,zero
   83f58:	003fb106 	br	83e20 <__alt_data_end+0xfffae6f0>
   83f5c:	0007883a 	mov	r3,zero
   83f60:	003fbc06 	br	83e54 <__alt_data_end+0xfffae724>
   83f64:	4444b03a 	or	r2,r8,r17
   83f68:	8000871e 	bne	r16,zero,84188 <__adddf3+0x790>
   83f6c:	1000ba26 	beq	r2,zero,84258 <__adddf3+0x860>
   83f70:	4984b03a 	or	r2,r9,r6
   83f74:	103ebf26 	beq	r2,zero,83a74 <__alt_data_end+0xfffae344>
   83f78:	8985883a 	add	r2,r17,r6
   83f7c:	4247883a 	add	r3,r8,r9
   83f80:	1451803a 	cmpltu	r8,r2,r17
   83f84:	40d1883a 	add	r8,r8,r3
   83f88:	40c0202c 	andhi	r3,r8,128
   83f8c:	1023883a 	mov	r17,r2
   83f90:	183f1a26 	beq	r3,zero,83bfc <__alt_data_end+0xfffae4cc>
   83f94:	00bfe034 	movhi	r2,65408
   83f98:	10bfffc4 	addi	r2,r2,-1
   83f9c:	2021883a 	mov	r16,r4
   83fa0:	4090703a 	and	r8,r8,r2
   83fa4:	003eb306 	br	83a74 <__alt_data_end+0xfffae344>
   83fa8:	4444b03a 	or	r2,r8,r17
   83fac:	8000291e 	bne	r16,zero,84054 <__adddf3+0x65c>
   83fb0:	10004b1e 	bne	r2,zero,840e0 <__adddf3+0x6e8>
   83fb4:	4990b03a 	or	r8,r9,r6
   83fb8:	40008b26 	beq	r8,zero,841e8 <__adddf3+0x7f0>
   83fbc:	4811883a 	mov	r8,r9
   83fc0:	3023883a 	mov	r17,r6
   83fc4:	3825883a 	mov	r18,r7
   83fc8:	003eaa06 	br	83a74 <__alt_data_end+0xfffae344>
   83fcc:	1021883a 	mov	r16,r2
   83fd0:	0011883a 	mov	r8,zero
   83fd4:	0005883a 	mov	r2,zero
   83fd8:	003f0f06 	br	83c18 <__alt_data_end+0xfffae4e8>
   83fdc:	217ff804 	addi	r5,r4,-32
   83fe0:	00800804 	movi	r2,32
   83fe4:	494ad83a 	srl	r5,r9,r5
   83fe8:	20807d26 	beq	r4,r2,841e0 <__adddf3+0x7e8>
   83fec:	00801004 	movi	r2,64
   83ff0:	1109c83a 	sub	r4,r2,r4
   83ff4:	4912983a 	sll	r9,r9,r4
   83ff8:	498cb03a 	or	r6,r9,r6
   83ffc:	300cc03a 	cmpne	r6,r6,zero
   84000:	298ab03a 	or	r5,r5,r6
   84004:	0013883a 	mov	r9,zero
   84008:	003f1506 	br	83c60 <__alt_data_end+0xfffae530>
   8400c:	0101ffc4 	movi	r4,2047
   84010:	113f9a1e 	bne	r2,r4,83e7c <__alt_data_end+0xfffae74c>
   84014:	4811883a 	mov	r8,r9
   84018:	3023883a 	mov	r17,r6
   8401c:	1021883a 	mov	r16,r2
   84020:	3825883a 	mov	r18,r7
   84024:	003e9306 	br	83a74 <__alt_data_end+0xfffae344>
   84028:	8000161e 	bne	r16,zero,84084 <__adddf3+0x68c>
   8402c:	444ab03a 	or	r5,r8,r17
   84030:	28005126 	beq	r5,zero,84178 <__adddf3+0x780>
   84034:	0108303a 	nor	r4,zero,r4
   84038:	20004d1e 	bne	r4,zero,84170 <__adddf3+0x778>
   8403c:	89a3883a 	add	r17,r17,r6
   84040:	4253883a 	add	r9,r8,r9
   84044:	898d803a 	cmpltu	r6,r17,r6
   84048:	3251883a 	add	r8,r6,r9
   8404c:	1021883a 	mov	r16,r2
   84050:	003f0806 	br	83c74 <__alt_data_end+0xfffae544>
   84054:	1000301e 	bne	r2,zero,84118 <__adddf3+0x720>
   84058:	4984b03a 	or	r2,r9,r6
   8405c:	10007126 	beq	r2,zero,84224 <__adddf3+0x82c>
   84060:	4811883a 	mov	r8,r9
   84064:	3023883a 	mov	r17,r6
   84068:	3825883a 	mov	r18,r7
   8406c:	0401ffc4 	movi	r16,2047
   84070:	003e8006 	br	83a74 <__alt_data_end+0xfffae344>
   84074:	4462b03a 	or	r17,r8,r17
   84078:	8822c03a 	cmpne	r17,r17,zero
   8407c:	0007883a 	mov	r3,zero
   84080:	003f8b06 	br	83eb0 <__alt_data_end+0xfffae780>
   84084:	0141ffc4 	movi	r5,2047
   84088:	11403b26 	beq	r2,r5,84178 <__adddf3+0x780>
   8408c:	0109c83a 	sub	r4,zero,r4
   84090:	42002034 	orhi	r8,r8,128
   84094:	01400e04 	movi	r5,56
   84098:	29006716 	blt	r5,r4,84238 <__adddf3+0x840>
   8409c:	014007c4 	movi	r5,31
   840a0:	29007016 	blt	r5,r4,84264 <__adddf3+0x86c>
   840a4:	01400804 	movi	r5,32
   840a8:	290bc83a 	sub	r5,r5,r4
   840ac:	4154983a 	sll	r10,r8,r5
   840b0:	890ed83a 	srl	r7,r17,r4
   840b4:	894a983a 	sll	r5,r17,r5
   840b8:	4108d83a 	srl	r4,r8,r4
   840bc:	51e2b03a 	or	r17,r10,r7
   840c0:	280ac03a 	cmpne	r5,r5,zero
   840c4:	8962b03a 	or	r17,r17,r5
   840c8:	89a3883a 	add	r17,r17,r6
   840cc:	2253883a 	add	r9,r4,r9
   840d0:	898d803a 	cmpltu	r6,r17,r6
   840d4:	3251883a 	add	r8,r6,r9
   840d8:	1021883a 	mov	r16,r2
   840dc:	003ee506 	br	83c74 <__alt_data_end+0xfffae544>
   840e0:	4984b03a 	or	r2,r9,r6
   840e4:	103e6326 	beq	r2,zero,83a74 <__alt_data_end+0xfffae344>
   840e8:	8987c83a 	sub	r3,r17,r6
   840ec:	88c9803a 	cmpltu	r4,r17,r3
   840f0:	4245c83a 	sub	r2,r8,r9
   840f4:	1105c83a 	sub	r2,r2,r4
   840f8:	1100202c 	andhi	r4,r2,128
   840fc:	203ebb26 	beq	r4,zero,83bec <__alt_data_end+0xfffae4bc>
   84100:	3463c83a 	sub	r17,r6,r17
   84104:	4a07c83a 	sub	r3,r9,r8
   84108:	344d803a 	cmpltu	r6,r6,r17
   8410c:	1991c83a 	sub	r8,r3,r6
   84110:	3825883a 	mov	r18,r7
   84114:	003e5706 	br	83a74 <__alt_data_end+0xfffae344>
   84118:	4984b03a 	or	r2,r9,r6
   8411c:	10002e26 	beq	r2,zero,841d8 <__adddf3+0x7e0>
   84120:	4004d0fa 	srli	r2,r8,3
   84124:	8822d0fa 	srli	r17,r17,3
   84128:	4010977a 	slli	r8,r8,29
   8412c:	10c0022c 	andhi	r3,r2,8
   84130:	4462b03a 	or	r17,r8,r17
   84134:	18000826 	beq	r3,zero,84158 <__adddf3+0x760>
   84138:	4808d0fa 	srli	r4,r9,3
   8413c:	20c0022c 	andhi	r3,r4,8
   84140:	1800051e 	bne	r3,zero,84158 <__adddf3+0x760>
   84144:	300cd0fa 	srli	r6,r6,3
   84148:	4806977a 	slli	r3,r9,29
   8414c:	2005883a 	mov	r2,r4
   84150:	3825883a 	mov	r18,r7
   84154:	19a2b03a 	or	r17,r3,r6
   84158:	8810d77a 	srli	r8,r17,29
   8415c:	100490fa 	slli	r2,r2,3
   84160:	882290fa 	slli	r17,r17,3
   84164:	0401ffc4 	movi	r16,2047
   84168:	4090b03a 	or	r8,r8,r2
   8416c:	003e4106 	br	83a74 <__alt_data_end+0xfffae344>
   84170:	0141ffc4 	movi	r5,2047
   84174:	117fc71e 	bne	r2,r5,84094 <__alt_data_end+0xfffae964>
   84178:	4811883a 	mov	r8,r9
   8417c:	3023883a 	mov	r17,r6
   84180:	1021883a 	mov	r16,r2
   84184:	003e3b06 	br	83a74 <__alt_data_end+0xfffae344>
   84188:	10002f26 	beq	r2,zero,84248 <__adddf3+0x850>
   8418c:	4984b03a 	or	r2,r9,r6
   84190:	10001126 	beq	r2,zero,841d8 <__adddf3+0x7e0>
   84194:	4004d0fa 	srli	r2,r8,3
   84198:	8822d0fa 	srli	r17,r17,3
   8419c:	4010977a 	slli	r8,r8,29
   841a0:	10c0022c 	andhi	r3,r2,8
   841a4:	4462b03a 	or	r17,r8,r17
   841a8:	183feb26 	beq	r3,zero,84158 <__alt_data_end+0xfffaea28>
   841ac:	4808d0fa 	srli	r4,r9,3
   841b0:	20c0022c 	andhi	r3,r4,8
   841b4:	183fe81e 	bne	r3,zero,84158 <__alt_data_end+0xfffaea28>
   841b8:	300cd0fa 	srli	r6,r6,3
   841bc:	4806977a 	slli	r3,r9,29
   841c0:	2005883a 	mov	r2,r4
   841c4:	19a2b03a 	or	r17,r3,r6
   841c8:	003fe306 	br	84158 <__alt_data_end+0xfffaea28>
   841cc:	0011883a 	mov	r8,zero
   841d0:	0005883a 	mov	r2,zero
   841d4:	003e3f06 	br	83ad4 <__alt_data_end+0xfffae3a4>
   841d8:	0401ffc4 	movi	r16,2047
   841dc:	003e2506 	br	83a74 <__alt_data_end+0xfffae344>
   841e0:	0013883a 	mov	r9,zero
   841e4:	003f8406 	br	83ff8 <__alt_data_end+0xfffae8c8>
   841e8:	0005883a 	mov	r2,zero
   841ec:	0007883a 	mov	r3,zero
   841f0:	003e8906 	br	83c18 <__alt_data_end+0xfffae4e8>
   841f4:	197ff804 	addi	r5,r3,-32
   841f8:	01000804 	movi	r4,32
   841fc:	414ad83a 	srl	r5,r8,r5
   84200:	19002426 	beq	r3,r4,84294 <__adddf3+0x89c>
   84204:	01001004 	movi	r4,64
   84208:	20c7c83a 	sub	r3,r4,r3
   8420c:	40c6983a 	sll	r3,r8,r3
   84210:	1c46b03a 	or	r3,r3,r17
   84214:	1806c03a 	cmpne	r3,r3,zero
   84218:	28e2b03a 	or	r17,r5,r3
   8421c:	0007883a 	mov	r3,zero
   84220:	003f2306 	br	83eb0 <__alt_data_end+0xfffae780>
   84224:	0007883a 	mov	r3,zero
   84228:	5811883a 	mov	r8,r11
   8422c:	00bfffc4 	movi	r2,-1
   84230:	0401ffc4 	movi	r16,2047
   84234:	003e7806 	br	83c18 <__alt_data_end+0xfffae4e8>
   84238:	4462b03a 	or	r17,r8,r17
   8423c:	8822c03a 	cmpne	r17,r17,zero
   84240:	0009883a 	mov	r4,zero
   84244:	003fa006 	br	840c8 <__alt_data_end+0xfffae998>
   84248:	4811883a 	mov	r8,r9
   8424c:	3023883a 	mov	r17,r6
   84250:	0401ffc4 	movi	r16,2047
   84254:	003e0706 	br	83a74 <__alt_data_end+0xfffae344>
   84258:	4811883a 	mov	r8,r9
   8425c:	3023883a 	mov	r17,r6
   84260:	003e0406 	br	83a74 <__alt_data_end+0xfffae344>
   84264:	21fff804 	addi	r7,r4,-32
   84268:	01400804 	movi	r5,32
   8426c:	41ced83a 	srl	r7,r8,r7
   84270:	21400a26 	beq	r4,r5,8429c <__adddf3+0x8a4>
   84274:	01401004 	movi	r5,64
   84278:	2909c83a 	sub	r4,r5,r4
   8427c:	4108983a 	sll	r4,r8,r4
   84280:	2448b03a 	or	r4,r4,r17
   84284:	2008c03a 	cmpne	r4,r4,zero
   84288:	3922b03a 	or	r17,r7,r4
   8428c:	0009883a 	mov	r4,zero
   84290:	003f8d06 	br	840c8 <__alt_data_end+0xfffae998>
   84294:	0007883a 	mov	r3,zero
   84298:	003fdd06 	br	84210 <__alt_data_end+0xfffaeae0>
   8429c:	0009883a 	mov	r4,zero
   842a0:	003ff706 	br	84280 <__alt_data_end+0xfffaeb50>

000842a4 <__divdf3>:
   842a4:	defff004 	addi	sp,sp,-64
   842a8:	dc800815 	stw	r18,32(sp)
   842ac:	2824d53a 	srli	r18,r5,20
   842b0:	dd800c15 	stw	r22,48(sp)
   842b4:	282cd7fa 	srli	r22,r5,31
   842b8:	dc000615 	stw	r16,24(sp)
   842bc:	04000434 	movhi	r16,16
   842c0:	843fffc4 	addi	r16,r16,-1
   842c4:	dfc00f15 	stw	ra,60(sp)
   842c8:	df000e15 	stw	fp,56(sp)
   842cc:	ddc00d15 	stw	r23,52(sp)
   842d0:	dd400b15 	stw	r21,44(sp)
   842d4:	dd000a15 	stw	r20,40(sp)
   842d8:	dcc00915 	stw	r19,36(sp)
   842dc:	dc400715 	stw	r17,28(sp)
   842e0:	9481ffcc 	andi	r18,r18,2047
   842e4:	2c20703a 	and	r16,r5,r16
   842e8:	b2003fcc 	andi	r8,r22,255
   842ec:	90006126 	beq	r18,zero,84474 <__divdf3+0x1d0>
   842f0:	0081ffc4 	movi	r2,2047
   842f4:	202b883a 	mov	r21,r4
   842f8:	90803726 	beq	r18,r2,843d8 <__divdf3+0x134>
   842fc:	80800434 	orhi	r2,r16,16
   84300:	100490fa 	slli	r2,r2,3
   84304:	2020d77a 	srli	r16,r4,29
   84308:	202a90fa 	slli	r21,r4,3
   8430c:	94bf0044 	addi	r18,r18,-1023
   84310:	80a0b03a 	or	r16,r16,r2
   84314:	0013883a 	mov	r9,zero
   84318:	000b883a 	mov	r5,zero
   8431c:	3806d53a 	srli	r3,r7,20
   84320:	382ed7fa 	srli	r23,r7,31
   84324:	04400434 	movhi	r17,16
   84328:	8c7fffc4 	addi	r17,r17,-1
   8432c:	18c1ffcc 	andi	r3,r3,2047
   84330:	3029883a 	mov	r20,r6
   84334:	3c62703a 	and	r17,r7,r17
   84338:	bf003fcc 	andi	fp,r23,255
   8433c:	18006e26 	beq	r3,zero,844f8 <__divdf3+0x254>
   84340:	0081ffc4 	movi	r2,2047
   84344:	18806626 	beq	r3,r2,844e0 <__divdf3+0x23c>
   84348:	88800434 	orhi	r2,r17,16
   8434c:	100490fa 	slli	r2,r2,3
   84350:	3022d77a 	srli	r17,r6,29
   84354:	302890fa 	slli	r20,r6,3
   84358:	18ff0044 	addi	r3,r3,-1023
   8435c:	88a2b03a 	or	r17,r17,r2
   84360:	000f883a 	mov	r7,zero
   84364:	b5e6f03a 	xor	r19,r22,r23
   84368:	3a4cb03a 	or	r6,r7,r9
   8436c:	008003c4 	movi	r2,15
   84370:	9809883a 	mov	r4,r19
   84374:	90c7c83a 	sub	r3,r18,r3
   84378:	9cc03fcc 	andi	r19,r19,255
   8437c:	11809636 	bltu	r2,r6,845d8 <__divdf3+0x334>
   84380:	300c90ba 	slli	r6,r6,2
   84384:	00800234 	movhi	r2,8
   84388:	1090e604 	addi	r2,r2,17304
   8438c:	308d883a 	add	r6,r6,r2
   84390:	30800017 	ldw	r2,0(r6)
   84394:	1000683a 	jmp	r2
   84398:	000845d8 	cmpnei	zero,zero,8471
   8439c:	00084410 	cmplti	zero,zero,8464
   843a0:	000845c8 	cmpgei	zero,zero,8471
   843a4:	00084404 	movi	zero,8464
   843a8:	000845c8 	cmpgei	zero,zero,8471
   843ac:	0008459c 	xori	zero,zero,8470
   843b0:	000845c8 	cmpgei	zero,zero,8471
   843b4:	00084404 	movi	zero,8464
   843b8:	00084410 	cmplti	zero,zero,8464
   843bc:	00084410 	cmplti	zero,zero,8464
   843c0:	0008459c 	xori	zero,zero,8470
   843c4:	00084404 	movi	zero,8464
   843c8:	000843f4 	movhi	zero,8463
   843cc:	000843f4 	movhi	zero,8463
   843d0:	000843f4 	movhi	zero,8463
   843d4:	00084960 	cmpeqi	zero,zero,8485
   843d8:	2404b03a 	or	r2,r4,r16
   843dc:	10006c1e 	bne	r2,zero,84590 <__divdf3+0x2ec>
   843e0:	02400204 	movi	r9,8
   843e4:	0021883a 	mov	r16,zero
   843e8:	002b883a 	mov	r21,zero
   843ec:	01400084 	movi	r5,2
   843f0:	003fca06 	br	8431c <__alt_data_end+0xfffaebec>
   843f4:	8023883a 	mov	r17,r16
   843f8:	a829883a 	mov	r20,r21
   843fc:	4039883a 	mov	fp,r8
   84400:	280f883a 	mov	r7,r5
   84404:	00800084 	movi	r2,2
   84408:	3881601e 	bne	r7,r2,8498c <__divdf3+0x6e8>
   8440c:	e027883a 	mov	r19,fp
   84410:	9900004c 	andi	r4,r19,1
   84414:	0081ffc4 	movi	r2,2047
   84418:	0021883a 	mov	r16,zero
   8441c:	002b883a 	mov	r21,zero
   84420:	1004953a 	slli	r2,r2,20
   84424:	20c03fcc 	andi	r3,r4,255
   84428:	01400434 	movhi	r5,16
   8442c:	297fffc4 	addi	r5,r5,-1
   84430:	180697fa 	slli	r3,r3,31
   84434:	8160703a 	and	r16,r16,r5
   84438:	80a0b03a 	or	r16,r16,r2
   8443c:	80c6b03a 	or	r3,r16,r3
   84440:	a805883a 	mov	r2,r21
   84444:	dfc00f17 	ldw	ra,60(sp)
   84448:	df000e17 	ldw	fp,56(sp)
   8444c:	ddc00d17 	ldw	r23,52(sp)
   84450:	dd800c17 	ldw	r22,48(sp)
   84454:	dd400b17 	ldw	r21,44(sp)
   84458:	dd000a17 	ldw	r20,40(sp)
   8445c:	dcc00917 	ldw	r19,36(sp)
   84460:	dc800817 	ldw	r18,32(sp)
   84464:	dc400717 	ldw	r17,28(sp)
   84468:	dc000617 	ldw	r16,24(sp)
   8446c:	dec01004 	addi	sp,sp,64
   84470:	f800283a 	ret
   84474:	2404b03a 	or	r2,r4,r16
   84478:	2023883a 	mov	r17,r4
   8447c:	10003f26 	beq	r2,zero,8457c <__divdf3+0x2d8>
   84480:	80015e26 	beq	r16,zero,849fc <__divdf3+0x758>
   84484:	8009883a 	mov	r4,r16
   84488:	d9800215 	stw	r6,8(sp)
   8448c:	d9c00515 	stw	r7,20(sp)
   84490:	da000415 	stw	r8,16(sp)
   84494:	00863c00 	call	863c0 <__clzsi2>
   84498:	d9800217 	ldw	r6,8(sp)
   8449c:	d9c00517 	ldw	r7,20(sp)
   844a0:	da000417 	ldw	r8,16(sp)
   844a4:	113ffd44 	addi	r4,r2,-11
   844a8:	00c00704 	movi	r3,28
   844ac:	19014f16 	blt	r3,r4,849ec <__divdf3+0x748>
   844b0:	00c00744 	movi	r3,29
   844b4:	157ffe04 	addi	r21,r2,-8
   844b8:	1907c83a 	sub	r3,r3,r4
   844bc:	8560983a 	sll	r16,r16,r21
   844c0:	88c6d83a 	srl	r3,r17,r3
   844c4:	8d6a983a 	sll	r21,r17,r21
   844c8:	1c20b03a 	or	r16,r3,r16
   844cc:	1080fcc4 	addi	r2,r2,1011
   844d0:	00a5c83a 	sub	r18,zero,r2
   844d4:	0013883a 	mov	r9,zero
   844d8:	000b883a 	mov	r5,zero
   844dc:	003f8f06 	br	8431c <__alt_data_end+0xfffaebec>
   844e0:	3444b03a 	or	r2,r6,r17
   844e4:	1000231e 	bne	r2,zero,84574 <__divdf3+0x2d0>
   844e8:	0023883a 	mov	r17,zero
   844ec:	0029883a 	mov	r20,zero
   844f0:	01c00084 	movi	r7,2
   844f4:	003f9b06 	br	84364 <__alt_data_end+0xfffaec34>
   844f8:	3444b03a 	or	r2,r6,r17
   844fc:	10001926 	beq	r2,zero,84564 <__divdf3+0x2c0>
   84500:	88014b26 	beq	r17,zero,84a30 <__divdf3+0x78c>
   84504:	8809883a 	mov	r4,r17
   84508:	d9400115 	stw	r5,4(sp)
   8450c:	d9800215 	stw	r6,8(sp)
   84510:	da000415 	stw	r8,16(sp)
   84514:	da400315 	stw	r9,12(sp)
   84518:	00863c00 	call	863c0 <__clzsi2>
   8451c:	d9400117 	ldw	r5,4(sp)
   84520:	d9800217 	ldw	r6,8(sp)
   84524:	da000417 	ldw	r8,16(sp)
   84528:	da400317 	ldw	r9,12(sp)
   8452c:	113ffd44 	addi	r4,r2,-11
   84530:	00c00704 	movi	r3,28
   84534:	19013a16 	blt	r3,r4,84a20 <__divdf3+0x77c>
   84538:	00c00744 	movi	r3,29
   8453c:	153ffe04 	addi	r20,r2,-8
   84540:	1907c83a 	sub	r3,r3,r4
   84544:	8d22983a 	sll	r17,r17,r20
   84548:	30c6d83a 	srl	r3,r6,r3
   8454c:	3528983a 	sll	r20,r6,r20
   84550:	1c62b03a 	or	r17,r3,r17
   84554:	1080fcc4 	addi	r2,r2,1011
   84558:	0087c83a 	sub	r3,zero,r2
   8455c:	000f883a 	mov	r7,zero
   84560:	003f8006 	br	84364 <__alt_data_end+0xfffaec34>
   84564:	0023883a 	mov	r17,zero
   84568:	0029883a 	mov	r20,zero
   8456c:	01c00044 	movi	r7,1
   84570:	003f7c06 	br	84364 <__alt_data_end+0xfffaec34>
   84574:	01c000c4 	movi	r7,3
   84578:	003f7a06 	br	84364 <__alt_data_end+0xfffaec34>
   8457c:	02400104 	movi	r9,4
   84580:	0021883a 	mov	r16,zero
   84584:	002b883a 	mov	r21,zero
   84588:	01400044 	movi	r5,1
   8458c:	003f6306 	br	8431c <__alt_data_end+0xfffaebec>
   84590:	02400304 	movi	r9,12
   84594:	014000c4 	movi	r5,3
   84598:	003f6006 	br	8431c <__alt_data_end+0xfffaebec>
   8459c:	04000434 	movhi	r16,16
   845a0:	0009883a 	mov	r4,zero
   845a4:	843fffc4 	addi	r16,r16,-1
   845a8:	057fffc4 	movi	r21,-1
   845ac:	0081ffc4 	movi	r2,2047
   845b0:	003f9b06 	br	84420 <__alt_data_end+0xfffaecf0>
   845b4:	00c00044 	movi	r3,1
   845b8:	1887c83a 	sub	r3,r3,r2
   845bc:	01000e04 	movi	r4,56
   845c0:	20c1530e 	bge	r4,r3,84b10 <__divdf3+0x86c>
   845c4:	9900004c 	andi	r4,r19,1
   845c8:	0005883a 	mov	r2,zero
   845cc:	0021883a 	mov	r16,zero
   845d0:	002b883a 	mov	r21,zero
   845d4:	003f9206 	br	84420 <__alt_data_end+0xfffaecf0>
   845d8:	8c012e36 	bltu	r17,r16,84a94 <__divdf3+0x7f0>
   845dc:	84412c26 	beq	r16,r17,84a90 <__divdf3+0x7ec>
   845e0:	a82f883a 	mov	r23,r21
   845e4:	18ffffc4 	addi	r3,r3,-1
   845e8:	002b883a 	mov	r21,zero
   845ec:	a004d63a 	srli	r2,r20,24
   845f0:	8822923a 	slli	r17,r17,8
   845f4:	a028923a 	slli	r20,r20,8
   845f8:	8009883a 	mov	r4,r16
   845fc:	88acb03a 	or	r22,r17,r2
   84600:	dd000015 	stw	r20,0(sp)
   84604:	b028d43a 	srli	r20,r22,16
   84608:	d8c00215 	stw	r3,8(sp)
   8460c:	b4bfffcc 	andi	r18,r22,65535
   84610:	a00b883a 	mov	r5,r20
   84614:	008298c0 	call	8298c <__udivsi3>
   84618:	100b883a 	mov	r5,r2
   8461c:	9009883a 	mov	r4,r18
   84620:	1023883a 	mov	r17,r2
   84624:	0082a480 	call	82a48 <__mulsi3>
   84628:	8009883a 	mov	r4,r16
   8462c:	a00b883a 	mov	r5,r20
   84630:	1039883a 	mov	fp,r2
   84634:	00829f00 	call	829f0 <__umodsi3>
   84638:	1004943a 	slli	r2,r2,16
   8463c:	b808d43a 	srli	r4,r23,16
   84640:	d8c00217 	ldw	r3,8(sp)
   84644:	2084b03a 	or	r2,r4,r2
   84648:	1700062e 	bgeu	r2,fp,84664 <__divdf3+0x3c0>
   8464c:	1585883a 	add	r2,r2,r22
   84650:	893fffc4 	addi	r4,r17,-1
   84654:	15811d36 	bltu	r2,r22,84acc <__divdf3+0x828>
   84658:	17011c2e 	bgeu	r2,fp,84acc <__divdf3+0x828>
   8465c:	8c7fff84 	addi	r17,r17,-2
   84660:	1585883a 	add	r2,r2,r22
   84664:	1739c83a 	sub	fp,r2,fp
   84668:	a00b883a 	mov	r5,r20
   8466c:	e009883a 	mov	r4,fp
   84670:	d8c00215 	stw	r3,8(sp)
   84674:	008298c0 	call	8298c <__udivsi3>
   84678:	100b883a 	mov	r5,r2
   8467c:	9009883a 	mov	r4,r18
   84680:	1021883a 	mov	r16,r2
   84684:	0082a480 	call	82a48 <__mulsi3>
   84688:	a00b883a 	mov	r5,r20
   8468c:	e009883a 	mov	r4,fp
   84690:	d8800415 	stw	r2,16(sp)
   84694:	00829f00 	call	829f0 <__umodsi3>
   84698:	1004943a 	slli	r2,r2,16
   8469c:	da000417 	ldw	r8,16(sp)
   846a0:	bdffffcc 	andi	r23,r23,65535
   846a4:	b884b03a 	or	r2,r23,r2
   846a8:	d8c00217 	ldw	r3,8(sp)
   846ac:	1200062e 	bgeu	r2,r8,846c8 <__divdf3+0x424>
   846b0:	1585883a 	add	r2,r2,r22
   846b4:	813fffc4 	addi	r4,r16,-1
   846b8:	15810236 	bltu	r2,r22,84ac4 <__divdf3+0x820>
   846bc:	1201012e 	bgeu	r2,r8,84ac4 <__divdf3+0x820>
   846c0:	843fff84 	addi	r16,r16,-2
   846c4:	1585883a 	add	r2,r2,r22
   846c8:	8822943a 	slli	r17,r17,16
   846cc:	d9800017 	ldw	r6,0(sp)
   846d0:	1211c83a 	sub	r8,r2,r8
   846d4:	8c22b03a 	or	r17,r17,r16
   846d8:	373fffcc 	andi	fp,r6,65535
   846dc:	8abfffcc 	andi	r10,r17,65535
   846e0:	8820d43a 	srli	r16,r17,16
   846e4:	5009883a 	mov	r4,r10
   846e8:	e00b883a 	mov	r5,fp
   846ec:	302ed43a 	srli	r23,r6,16
   846f0:	d8c00215 	stw	r3,8(sp)
   846f4:	da000415 	stw	r8,16(sp)
   846f8:	da800115 	stw	r10,4(sp)
   846fc:	0082a480 	call	82a48 <__mulsi3>
   84700:	800b883a 	mov	r5,r16
   84704:	e009883a 	mov	r4,fp
   84708:	d8800515 	stw	r2,20(sp)
   8470c:	0082a480 	call	82a48 <__mulsi3>
   84710:	8009883a 	mov	r4,r16
   84714:	b80b883a 	mov	r5,r23
   84718:	d8800315 	stw	r2,12(sp)
   8471c:	0082a480 	call	82a48 <__mulsi3>
   84720:	da800117 	ldw	r10,4(sp)
   84724:	b80b883a 	mov	r5,r23
   84728:	1021883a 	mov	r16,r2
   8472c:	5009883a 	mov	r4,r10
   84730:	0082a480 	call	82a48 <__mulsi3>
   84734:	d9c00517 	ldw	r7,20(sp)
   84738:	da400317 	ldw	r9,12(sp)
   8473c:	d8c00217 	ldw	r3,8(sp)
   84740:	3808d43a 	srli	r4,r7,16
   84744:	1245883a 	add	r2,r2,r9
   84748:	da000417 	ldw	r8,16(sp)
   8474c:	2085883a 	add	r2,r4,r2
   84750:	1240022e 	bgeu	r2,r9,8475c <__divdf3+0x4b8>
   84754:	01000074 	movhi	r4,1
   84758:	8121883a 	add	r16,r16,r4
   8475c:	1008d43a 	srli	r4,r2,16
   84760:	1004943a 	slli	r2,r2,16
   84764:	39ffffcc 	andi	r7,r7,65535
   84768:	2409883a 	add	r4,r4,r16
   8476c:	11c5883a 	add	r2,r2,r7
   84770:	4100bb36 	bltu	r8,r4,84a60 <__divdf3+0x7bc>
   84774:	4100d726 	beq	r8,r4,84ad4 <__divdf3+0x830>
   84778:	4109c83a 	sub	r4,r8,r4
   8477c:	a8a1c83a 	sub	r16,r21,r2
   84780:	ac2b803a 	cmpltu	r21,r21,r16
   84784:	256bc83a 	sub	r21,r4,r21
   84788:	b540d926 	beq	r22,r21,84af0 <__divdf3+0x84c>
   8478c:	a00b883a 	mov	r5,r20
   84790:	a809883a 	mov	r4,r21
   84794:	d8c00215 	stw	r3,8(sp)
   84798:	008298c0 	call	8298c <__udivsi3>
   8479c:	100b883a 	mov	r5,r2
   847a0:	9009883a 	mov	r4,r18
   847a4:	d8800515 	stw	r2,20(sp)
   847a8:	0082a480 	call	82a48 <__mulsi3>
   847ac:	a809883a 	mov	r4,r21
   847b0:	a00b883a 	mov	r5,r20
   847b4:	d8800415 	stw	r2,16(sp)
   847b8:	00829f00 	call	829f0 <__umodsi3>
   847bc:	1004943a 	slli	r2,r2,16
   847c0:	8008d43a 	srli	r4,r16,16
   847c4:	da000417 	ldw	r8,16(sp)
   847c8:	d8c00217 	ldw	r3,8(sp)
   847cc:	2084b03a 	or	r2,r4,r2
   847d0:	d9c00517 	ldw	r7,20(sp)
   847d4:	1200062e 	bgeu	r2,r8,847f0 <__divdf3+0x54c>
   847d8:	1585883a 	add	r2,r2,r22
   847dc:	393fffc4 	addi	r4,r7,-1
   847e0:	1580c536 	bltu	r2,r22,84af8 <__divdf3+0x854>
   847e4:	1200c42e 	bgeu	r2,r8,84af8 <__divdf3+0x854>
   847e8:	39ffff84 	addi	r7,r7,-2
   847ec:	1585883a 	add	r2,r2,r22
   847f0:	122bc83a 	sub	r21,r2,r8
   847f4:	a00b883a 	mov	r5,r20
   847f8:	a809883a 	mov	r4,r21
   847fc:	d8c00215 	stw	r3,8(sp)
   84800:	d9c00515 	stw	r7,20(sp)
   84804:	008298c0 	call	8298c <__udivsi3>
   84808:	9009883a 	mov	r4,r18
   8480c:	100b883a 	mov	r5,r2
   84810:	d8800415 	stw	r2,16(sp)
   84814:	0082a480 	call	82a48 <__mulsi3>
   84818:	a809883a 	mov	r4,r21
   8481c:	a00b883a 	mov	r5,r20
   84820:	1025883a 	mov	r18,r2
   84824:	00829f00 	call	829f0 <__umodsi3>
   84828:	1004943a 	slli	r2,r2,16
   8482c:	813fffcc 	andi	r4,r16,65535
   84830:	d8c00217 	ldw	r3,8(sp)
   84834:	20a0b03a 	or	r16,r4,r2
   84838:	d9c00517 	ldw	r7,20(sp)
   8483c:	da000417 	ldw	r8,16(sp)
   84840:	8480062e 	bgeu	r16,r18,8485c <__divdf3+0x5b8>
   84844:	85a1883a 	add	r16,r16,r22
   84848:	40bfffc4 	addi	r2,r8,-1
   8484c:	8580ac36 	bltu	r16,r22,84b00 <__divdf3+0x85c>
   84850:	8480ab2e 	bgeu	r16,r18,84b00 <__divdf3+0x85c>
   84854:	423fff84 	addi	r8,r8,-2
   84858:	85a1883a 	add	r16,r16,r22
   8485c:	3804943a 	slli	r2,r7,16
   84860:	84a1c83a 	sub	r16,r16,r18
   84864:	e009883a 	mov	r4,fp
   84868:	1228b03a 	or	r20,r2,r8
   8486c:	a1ffffcc 	andi	r7,r20,65535
   84870:	a024d43a 	srli	r18,r20,16
   84874:	380b883a 	mov	r5,r7
   84878:	d8c00215 	stw	r3,8(sp)
   8487c:	d9c00515 	stw	r7,20(sp)
   84880:	0082a480 	call	82a48 <__mulsi3>
   84884:	900b883a 	mov	r5,r18
   84888:	e009883a 	mov	r4,fp
   8488c:	102b883a 	mov	r21,r2
   84890:	0082a480 	call	82a48 <__mulsi3>
   84894:	900b883a 	mov	r5,r18
   84898:	b809883a 	mov	r4,r23
   8489c:	1039883a 	mov	fp,r2
   848a0:	0082a480 	call	82a48 <__mulsi3>
   848a4:	d9c00517 	ldw	r7,20(sp)
   848a8:	b80b883a 	mov	r5,r23
   848ac:	1025883a 	mov	r18,r2
   848b0:	3809883a 	mov	r4,r7
   848b4:	0082a480 	call	82a48 <__mulsi3>
   848b8:	a808d43a 	srli	r4,r21,16
   848bc:	1705883a 	add	r2,r2,fp
   848c0:	d8c00217 	ldw	r3,8(sp)
   848c4:	2085883a 	add	r2,r4,r2
   848c8:	1700022e 	bgeu	r2,fp,848d4 <__divdf3+0x630>
   848cc:	01000074 	movhi	r4,1
   848d0:	9125883a 	add	r18,r18,r4
   848d4:	1008d43a 	srli	r4,r2,16
   848d8:	1004943a 	slli	r2,r2,16
   848dc:	ad7fffcc 	andi	r21,r21,65535
   848e0:	2489883a 	add	r4,r4,r18
   848e4:	1545883a 	add	r2,r2,r21
   848e8:	81003836 	bltu	r16,r4,849cc <__divdf3+0x728>
   848ec:	81003626 	beq	r16,r4,849c8 <__divdf3+0x724>
   848f0:	a5000054 	ori	r20,r20,1
   848f4:	1880ffc4 	addi	r2,r3,1023
   848f8:	00bf2e0e 	bge	zero,r2,845b4 <__alt_data_end+0xfffaee84>
   848fc:	a10001cc 	andi	r4,r20,7
   84900:	20000726 	beq	r4,zero,84920 <__divdf3+0x67c>
   84904:	a10003cc 	andi	r4,r20,15
   84908:	01400104 	movi	r5,4
   8490c:	21400426 	beq	r4,r5,84920 <__divdf3+0x67c>
   84910:	a149883a 	add	r4,r20,r5
   84914:	2529803a 	cmpltu	r20,r4,r20
   84918:	8d23883a 	add	r17,r17,r20
   8491c:	2029883a 	mov	r20,r4
   84920:	8900402c 	andhi	r4,r17,256
   84924:	20000426 	beq	r4,zero,84938 <__divdf3+0x694>
   84928:	18810004 	addi	r2,r3,1024
   8492c:	00ffc034 	movhi	r3,65280
   84930:	18ffffc4 	addi	r3,r3,-1
   84934:	88e2703a 	and	r17,r17,r3
   84938:	00c1ff84 	movi	r3,2046
   8493c:	18beb416 	blt	r3,r2,84410 <__alt_data_end+0xfffaece0>
   84940:	a028d0fa 	srli	r20,r20,3
   84944:	882a977a 	slli	r21,r17,29
   84948:	8820927a 	slli	r16,r17,9
   8494c:	1081ffcc 	andi	r2,r2,2047
   84950:	ad2ab03a 	or	r21,r21,r20
   84954:	8020d33a 	srli	r16,r16,12
   84958:	9900004c 	andi	r4,r19,1
   8495c:	003eb006 	br	84420 <__alt_data_end+0xfffaecf0>
   84960:	8080022c 	andhi	r2,r16,8
   84964:	10001226 	beq	r2,zero,849b0 <__divdf3+0x70c>
   84968:	8880022c 	andhi	r2,r17,8
   8496c:	1000101e 	bne	r2,zero,849b0 <__divdf3+0x70c>
   84970:	00800434 	movhi	r2,16
   84974:	8c000234 	orhi	r16,r17,8
   84978:	10bfffc4 	addi	r2,r2,-1
   8497c:	b809883a 	mov	r4,r23
   84980:	80a0703a 	and	r16,r16,r2
   84984:	a02b883a 	mov	r21,r20
   84988:	003f0806 	br	845ac <__alt_data_end+0xfffaee7c>
   8498c:	008000c4 	movi	r2,3
   84990:	3880b126 	beq	r7,r2,84c58 <__divdf3+0x9b4>
   84994:	00800044 	movi	r2,1
   84998:	38805b1e 	bne	r7,r2,84b08 <__divdf3+0x864>
   8499c:	e009883a 	mov	r4,fp
   849a0:	0005883a 	mov	r2,zero
   849a4:	0021883a 	mov	r16,zero
   849a8:	002b883a 	mov	r21,zero
   849ac:	003e9c06 	br	84420 <__alt_data_end+0xfffaecf0>
   849b0:	00800434 	movhi	r2,16
   849b4:	84000234 	orhi	r16,r16,8
   849b8:	10bfffc4 	addi	r2,r2,-1
   849bc:	b009883a 	mov	r4,r22
   849c0:	80a0703a 	and	r16,r16,r2
   849c4:	003ef906 	br	845ac <__alt_data_end+0xfffaee7c>
   849c8:	103fca26 	beq	r2,zero,848f4 <__alt_data_end+0xfffaf1c4>
   849cc:	b421883a 	add	r16,r22,r16
   849d0:	a17fffc4 	addi	r5,r20,-1
   849d4:	8580422e 	bgeu	r16,r22,84ae0 <__divdf3+0x83c>
   849d8:	2829883a 	mov	r20,r5
   849dc:	813fc41e 	bne	r16,r4,848f0 <__alt_data_end+0xfffaf1c0>
   849e0:	d9800017 	ldw	r6,0(sp)
   849e4:	30bfc21e 	bne	r6,r2,848f0 <__alt_data_end+0xfffaf1c0>
   849e8:	003fc206 	br	848f4 <__alt_data_end+0xfffaf1c4>
   849ec:	143ff604 	addi	r16,r2,-40
   849f0:	8c20983a 	sll	r16,r17,r16
   849f4:	002b883a 	mov	r21,zero
   849f8:	003eb406 	br	844cc <__alt_data_end+0xfffaed9c>
   849fc:	d9800215 	stw	r6,8(sp)
   84a00:	d9c00515 	stw	r7,20(sp)
   84a04:	da000415 	stw	r8,16(sp)
   84a08:	00863c00 	call	863c0 <__clzsi2>
   84a0c:	10800804 	addi	r2,r2,32
   84a10:	da000417 	ldw	r8,16(sp)
   84a14:	d9c00517 	ldw	r7,20(sp)
   84a18:	d9800217 	ldw	r6,8(sp)
   84a1c:	003ea106 	br	844a4 <__alt_data_end+0xfffaed74>
   84a20:	147ff604 	addi	r17,r2,-40
   84a24:	3462983a 	sll	r17,r6,r17
   84a28:	0029883a 	mov	r20,zero
   84a2c:	003ec906 	br	84554 <__alt_data_end+0xfffaee24>
   84a30:	3009883a 	mov	r4,r6
   84a34:	d9400115 	stw	r5,4(sp)
   84a38:	d9800215 	stw	r6,8(sp)
   84a3c:	da000415 	stw	r8,16(sp)
   84a40:	da400315 	stw	r9,12(sp)
   84a44:	00863c00 	call	863c0 <__clzsi2>
   84a48:	10800804 	addi	r2,r2,32
   84a4c:	da400317 	ldw	r9,12(sp)
   84a50:	da000417 	ldw	r8,16(sp)
   84a54:	d9800217 	ldw	r6,8(sp)
   84a58:	d9400117 	ldw	r5,4(sp)
   84a5c:	003eb306 	br	8452c <__alt_data_end+0xfffaedfc>
   84a60:	d9800017 	ldw	r6,0(sp)
   84a64:	a9ab883a 	add	r21,r21,r6
   84a68:	a98b803a 	cmpltu	r5,r21,r6
   84a6c:	2d8b883a 	add	r5,r5,r22
   84a70:	2a11883a 	add	r8,r5,r8
   84a74:	897fffc4 	addi	r5,r17,-1
   84a78:	b2000c2e 	bgeu	r22,r8,84aac <__divdf3+0x808>
   84a7c:	41003f36 	bltu	r8,r4,84b7c <__divdf3+0x8d8>
   84a80:	22006c26 	beq	r4,r8,84c34 <__divdf3+0x990>
   84a84:	4109c83a 	sub	r4,r8,r4
   84a88:	2823883a 	mov	r17,r5
   84a8c:	003f3b06 	br	8477c <__alt_data_end+0xfffaf04c>
   84a90:	ad3ed336 	bltu	r21,r20,845e0 <__alt_data_end+0xfffaeeb0>
   84a94:	a804d07a 	srli	r2,r21,1
   84a98:	802e97fa 	slli	r23,r16,31
   84a9c:	a82a97fa 	slli	r21,r21,31
   84aa0:	8020d07a 	srli	r16,r16,1
   84aa4:	b8aeb03a 	or	r23,r23,r2
   84aa8:	003ed006 	br	845ec <__alt_data_end+0xfffaeebc>
   84aac:	b23ff51e 	bne	r22,r8,84a84 <__alt_data_end+0xfffaf354>
   84ab0:	d9800017 	ldw	r6,0(sp)
   84ab4:	a9bff12e 	bgeu	r21,r6,84a7c <__alt_data_end+0xfffaf34c>
   84ab8:	b109c83a 	sub	r4,r22,r4
   84abc:	2823883a 	mov	r17,r5
   84ac0:	003f2e06 	br	8477c <__alt_data_end+0xfffaf04c>
   84ac4:	2021883a 	mov	r16,r4
   84ac8:	003eff06 	br	846c8 <__alt_data_end+0xfffaef98>
   84acc:	2023883a 	mov	r17,r4
   84ad0:	003ee406 	br	84664 <__alt_data_end+0xfffaef34>
   84ad4:	a8bfe236 	bltu	r21,r2,84a60 <__alt_data_end+0xfffaf330>
   84ad8:	0009883a 	mov	r4,zero
   84adc:	003f2706 	br	8477c <__alt_data_end+0xfffaf04c>
   84ae0:	81002d36 	bltu	r16,r4,84b98 <__divdf3+0x8f4>
   84ae4:	24005626 	beq	r4,r16,84c40 <__divdf3+0x99c>
   84ae8:	2829883a 	mov	r20,r5
   84aec:	003f8006 	br	848f0 <__alt_data_end+0xfffaf1c0>
   84af0:	053fffc4 	movi	r20,-1
   84af4:	003f7f06 	br	848f4 <__alt_data_end+0xfffaf1c4>
   84af8:	200f883a 	mov	r7,r4
   84afc:	003f3c06 	br	847f0 <__alt_data_end+0xfffaf0c0>
   84b00:	1011883a 	mov	r8,r2
   84b04:	003f5506 	br	8485c <__alt_data_end+0xfffaf12c>
   84b08:	e027883a 	mov	r19,fp
   84b0c:	003f7906 	br	848f4 <__alt_data_end+0xfffaf1c4>
   84b10:	010007c4 	movi	r4,31
   84b14:	20c02816 	blt	r4,r3,84bb8 <__divdf3+0x914>
   84b18:	00800804 	movi	r2,32
   84b1c:	10c5c83a 	sub	r2,r2,r3
   84b20:	888a983a 	sll	r5,r17,r2
   84b24:	a0c8d83a 	srl	r4,r20,r3
   84b28:	a084983a 	sll	r2,r20,r2
   84b2c:	88e2d83a 	srl	r17,r17,r3
   84b30:	2906b03a 	or	r3,r5,r4
   84b34:	1004c03a 	cmpne	r2,r2,zero
   84b38:	1886b03a 	or	r3,r3,r2
   84b3c:	188001cc 	andi	r2,r3,7
   84b40:	10000726 	beq	r2,zero,84b60 <__divdf3+0x8bc>
   84b44:	188003cc 	andi	r2,r3,15
   84b48:	01000104 	movi	r4,4
   84b4c:	11000426 	beq	r2,r4,84b60 <__divdf3+0x8bc>
   84b50:	1805883a 	mov	r2,r3
   84b54:	10c00104 	addi	r3,r2,4
   84b58:	1885803a 	cmpltu	r2,r3,r2
   84b5c:	88a3883a 	add	r17,r17,r2
   84b60:	8880202c 	andhi	r2,r17,128
   84b64:	10002926 	beq	r2,zero,84c0c <__divdf3+0x968>
   84b68:	9900004c 	andi	r4,r19,1
   84b6c:	00800044 	movi	r2,1
   84b70:	0021883a 	mov	r16,zero
   84b74:	002b883a 	mov	r21,zero
   84b78:	003e2906 	br	84420 <__alt_data_end+0xfffaecf0>
   84b7c:	d9800017 	ldw	r6,0(sp)
   84b80:	8c7fff84 	addi	r17,r17,-2
   84b84:	a9ab883a 	add	r21,r21,r6
   84b88:	a98b803a 	cmpltu	r5,r21,r6
   84b8c:	2d8b883a 	add	r5,r5,r22
   84b90:	2a11883a 	add	r8,r5,r8
   84b94:	003ef806 	br	84778 <__alt_data_end+0xfffaf048>
   84b98:	d9800017 	ldw	r6,0(sp)
   84b9c:	318f883a 	add	r7,r6,r6
   84ba0:	398b803a 	cmpltu	r5,r7,r6
   84ba4:	2d8d883a 	add	r6,r5,r22
   84ba8:	81a1883a 	add	r16,r16,r6
   84bac:	a17fff84 	addi	r5,r20,-2
   84bb0:	d9c00015 	stw	r7,0(sp)
   84bb4:	003f8806 	br	849d8 <__alt_data_end+0xfffaf2a8>
   84bb8:	013ff844 	movi	r4,-31
   84bbc:	2085c83a 	sub	r2,r4,r2
   84bc0:	8888d83a 	srl	r4,r17,r2
   84bc4:	00800804 	movi	r2,32
   84bc8:	18802126 	beq	r3,r2,84c50 <__divdf3+0x9ac>
   84bcc:	04001004 	movi	r16,64
   84bd0:	80c7c83a 	sub	r3,r16,r3
   84bd4:	88e0983a 	sll	r16,r17,r3
   84bd8:	8504b03a 	or	r2,r16,r20
   84bdc:	1004c03a 	cmpne	r2,r2,zero
   84be0:	2084b03a 	or	r2,r4,r2
   84be4:	144001cc 	andi	r17,r2,7
   84be8:	88000d1e 	bne	r17,zero,84c20 <__divdf3+0x97c>
   84bec:	0021883a 	mov	r16,zero
   84bf0:	102ad0fa 	srli	r21,r2,3
   84bf4:	9900004c 	andi	r4,r19,1
   84bf8:	0005883a 	mov	r2,zero
   84bfc:	ac6ab03a 	or	r21,r21,r17
   84c00:	003e0706 	br	84420 <__alt_data_end+0xfffaecf0>
   84c04:	1007883a 	mov	r3,r2
   84c08:	0023883a 	mov	r17,zero
   84c0c:	8820927a 	slli	r16,r17,9
   84c10:	1805883a 	mov	r2,r3
   84c14:	8822977a 	slli	r17,r17,29
   84c18:	8020d33a 	srli	r16,r16,12
   84c1c:	003ff406 	br	84bf0 <__alt_data_end+0xfffaf4c0>
   84c20:	10c003cc 	andi	r3,r2,15
   84c24:	01000104 	movi	r4,4
   84c28:	193ff626 	beq	r3,r4,84c04 <__alt_data_end+0xfffaf4d4>
   84c2c:	0023883a 	mov	r17,zero
   84c30:	003fc806 	br	84b54 <__alt_data_end+0xfffaf424>
   84c34:	a8bfd136 	bltu	r21,r2,84b7c <__alt_data_end+0xfffaf44c>
   84c38:	2823883a 	mov	r17,r5
   84c3c:	003fa606 	br	84ad8 <__alt_data_end+0xfffaf3a8>
   84c40:	d9800017 	ldw	r6,0(sp)
   84c44:	30bfd436 	bltu	r6,r2,84b98 <__alt_data_end+0xfffaf468>
   84c48:	2829883a 	mov	r20,r5
   84c4c:	003f6406 	br	849e0 <__alt_data_end+0xfffaf2b0>
   84c50:	0021883a 	mov	r16,zero
   84c54:	003fe006 	br	84bd8 <__alt_data_end+0xfffaf4a8>
   84c58:	00800434 	movhi	r2,16
   84c5c:	8c000234 	orhi	r16,r17,8
   84c60:	10bfffc4 	addi	r2,r2,-1
   84c64:	e009883a 	mov	r4,fp
   84c68:	80a0703a 	and	r16,r16,r2
   84c6c:	a02b883a 	mov	r21,r20
   84c70:	003e4e06 	br	845ac <__alt_data_end+0xfffaee7c>

00084c74 <__gedf2>:
   84c74:	2804d53a 	srli	r2,r5,20
   84c78:	3806d53a 	srli	r3,r7,20
   84c7c:	02000434 	movhi	r8,16
   84c80:	423fffc4 	addi	r8,r8,-1
   84c84:	1081ffcc 	andi	r2,r2,2047
   84c88:	0241ffc4 	movi	r9,2047
   84c8c:	2a14703a 	and	r10,r5,r8
   84c90:	18c1ffcc 	andi	r3,r3,2047
   84c94:	3a10703a 	and	r8,r7,r8
   84c98:	280ad7fa 	srli	r5,r5,31
   84c9c:	380ed7fa 	srli	r7,r7,31
   84ca0:	12401d26 	beq	r2,r9,84d18 <__gedf2+0xa4>
   84ca4:	0241ffc4 	movi	r9,2047
   84ca8:	1a401226 	beq	r3,r9,84cf4 <__gedf2+0x80>
   84cac:	1000081e 	bne	r2,zero,84cd0 <__gedf2+0x5c>
   84cb0:	2296b03a 	or	r11,r4,r10
   84cb4:	5813003a 	cmpeq	r9,r11,zero
   84cb8:	1800091e 	bne	r3,zero,84ce0 <__gedf2+0x6c>
   84cbc:	3218b03a 	or	r12,r6,r8
   84cc0:	6000071e 	bne	r12,zero,84ce0 <__gedf2+0x6c>
   84cc4:	0005883a 	mov	r2,zero
   84cc8:	5800101e 	bne	r11,zero,84d0c <__gedf2+0x98>
   84ccc:	f800283a 	ret
   84cd0:	18000c1e 	bne	r3,zero,84d04 <__gedf2+0x90>
   84cd4:	3212b03a 	or	r9,r6,r8
   84cd8:	48000c26 	beq	r9,zero,84d0c <__gedf2+0x98>
   84cdc:	0013883a 	mov	r9,zero
   84ce0:	39c03fcc 	andi	r7,r7,255
   84ce4:	48000826 	beq	r9,zero,84d08 <__gedf2+0x94>
   84ce8:	38000926 	beq	r7,zero,84d10 <__gedf2+0x9c>
   84cec:	00800044 	movi	r2,1
   84cf0:	f800283a 	ret
   84cf4:	3212b03a 	or	r9,r6,r8
   84cf8:	483fec26 	beq	r9,zero,84cac <__alt_data_end+0xfffaf57c>
   84cfc:	00bfff84 	movi	r2,-2
   84d00:	f800283a 	ret
   84d04:	39c03fcc 	andi	r7,r7,255
   84d08:	29c00626 	beq	r5,r7,84d24 <__gedf2+0xb0>
   84d0c:	283ff726 	beq	r5,zero,84cec <__alt_data_end+0xfffaf5bc>
   84d10:	00bfffc4 	movi	r2,-1
   84d14:	f800283a 	ret
   84d18:	2292b03a 	or	r9,r4,r10
   84d1c:	483fe126 	beq	r9,zero,84ca4 <__alt_data_end+0xfffaf574>
   84d20:	003ff606 	br	84cfc <__alt_data_end+0xfffaf5cc>
   84d24:	18bff916 	blt	r3,r2,84d0c <__alt_data_end+0xfffaf5dc>
   84d28:	10c00316 	blt	r2,r3,84d38 <__gedf2+0xc4>
   84d2c:	42bff736 	bltu	r8,r10,84d0c <__alt_data_end+0xfffaf5dc>
   84d30:	52000326 	beq	r10,r8,84d40 <__gedf2+0xcc>
   84d34:	5200042e 	bgeu	r10,r8,84d48 <__gedf2+0xd4>
   84d38:	283fec1e 	bne	r5,zero,84cec <__alt_data_end+0xfffaf5bc>
   84d3c:	003ff406 	br	84d10 <__alt_data_end+0xfffaf5e0>
   84d40:	313ff236 	bltu	r6,r4,84d0c <__alt_data_end+0xfffaf5dc>
   84d44:	21bffc36 	bltu	r4,r6,84d38 <__alt_data_end+0xfffaf608>
   84d48:	0005883a 	mov	r2,zero
   84d4c:	f800283a 	ret

00084d50 <__ledf2>:
   84d50:	2804d53a 	srli	r2,r5,20
   84d54:	3810d53a 	srli	r8,r7,20
   84d58:	00c00434 	movhi	r3,16
   84d5c:	18ffffc4 	addi	r3,r3,-1
   84d60:	1081ffcc 	andi	r2,r2,2047
   84d64:	0241ffc4 	movi	r9,2047
   84d68:	28d4703a 	and	r10,r5,r3
   84d6c:	4201ffcc 	andi	r8,r8,2047
   84d70:	38c6703a 	and	r3,r7,r3
   84d74:	280ad7fa 	srli	r5,r5,31
   84d78:	380ed7fa 	srli	r7,r7,31
   84d7c:	12401f26 	beq	r2,r9,84dfc <__ledf2+0xac>
   84d80:	0241ffc4 	movi	r9,2047
   84d84:	42401426 	beq	r8,r9,84dd8 <__ledf2+0x88>
   84d88:	1000091e 	bne	r2,zero,84db0 <__ledf2+0x60>
   84d8c:	2296b03a 	or	r11,r4,r10
   84d90:	5813003a 	cmpeq	r9,r11,zero
   84d94:	29403fcc 	andi	r5,r5,255
   84d98:	40000a1e 	bne	r8,zero,84dc4 <__ledf2+0x74>
   84d9c:	30d8b03a 	or	r12,r6,r3
   84da0:	6000081e 	bne	r12,zero,84dc4 <__ledf2+0x74>
   84da4:	0005883a 	mov	r2,zero
   84da8:	5800111e 	bne	r11,zero,84df0 <__ledf2+0xa0>
   84dac:	f800283a 	ret
   84db0:	29403fcc 	andi	r5,r5,255
   84db4:	40000c1e 	bne	r8,zero,84de8 <__ledf2+0x98>
   84db8:	30d2b03a 	or	r9,r6,r3
   84dbc:	48000c26 	beq	r9,zero,84df0 <__ledf2+0xa0>
   84dc0:	0013883a 	mov	r9,zero
   84dc4:	39c03fcc 	andi	r7,r7,255
   84dc8:	48000826 	beq	r9,zero,84dec <__ledf2+0x9c>
   84dcc:	38001126 	beq	r7,zero,84e14 <__ledf2+0xc4>
   84dd0:	00800044 	movi	r2,1
   84dd4:	f800283a 	ret
   84dd8:	30d2b03a 	or	r9,r6,r3
   84ddc:	483fea26 	beq	r9,zero,84d88 <__alt_data_end+0xfffaf658>
   84de0:	00800084 	movi	r2,2
   84de4:	f800283a 	ret
   84de8:	39c03fcc 	andi	r7,r7,255
   84dec:	39400726 	beq	r7,r5,84e0c <__ledf2+0xbc>
   84df0:	2800081e 	bne	r5,zero,84e14 <__ledf2+0xc4>
   84df4:	00800044 	movi	r2,1
   84df8:	f800283a 	ret
   84dfc:	2292b03a 	or	r9,r4,r10
   84e00:	483fdf26 	beq	r9,zero,84d80 <__alt_data_end+0xfffaf650>
   84e04:	00800084 	movi	r2,2
   84e08:	f800283a 	ret
   84e0c:	4080030e 	bge	r8,r2,84e1c <__ledf2+0xcc>
   84e10:	383fef26 	beq	r7,zero,84dd0 <__alt_data_end+0xfffaf6a0>
   84e14:	00bfffc4 	movi	r2,-1
   84e18:	f800283a 	ret
   84e1c:	123feb16 	blt	r2,r8,84dcc <__alt_data_end+0xfffaf69c>
   84e20:	1abff336 	bltu	r3,r10,84df0 <__alt_data_end+0xfffaf6c0>
   84e24:	50c00326 	beq	r10,r3,84e34 <__ledf2+0xe4>
   84e28:	50c0042e 	bgeu	r10,r3,84e3c <__ledf2+0xec>
   84e2c:	283fe81e 	bne	r5,zero,84dd0 <__alt_data_end+0xfffaf6a0>
   84e30:	003ff806 	br	84e14 <__alt_data_end+0xfffaf6e4>
   84e34:	313fee36 	bltu	r6,r4,84df0 <__alt_data_end+0xfffaf6c0>
   84e38:	21bffc36 	bltu	r4,r6,84e2c <__alt_data_end+0xfffaf6fc>
   84e3c:	0005883a 	mov	r2,zero
   84e40:	f800283a 	ret

00084e44 <__muldf3>:
   84e44:	deffee04 	addi	sp,sp,-72
   84e48:	dd000c15 	stw	r20,48(sp)
   84e4c:	2828d53a 	srli	r20,r5,20
   84e50:	ddc00f15 	stw	r23,60(sp)
   84e54:	282ed7fa 	srli	r23,r5,31
   84e58:	dc000815 	stw	r16,32(sp)
   84e5c:	04000434 	movhi	r16,16
   84e60:	dcc00b15 	stw	r19,44(sp)
   84e64:	843fffc4 	addi	r16,r16,-1
   84e68:	dfc01115 	stw	ra,68(sp)
   84e6c:	df001015 	stw	fp,64(sp)
   84e70:	dd800e15 	stw	r22,56(sp)
   84e74:	dd400d15 	stw	r21,52(sp)
   84e78:	dc800a15 	stw	r18,40(sp)
   84e7c:	dc400915 	stw	r17,36(sp)
   84e80:	a501ffcc 	andi	r20,r20,2047
   84e84:	2c20703a 	and	r16,r5,r16
   84e88:	b827883a 	mov	r19,r23
   84e8c:	ba403fcc 	andi	r9,r23,255
   84e90:	a0006026 	beq	r20,zero,85014 <__muldf3+0x1d0>
   84e94:	0081ffc4 	movi	r2,2047
   84e98:	202d883a 	mov	r22,r4
   84e9c:	a0803626 	beq	r20,r2,84f78 <__muldf3+0x134>
   84ea0:	84000434 	orhi	r16,r16,16
   84ea4:	200ad77a 	srli	r5,r4,29
   84ea8:	800490fa 	slli	r2,r16,3
   84eac:	202c90fa 	slli	r22,r4,3
   84eb0:	a53f0044 	addi	r20,r20,-1023
   84eb4:	28a0b03a 	or	r16,r5,r2
   84eb8:	002b883a 	mov	r21,zero
   84ebc:	000b883a 	mov	r5,zero
   84ec0:	3804d53a 	srli	r2,r7,20
   84ec4:	3838d7fa 	srli	fp,r7,31
   84ec8:	04400434 	movhi	r17,16
   84ecc:	8c7fffc4 	addi	r17,r17,-1
   84ed0:	1081ffcc 	andi	r2,r2,2047
   84ed4:	3025883a 	mov	r18,r6
   84ed8:	3c62703a 	and	r17,r7,r17
   84edc:	e2803fcc 	andi	r10,fp,255
   84ee0:	10006d26 	beq	r2,zero,85098 <__muldf3+0x254>
   84ee4:	00c1ffc4 	movi	r3,2047
   84ee8:	10c06526 	beq	r2,r3,85080 <__muldf3+0x23c>
   84eec:	8c400434 	orhi	r17,r17,16
   84ef0:	300ed77a 	srli	r7,r6,29
   84ef4:	880690fa 	slli	r3,r17,3
   84ef8:	302490fa 	slli	r18,r6,3
   84efc:	10bf0044 	addi	r2,r2,-1023
   84f00:	38e2b03a 	or	r17,r7,r3
   84f04:	000f883a 	mov	r7,zero
   84f08:	a087883a 	add	r3,r20,r2
   84f0c:	010003c4 	movi	r4,15
   84f10:	3d44b03a 	or	r2,r7,r21
   84f14:	e5ccf03a 	xor	r6,fp,r23
   84f18:	1a000044 	addi	r8,r3,1
   84f1c:	20809b36 	bltu	r4,r2,8518c <__muldf3+0x348>
   84f20:	100490ba 	slli	r2,r2,2
   84f24:	01000234 	movhi	r4,8
   84f28:	2113ce04 	addi	r4,r4,20280
   84f2c:	1105883a 	add	r2,r2,r4
   84f30:	10800017 	ldw	r2,0(r2)
   84f34:	1000683a 	jmp	r2
   84f38:	0008518c 	andi	zero,zero,8518
   84f3c:	00084f98 	cmpnei	zero,zero,8510
   84f40:	00084f98 	cmpnei	zero,zero,8510
   84f44:	00084f94 	movui	zero,8510
   84f48:	00085168 	cmpgeui	zero,zero,8517
   84f4c:	00085168 	cmpgeui	zero,zero,8517
   84f50:	00085150 	cmplti	zero,zero,8517
   84f54:	00084f94 	movui	zero,8510
   84f58:	00085168 	cmpgeui	zero,zero,8517
   84f5c:	00085150 	cmplti	zero,zero,8517
   84f60:	00085168 	cmpgeui	zero,zero,8517
   84f64:	00084f94 	movui	zero,8510
   84f68:	00085178 	rdprs	zero,zero,8517
   84f6c:	00085178 	rdprs	zero,zero,8517
   84f70:	00085178 	rdprs	zero,zero,8517
   84f74:	000854d8 	cmpnei	zero,zero,8531
   84f78:	2404b03a 	or	r2,r4,r16
   84f7c:	1000711e 	bne	r2,zero,85144 <__muldf3+0x300>
   84f80:	05400204 	movi	r21,8
   84f84:	0021883a 	mov	r16,zero
   84f88:	002d883a 	mov	r22,zero
   84f8c:	01400084 	movi	r5,2
   84f90:	003fcb06 	br	84ec0 <__alt_data_end+0xfffaf790>
   84f94:	500d883a 	mov	r6,r10
   84f98:	00800084 	movi	r2,2
   84f9c:	38805926 	beq	r7,r2,85104 <__muldf3+0x2c0>
   84fa0:	008000c4 	movi	r2,3
   84fa4:	3881bb26 	beq	r7,r2,85694 <__muldf3+0x850>
   84fa8:	00800044 	movi	r2,1
   84fac:	3881961e 	bne	r7,r2,85608 <__muldf3+0x7c4>
   84fb0:	3027883a 	mov	r19,r6
   84fb4:	0005883a 	mov	r2,zero
   84fb8:	0021883a 	mov	r16,zero
   84fbc:	002d883a 	mov	r22,zero
   84fc0:	1004953a 	slli	r2,r2,20
   84fc4:	98c03fcc 	andi	r3,r19,255
   84fc8:	04400434 	movhi	r17,16
   84fcc:	8c7fffc4 	addi	r17,r17,-1
   84fd0:	180697fa 	slli	r3,r3,31
   84fd4:	8460703a 	and	r16,r16,r17
   84fd8:	80a0b03a 	or	r16,r16,r2
   84fdc:	80c6b03a 	or	r3,r16,r3
   84fe0:	b005883a 	mov	r2,r22
   84fe4:	dfc01117 	ldw	ra,68(sp)
   84fe8:	df001017 	ldw	fp,64(sp)
   84fec:	ddc00f17 	ldw	r23,60(sp)
   84ff0:	dd800e17 	ldw	r22,56(sp)
   84ff4:	dd400d17 	ldw	r21,52(sp)
   84ff8:	dd000c17 	ldw	r20,48(sp)
   84ffc:	dcc00b17 	ldw	r19,44(sp)
   85000:	dc800a17 	ldw	r18,40(sp)
   85004:	dc400917 	ldw	r17,36(sp)
   85008:	dc000817 	ldw	r16,32(sp)
   8500c:	dec01204 	addi	sp,sp,72
   85010:	f800283a 	ret
   85014:	2404b03a 	or	r2,r4,r16
   85018:	202b883a 	mov	r21,r4
   8501c:	10004426 	beq	r2,zero,85130 <__muldf3+0x2ec>
   85020:	80015126 	beq	r16,zero,85568 <__muldf3+0x724>
   85024:	8009883a 	mov	r4,r16
   85028:	d9800715 	stw	r6,28(sp)
   8502c:	d9c00215 	stw	r7,8(sp)
   85030:	da400415 	stw	r9,16(sp)
   85034:	00863c00 	call	863c0 <__clzsi2>
   85038:	d9800717 	ldw	r6,28(sp)
   8503c:	d9c00217 	ldw	r7,8(sp)
   85040:	da400417 	ldw	r9,16(sp)
   85044:	113ffd44 	addi	r4,r2,-11
   85048:	00c00704 	movi	r3,28
   8504c:	19014216 	blt	r3,r4,85558 <__muldf3+0x714>
   85050:	00c00744 	movi	r3,29
   85054:	15bffe04 	addi	r22,r2,-8
   85058:	1907c83a 	sub	r3,r3,r4
   8505c:	85a0983a 	sll	r16,r16,r22
   85060:	a8c6d83a 	srl	r3,r21,r3
   85064:	adac983a 	sll	r22,r21,r22
   85068:	1c20b03a 	or	r16,r3,r16
   8506c:	1080fcc4 	addi	r2,r2,1011
   85070:	00a9c83a 	sub	r20,zero,r2
   85074:	002b883a 	mov	r21,zero
   85078:	000b883a 	mov	r5,zero
   8507c:	003f9006 	br	84ec0 <__alt_data_end+0xfffaf790>
   85080:	3446b03a 	or	r3,r6,r17
   85084:	1800281e 	bne	r3,zero,85128 <__muldf3+0x2e4>
   85088:	0023883a 	mov	r17,zero
   8508c:	0025883a 	mov	r18,zero
   85090:	01c00084 	movi	r7,2
   85094:	003f9c06 	br	84f08 <__alt_data_end+0xfffaf7d8>
   85098:	3446b03a 	or	r3,r6,r17
   8509c:	18001e26 	beq	r3,zero,85118 <__muldf3+0x2d4>
   850a0:	88012126 	beq	r17,zero,85528 <__muldf3+0x6e4>
   850a4:	8809883a 	mov	r4,r17
   850a8:	d9400215 	stw	r5,8(sp)
   850ac:	d9800715 	stw	r6,28(sp)
   850b0:	da400415 	stw	r9,16(sp)
   850b4:	da800315 	stw	r10,12(sp)
   850b8:	00863c00 	call	863c0 <__clzsi2>
   850bc:	d9400217 	ldw	r5,8(sp)
   850c0:	d9800717 	ldw	r6,28(sp)
   850c4:	da400417 	ldw	r9,16(sp)
   850c8:	da800317 	ldw	r10,12(sp)
   850cc:	113ffd44 	addi	r4,r2,-11
   850d0:	00c00704 	movi	r3,28
   850d4:	19011016 	blt	r3,r4,85518 <__muldf3+0x6d4>
   850d8:	00c00744 	movi	r3,29
   850dc:	14bffe04 	addi	r18,r2,-8
   850e0:	1907c83a 	sub	r3,r3,r4
   850e4:	8ca2983a 	sll	r17,r17,r18
   850e8:	30c6d83a 	srl	r3,r6,r3
   850ec:	34a4983a 	sll	r18,r6,r18
   850f0:	1c62b03a 	or	r17,r3,r17
   850f4:	1080fcc4 	addi	r2,r2,1011
   850f8:	0085c83a 	sub	r2,zero,r2
   850fc:	000f883a 	mov	r7,zero
   85100:	003f8106 	br	84f08 <__alt_data_end+0xfffaf7d8>
   85104:	3027883a 	mov	r19,r6
   85108:	0081ffc4 	movi	r2,2047
   8510c:	0021883a 	mov	r16,zero
   85110:	002d883a 	mov	r22,zero
   85114:	003faa06 	br	84fc0 <__alt_data_end+0xfffaf890>
   85118:	0023883a 	mov	r17,zero
   8511c:	0025883a 	mov	r18,zero
   85120:	01c00044 	movi	r7,1
   85124:	003f7806 	br	84f08 <__alt_data_end+0xfffaf7d8>
   85128:	01c000c4 	movi	r7,3
   8512c:	003f7606 	br	84f08 <__alt_data_end+0xfffaf7d8>
   85130:	05400104 	movi	r21,4
   85134:	0021883a 	mov	r16,zero
   85138:	002d883a 	mov	r22,zero
   8513c:	01400044 	movi	r5,1
   85140:	003f5f06 	br	84ec0 <__alt_data_end+0xfffaf790>
   85144:	05400304 	movi	r21,12
   85148:	014000c4 	movi	r5,3
   8514c:	003f5c06 	br	84ec0 <__alt_data_end+0xfffaf790>
   85150:	04000434 	movhi	r16,16
   85154:	0027883a 	mov	r19,zero
   85158:	843fffc4 	addi	r16,r16,-1
   8515c:	05bfffc4 	movi	r22,-1
   85160:	0081ffc4 	movi	r2,2047
   85164:	003f9606 	br	84fc0 <__alt_data_end+0xfffaf890>
   85168:	8023883a 	mov	r17,r16
   8516c:	b025883a 	mov	r18,r22
   85170:	280f883a 	mov	r7,r5
   85174:	003f8806 	br	84f98 <__alt_data_end+0xfffaf868>
   85178:	8023883a 	mov	r17,r16
   8517c:	b025883a 	mov	r18,r22
   85180:	480d883a 	mov	r6,r9
   85184:	280f883a 	mov	r7,r5
   85188:	003f8306 	br	84f98 <__alt_data_end+0xfffaf868>
   8518c:	b026d43a 	srli	r19,r22,16
   85190:	902ed43a 	srli	r23,r18,16
   85194:	b5bfffcc 	andi	r22,r22,65535
   85198:	94bfffcc 	andi	r18,r18,65535
   8519c:	b00b883a 	mov	r5,r22
   851a0:	9009883a 	mov	r4,r18
   851a4:	d8c00515 	stw	r3,20(sp)
   851a8:	d9800715 	stw	r6,28(sp)
   851ac:	da000615 	stw	r8,24(sp)
   851b0:	0082a480 	call	82a48 <__mulsi3>
   851b4:	980b883a 	mov	r5,r19
   851b8:	9009883a 	mov	r4,r18
   851bc:	1029883a 	mov	r20,r2
   851c0:	0082a480 	call	82a48 <__mulsi3>
   851c4:	b80b883a 	mov	r5,r23
   851c8:	9809883a 	mov	r4,r19
   851cc:	102b883a 	mov	r21,r2
   851d0:	0082a480 	call	82a48 <__mulsi3>
   851d4:	b809883a 	mov	r4,r23
   851d8:	b00b883a 	mov	r5,r22
   851dc:	1039883a 	mov	fp,r2
   851e0:	0082a480 	call	82a48 <__mulsi3>
   851e4:	a008d43a 	srli	r4,r20,16
   851e8:	1545883a 	add	r2,r2,r21
   851ec:	d8c00517 	ldw	r3,20(sp)
   851f0:	2085883a 	add	r2,r4,r2
   851f4:	d9800717 	ldw	r6,28(sp)
   851f8:	da000617 	ldw	r8,24(sp)
   851fc:	1540022e 	bgeu	r2,r21,85208 <__muldf3+0x3c4>
   85200:	01000074 	movhi	r4,1
   85204:	e139883a 	add	fp,fp,r4
   85208:	100e943a 	slli	r7,r2,16
   8520c:	1004d43a 	srli	r2,r2,16
   85210:	882ad43a 	srli	r21,r17,16
   85214:	a53fffcc 	andi	r20,r20,65535
   85218:	8c7fffcc 	andi	r17,r17,65535
   8521c:	3d29883a 	add	r20,r7,r20
   85220:	b00b883a 	mov	r5,r22
   85224:	8809883a 	mov	r4,r17
   85228:	d8c00515 	stw	r3,20(sp)
   8522c:	d9800715 	stw	r6,28(sp)
   85230:	da000615 	stw	r8,24(sp)
   85234:	dd000115 	stw	r20,4(sp)
   85238:	d8800015 	stw	r2,0(sp)
   8523c:	0082a480 	call	82a48 <__mulsi3>
   85240:	980b883a 	mov	r5,r19
   85244:	8809883a 	mov	r4,r17
   85248:	d8800215 	stw	r2,8(sp)
   8524c:	0082a480 	call	82a48 <__mulsi3>
   85250:	9809883a 	mov	r4,r19
   85254:	a80b883a 	mov	r5,r21
   85258:	1029883a 	mov	r20,r2
   8525c:	0082a480 	call	82a48 <__mulsi3>
   85260:	b00b883a 	mov	r5,r22
   85264:	a809883a 	mov	r4,r21
   85268:	d8800415 	stw	r2,16(sp)
   8526c:	0082a480 	call	82a48 <__mulsi3>
   85270:	d9c00217 	ldw	r7,8(sp)
   85274:	1505883a 	add	r2,r2,r20
   85278:	d8c00517 	ldw	r3,20(sp)
   8527c:	3826d43a 	srli	r19,r7,16
   85280:	d9800717 	ldw	r6,28(sp)
   85284:	da000617 	ldw	r8,24(sp)
   85288:	9885883a 	add	r2,r19,r2
   8528c:	da400417 	ldw	r9,16(sp)
   85290:	1500022e 	bgeu	r2,r20,8529c <__muldf3+0x458>
   85294:	01000074 	movhi	r4,1
   85298:	4913883a 	add	r9,r9,r4
   8529c:	1028d43a 	srli	r20,r2,16
   852a0:	1004943a 	slli	r2,r2,16
   852a4:	802cd43a 	srli	r22,r16,16
   852a8:	843fffcc 	andi	r16,r16,65535
   852ac:	3cffffcc 	andi	r19,r7,65535
   852b0:	9009883a 	mov	r4,r18
   852b4:	800b883a 	mov	r5,r16
   852b8:	a269883a 	add	r20,r20,r9
   852bc:	d8c00515 	stw	r3,20(sp)
   852c0:	d9800715 	stw	r6,28(sp)
   852c4:	da000615 	stw	r8,24(sp)
   852c8:	14e7883a 	add	r19,r2,r19
   852cc:	0082a480 	call	82a48 <__mulsi3>
   852d0:	9009883a 	mov	r4,r18
   852d4:	b00b883a 	mov	r5,r22
   852d8:	d8800315 	stw	r2,12(sp)
   852dc:	0082a480 	call	82a48 <__mulsi3>
   852e0:	b809883a 	mov	r4,r23
   852e4:	b00b883a 	mov	r5,r22
   852e8:	d8800215 	stw	r2,8(sp)
   852ec:	0082a480 	call	82a48 <__mulsi3>
   852f0:	b80b883a 	mov	r5,r23
   852f4:	8009883a 	mov	r4,r16
   852f8:	d8800415 	stw	r2,16(sp)
   852fc:	0082a480 	call	82a48 <__mulsi3>
   85300:	da800317 	ldw	r10,12(sp)
   85304:	d9c00217 	ldw	r7,8(sp)
   85308:	d9000017 	ldw	r4,0(sp)
   8530c:	502ed43a 	srli	r23,r10,16
   85310:	11c5883a 	add	r2,r2,r7
   85314:	24e5883a 	add	r18,r4,r19
   85318:	b885883a 	add	r2,r23,r2
   8531c:	d8c00517 	ldw	r3,20(sp)
   85320:	d9800717 	ldw	r6,28(sp)
   85324:	da000617 	ldw	r8,24(sp)
   85328:	da400417 	ldw	r9,16(sp)
   8532c:	11c0022e 	bgeu	r2,r7,85338 <__muldf3+0x4f4>
   85330:	01000074 	movhi	r4,1
   85334:	4913883a 	add	r9,r9,r4
   85338:	100ed43a 	srli	r7,r2,16
   8533c:	1004943a 	slli	r2,r2,16
   85340:	55ffffcc 	andi	r23,r10,65535
   85344:	3a53883a 	add	r9,r7,r9
   85348:	8809883a 	mov	r4,r17
   8534c:	800b883a 	mov	r5,r16
   85350:	d8c00515 	stw	r3,20(sp)
   85354:	d9800715 	stw	r6,28(sp)
   85358:	da000615 	stw	r8,24(sp)
   8535c:	da400415 	stw	r9,16(sp)
   85360:	15ef883a 	add	r23,r2,r23
   85364:	0082a480 	call	82a48 <__mulsi3>
   85368:	8809883a 	mov	r4,r17
   8536c:	b00b883a 	mov	r5,r22
   85370:	d8800215 	stw	r2,8(sp)
   85374:	0082a480 	call	82a48 <__mulsi3>
   85378:	b00b883a 	mov	r5,r22
   8537c:	a809883a 	mov	r4,r21
   85380:	d8800315 	stw	r2,12(sp)
   85384:	0082a480 	call	82a48 <__mulsi3>
   85388:	8009883a 	mov	r4,r16
   8538c:	a80b883a 	mov	r5,r21
   85390:	1023883a 	mov	r17,r2
   85394:	0082a480 	call	82a48 <__mulsi3>
   85398:	d9c00217 	ldw	r7,8(sp)
   8539c:	da800317 	ldw	r10,12(sp)
   853a0:	d8c00517 	ldw	r3,20(sp)
   853a4:	3808d43a 	srli	r4,r7,16
   853a8:	1285883a 	add	r2,r2,r10
   853ac:	d9800717 	ldw	r6,28(sp)
   853b0:	2085883a 	add	r2,r4,r2
   853b4:	da000617 	ldw	r8,24(sp)
   853b8:	da400417 	ldw	r9,16(sp)
   853bc:	1280022e 	bgeu	r2,r10,853c8 <__muldf3+0x584>
   853c0:	01000074 	movhi	r4,1
   853c4:	8923883a 	add	r17,r17,r4
   853c8:	1008943a 	slli	r4,r2,16
   853cc:	39ffffcc 	andi	r7,r7,65535
   853d0:	e4b9883a 	add	fp,fp,r18
   853d4:	21cf883a 	add	r7,r4,r7
   853d8:	e4e7803a 	cmpltu	r19,fp,r19
   853dc:	3d0f883a 	add	r7,r7,r20
   853e0:	bf39883a 	add	fp,r23,fp
   853e4:	99c9883a 	add	r4,r19,r7
   853e8:	e5ef803a 	cmpltu	r23,fp,r23
   853ec:	490b883a 	add	r5,r9,r4
   853f0:	1004d43a 	srli	r2,r2,16
   853f4:	b965883a 	add	r18,r23,r5
   853f8:	24c9803a 	cmpltu	r4,r4,r19
   853fc:	3d29803a 	cmpltu	r20,r7,r20
   85400:	a128b03a 	or	r20,r20,r4
   85404:	95ef803a 	cmpltu	r23,r18,r23
   85408:	2a53803a 	cmpltu	r9,r5,r9
   8540c:	a0a9883a 	add	r20,r20,r2
   85410:	4deeb03a 	or	r23,r9,r23
   85414:	a5ef883a 	add	r23,r20,r23
   85418:	bc63883a 	add	r17,r23,r17
   8541c:	e004927a 	slli	r2,fp,9
   85420:	d9000117 	ldw	r4,4(sp)
   85424:	882e927a 	slli	r23,r17,9
   85428:	9022d5fa 	srli	r17,r18,23
   8542c:	e038d5fa 	srli	fp,fp,23
   85430:	1104b03a 	or	r2,r2,r4
   85434:	9024927a 	slli	r18,r18,9
   85438:	1004c03a 	cmpne	r2,r2,zero
   8543c:	bc62b03a 	or	r17,r23,r17
   85440:	1738b03a 	or	fp,r2,fp
   85444:	8880402c 	andhi	r2,r17,256
   85448:	e4a4b03a 	or	r18,fp,r18
   8544c:	10000726 	beq	r2,zero,8546c <__muldf3+0x628>
   85450:	9006d07a 	srli	r3,r18,1
   85454:	880497fa 	slli	r2,r17,31
   85458:	9480004c 	andi	r18,r18,1
   8545c:	8822d07a 	srli	r17,r17,1
   85460:	1ca4b03a 	or	r18,r3,r18
   85464:	14a4b03a 	or	r18,r2,r18
   85468:	4007883a 	mov	r3,r8
   8546c:	1880ffc4 	addi	r2,r3,1023
   85470:	0080460e 	bge	zero,r2,8558c <__muldf3+0x748>
   85474:	910001cc 	andi	r4,r18,7
   85478:	20000726 	beq	r4,zero,85498 <__muldf3+0x654>
   8547c:	910003cc 	andi	r4,r18,15
   85480:	01400104 	movi	r5,4
   85484:	21400426 	beq	r4,r5,85498 <__muldf3+0x654>
   85488:	9149883a 	add	r4,r18,r5
   8548c:	24a5803a 	cmpltu	r18,r4,r18
   85490:	8ca3883a 	add	r17,r17,r18
   85494:	2025883a 	mov	r18,r4
   85498:	8900402c 	andhi	r4,r17,256
   8549c:	20000426 	beq	r4,zero,854b0 <__muldf3+0x66c>
   854a0:	18810004 	addi	r2,r3,1024
   854a4:	00ffc034 	movhi	r3,65280
   854a8:	18ffffc4 	addi	r3,r3,-1
   854ac:	88e2703a 	and	r17,r17,r3
   854b0:	00c1ff84 	movi	r3,2046
   854b4:	18bf1316 	blt	r3,r2,85104 <__alt_data_end+0xfffaf9d4>
   854b8:	882c977a 	slli	r22,r17,29
   854bc:	9024d0fa 	srli	r18,r18,3
   854c0:	8822927a 	slli	r17,r17,9
   854c4:	1081ffcc 	andi	r2,r2,2047
   854c8:	b4acb03a 	or	r22,r22,r18
   854cc:	8820d33a 	srli	r16,r17,12
   854d0:	3027883a 	mov	r19,r6
   854d4:	003eba06 	br	84fc0 <__alt_data_end+0xfffaf890>
   854d8:	8080022c 	andhi	r2,r16,8
   854dc:	10000926 	beq	r2,zero,85504 <__muldf3+0x6c0>
   854e0:	8880022c 	andhi	r2,r17,8
   854e4:	1000071e 	bne	r2,zero,85504 <__muldf3+0x6c0>
   854e8:	00800434 	movhi	r2,16
   854ec:	8c000234 	orhi	r16,r17,8
   854f0:	10bfffc4 	addi	r2,r2,-1
   854f4:	e027883a 	mov	r19,fp
   854f8:	80a0703a 	and	r16,r16,r2
   854fc:	902d883a 	mov	r22,r18
   85500:	003f1706 	br	85160 <__alt_data_end+0xfffafa30>
   85504:	00800434 	movhi	r2,16
   85508:	84000234 	orhi	r16,r16,8
   8550c:	10bfffc4 	addi	r2,r2,-1
   85510:	80a0703a 	and	r16,r16,r2
   85514:	003f1206 	br	85160 <__alt_data_end+0xfffafa30>
   85518:	147ff604 	addi	r17,r2,-40
   8551c:	3462983a 	sll	r17,r6,r17
   85520:	0025883a 	mov	r18,zero
   85524:	003ef306 	br	850f4 <__alt_data_end+0xfffaf9c4>
   85528:	3009883a 	mov	r4,r6
   8552c:	d9400215 	stw	r5,8(sp)
   85530:	d9800715 	stw	r6,28(sp)
   85534:	da400415 	stw	r9,16(sp)
   85538:	da800315 	stw	r10,12(sp)
   8553c:	00863c00 	call	863c0 <__clzsi2>
   85540:	10800804 	addi	r2,r2,32
   85544:	da800317 	ldw	r10,12(sp)
   85548:	da400417 	ldw	r9,16(sp)
   8554c:	d9800717 	ldw	r6,28(sp)
   85550:	d9400217 	ldw	r5,8(sp)
   85554:	003edd06 	br	850cc <__alt_data_end+0xfffaf99c>
   85558:	143ff604 	addi	r16,r2,-40
   8555c:	ac20983a 	sll	r16,r21,r16
   85560:	002d883a 	mov	r22,zero
   85564:	003ec106 	br	8506c <__alt_data_end+0xfffaf93c>
   85568:	d9800715 	stw	r6,28(sp)
   8556c:	d9c00215 	stw	r7,8(sp)
   85570:	da400415 	stw	r9,16(sp)
   85574:	00863c00 	call	863c0 <__clzsi2>
   85578:	10800804 	addi	r2,r2,32
   8557c:	da400417 	ldw	r9,16(sp)
   85580:	d9c00217 	ldw	r7,8(sp)
   85584:	d9800717 	ldw	r6,28(sp)
   85588:	003eae06 	br	85044 <__alt_data_end+0xfffaf914>
   8558c:	00c00044 	movi	r3,1
   85590:	1887c83a 	sub	r3,r3,r2
   85594:	01000e04 	movi	r4,56
   85598:	20fe8516 	blt	r4,r3,84fb0 <__alt_data_end+0xfffaf880>
   8559c:	010007c4 	movi	r4,31
   855a0:	20c01b16 	blt	r4,r3,85610 <__muldf3+0x7cc>
   855a4:	00800804 	movi	r2,32
   855a8:	10c5c83a 	sub	r2,r2,r3
   855ac:	888a983a 	sll	r5,r17,r2
   855b0:	90c8d83a 	srl	r4,r18,r3
   855b4:	9084983a 	sll	r2,r18,r2
   855b8:	88e2d83a 	srl	r17,r17,r3
   855bc:	2906b03a 	or	r3,r5,r4
   855c0:	1004c03a 	cmpne	r2,r2,zero
   855c4:	1886b03a 	or	r3,r3,r2
   855c8:	188001cc 	andi	r2,r3,7
   855cc:	10000726 	beq	r2,zero,855ec <__muldf3+0x7a8>
   855d0:	188003cc 	andi	r2,r3,15
   855d4:	01000104 	movi	r4,4
   855d8:	11000426 	beq	r2,r4,855ec <__muldf3+0x7a8>
   855dc:	1805883a 	mov	r2,r3
   855e0:	10c00104 	addi	r3,r2,4
   855e4:	1885803a 	cmpltu	r2,r3,r2
   855e8:	88a3883a 	add	r17,r17,r2
   855ec:	8880202c 	andhi	r2,r17,128
   855f0:	10001c26 	beq	r2,zero,85664 <__muldf3+0x820>
   855f4:	3027883a 	mov	r19,r6
   855f8:	00800044 	movi	r2,1
   855fc:	0021883a 	mov	r16,zero
   85600:	002d883a 	mov	r22,zero
   85604:	003e6e06 	br	84fc0 <__alt_data_end+0xfffaf890>
   85608:	4007883a 	mov	r3,r8
   8560c:	003f9706 	br	8546c <__alt_data_end+0xfffafd3c>
   85610:	017ff844 	movi	r5,-31
   85614:	2885c83a 	sub	r2,r5,r2
   85618:	888ad83a 	srl	r5,r17,r2
   8561c:	00800804 	movi	r2,32
   85620:	18801a26 	beq	r3,r2,8568c <__muldf3+0x848>
   85624:	01001004 	movi	r4,64
   85628:	20c7c83a 	sub	r3,r4,r3
   8562c:	88e2983a 	sll	r17,r17,r3
   85630:	8ca4b03a 	or	r18,r17,r18
   85634:	9004c03a 	cmpne	r2,r18,zero
   85638:	2884b03a 	or	r2,r5,r2
   8563c:	144001cc 	andi	r17,r2,7
   85640:	88000d1e 	bne	r17,zero,85678 <__muldf3+0x834>
   85644:	0021883a 	mov	r16,zero
   85648:	102cd0fa 	srli	r22,r2,3
   8564c:	3027883a 	mov	r19,r6
   85650:	0005883a 	mov	r2,zero
   85654:	b46cb03a 	or	r22,r22,r17
   85658:	003e5906 	br	84fc0 <__alt_data_end+0xfffaf890>
   8565c:	1007883a 	mov	r3,r2
   85660:	0023883a 	mov	r17,zero
   85664:	8820927a 	slli	r16,r17,9
   85668:	1805883a 	mov	r2,r3
   8566c:	8822977a 	slli	r17,r17,29
   85670:	8020d33a 	srli	r16,r16,12
   85674:	003ff406 	br	85648 <__alt_data_end+0xfffaff18>
   85678:	10c003cc 	andi	r3,r2,15
   8567c:	01000104 	movi	r4,4
   85680:	193ff626 	beq	r3,r4,8565c <__alt_data_end+0xfffaff2c>
   85684:	0023883a 	mov	r17,zero
   85688:	003fd506 	br	855e0 <__alt_data_end+0xfffafeb0>
   8568c:	0023883a 	mov	r17,zero
   85690:	003fe706 	br	85630 <__alt_data_end+0xfffaff00>
   85694:	00800434 	movhi	r2,16
   85698:	8c000234 	orhi	r16,r17,8
   8569c:	10bfffc4 	addi	r2,r2,-1
   856a0:	3027883a 	mov	r19,r6
   856a4:	80a0703a 	and	r16,r16,r2
   856a8:	902d883a 	mov	r22,r18
   856ac:	003eac06 	br	85160 <__alt_data_end+0xfffafa30>

000856b0 <__subdf3>:
   856b0:	02000434 	movhi	r8,16
   856b4:	423fffc4 	addi	r8,r8,-1
   856b8:	defffb04 	addi	sp,sp,-20
   856bc:	2a14703a 	and	r10,r5,r8
   856c0:	3812d53a 	srli	r9,r7,20
   856c4:	3a10703a 	and	r8,r7,r8
   856c8:	2006d77a 	srli	r3,r4,29
   856cc:	3004d77a 	srli	r2,r6,29
   856d0:	dc000015 	stw	r16,0(sp)
   856d4:	501490fa 	slli	r10,r10,3
   856d8:	2820d53a 	srli	r16,r5,20
   856dc:	401090fa 	slli	r8,r8,3
   856e0:	dc800215 	stw	r18,8(sp)
   856e4:	dc400115 	stw	r17,4(sp)
   856e8:	dfc00415 	stw	ra,16(sp)
   856ec:	202290fa 	slli	r17,r4,3
   856f0:	dcc00315 	stw	r19,12(sp)
   856f4:	4a41ffcc 	andi	r9,r9,2047
   856f8:	0101ffc4 	movi	r4,2047
   856fc:	2824d7fa 	srli	r18,r5,31
   85700:	8401ffcc 	andi	r16,r16,2047
   85704:	50c6b03a 	or	r3,r10,r3
   85708:	380ed7fa 	srli	r7,r7,31
   8570c:	408ab03a 	or	r5,r8,r2
   85710:	300c90fa 	slli	r6,r6,3
   85714:	49009626 	beq	r9,r4,85970 <__subdf3+0x2c0>
   85718:	39c0005c 	xori	r7,r7,1
   8571c:	8245c83a 	sub	r2,r16,r9
   85720:	3c807426 	beq	r7,r18,858f4 <__subdf3+0x244>
   85724:	0080af0e 	bge	zero,r2,859e4 <__subdf3+0x334>
   85728:	48002a1e 	bne	r9,zero,857d4 <__subdf3+0x124>
   8572c:	2988b03a 	or	r4,r5,r6
   85730:	20009a1e 	bne	r4,zero,8599c <__subdf3+0x2ec>
   85734:	888001cc 	andi	r2,r17,7
   85738:	10000726 	beq	r2,zero,85758 <__subdf3+0xa8>
   8573c:	888003cc 	andi	r2,r17,15
   85740:	01000104 	movi	r4,4
   85744:	11000426 	beq	r2,r4,85758 <__subdf3+0xa8>
   85748:	890b883a 	add	r5,r17,r4
   8574c:	2c63803a 	cmpltu	r17,r5,r17
   85750:	1c47883a 	add	r3,r3,r17
   85754:	2823883a 	mov	r17,r5
   85758:	1880202c 	andhi	r2,r3,128
   8575c:	10005926 	beq	r2,zero,858c4 <__subdf3+0x214>
   85760:	84000044 	addi	r16,r16,1
   85764:	0081ffc4 	movi	r2,2047
   85768:	8080be26 	beq	r16,r2,85a64 <__subdf3+0x3b4>
   8576c:	017fe034 	movhi	r5,65408
   85770:	297fffc4 	addi	r5,r5,-1
   85774:	1946703a 	and	r3,r3,r5
   85778:	1804977a 	slli	r2,r3,29
   8577c:	1806927a 	slli	r3,r3,9
   85780:	8822d0fa 	srli	r17,r17,3
   85784:	8401ffcc 	andi	r16,r16,2047
   85788:	180ad33a 	srli	r5,r3,12
   8578c:	9100004c 	andi	r4,r18,1
   85790:	1444b03a 	or	r2,r2,r17
   85794:	80c1ffcc 	andi	r3,r16,2047
   85798:	1820953a 	slli	r16,r3,20
   8579c:	20c03fcc 	andi	r3,r4,255
   857a0:	180897fa 	slli	r4,r3,31
   857a4:	00c00434 	movhi	r3,16
   857a8:	18ffffc4 	addi	r3,r3,-1
   857ac:	28c6703a 	and	r3,r5,r3
   857b0:	1c06b03a 	or	r3,r3,r16
   857b4:	1906b03a 	or	r3,r3,r4
   857b8:	dfc00417 	ldw	ra,16(sp)
   857bc:	dcc00317 	ldw	r19,12(sp)
   857c0:	dc800217 	ldw	r18,8(sp)
   857c4:	dc400117 	ldw	r17,4(sp)
   857c8:	dc000017 	ldw	r16,0(sp)
   857cc:	dec00504 	addi	sp,sp,20
   857d0:	f800283a 	ret
   857d4:	0101ffc4 	movi	r4,2047
   857d8:	813fd626 	beq	r16,r4,85734 <__alt_data_end+0xfffb0004>
   857dc:	29402034 	orhi	r5,r5,128
   857e0:	01000e04 	movi	r4,56
   857e4:	2080a316 	blt	r4,r2,85a74 <__subdf3+0x3c4>
   857e8:	010007c4 	movi	r4,31
   857ec:	2080c616 	blt	r4,r2,85b08 <__subdf3+0x458>
   857f0:	01000804 	movi	r4,32
   857f4:	2089c83a 	sub	r4,r4,r2
   857f8:	2910983a 	sll	r8,r5,r4
   857fc:	308ed83a 	srl	r7,r6,r2
   85800:	3108983a 	sll	r4,r6,r4
   85804:	2884d83a 	srl	r2,r5,r2
   85808:	41ccb03a 	or	r6,r8,r7
   8580c:	2008c03a 	cmpne	r4,r4,zero
   85810:	310cb03a 	or	r6,r6,r4
   85814:	898dc83a 	sub	r6,r17,r6
   85818:	89a3803a 	cmpltu	r17,r17,r6
   8581c:	1887c83a 	sub	r3,r3,r2
   85820:	1c47c83a 	sub	r3,r3,r17
   85824:	3023883a 	mov	r17,r6
   85828:	1880202c 	andhi	r2,r3,128
   8582c:	10002326 	beq	r2,zero,858bc <__subdf3+0x20c>
   85830:	04c02034 	movhi	r19,128
   85834:	9cffffc4 	addi	r19,r19,-1
   85838:	1ce6703a 	and	r19,r3,r19
   8583c:	98007a26 	beq	r19,zero,85a28 <__subdf3+0x378>
   85840:	9809883a 	mov	r4,r19
   85844:	00863c00 	call	863c0 <__clzsi2>
   85848:	113ffe04 	addi	r4,r2,-8
   8584c:	00c007c4 	movi	r3,31
   85850:	19007b16 	blt	r3,r4,85a40 <__subdf3+0x390>
   85854:	00800804 	movi	r2,32
   85858:	1105c83a 	sub	r2,r2,r4
   8585c:	8884d83a 	srl	r2,r17,r2
   85860:	9906983a 	sll	r3,r19,r4
   85864:	8922983a 	sll	r17,r17,r4
   85868:	10c4b03a 	or	r2,r2,r3
   8586c:	24007816 	blt	r4,r16,85a50 <__subdf3+0x3a0>
   85870:	2421c83a 	sub	r16,r4,r16
   85874:	80c00044 	addi	r3,r16,1
   85878:	010007c4 	movi	r4,31
   8587c:	20c09516 	blt	r4,r3,85ad4 <__subdf3+0x424>
   85880:	01400804 	movi	r5,32
   85884:	28cbc83a 	sub	r5,r5,r3
   85888:	88c8d83a 	srl	r4,r17,r3
   8588c:	8962983a 	sll	r17,r17,r5
   85890:	114a983a 	sll	r5,r2,r5
   85894:	10c6d83a 	srl	r3,r2,r3
   85898:	8804c03a 	cmpne	r2,r17,zero
   8589c:	290ab03a 	or	r5,r5,r4
   858a0:	28a2b03a 	or	r17,r5,r2
   858a4:	0021883a 	mov	r16,zero
   858a8:	003fa206 	br	85734 <__alt_data_end+0xfffb0004>
   858ac:	2090b03a 	or	r8,r4,r2
   858b0:	40018e26 	beq	r8,zero,85eec <__subdf3+0x83c>
   858b4:	1007883a 	mov	r3,r2
   858b8:	2023883a 	mov	r17,r4
   858bc:	888001cc 	andi	r2,r17,7
   858c0:	103f9e1e 	bne	r2,zero,8573c <__alt_data_end+0xfffb000c>
   858c4:	1804977a 	slli	r2,r3,29
   858c8:	8822d0fa 	srli	r17,r17,3
   858cc:	1810d0fa 	srli	r8,r3,3
   858d0:	9100004c 	andi	r4,r18,1
   858d4:	1444b03a 	or	r2,r2,r17
   858d8:	00c1ffc4 	movi	r3,2047
   858dc:	80c02826 	beq	r16,r3,85980 <__subdf3+0x2d0>
   858e0:	01400434 	movhi	r5,16
   858e4:	297fffc4 	addi	r5,r5,-1
   858e8:	80e0703a 	and	r16,r16,r3
   858ec:	414a703a 	and	r5,r8,r5
   858f0:	003fa806 	br	85794 <__alt_data_end+0xfffb0064>
   858f4:	0080630e 	bge	zero,r2,85a84 <__subdf3+0x3d4>
   858f8:	48003026 	beq	r9,zero,859bc <__subdf3+0x30c>
   858fc:	0101ffc4 	movi	r4,2047
   85900:	813f8c26 	beq	r16,r4,85734 <__alt_data_end+0xfffb0004>
   85904:	29402034 	orhi	r5,r5,128
   85908:	01000e04 	movi	r4,56
   8590c:	2080a90e 	bge	r4,r2,85bb4 <__subdf3+0x504>
   85910:	298cb03a 	or	r6,r5,r6
   85914:	3012c03a 	cmpne	r9,r6,zero
   85918:	0005883a 	mov	r2,zero
   8591c:	4c53883a 	add	r9,r9,r17
   85920:	4c63803a 	cmpltu	r17,r9,r17
   85924:	10c7883a 	add	r3,r2,r3
   85928:	88c7883a 	add	r3,r17,r3
   8592c:	4823883a 	mov	r17,r9
   85930:	1880202c 	andhi	r2,r3,128
   85934:	1000d026 	beq	r2,zero,85c78 <__subdf3+0x5c8>
   85938:	84000044 	addi	r16,r16,1
   8593c:	0081ffc4 	movi	r2,2047
   85940:	8080fe26 	beq	r16,r2,85d3c <__subdf3+0x68c>
   85944:	00bfe034 	movhi	r2,65408
   85948:	10bfffc4 	addi	r2,r2,-1
   8594c:	1886703a 	and	r3,r3,r2
   85950:	880ad07a 	srli	r5,r17,1
   85954:	180497fa 	slli	r2,r3,31
   85958:	8900004c 	andi	r4,r17,1
   8595c:	2922b03a 	or	r17,r5,r4
   85960:	1806d07a 	srli	r3,r3,1
   85964:	1462b03a 	or	r17,r2,r17
   85968:	3825883a 	mov	r18,r7
   8596c:	003f7106 	br	85734 <__alt_data_end+0xfffb0004>
   85970:	2984b03a 	or	r2,r5,r6
   85974:	103f6826 	beq	r2,zero,85718 <__alt_data_end+0xfffaffe8>
   85978:	39c03fcc 	andi	r7,r7,255
   8597c:	003f6706 	br	8571c <__alt_data_end+0xfffaffec>
   85980:	4086b03a 	or	r3,r8,r2
   85984:	18015226 	beq	r3,zero,85ed0 <__subdf3+0x820>
   85988:	00c00434 	movhi	r3,16
   8598c:	41400234 	orhi	r5,r8,8
   85990:	18ffffc4 	addi	r3,r3,-1
   85994:	28ca703a 	and	r5,r5,r3
   85998:	003f7e06 	br	85794 <__alt_data_end+0xfffb0064>
   8599c:	10bfffc4 	addi	r2,r2,-1
   859a0:	1000491e 	bne	r2,zero,85ac8 <__subdf3+0x418>
   859a4:	898fc83a 	sub	r7,r17,r6
   859a8:	89e3803a 	cmpltu	r17,r17,r7
   859ac:	1947c83a 	sub	r3,r3,r5
   859b0:	1c47c83a 	sub	r3,r3,r17
   859b4:	3823883a 	mov	r17,r7
   859b8:	003f9b06 	br	85828 <__alt_data_end+0xfffb00f8>
   859bc:	2988b03a 	or	r4,r5,r6
   859c0:	203f5c26 	beq	r4,zero,85734 <__alt_data_end+0xfffb0004>
   859c4:	10bfffc4 	addi	r2,r2,-1
   859c8:	1000931e 	bne	r2,zero,85c18 <__subdf3+0x568>
   859cc:	898d883a 	add	r6,r17,r6
   859d0:	3463803a 	cmpltu	r17,r6,r17
   859d4:	1947883a 	add	r3,r3,r5
   859d8:	88c7883a 	add	r3,r17,r3
   859dc:	3023883a 	mov	r17,r6
   859e0:	003fd306 	br	85930 <__alt_data_end+0xfffb0200>
   859e4:	1000541e 	bne	r2,zero,85b38 <__subdf3+0x488>
   859e8:	80800044 	addi	r2,r16,1
   859ec:	1081ffcc 	andi	r2,r2,2047
   859f0:	01000044 	movi	r4,1
   859f4:	2080a20e 	bge	r4,r2,85c80 <__subdf3+0x5d0>
   859f8:	8989c83a 	sub	r4,r17,r6
   859fc:	8905803a 	cmpltu	r2,r17,r4
   85a00:	1967c83a 	sub	r19,r3,r5
   85a04:	98a7c83a 	sub	r19,r19,r2
   85a08:	9880202c 	andhi	r2,r19,128
   85a0c:	10006326 	beq	r2,zero,85b9c <__subdf3+0x4ec>
   85a10:	3463c83a 	sub	r17,r6,r17
   85a14:	28c7c83a 	sub	r3,r5,r3
   85a18:	344d803a 	cmpltu	r6,r6,r17
   85a1c:	19a7c83a 	sub	r19,r3,r6
   85a20:	3825883a 	mov	r18,r7
   85a24:	983f861e 	bne	r19,zero,85840 <__alt_data_end+0xfffb0110>
   85a28:	8809883a 	mov	r4,r17
   85a2c:	00863c00 	call	863c0 <__clzsi2>
   85a30:	10800804 	addi	r2,r2,32
   85a34:	113ffe04 	addi	r4,r2,-8
   85a38:	00c007c4 	movi	r3,31
   85a3c:	193f850e 	bge	r3,r4,85854 <__alt_data_end+0xfffb0124>
   85a40:	10bff604 	addi	r2,r2,-40
   85a44:	8884983a 	sll	r2,r17,r2
   85a48:	0023883a 	mov	r17,zero
   85a4c:	243f880e 	bge	r4,r16,85870 <__alt_data_end+0xfffb0140>
   85a50:	00ffe034 	movhi	r3,65408
   85a54:	18ffffc4 	addi	r3,r3,-1
   85a58:	8121c83a 	sub	r16,r16,r4
   85a5c:	10c6703a 	and	r3,r2,r3
   85a60:	003f3406 	br	85734 <__alt_data_end+0xfffb0004>
   85a64:	9100004c 	andi	r4,r18,1
   85a68:	000b883a 	mov	r5,zero
   85a6c:	0005883a 	mov	r2,zero
   85a70:	003f4806 	br	85794 <__alt_data_end+0xfffb0064>
   85a74:	298cb03a 	or	r6,r5,r6
   85a78:	300cc03a 	cmpne	r6,r6,zero
   85a7c:	0005883a 	mov	r2,zero
   85a80:	003f6406 	br	85814 <__alt_data_end+0xfffb00e4>
   85a84:	10009a1e 	bne	r2,zero,85cf0 <__subdf3+0x640>
   85a88:	82400044 	addi	r9,r16,1
   85a8c:	4881ffcc 	andi	r2,r9,2047
   85a90:	02800044 	movi	r10,1
   85a94:	5080670e 	bge	r10,r2,85c34 <__subdf3+0x584>
   85a98:	0081ffc4 	movi	r2,2047
   85a9c:	4880af26 	beq	r9,r2,85d5c <__subdf3+0x6ac>
   85aa0:	898d883a 	add	r6,r17,r6
   85aa4:	1945883a 	add	r2,r3,r5
   85aa8:	3447803a 	cmpltu	r3,r6,r17
   85aac:	1887883a 	add	r3,r3,r2
   85ab0:	182297fa 	slli	r17,r3,31
   85ab4:	300cd07a 	srli	r6,r6,1
   85ab8:	1806d07a 	srli	r3,r3,1
   85abc:	4821883a 	mov	r16,r9
   85ac0:	89a2b03a 	or	r17,r17,r6
   85ac4:	003f1b06 	br	85734 <__alt_data_end+0xfffb0004>
   85ac8:	0101ffc4 	movi	r4,2047
   85acc:	813f441e 	bne	r16,r4,857e0 <__alt_data_end+0xfffb00b0>
   85ad0:	003f1806 	br	85734 <__alt_data_end+0xfffb0004>
   85ad4:	843ff844 	addi	r16,r16,-31
   85ad8:	01400804 	movi	r5,32
   85adc:	1408d83a 	srl	r4,r2,r16
   85ae0:	19405026 	beq	r3,r5,85c24 <__subdf3+0x574>
   85ae4:	01401004 	movi	r5,64
   85ae8:	28c7c83a 	sub	r3,r5,r3
   85aec:	10c4983a 	sll	r2,r2,r3
   85af0:	88a2b03a 	or	r17,r17,r2
   85af4:	8822c03a 	cmpne	r17,r17,zero
   85af8:	2462b03a 	or	r17,r4,r17
   85afc:	0007883a 	mov	r3,zero
   85b00:	0021883a 	mov	r16,zero
   85b04:	003f6d06 	br	858bc <__alt_data_end+0xfffb018c>
   85b08:	11fff804 	addi	r7,r2,-32
   85b0c:	01000804 	movi	r4,32
   85b10:	29ced83a 	srl	r7,r5,r7
   85b14:	11004526 	beq	r2,r4,85c2c <__subdf3+0x57c>
   85b18:	01001004 	movi	r4,64
   85b1c:	2089c83a 	sub	r4,r4,r2
   85b20:	2904983a 	sll	r2,r5,r4
   85b24:	118cb03a 	or	r6,r2,r6
   85b28:	300cc03a 	cmpne	r6,r6,zero
   85b2c:	398cb03a 	or	r6,r7,r6
   85b30:	0005883a 	mov	r2,zero
   85b34:	003f3706 	br	85814 <__alt_data_end+0xfffb00e4>
   85b38:	80002a26 	beq	r16,zero,85be4 <__subdf3+0x534>
   85b3c:	0101ffc4 	movi	r4,2047
   85b40:	49006626 	beq	r9,r4,85cdc <__subdf3+0x62c>
   85b44:	0085c83a 	sub	r2,zero,r2
   85b48:	18c02034 	orhi	r3,r3,128
   85b4c:	01000e04 	movi	r4,56
   85b50:	20807e16 	blt	r4,r2,85d4c <__subdf3+0x69c>
   85b54:	010007c4 	movi	r4,31
   85b58:	2080e716 	blt	r4,r2,85ef8 <__subdf3+0x848>
   85b5c:	01000804 	movi	r4,32
   85b60:	2089c83a 	sub	r4,r4,r2
   85b64:	1914983a 	sll	r10,r3,r4
   85b68:	8890d83a 	srl	r8,r17,r2
   85b6c:	8908983a 	sll	r4,r17,r4
   85b70:	1884d83a 	srl	r2,r3,r2
   85b74:	5222b03a 	or	r17,r10,r8
   85b78:	2006c03a 	cmpne	r3,r4,zero
   85b7c:	88e2b03a 	or	r17,r17,r3
   85b80:	3463c83a 	sub	r17,r6,r17
   85b84:	2885c83a 	sub	r2,r5,r2
   85b88:	344d803a 	cmpltu	r6,r6,r17
   85b8c:	1187c83a 	sub	r3,r2,r6
   85b90:	4821883a 	mov	r16,r9
   85b94:	3825883a 	mov	r18,r7
   85b98:	003f2306 	br	85828 <__alt_data_end+0xfffb00f8>
   85b9c:	24d0b03a 	or	r8,r4,r19
   85ba0:	40001b1e 	bne	r8,zero,85c10 <__subdf3+0x560>
   85ba4:	0005883a 	mov	r2,zero
   85ba8:	0009883a 	mov	r4,zero
   85bac:	0021883a 	mov	r16,zero
   85bb0:	003f4906 	br	858d8 <__alt_data_end+0xfffb01a8>
   85bb4:	010007c4 	movi	r4,31
   85bb8:	20803a16 	blt	r4,r2,85ca4 <__subdf3+0x5f4>
   85bbc:	01000804 	movi	r4,32
   85bc0:	2089c83a 	sub	r4,r4,r2
   85bc4:	2912983a 	sll	r9,r5,r4
   85bc8:	3090d83a 	srl	r8,r6,r2
   85bcc:	3108983a 	sll	r4,r6,r4
   85bd0:	2884d83a 	srl	r2,r5,r2
   85bd4:	4a12b03a 	or	r9,r9,r8
   85bd8:	2008c03a 	cmpne	r4,r4,zero
   85bdc:	4912b03a 	or	r9,r9,r4
   85be0:	003f4e06 	br	8591c <__alt_data_end+0xfffb01ec>
   85be4:	1c48b03a 	or	r4,r3,r17
   85be8:	20003c26 	beq	r4,zero,85cdc <__subdf3+0x62c>
   85bec:	0084303a 	nor	r2,zero,r2
   85bf0:	1000381e 	bne	r2,zero,85cd4 <__subdf3+0x624>
   85bf4:	3463c83a 	sub	r17,r6,r17
   85bf8:	28c5c83a 	sub	r2,r5,r3
   85bfc:	344d803a 	cmpltu	r6,r6,r17
   85c00:	1187c83a 	sub	r3,r2,r6
   85c04:	4821883a 	mov	r16,r9
   85c08:	3825883a 	mov	r18,r7
   85c0c:	003f0606 	br	85828 <__alt_data_end+0xfffb00f8>
   85c10:	2023883a 	mov	r17,r4
   85c14:	003f0906 	br	8583c <__alt_data_end+0xfffb010c>
   85c18:	0101ffc4 	movi	r4,2047
   85c1c:	813f3a1e 	bne	r16,r4,85908 <__alt_data_end+0xfffb01d8>
   85c20:	003ec406 	br	85734 <__alt_data_end+0xfffb0004>
   85c24:	0005883a 	mov	r2,zero
   85c28:	003fb106 	br	85af0 <__alt_data_end+0xfffb03c0>
   85c2c:	0005883a 	mov	r2,zero
   85c30:	003fbc06 	br	85b24 <__alt_data_end+0xfffb03f4>
   85c34:	1c44b03a 	or	r2,r3,r17
   85c38:	80008e1e 	bne	r16,zero,85e74 <__subdf3+0x7c4>
   85c3c:	1000c826 	beq	r2,zero,85f60 <__subdf3+0x8b0>
   85c40:	2984b03a 	or	r2,r5,r6
   85c44:	103ebb26 	beq	r2,zero,85734 <__alt_data_end+0xfffb0004>
   85c48:	8989883a 	add	r4,r17,r6
   85c4c:	1945883a 	add	r2,r3,r5
   85c50:	2447803a 	cmpltu	r3,r4,r17
   85c54:	1887883a 	add	r3,r3,r2
   85c58:	1880202c 	andhi	r2,r3,128
   85c5c:	2023883a 	mov	r17,r4
   85c60:	103f1626 	beq	r2,zero,858bc <__alt_data_end+0xfffb018c>
   85c64:	00bfe034 	movhi	r2,65408
   85c68:	10bfffc4 	addi	r2,r2,-1
   85c6c:	5021883a 	mov	r16,r10
   85c70:	1886703a 	and	r3,r3,r2
   85c74:	003eaf06 	br	85734 <__alt_data_end+0xfffb0004>
   85c78:	3825883a 	mov	r18,r7
   85c7c:	003f0f06 	br	858bc <__alt_data_end+0xfffb018c>
   85c80:	1c44b03a 	or	r2,r3,r17
   85c84:	8000251e 	bne	r16,zero,85d1c <__subdf3+0x66c>
   85c88:	1000661e 	bne	r2,zero,85e24 <__subdf3+0x774>
   85c8c:	2990b03a 	or	r8,r5,r6
   85c90:	40009626 	beq	r8,zero,85eec <__subdf3+0x83c>
   85c94:	2807883a 	mov	r3,r5
   85c98:	3023883a 	mov	r17,r6
   85c9c:	3825883a 	mov	r18,r7
   85ca0:	003ea406 	br	85734 <__alt_data_end+0xfffb0004>
   85ca4:	127ff804 	addi	r9,r2,-32
   85ca8:	01000804 	movi	r4,32
   85cac:	2a52d83a 	srl	r9,r5,r9
   85cb0:	11008c26 	beq	r2,r4,85ee4 <__subdf3+0x834>
   85cb4:	01001004 	movi	r4,64
   85cb8:	2085c83a 	sub	r2,r4,r2
   85cbc:	2884983a 	sll	r2,r5,r2
   85cc0:	118cb03a 	or	r6,r2,r6
   85cc4:	300cc03a 	cmpne	r6,r6,zero
   85cc8:	4992b03a 	or	r9,r9,r6
   85ccc:	0005883a 	mov	r2,zero
   85cd0:	003f1206 	br	8591c <__alt_data_end+0xfffb01ec>
   85cd4:	0101ffc4 	movi	r4,2047
   85cd8:	493f9c1e 	bne	r9,r4,85b4c <__alt_data_end+0xfffb041c>
   85cdc:	2807883a 	mov	r3,r5
   85ce0:	3023883a 	mov	r17,r6
   85ce4:	4821883a 	mov	r16,r9
   85ce8:	3825883a 	mov	r18,r7
   85cec:	003e9106 	br	85734 <__alt_data_end+0xfffb0004>
   85cf0:	80001f1e 	bne	r16,zero,85d70 <__subdf3+0x6c0>
   85cf4:	1c48b03a 	or	r4,r3,r17
   85cf8:	20005a26 	beq	r4,zero,85e64 <__subdf3+0x7b4>
   85cfc:	0084303a 	nor	r2,zero,r2
   85d00:	1000561e 	bne	r2,zero,85e5c <__subdf3+0x7ac>
   85d04:	89a3883a 	add	r17,r17,r6
   85d08:	1945883a 	add	r2,r3,r5
   85d0c:	898d803a 	cmpltu	r6,r17,r6
   85d10:	3087883a 	add	r3,r6,r2
   85d14:	4821883a 	mov	r16,r9
   85d18:	003f0506 	br	85930 <__alt_data_end+0xfffb0200>
   85d1c:	10002b1e 	bne	r2,zero,85dcc <__subdf3+0x71c>
   85d20:	2984b03a 	or	r2,r5,r6
   85d24:	10008026 	beq	r2,zero,85f28 <__subdf3+0x878>
   85d28:	2807883a 	mov	r3,r5
   85d2c:	3023883a 	mov	r17,r6
   85d30:	3825883a 	mov	r18,r7
   85d34:	0401ffc4 	movi	r16,2047
   85d38:	003e7e06 	br	85734 <__alt_data_end+0xfffb0004>
   85d3c:	3809883a 	mov	r4,r7
   85d40:	0011883a 	mov	r8,zero
   85d44:	0005883a 	mov	r2,zero
   85d48:	003ee306 	br	858d8 <__alt_data_end+0xfffb01a8>
   85d4c:	1c62b03a 	or	r17,r3,r17
   85d50:	8822c03a 	cmpne	r17,r17,zero
   85d54:	0005883a 	mov	r2,zero
   85d58:	003f8906 	br	85b80 <__alt_data_end+0xfffb0450>
   85d5c:	3809883a 	mov	r4,r7
   85d60:	4821883a 	mov	r16,r9
   85d64:	0011883a 	mov	r8,zero
   85d68:	0005883a 	mov	r2,zero
   85d6c:	003eda06 	br	858d8 <__alt_data_end+0xfffb01a8>
   85d70:	0101ffc4 	movi	r4,2047
   85d74:	49003b26 	beq	r9,r4,85e64 <__subdf3+0x7b4>
   85d78:	0085c83a 	sub	r2,zero,r2
   85d7c:	18c02034 	orhi	r3,r3,128
   85d80:	01000e04 	movi	r4,56
   85d84:	20806e16 	blt	r4,r2,85f40 <__subdf3+0x890>
   85d88:	010007c4 	movi	r4,31
   85d8c:	20807716 	blt	r4,r2,85f6c <__subdf3+0x8bc>
   85d90:	01000804 	movi	r4,32
   85d94:	2089c83a 	sub	r4,r4,r2
   85d98:	1914983a 	sll	r10,r3,r4
   85d9c:	8890d83a 	srl	r8,r17,r2
   85da0:	8908983a 	sll	r4,r17,r4
   85da4:	1884d83a 	srl	r2,r3,r2
   85da8:	5222b03a 	or	r17,r10,r8
   85dac:	2006c03a 	cmpne	r3,r4,zero
   85db0:	88e2b03a 	or	r17,r17,r3
   85db4:	89a3883a 	add	r17,r17,r6
   85db8:	1145883a 	add	r2,r2,r5
   85dbc:	898d803a 	cmpltu	r6,r17,r6
   85dc0:	3087883a 	add	r3,r6,r2
   85dc4:	4821883a 	mov	r16,r9
   85dc8:	003ed906 	br	85930 <__alt_data_end+0xfffb0200>
   85dcc:	2984b03a 	or	r2,r5,r6
   85dd0:	10004226 	beq	r2,zero,85edc <__subdf3+0x82c>
   85dd4:	1808d0fa 	srli	r4,r3,3
   85dd8:	8822d0fa 	srli	r17,r17,3
   85ddc:	1806977a 	slli	r3,r3,29
   85de0:	2080022c 	andhi	r2,r4,8
   85de4:	1c62b03a 	or	r17,r3,r17
   85de8:	10000826 	beq	r2,zero,85e0c <__subdf3+0x75c>
   85dec:	2812d0fa 	srli	r9,r5,3
   85df0:	4880022c 	andhi	r2,r9,8
   85df4:	1000051e 	bne	r2,zero,85e0c <__subdf3+0x75c>
   85df8:	300cd0fa 	srli	r6,r6,3
   85dfc:	2804977a 	slli	r2,r5,29
   85e00:	4809883a 	mov	r4,r9
   85e04:	3825883a 	mov	r18,r7
   85e08:	11a2b03a 	or	r17,r2,r6
   85e0c:	8806d77a 	srli	r3,r17,29
   85e10:	200890fa 	slli	r4,r4,3
   85e14:	882290fa 	slli	r17,r17,3
   85e18:	0401ffc4 	movi	r16,2047
   85e1c:	1906b03a 	or	r3,r3,r4
   85e20:	003e4406 	br	85734 <__alt_data_end+0xfffb0004>
   85e24:	2984b03a 	or	r2,r5,r6
   85e28:	103e4226 	beq	r2,zero,85734 <__alt_data_end+0xfffb0004>
   85e2c:	8989c83a 	sub	r4,r17,r6
   85e30:	8911803a 	cmpltu	r8,r17,r4
   85e34:	1945c83a 	sub	r2,r3,r5
   85e38:	1205c83a 	sub	r2,r2,r8
   85e3c:	1200202c 	andhi	r8,r2,128
   85e40:	403e9a26 	beq	r8,zero,858ac <__alt_data_end+0xfffb017c>
   85e44:	3463c83a 	sub	r17,r6,r17
   85e48:	28c5c83a 	sub	r2,r5,r3
   85e4c:	344d803a 	cmpltu	r6,r6,r17
   85e50:	1187c83a 	sub	r3,r2,r6
   85e54:	3825883a 	mov	r18,r7
   85e58:	003e3606 	br	85734 <__alt_data_end+0xfffb0004>
   85e5c:	0101ffc4 	movi	r4,2047
   85e60:	493fc71e 	bne	r9,r4,85d80 <__alt_data_end+0xfffb0650>
   85e64:	2807883a 	mov	r3,r5
   85e68:	3023883a 	mov	r17,r6
   85e6c:	4821883a 	mov	r16,r9
   85e70:	003e3006 	br	85734 <__alt_data_end+0xfffb0004>
   85e74:	10003626 	beq	r2,zero,85f50 <__subdf3+0x8a0>
   85e78:	2984b03a 	or	r2,r5,r6
   85e7c:	10001726 	beq	r2,zero,85edc <__subdf3+0x82c>
   85e80:	1808d0fa 	srli	r4,r3,3
   85e84:	8822d0fa 	srli	r17,r17,3
   85e88:	1806977a 	slli	r3,r3,29
   85e8c:	2080022c 	andhi	r2,r4,8
   85e90:	1c62b03a 	or	r17,r3,r17
   85e94:	10000726 	beq	r2,zero,85eb4 <__subdf3+0x804>
   85e98:	2812d0fa 	srli	r9,r5,3
   85e9c:	4880022c 	andhi	r2,r9,8
   85ea0:	1000041e 	bne	r2,zero,85eb4 <__subdf3+0x804>
   85ea4:	300cd0fa 	srli	r6,r6,3
   85ea8:	2804977a 	slli	r2,r5,29
   85eac:	4809883a 	mov	r4,r9
   85eb0:	11a2b03a 	or	r17,r2,r6
   85eb4:	8806d77a 	srli	r3,r17,29
   85eb8:	200890fa 	slli	r4,r4,3
   85ebc:	882290fa 	slli	r17,r17,3
   85ec0:	3825883a 	mov	r18,r7
   85ec4:	1906b03a 	or	r3,r3,r4
   85ec8:	0401ffc4 	movi	r16,2047
   85ecc:	003e1906 	br	85734 <__alt_data_end+0xfffb0004>
   85ed0:	000b883a 	mov	r5,zero
   85ed4:	0005883a 	mov	r2,zero
   85ed8:	003e2e06 	br	85794 <__alt_data_end+0xfffb0064>
   85edc:	0401ffc4 	movi	r16,2047
   85ee0:	003e1406 	br	85734 <__alt_data_end+0xfffb0004>
   85ee4:	0005883a 	mov	r2,zero
   85ee8:	003f7506 	br	85cc0 <__alt_data_end+0xfffb0590>
   85eec:	0005883a 	mov	r2,zero
   85ef0:	0009883a 	mov	r4,zero
   85ef4:	003e7806 	br	858d8 <__alt_data_end+0xfffb01a8>
   85ef8:	123ff804 	addi	r8,r2,-32
   85efc:	01000804 	movi	r4,32
   85f00:	1a10d83a 	srl	r8,r3,r8
   85f04:	11002526 	beq	r2,r4,85f9c <__subdf3+0x8ec>
   85f08:	01001004 	movi	r4,64
   85f0c:	2085c83a 	sub	r2,r4,r2
   85f10:	1884983a 	sll	r2,r3,r2
   85f14:	1444b03a 	or	r2,r2,r17
   85f18:	1004c03a 	cmpne	r2,r2,zero
   85f1c:	40a2b03a 	or	r17,r8,r2
   85f20:	0005883a 	mov	r2,zero
   85f24:	003f1606 	br	85b80 <__alt_data_end+0xfffb0450>
   85f28:	02000434 	movhi	r8,16
   85f2c:	0009883a 	mov	r4,zero
   85f30:	423fffc4 	addi	r8,r8,-1
   85f34:	00bfffc4 	movi	r2,-1
   85f38:	0401ffc4 	movi	r16,2047
   85f3c:	003e6606 	br	858d8 <__alt_data_end+0xfffb01a8>
   85f40:	1c62b03a 	or	r17,r3,r17
   85f44:	8822c03a 	cmpne	r17,r17,zero
   85f48:	0005883a 	mov	r2,zero
   85f4c:	003f9906 	br	85db4 <__alt_data_end+0xfffb0684>
   85f50:	2807883a 	mov	r3,r5
   85f54:	3023883a 	mov	r17,r6
   85f58:	0401ffc4 	movi	r16,2047
   85f5c:	003df506 	br	85734 <__alt_data_end+0xfffb0004>
   85f60:	2807883a 	mov	r3,r5
   85f64:	3023883a 	mov	r17,r6
   85f68:	003df206 	br	85734 <__alt_data_end+0xfffb0004>
   85f6c:	123ff804 	addi	r8,r2,-32
   85f70:	01000804 	movi	r4,32
   85f74:	1a10d83a 	srl	r8,r3,r8
   85f78:	11000a26 	beq	r2,r4,85fa4 <__subdf3+0x8f4>
   85f7c:	01001004 	movi	r4,64
   85f80:	2085c83a 	sub	r2,r4,r2
   85f84:	1884983a 	sll	r2,r3,r2
   85f88:	1444b03a 	or	r2,r2,r17
   85f8c:	1004c03a 	cmpne	r2,r2,zero
   85f90:	40a2b03a 	or	r17,r8,r2
   85f94:	0005883a 	mov	r2,zero
   85f98:	003f8606 	br	85db4 <__alt_data_end+0xfffb0684>
   85f9c:	0005883a 	mov	r2,zero
   85fa0:	003fdc06 	br	85f14 <__alt_data_end+0xfffb07e4>
   85fa4:	0005883a 	mov	r2,zero
   85fa8:	003ff706 	br	85f88 <__alt_data_end+0xfffb0858>

00085fac <__fixdfsi>:
   85fac:	280cd53a 	srli	r6,r5,20
   85fb0:	00c00434 	movhi	r3,16
   85fb4:	18ffffc4 	addi	r3,r3,-1
   85fb8:	3181ffcc 	andi	r6,r6,2047
   85fbc:	01c0ff84 	movi	r7,1022
   85fc0:	28c6703a 	and	r3,r5,r3
   85fc4:	280ad7fa 	srli	r5,r5,31
   85fc8:	3980120e 	bge	r7,r6,86014 <__fixdfsi+0x68>
   85fcc:	00810744 	movi	r2,1053
   85fd0:	11800c16 	blt	r2,r6,86004 <__fixdfsi+0x58>
   85fd4:	00810cc4 	movi	r2,1075
   85fd8:	1185c83a 	sub	r2,r2,r6
   85fdc:	01c007c4 	movi	r7,31
   85fe0:	18c00434 	orhi	r3,r3,16
   85fe4:	38800d16 	blt	r7,r2,8601c <__fixdfsi+0x70>
   85fe8:	31befb44 	addi	r6,r6,-1043
   85fec:	2084d83a 	srl	r2,r4,r2
   85ff0:	1986983a 	sll	r3,r3,r6
   85ff4:	1884b03a 	or	r2,r3,r2
   85ff8:	28000726 	beq	r5,zero,86018 <__fixdfsi+0x6c>
   85ffc:	0085c83a 	sub	r2,zero,r2
   86000:	f800283a 	ret
   86004:	00a00034 	movhi	r2,32768
   86008:	10bfffc4 	addi	r2,r2,-1
   8600c:	2885883a 	add	r2,r5,r2
   86010:	f800283a 	ret
   86014:	0005883a 	mov	r2,zero
   86018:	f800283a 	ret
   8601c:	008104c4 	movi	r2,1043
   86020:	1185c83a 	sub	r2,r2,r6
   86024:	1884d83a 	srl	r2,r3,r2
   86028:	003ff306 	br	85ff8 <__alt_data_end+0xfffb08c8>

0008602c <__floatsidf>:
   8602c:	defffd04 	addi	sp,sp,-12
   86030:	dfc00215 	stw	ra,8(sp)
   86034:	dc400115 	stw	r17,4(sp)
   86038:	dc000015 	stw	r16,0(sp)
   8603c:	20002b26 	beq	r4,zero,860ec <__floatsidf+0xc0>
   86040:	2023883a 	mov	r17,r4
   86044:	2020d7fa 	srli	r16,r4,31
   86048:	20002d16 	blt	r4,zero,86100 <__floatsidf+0xd4>
   8604c:	8809883a 	mov	r4,r17
   86050:	00863c00 	call	863c0 <__clzsi2>
   86054:	01410784 	movi	r5,1054
   86058:	288bc83a 	sub	r5,r5,r2
   8605c:	01010cc4 	movi	r4,1075
   86060:	2149c83a 	sub	r4,r4,r5
   86064:	00c007c4 	movi	r3,31
   86068:	1900160e 	bge	r3,r4,860c4 <__floatsidf+0x98>
   8606c:	00c104c4 	movi	r3,1043
   86070:	1947c83a 	sub	r3,r3,r5
   86074:	88c6983a 	sll	r3,r17,r3
   86078:	00800434 	movhi	r2,16
   8607c:	10bfffc4 	addi	r2,r2,-1
   86080:	1886703a 	and	r3,r3,r2
   86084:	2941ffcc 	andi	r5,r5,2047
   86088:	800d883a 	mov	r6,r16
   8608c:	0005883a 	mov	r2,zero
   86090:	280a953a 	slli	r5,r5,20
   86094:	31803fcc 	andi	r6,r6,255
   86098:	01000434 	movhi	r4,16
   8609c:	300c97fa 	slli	r6,r6,31
   860a0:	213fffc4 	addi	r4,r4,-1
   860a4:	1906703a 	and	r3,r3,r4
   860a8:	1946b03a 	or	r3,r3,r5
   860ac:	1986b03a 	or	r3,r3,r6
   860b0:	dfc00217 	ldw	ra,8(sp)
   860b4:	dc400117 	ldw	r17,4(sp)
   860b8:	dc000017 	ldw	r16,0(sp)
   860bc:	dec00304 	addi	sp,sp,12
   860c0:	f800283a 	ret
   860c4:	00c002c4 	movi	r3,11
   860c8:	1887c83a 	sub	r3,r3,r2
   860cc:	88c6d83a 	srl	r3,r17,r3
   860d0:	8904983a 	sll	r2,r17,r4
   860d4:	01000434 	movhi	r4,16
   860d8:	213fffc4 	addi	r4,r4,-1
   860dc:	2941ffcc 	andi	r5,r5,2047
   860e0:	1906703a 	and	r3,r3,r4
   860e4:	800d883a 	mov	r6,r16
   860e8:	003fe906 	br	86090 <__alt_data_end+0xfffb0960>
   860ec:	000d883a 	mov	r6,zero
   860f0:	000b883a 	mov	r5,zero
   860f4:	0007883a 	mov	r3,zero
   860f8:	0005883a 	mov	r2,zero
   860fc:	003fe406 	br	86090 <__alt_data_end+0xfffb0960>
   86100:	0123c83a 	sub	r17,zero,r4
   86104:	003fd106 	br	8604c <__alt_data_end+0xfffb091c>

00086108 <__extendsfdf2>:
   86108:	200ad5fa 	srli	r5,r4,23
   8610c:	defffd04 	addi	sp,sp,-12
   86110:	dc400115 	stw	r17,4(sp)
   86114:	29403fcc 	andi	r5,r5,255
   86118:	29800044 	addi	r6,r5,1
   8611c:	04402034 	movhi	r17,128
   86120:	dc000015 	stw	r16,0(sp)
   86124:	8c7fffc4 	addi	r17,r17,-1
   86128:	dfc00215 	stw	ra,8(sp)
   8612c:	31803fcc 	andi	r6,r6,255
   86130:	00800044 	movi	r2,1
   86134:	8922703a 	and	r17,r17,r4
   86138:	2020d7fa 	srli	r16,r4,31
   8613c:	1180110e 	bge	r2,r6,86184 <__extendsfdf2+0x7c>
   86140:	880cd0fa 	srli	r6,r17,3
   86144:	8822977a 	slli	r17,r17,29
   86148:	2940e004 	addi	r5,r5,896
   8614c:	2941ffcc 	andi	r5,r5,2047
   86150:	2804953a 	slli	r2,r5,20
   86154:	01400434 	movhi	r5,16
   86158:	800697fa 	slli	r3,r16,31
   8615c:	297fffc4 	addi	r5,r5,-1
   86160:	314a703a 	and	r5,r6,r5
   86164:	288ab03a 	or	r5,r5,r2
   86168:	28c6b03a 	or	r3,r5,r3
   8616c:	8805883a 	mov	r2,r17
   86170:	dfc00217 	ldw	ra,8(sp)
   86174:	dc400117 	ldw	r17,4(sp)
   86178:	dc000017 	ldw	r16,0(sp)
   8617c:	dec00304 	addi	sp,sp,12
   86180:	f800283a 	ret
   86184:	2800111e 	bne	r5,zero,861cc <__extendsfdf2+0xc4>
   86188:	88001c26 	beq	r17,zero,861fc <__extendsfdf2+0xf4>
   8618c:	8809883a 	mov	r4,r17
   86190:	00863c00 	call	863c0 <__clzsi2>
   86194:	00c00284 	movi	r3,10
   86198:	18801b16 	blt	r3,r2,86208 <__extendsfdf2+0x100>
   8619c:	018002c4 	movi	r6,11
   861a0:	308dc83a 	sub	r6,r6,r2
   861a4:	11000544 	addi	r4,r2,21
   861a8:	8986d83a 	srl	r3,r17,r6
   861ac:	8922983a 	sll	r17,r17,r4
   861b0:	0180e244 	movi	r6,905
   861b4:	01400434 	movhi	r5,16
   861b8:	3085c83a 	sub	r2,r6,r2
   861bc:	297fffc4 	addi	r5,r5,-1
   861c0:	194c703a 	and	r6,r3,r5
   861c4:	1141ffcc 	andi	r5,r2,2047
   861c8:	003fe006 	br	8614c <__alt_data_end+0xfffb0a1c>
   861cc:	88000826 	beq	r17,zero,861f0 <__extendsfdf2+0xe8>
   861d0:	880cd0fa 	srli	r6,r17,3
   861d4:	00800434 	movhi	r2,16
   861d8:	10bfffc4 	addi	r2,r2,-1
   861dc:	31800234 	orhi	r6,r6,8
   861e0:	8822977a 	slli	r17,r17,29
   861e4:	308c703a 	and	r6,r6,r2
   861e8:	0141ffc4 	movi	r5,2047
   861ec:	003fd706 	br	8614c <__alt_data_end+0xfffb0a1c>
   861f0:	0141ffc4 	movi	r5,2047
   861f4:	000d883a 	mov	r6,zero
   861f8:	003fd406 	br	8614c <__alt_data_end+0xfffb0a1c>
   861fc:	000b883a 	mov	r5,zero
   86200:	000d883a 	mov	r6,zero
   86204:	003fd106 	br	8614c <__alt_data_end+0xfffb0a1c>
   86208:	11bffd44 	addi	r6,r2,-11
   8620c:	8986983a 	sll	r3,r17,r6
   86210:	0023883a 	mov	r17,zero
   86214:	003fe606 	br	861b0 <__alt_data_end+0xfffb0a80>

00086218 <__truncdfsf2>:
   86218:	2810d53a 	srli	r8,r5,20
   8621c:	01c00434 	movhi	r7,16
   86220:	39ffffc4 	addi	r7,r7,-1
   86224:	29ce703a 	and	r7,r5,r7
   86228:	4201ffcc 	andi	r8,r8,2047
   8622c:	380e90fa 	slli	r7,r7,3
   86230:	200cd77a 	srli	r6,r4,29
   86234:	42400044 	addi	r9,r8,1
   86238:	4a41ffcc 	andi	r9,r9,2047
   8623c:	00c00044 	movi	r3,1
   86240:	280ad7fa 	srli	r5,r5,31
   86244:	31ceb03a 	or	r7,r6,r7
   86248:	200490fa 	slli	r2,r4,3
   8624c:	1a40230e 	bge	r3,r9,862dc <__truncdfsf2+0xc4>
   86250:	40ff2004 	addi	r3,r8,-896
   86254:	01803f84 	movi	r6,254
   86258:	30c01516 	blt	r6,r3,862b0 <__truncdfsf2+0x98>
   8625c:	00c0380e 	bge	zero,r3,86340 <__truncdfsf2+0x128>
   86260:	200c91ba 	slli	r6,r4,6
   86264:	380e90fa 	slli	r7,r7,3
   86268:	1004d77a 	srli	r2,r2,29
   8626c:	300cc03a 	cmpne	r6,r6,zero
   86270:	31ccb03a 	or	r6,r6,r7
   86274:	308cb03a 	or	r6,r6,r2
   86278:	308001cc 	andi	r2,r6,7
   8627c:	10000426 	beq	r2,zero,86290 <__truncdfsf2+0x78>
   86280:	308003cc 	andi	r2,r6,15
   86284:	01000104 	movi	r4,4
   86288:	11000126 	beq	r2,r4,86290 <__truncdfsf2+0x78>
   8628c:	31800104 	addi	r6,r6,4
   86290:	3081002c 	andhi	r2,r6,1024
   86294:	10001626 	beq	r2,zero,862f0 <__truncdfsf2+0xd8>
   86298:	18c00044 	addi	r3,r3,1
   8629c:	00803fc4 	movi	r2,255
   862a0:	18800326 	beq	r3,r2,862b0 <__truncdfsf2+0x98>
   862a4:	300c91ba 	slli	r6,r6,6
   862a8:	300cd27a 	srli	r6,r6,9
   862ac:	00000206 	br	862b8 <__truncdfsf2+0xa0>
   862b0:	00ffffc4 	movi	r3,-1
   862b4:	000d883a 	mov	r6,zero
   862b8:	18c03fcc 	andi	r3,r3,255
   862bc:	180895fa 	slli	r4,r3,23
   862c0:	00c02034 	movhi	r3,128
   862c4:	280a97fa 	slli	r5,r5,31
   862c8:	18ffffc4 	addi	r3,r3,-1
   862cc:	30c6703a 	and	r3,r6,r3
   862d0:	1906b03a 	or	r3,r3,r4
   862d4:	1944b03a 	or	r2,r3,r5
   862d8:	f800283a 	ret
   862dc:	40000b1e 	bne	r8,zero,8630c <__truncdfsf2+0xf4>
   862e0:	388cb03a 	or	r6,r7,r2
   862e4:	0007883a 	mov	r3,zero
   862e8:	30000426 	beq	r6,zero,862fc <__truncdfsf2+0xe4>
   862ec:	01800144 	movi	r6,5
   862f0:	00803fc4 	movi	r2,255
   862f4:	300cd0fa 	srli	r6,r6,3
   862f8:	18800a26 	beq	r3,r2,86324 <__truncdfsf2+0x10c>
   862fc:	00802034 	movhi	r2,128
   86300:	10bfffc4 	addi	r2,r2,-1
   86304:	308c703a 	and	r6,r6,r2
   86308:	003feb06 	br	862b8 <__alt_data_end+0xfffb0b88>
   8630c:	3888b03a 	or	r4,r7,r2
   86310:	203fe726 	beq	r4,zero,862b0 <__alt_data_end+0xfffb0b80>
   86314:	380c90fa 	slli	r6,r7,3
   86318:	00c03fc4 	movi	r3,255
   8631c:	31808034 	orhi	r6,r6,512
   86320:	003fd506 	br	86278 <__alt_data_end+0xfffb0b48>
   86324:	303fe226 	beq	r6,zero,862b0 <__alt_data_end+0xfffb0b80>
   86328:	00802034 	movhi	r2,128
   8632c:	31801034 	orhi	r6,r6,64
   86330:	10bfffc4 	addi	r2,r2,-1
   86334:	00ffffc4 	movi	r3,-1
   86338:	308c703a 	and	r6,r6,r2
   8633c:	003fde06 	br	862b8 <__alt_data_end+0xfffb0b88>
   86340:	013ffa44 	movi	r4,-23
   86344:	19000e16 	blt	r3,r4,86380 <__truncdfsf2+0x168>
   86348:	01000784 	movi	r4,30
   8634c:	20c9c83a 	sub	r4,r4,r3
   86350:	018007c4 	movi	r6,31
   86354:	39c02034 	orhi	r7,r7,128
   86358:	31000b16 	blt	r6,r4,86388 <__truncdfsf2+0x170>
   8635c:	423f2084 	addi	r8,r8,-894
   86360:	120c983a 	sll	r6,r2,r8
   86364:	3a0e983a 	sll	r7,r7,r8
   86368:	1104d83a 	srl	r2,r2,r4
   8636c:	300cc03a 	cmpne	r6,r6,zero
   86370:	31ceb03a 	or	r7,r6,r7
   86374:	388cb03a 	or	r6,r7,r2
   86378:	0007883a 	mov	r3,zero
   8637c:	003fbe06 	br	86278 <__alt_data_end+0xfffb0b48>
   86380:	0007883a 	mov	r3,zero
   86384:	003fd906 	br	862ec <__alt_data_end+0xfffb0bbc>
   86388:	01bfff84 	movi	r6,-2
   8638c:	30cdc83a 	sub	r6,r6,r3
   86390:	00c00804 	movi	r3,32
   86394:	398cd83a 	srl	r6,r7,r6
   86398:	20c00726 	beq	r4,r3,863b8 <__truncdfsf2+0x1a0>
   8639c:	423f2884 	addi	r8,r8,-862
   863a0:	3a0e983a 	sll	r7,r7,r8
   863a4:	3884b03a 	or	r2,r7,r2
   863a8:	1004c03a 	cmpne	r2,r2,zero
   863ac:	118cb03a 	or	r6,r2,r6
   863b0:	0007883a 	mov	r3,zero
   863b4:	003fb006 	br	86278 <__alt_data_end+0xfffb0b48>
   863b8:	000f883a 	mov	r7,zero
   863bc:	003ff906 	br	863a4 <__alt_data_end+0xfffb0c74>

000863c0 <__clzsi2>:
   863c0:	00bfffd4 	movui	r2,65535
   863c4:	11000536 	bltu	r2,r4,863dc <__clzsi2+0x1c>
   863c8:	00803fc4 	movi	r2,255
   863cc:	11000f36 	bltu	r2,r4,8640c <__clzsi2+0x4c>
   863d0:	00800804 	movi	r2,32
   863d4:	0007883a 	mov	r3,zero
   863d8:	00000506 	br	863f0 <__clzsi2+0x30>
   863dc:	00804034 	movhi	r2,256
   863e0:	10bfffc4 	addi	r2,r2,-1
   863e4:	11000c2e 	bgeu	r2,r4,86418 <__clzsi2+0x58>
   863e8:	00800204 	movi	r2,8
   863ec:	00c00604 	movi	r3,24
   863f0:	20c8d83a 	srl	r4,r4,r3
   863f4:	00c00274 	movhi	r3,9
   863f8:	18d02204 	addi	r3,r3,16520
   863fc:	1909883a 	add	r4,r3,r4
   86400:	20c00003 	ldbu	r3,0(r4)
   86404:	10c5c83a 	sub	r2,r2,r3
   86408:	f800283a 	ret
   8640c:	00800604 	movi	r2,24
   86410:	00c00204 	movi	r3,8
   86414:	003ff606 	br	863f0 <__alt_data_end+0xfffb0cc0>
   86418:	00800404 	movi	r2,16
   8641c:	1007883a 	mov	r3,r2
   86420:	003ff306 	br	863f0 <__alt_data_end+0xfffb0cc0>

00086424 <__errno>:
   86424:	008002b4 	movhi	r2,10
   86428:	10b7b804 	addi	r2,r2,-8480
   8642c:	10800017 	ldw	r2,0(r2)
   86430:	f800283a 	ret

00086434 <_fclose_r>:
   86434:	28003926 	beq	r5,zero,8651c <_fclose_r+0xe8>
   86438:	defffc04 	addi	sp,sp,-16
   8643c:	dc400115 	stw	r17,4(sp)
   86440:	dc000015 	stw	r16,0(sp)
   86444:	dfc00315 	stw	ra,12(sp)
   86448:	dc800215 	stw	r18,8(sp)
   8644c:	2023883a 	mov	r17,r4
   86450:	2821883a 	mov	r16,r5
   86454:	20000226 	beq	r4,zero,86460 <_fclose_r+0x2c>
   86458:	20800e17 	ldw	r2,56(r4)
   8645c:	10002726 	beq	r2,zero,864fc <_fclose_r+0xc8>
   86460:	8080030f 	ldh	r2,12(r16)
   86464:	1000071e 	bne	r2,zero,86484 <_fclose_r+0x50>
   86468:	0005883a 	mov	r2,zero
   8646c:	dfc00317 	ldw	ra,12(sp)
   86470:	dc800217 	ldw	r18,8(sp)
   86474:	dc400117 	ldw	r17,4(sp)
   86478:	dc000017 	ldw	r16,0(sp)
   8647c:	dec00404 	addi	sp,sp,16
   86480:	f800283a 	ret
   86484:	800b883a 	mov	r5,r16
   86488:	8809883a 	mov	r4,r17
   8648c:	00865380 	call	86538 <__sflush_r>
   86490:	1025883a 	mov	r18,r2
   86494:	80800b17 	ldw	r2,44(r16)
   86498:	10000426 	beq	r2,zero,864ac <_fclose_r+0x78>
   8649c:	81400717 	ldw	r5,28(r16)
   864a0:	8809883a 	mov	r4,r17
   864a4:	103ee83a 	callr	r2
   864a8:	10001616 	blt	r2,zero,86504 <_fclose_r+0xd0>
   864ac:	8080030b 	ldhu	r2,12(r16)
   864b0:	1080200c 	andi	r2,r2,128
   864b4:	1000151e 	bne	r2,zero,8650c <_fclose_r+0xd8>
   864b8:	81400c17 	ldw	r5,48(r16)
   864bc:	28000526 	beq	r5,zero,864d4 <_fclose_r+0xa0>
   864c0:	80801004 	addi	r2,r16,64
   864c4:	28800226 	beq	r5,r2,864d0 <_fclose_r+0x9c>
   864c8:	8809883a 	mov	r4,r17
   864cc:	0086dc00 	call	86dc0 <_free_r>
   864d0:	80000c15 	stw	zero,48(r16)
   864d4:	81401117 	ldw	r5,68(r16)
   864d8:	28000326 	beq	r5,zero,864e8 <_fclose_r+0xb4>
   864dc:	8809883a 	mov	r4,r17
   864e0:	0086dc00 	call	86dc0 <_free_r>
   864e4:	80001115 	stw	zero,68(r16)
   864e8:	0086b500 	call	86b50 <__sfp_lock_acquire>
   864ec:	8000030d 	sth	zero,12(r16)
   864f0:	0086b540 	call	86b54 <__sfp_lock_release>
   864f4:	9005883a 	mov	r2,r18
   864f8:	003fdc06 	br	8646c <__alt_data_end+0xfffb0d3c>
   864fc:	0086b400 	call	86b40 <__sinit>
   86500:	003fd706 	br	86460 <__alt_data_end+0xfffb0d30>
   86504:	04bfffc4 	movi	r18,-1
   86508:	003fe806 	br	864ac <__alt_data_end+0xfffb0d7c>
   8650c:	81400417 	ldw	r5,16(r16)
   86510:	8809883a 	mov	r4,r17
   86514:	0086dc00 	call	86dc0 <_free_r>
   86518:	003fe706 	br	864b8 <__alt_data_end+0xfffb0d88>
   8651c:	0005883a 	mov	r2,zero
   86520:	f800283a 	ret

00086524 <fclose>:
   86524:	008002b4 	movhi	r2,10
   86528:	10b7b804 	addi	r2,r2,-8480
   8652c:	200b883a 	mov	r5,r4
   86530:	11000017 	ldw	r4,0(r2)
   86534:	00864341 	jmpi	86434 <_fclose_r>

00086538 <__sflush_r>:
   86538:	2880030b 	ldhu	r2,12(r5)
   8653c:	defffb04 	addi	sp,sp,-20
   86540:	dcc00315 	stw	r19,12(sp)
   86544:	dc400115 	stw	r17,4(sp)
   86548:	dfc00415 	stw	ra,16(sp)
   8654c:	dc800215 	stw	r18,8(sp)
   86550:	dc000015 	stw	r16,0(sp)
   86554:	10c0020c 	andi	r3,r2,8
   86558:	2823883a 	mov	r17,r5
   8655c:	2027883a 	mov	r19,r4
   86560:	1800311e 	bne	r3,zero,86628 <__sflush_r+0xf0>
   86564:	28c00117 	ldw	r3,4(r5)
   86568:	10820014 	ori	r2,r2,2048
   8656c:	2880030d 	sth	r2,12(r5)
   86570:	00c04b0e 	bge	zero,r3,866a0 <__sflush_r+0x168>
   86574:	8a000a17 	ldw	r8,40(r17)
   86578:	40002326 	beq	r8,zero,86608 <__sflush_r+0xd0>
   8657c:	9c000017 	ldw	r16,0(r19)
   86580:	10c4000c 	andi	r3,r2,4096
   86584:	98000015 	stw	zero,0(r19)
   86588:	18004826 	beq	r3,zero,866ac <__sflush_r+0x174>
   8658c:	89801417 	ldw	r6,80(r17)
   86590:	10c0010c 	andi	r3,r2,4
   86594:	18000626 	beq	r3,zero,865b0 <__sflush_r+0x78>
   86598:	88c00117 	ldw	r3,4(r17)
   8659c:	88800c17 	ldw	r2,48(r17)
   865a0:	30cdc83a 	sub	r6,r6,r3
   865a4:	10000226 	beq	r2,zero,865b0 <__sflush_r+0x78>
   865a8:	88800f17 	ldw	r2,60(r17)
   865ac:	308dc83a 	sub	r6,r6,r2
   865b0:	89400717 	ldw	r5,28(r17)
   865b4:	000f883a 	mov	r7,zero
   865b8:	9809883a 	mov	r4,r19
   865bc:	403ee83a 	callr	r8
   865c0:	00ffffc4 	movi	r3,-1
   865c4:	10c04426 	beq	r2,r3,866d8 <__sflush_r+0x1a0>
   865c8:	88c0030b 	ldhu	r3,12(r17)
   865cc:	89000417 	ldw	r4,16(r17)
   865d0:	88000115 	stw	zero,4(r17)
   865d4:	197dffcc 	andi	r5,r3,63487
   865d8:	8940030d 	sth	r5,12(r17)
   865dc:	89000015 	stw	r4,0(r17)
   865e0:	18c4000c 	andi	r3,r3,4096
   865e4:	18002c1e 	bne	r3,zero,86698 <__sflush_r+0x160>
   865e8:	89400c17 	ldw	r5,48(r17)
   865ec:	9c000015 	stw	r16,0(r19)
   865f0:	28000526 	beq	r5,zero,86608 <__sflush_r+0xd0>
   865f4:	88801004 	addi	r2,r17,64
   865f8:	28800226 	beq	r5,r2,86604 <__sflush_r+0xcc>
   865fc:	9809883a 	mov	r4,r19
   86600:	0086dc00 	call	86dc0 <_free_r>
   86604:	88000c15 	stw	zero,48(r17)
   86608:	0005883a 	mov	r2,zero
   8660c:	dfc00417 	ldw	ra,16(sp)
   86610:	dcc00317 	ldw	r19,12(sp)
   86614:	dc800217 	ldw	r18,8(sp)
   86618:	dc400117 	ldw	r17,4(sp)
   8661c:	dc000017 	ldw	r16,0(sp)
   86620:	dec00504 	addi	sp,sp,20
   86624:	f800283a 	ret
   86628:	2c800417 	ldw	r18,16(r5)
   8662c:	903ff626 	beq	r18,zero,86608 <__alt_data_end+0xfffb0ed8>
   86630:	2c000017 	ldw	r16,0(r5)
   86634:	108000cc 	andi	r2,r2,3
   86638:	2c800015 	stw	r18,0(r5)
   8663c:	84a1c83a 	sub	r16,r16,r18
   86640:	1000131e 	bne	r2,zero,86690 <__sflush_r+0x158>
   86644:	28800517 	ldw	r2,20(r5)
   86648:	88800215 	stw	r2,8(r17)
   8664c:	04000316 	blt	zero,r16,8665c <__sflush_r+0x124>
   86650:	003fed06 	br	86608 <__alt_data_end+0xfffb0ed8>
   86654:	90a5883a 	add	r18,r18,r2
   86658:	043feb0e 	bge	zero,r16,86608 <__alt_data_end+0xfffb0ed8>
   8665c:	88800917 	ldw	r2,36(r17)
   86660:	89400717 	ldw	r5,28(r17)
   86664:	800f883a 	mov	r7,r16
   86668:	900d883a 	mov	r6,r18
   8666c:	9809883a 	mov	r4,r19
   86670:	103ee83a 	callr	r2
   86674:	80a1c83a 	sub	r16,r16,r2
   86678:	00bff616 	blt	zero,r2,86654 <__alt_data_end+0xfffb0f24>
   8667c:	88c0030b 	ldhu	r3,12(r17)
   86680:	00bfffc4 	movi	r2,-1
   86684:	18c01014 	ori	r3,r3,64
   86688:	88c0030d 	sth	r3,12(r17)
   8668c:	003fdf06 	br	8660c <__alt_data_end+0xfffb0edc>
   86690:	0005883a 	mov	r2,zero
   86694:	003fec06 	br	86648 <__alt_data_end+0xfffb0f18>
   86698:	88801415 	stw	r2,80(r17)
   8669c:	003fd206 	br	865e8 <__alt_data_end+0xfffb0eb8>
   866a0:	28c00f17 	ldw	r3,60(r5)
   866a4:	00ffb316 	blt	zero,r3,86574 <__alt_data_end+0xfffb0e44>
   866a8:	003fd706 	br	86608 <__alt_data_end+0xfffb0ed8>
   866ac:	89400717 	ldw	r5,28(r17)
   866b0:	000d883a 	mov	r6,zero
   866b4:	01c00044 	movi	r7,1
   866b8:	9809883a 	mov	r4,r19
   866bc:	403ee83a 	callr	r8
   866c0:	100d883a 	mov	r6,r2
   866c4:	00bfffc4 	movi	r2,-1
   866c8:	30801426 	beq	r6,r2,8671c <__sflush_r+0x1e4>
   866cc:	8880030b 	ldhu	r2,12(r17)
   866d0:	8a000a17 	ldw	r8,40(r17)
   866d4:	003fae06 	br	86590 <__alt_data_end+0xfffb0e60>
   866d8:	98c00017 	ldw	r3,0(r19)
   866dc:	183fba26 	beq	r3,zero,865c8 <__alt_data_end+0xfffb0e98>
   866e0:	01000744 	movi	r4,29
   866e4:	19000626 	beq	r3,r4,86700 <__sflush_r+0x1c8>
   866e8:	01000584 	movi	r4,22
   866ec:	19000426 	beq	r3,r4,86700 <__sflush_r+0x1c8>
   866f0:	88c0030b 	ldhu	r3,12(r17)
   866f4:	18c01014 	ori	r3,r3,64
   866f8:	88c0030d 	sth	r3,12(r17)
   866fc:	003fc306 	br	8660c <__alt_data_end+0xfffb0edc>
   86700:	8880030b 	ldhu	r2,12(r17)
   86704:	88c00417 	ldw	r3,16(r17)
   86708:	88000115 	stw	zero,4(r17)
   8670c:	10bdffcc 	andi	r2,r2,63487
   86710:	8880030d 	sth	r2,12(r17)
   86714:	88c00015 	stw	r3,0(r17)
   86718:	003fb306 	br	865e8 <__alt_data_end+0xfffb0eb8>
   8671c:	98800017 	ldw	r2,0(r19)
   86720:	103fea26 	beq	r2,zero,866cc <__alt_data_end+0xfffb0f9c>
   86724:	00c00744 	movi	r3,29
   86728:	10c00226 	beq	r2,r3,86734 <__sflush_r+0x1fc>
   8672c:	00c00584 	movi	r3,22
   86730:	10c0031e 	bne	r2,r3,86740 <__sflush_r+0x208>
   86734:	9c000015 	stw	r16,0(r19)
   86738:	0005883a 	mov	r2,zero
   8673c:	003fb306 	br	8660c <__alt_data_end+0xfffb0edc>
   86740:	88c0030b 	ldhu	r3,12(r17)
   86744:	3005883a 	mov	r2,r6
   86748:	18c01014 	ori	r3,r3,64
   8674c:	88c0030d 	sth	r3,12(r17)
   86750:	003fae06 	br	8660c <__alt_data_end+0xfffb0edc>

00086754 <_fflush_r>:
   86754:	defffd04 	addi	sp,sp,-12
   86758:	dc000115 	stw	r16,4(sp)
   8675c:	dfc00215 	stw	ra,8(sp)
   86760:	2021883a 	mov	r16,r4
   86764:	20000226 	beq	r4,zero,86770 <_fflush_r+0x1c>
   86768:	20800e17 	ldw	r2,56(r4)
   8676c:	10000c26 	beq	r2,zero,867a0 <_fflush_r+0x4c>
   86770:	2880030f 	ldh	r2,12(r5)
   86774:	1000051e 	bne	r2,zero,8678c <_fflush_r+0x38>
   86778:	0005883a 	mov	r2,zero
   8677c:	dfc00217 	ldw	ra,8(sp)
   86780:	dc000117 	ldw	r16,4(sp)
   86784:	dec00304 	addi	sp,sp,12
   86788:	f800283a 	ret
   8678c:	8009883a 	mov	r4,r16
   86790:	dfc00217 	ldw	ra,8(sp)
   86794:	dc000117 	ldw	r16,4(sp)
   86798:	dec00304 	addi	sp,sp,12
   8679c:	00865381 	jmpi	86538 <__sflush_r>
   867a0:	d9400015 	stw	r5,0(sp)
   867a4:	0086b400 	call	86b40 <__sinit>
   867a8:	d9400017 	ldw	r5,0(sp)
   867ac:	003ff006 	br	86770 <__alt_data_end+0xfffb1040>

000867b0 <fflush>:
   867b0:	20000526 	beq	r4,zero,867c8 <fflush+0x18>
   867b4:	008002b4 	movhi	r2,10
   867b8:	10b7b804 	addi	r2,r2,-8480
   867bc:	200b883a 	mov	r5,r4
   867c0:	11000017 	ldw	r4,0(r2)
   867c4:	00867541 	jmpi	86754 <_fflush_r>
   867c8:	008002b4 	movhi	r2,10
   867cc:	10b7b704 	addi	r2,r2,-8484
   867d0:	11000017 	ldw	r4,0(r2)
   867d4:	01400234 	movhi	r5,8
   867d8:	2959d504 	addi	r5,r5,26452
   867dc:	00876701 	jmpi	87670 <_fwalk_reent>

000867e0 <__fp_unlock>:
   867e0:	0005883a 	mov	r2,zero
   867e4:	f800283a 	ret

000867e8 <_cleanup_r>:
   867e8:	01400234 	movhi	r5,8
   867ec:	29590d04 	addi	r5,r5,25652
   867f0:	00876701 	jmpi	87670 <_fwalk_reent>

000867f4 <__sinit.part.1>:
   867f4:	defff704 	addi	sp,sp,-36
   867f8:	00c00234 	movhi	r3,8
   867fc:	dfc00815 	stw	ra,32(sp)
   86800:	ddc00715 	stw	r23,28(sp)
   86804:	dd800615 	stw	r22,24(sp)
   86808:	dd400515 	stw	r21,20(sp)
   8680c:	dd000415 	stw	r20,16(sp)
   86810:	dcc00315 	stw	r19,12(sp)
   86814:	dc800215 	stw	r18,8(sp)
   86818:	dc400115 	stw	r17,4(sp)
   8681c:	dc000015 	stw	r16,0(sp)
   86820:	18d9fa04 	addi	r3,r3,26600
   86824:	24000117 	ldw	r16,4(r4)
   86828:	20c00f15 	stw	r3,60(r4)
   8682c:	2080bb04 	addi	r2,r4,748
   86830:	00c000c4 	movi	r3,3
   86834:	20c0b915 	stw	r3,740(r4)
   86838:	2080ba15 	stw	r2,744(r4)
   8683c:	2000b815 	stw	zero,736(r4)
   86840:	05c00204 	movi	r23,8
   86844:	00800104 	movi	r2,4
   86848:	2025883a 	mov	r18,r4
   8684c:	b80d883a 	mov	r6,r23
   86850:	81001704 	addi	r4,r16,92
   86854:	000b883a 	mov	r5,zero
   86858:	80000015 	stw	zero,0(r16)
   8685c:	80000115 	stw	zero,4(r16)
   86860:	80000215 	stw	zero,8(r16)
   86864:	8080030d 	sth	r2,12(r16)
   86868:	80001915 	stw	zero,100(r16)
   8686c:	8000038d 	sth	zero,14(r16)
   86870:	80000415 	stw	zero,16(r16)
   86874:	80000515 	stw	zero,20(r16)
   86878:	80000615 	stw	zero,24(r16)
   8687c:	008820c0 	call	8820c <memset>
   86880:	05800274 	movhi	r22,9
   86884:	94400217 	ldw	r17,8(r18)
   86888:	05400274 	movhi	r21,9
   8688c:	05000274 	movhi	r20,9
   86890:	04c00274 	movhi	r19,9
   86894:	b5a1c604 	addi	r22,r22,-30952
   86898:	ad61dd04 	addi	r21,r21,-30860
   8689c:	a521fc04 	addi	r20,r20,-30736
   868a0:	9ce21304 	addi	r19,r19,-30644
   868a4:	85800815 	stw	r22,32(r16)
   868a8:	85400915 	stw	r21,36(r16)
   868ac:	85000a15 	stw	r20,40(r16)
   868b0:	84c00b15 	stw	r19,44(r16)
   868b4:	84000715 	stw	r16,28(r16)
   868b8:	00800284 	movi	r2,10
   868bc:	8880030d 	sth	r2,12(r17)
   868c0:	00800044 	movi	r2,1
   868c4:	b80d883a 	mov	r6,r23
   868c8:	89001704 	addi	r4,r17,92
   868cc:	000b883a 	mov	r5,zero
   868d0:	88000015 	stw	zero,0(r17)
   868d4:	88000115 	stw	zero,4(r17)
   868d8:	88000215 	stw	zero,8(r17)
   868dc:	88001915 	stw	zero,100(r17)
   868e0:	8880038d 	sth	r2,14(r17)
   868e4:	88000415 	stw	zero,16(r17)
   868e8:	88000515 	stw	zero,20(r17)
   868ec:	88000615 	stw	zero,24(r17)
   868f0:	008820c0 	call	8820c <memset>
   868f4:	94000317 	ldw	r16,12(r18)
   868f8:	00800484 	movi	r2,18
   868fc:	8c400715 	stw	r17,28(r17)
   86900:	8d800815 	stw	r22,32(r17)
   86904:	8d400915 	stw	r21,36(r17)
   86908:	8d000a15 	stw	r20,40(r17)
   8690c:	8cc00b15 	stw	r19,44(r17)
   86910:	8080030d 	sth	r2,12(r16)
   86914:	00800084 	movi	r2,2
   86918:	80000015 	stw	zero,0(r16)
   8691c:	80000115 	stw	zero,4(r16)
   86920:	80000215 	stw	zero,8(r16)
   86924:	80001915 	stw	zero,100(r16)
   86928:	8080038d 	sth	r2,14(r16)
   8692c:	80000415 	stw	zero,16(r16)
   86930:	80000515 	stw	zero,20(r16)
   86934:	80000615 	stw	zero,24(r16)
   86938:	b80d883a 	mov	r6,r23
   8693c:	000b883a 	mov	r5,zero
   86940:	81001704 	addi	r4,r16,92
   86944:	008820c0 	call	8820c <memset>
   86948:	00800044 	movi	r2,1
   8694c:	84000715 	stw	r16,28(r16)
   86950:	85800815 	stw	r22,32(r16)
   86954:	85400915 	stw	r21,36(r16)
   86958:	85000a15 	stw	r20,40(r16)
   8695c:	84c00b15 	stw	r19,44(r16)
   86960:	90800e15 	stw	r2,56(r18)
   86964:	dfc00817 	ldw	ra,32(sp)
   86968:	ddc00717 	ldw	r23,28(sp)
   8696c:	dd800617 	ldw	r22,24(sp)
   86970:	dd400517 	ldw	r21,20(sp)
   86974:	dd000417 	ldw	r20,16(sp)
   86978:	dcc00317 	ldw	r19,12(sp)
   8697c:	dc800217 	ldw	r18,8(sp)
   86980:	dc400117 	ldw	r17,4(sp)
   86984:	dc000017 	ldw	r16,0(sp)
   86988:	dec00904 	addi	sp,sp,36
   8698c:	f800283a 	ret

00086990 <__fp_lock>:
   86990:	0005883a 	mov	r2,zero
   86994:	f800283a 	ret

00086998 <__sfmoreglue>:
   86998:	defffc04 	addi	sp,sp,-16
   8699c:	dc800215 	stw	r18,8(sp)
   869a0:	2825883a 	mov	r18,r5
   869a4:	dc000015 	stw	r16,0(sp)
   869a8:	01401a04 	movi	r5,104
   869ac:	2021883a 	mov	r16,r4
   869b0:	913fffc4 	addi	r4,r18,-1
   869b4:	dfc00315 	stw	ra,12(sp)
   869b8:	dc400115 	stw	r17,4(sp)
   869bc:	0082a480 	call	82a48 <__mulsi3>
   869c0:	8009883a 	mov	r4,r16
   869c4:	11401d04 	addi	r5,r2,116
   869c8:	1023883a 	mov	r17,r2
   869cc:	0087a000 	call	87a00 <_malloc_r>
   869d0:	1021883a 	mov	r16,r2
   869d4:	10000726 	beq	r2,zero,869f4 <__sfmoreglue+0x5c>
   869d8:	11000304 	addi	r4,r2,12
   869dc:	10000015 	stw	zero,0(r2)
   869e0:	14800115 	stw	r18,4(r2)
   869e4:	11000215 	stw	r4,8(r2)
   869e8:	89801a04 	addi	r6,r17,104
   869ec:	000b883a 	mov	r5,zero
   869f0:	008820c0 	call	8820c <memset>
   869f4:	8005883a 	mov	r2,r16
   869f8:	dfc00317 	ldw	ra,12(sp)
   869fc:	dc800217 	ldw	r18,8(sp)
   86a00:	dc400117 	ldw	r17,4(sp)
   86a04:	dc000017 	ldw	r16,0(sp)
   86a08:	dec00404 	addi	sp,sp,16
   86a0c:	f800283a 	ret

00086a10 <__sfp>:
   86a10:	defffb04 	addi	sp,sp,-20
   86a14:	dc000015 	stw	r16,0(sp)
   86a18:	040002b4 	movhi	r16,10
   86a1c:	8437b704 	addi	r16,r16,-8484
   86a20:	dcc00315 	stw	r19,12(sp)
   86a24:	2027883a 	mov	r19,r4
   86a28:	81000017 	ldw	r4,0(r16)
   86a2c:	dfc00415 	stw	ra,16(sp)
   86a30:	dc800215 	stw	r18,8(sp)
   86a34:	20800e17 	ldw	r2,56(r4)
   86a38:	dc400115 	stw	r17,4(sp)
   86a3c:	1000021e 	bne	r2,zero,86a48 <__sfp+0x38>
   86a40:	00867f40 	call	867f4 <__sinit.part.1>
   86a44:	81000017 	ldw	r4,0(r16)
   86a48:	2480b804 	addi	r18,r4,736
   86a4c:	047fffc4 	movi	r17,-1
   86a50:	91000117 	ldw	r4,4(r18)
   86a54:	94000217 	ldw	r16,8(r18)
   86a58:	213fffc4 	addi	r4,r4,-1
   86a5c:	20000a16 	blt	r4,zero,86a88 <__sfp+0x78>
   86a60:	8080030f 	ldh	r2,12(r16)
   86a64:	10000c26 	beq	r2,zero,86a98 <__sfp+0x88>
   86a68:	80c01d04 	addi	r3,r16,116
   86a6c:	00000206 	br	86a78 <__sfp+0x68>
   86a70:	18bfe60f 	ldh	r2,-104(r3)
   86a74:	10000826 	beq	r2,zero,86a98 <__sfp+0x88>
   86a78:	213fffc4 	addi	r4,r4,-1
   86a7c:	1c3ffd04 	addi	r16,r3,-12
   86a80:	18c01a04 	addi	r3,r3,104
   86a84:	247ffa1e 	bne	r4,r17,86a70 <__alt_data_end+0xfffb1340>
   86a88:	90800017 	ldw	r2,0(r18)
   86a8c:	10001d26 	beq	r2,zero,86b04 <__sfp+0xf4>
   86a90:	1025883a 	mov	r18,r2
   86a94:	003fee06 	br	86a50 <__alt_data_end+0xfffb1320>
   86a98:	00bfffc4 	movi	r2,-1
   86a9c:	8080038d 	sth	r2,14(r16)
   86aa0:	00800044 	movi	r2,1
   86aa4:	8080030d 	sth	r2,12(r16)
   86aa8:	80001915 	stw	zero,100(r16)
   86aac:	80000015 	stw	zero,0(r16)
   86ab0:	80000215 	stw	zero,8(r16)
   86ab4:	80000115 	stw	zero,4(r16)
   86ab8:	80000415 	stw	zero,16(r16)
   86abc:	80000515 	stw	zero,20(r16)
   86ac0:	80000615 	stw	zero,24(r16)
   86ac4:	01800204 	movi	r6,8
   86ac8:	000b883a 	mov	r5,zero
   86acc:	81001704 	addi	r4,r16,92
   86ad0:	008820c0 	call	8820c <memset>
   86ad4:	8005883a 	mov	r2,r16
   86ad8:	80000c15 	stw	zero,48(r16)
   86adc:	80000d15 	stw	zero,52(r16)
   86ae0:	80001115 	stw	zero,68(r16)
   86ae4:	80001215 	stw	zero,72(r16)
   86ae8:	dfc00417 	ldw	ra,16(sp)
   86aec:	dcc00317 	ldw	r19,12(sp)
   86af0:	dc800217 	ldw	r18,8(sp)
   86af4:	dc400117 	ldw	r17,4(sp)
   86af8:	dc000017 	ldw	r16,0(sp)
   86afc:	dec00504 	addi	sp,sp,20
   86b00:	f800283a 	ret
   86b04:	01400104 	movi	r5,4
   86b08:	9809883a 	mov	r4,r19
   86b0c:	00869980 	call	86998 <__sfmoreglue>
   86b10:	90800015 	stw	r2,0(r18)
   86b14:	103fde1e 	bne	r2,zero,86a90 <__alt_data_end+0xfffb1360>
   86b18:	00800304 	movi	r2,12
   86b1c:	98800015 	stw	r2,0(r19)
   86b20:	0005883a 	mov	r2,zero
   86b24:	003ff006 	br	86ae8 <__alt_data_end+0xfffb13b8>

00086b28 <_cleanup>:
   86b28:	008002b4 	movhi	r2,10
   86b2c:	10b7b704 	addi	r2,r2,-8484
   86b30:	11000017 	ldw	r4,0(r2)
   86b34:	01400234 	movhi	r5,8
   86b38:	29590d04 	addi	r5,r5,25652
   86b3c:	00876701 	jmpi	87670 <_fwalk_reent>

00086b40 <__sinit>:
   86b40:	20800e17 	ldw	r2,56(r4)
   86b44:	10000126 	beq	r2,zero,86b4c <__sinit+0xc>
   86b48:	f800283a 	ret
   86b4c:	00867f41 	jmpi	867f4 <__sinit.part.1>

00086b50 <__sfp_lock_acquire>:
   86b50:	f800283a 	ret

00086b54 <__sfp_lock_release>:
   86b54:	f800283a 	ret

00086b58 <__sinit_lock_acquire>:
   86b58:	f800283a 	ret

00086b5c <__sinit_lock_release>:
   86b5c:	f800283a 	ret

00086b60 <__fp_lock_all>:
   86b60:	008002b4 	movhi	r2,10
   86b64:	10b7b804 	addi	r2,r2,-8480
   86b68:	11000017 	ldw	r4,0(r2)
   86b6c:	01400234 	movhi	r5,8
   86b70:	295a6404 	addi	r5,r5,27024
   86b74:	00875ac1 	jmpi	875ac <_fwalk>

00086b78 <__fp_unlock_all>:
   86b78:	008002b4 	movhi	r2,10
   86b7c:	10b7b804 	addi	r2,r2,-8480
   86b80:	11000017 	ldw	r4,0(r2)
   86b84:	01400234 	movhi	r5,8
   86b88:	2959f804 	addi	r5,r5,26592
   86b8c:	00875ac1 	jmpi	875ac <_fwalk>

00086b90 <_fopen_r>:
   86b90:	defffa04 	addi	sp,sp,-24
   86b94:	3005883a 	mov	r2,r6
   86b98:	dcc00415 	stw	r19,16(sp)
   86b9c:	d80d883a 	mov	r6,sp
   86ba0:	2827883a 	mov	r19,r5
   86ba4:	100b883a 	mov	r5,r2
   86ba8:	dc800315 	stw	r18,12(sp)
   86bac:	dfc00515 	stw	ra,20(sp)
   86bb0:	dc400215 	stw	r17,8(sp)
   86bb4:	dc000115 	stw	r16,4(sp)
   86bb8:	2025883a 	mov	r18,r4
   86bbc:	008c7580 	call	8c758 <__sflags>
   86bc0:	10002726 	beq	r2,zero,86c60 <_fopen_r+0xd0>
   86bc4:	9009883a 	mov	r4,r18
   86bc8:	1023883a 	mov	r17,r2
   86bcc:	0086a100 	call	86a10 <__sfp>
   86bd0:	1021883a 	mov	r16,r2
   86bd4:	10002226 	beq	r2,zero,86c60 <_fopen_r+0xd0>
   86bd8:	d9800017 	ldw	r6,0(sp)
   86bdc:	01c06d84 	movi	r7,438
   86be0:	980b883a 	mov	r5,r19
   86be4:	9009883a 	mov	r4,r18
   86be8:	00883340 	call	88334 <_open_r>
   86bec:	10001916 	blt	r2,zero,86c54 <_fopen_r+0xc4>
   86bf0:	8080038d 	sth	r2,14(r16)
   86bf4:	00800274 	movhi	r2,9
   86bf8:	10a1c604 	addi	r2,r2,-30952
   86bfc:	80800815 	stw	r2,32(r16)
   86c00:	00800274 	movhi	r2,9
   86c04:	10a1dd04 	addi	r2,r2,-30860
   86c08:	80800915 	stw	r2,36(r16)
   86c0c:	00800274 	movhi	r2,9
   86c10:	10a1fc04 	addi	r2,r2,-30736
   86c14:	80800a15 	stw	r2,40(r16)
   86c18:	00800274 	movhi	r2,9
   86c1c:	10a21304 	addi	r2,r2,-30644
   86c20:	8440030d 	sth	r17,12(r16)
   86c24:	84000715 	stw	r16,28(r16)
   86c28:	80800b15 	stw	r2,44(r16)
   86c2c:	8c40400c 	andi	r17,r17,256
   86c30:	88000d1e 	bne	r17,zero,86c68 <_fopen_r+0xd8>
   86c34:	8005883a 	mov	r2,r16
   86c38:	dfc00517 	ldw	ra,20(sp)
   86c3c:	dcc00417 	ldw	r19,16(sp)
   86c40:	dc800317 	ldw	r18,12(sp)
   86c44:	dc400217 	ldw	r17,8(sp)
   86c48:	dc000117 	ldw	r16,4(sp)
   86c4c:	dec00604 	addi	sp,sp,24
   86c50:	f800283a 	ret
   86c54:	0086b500 	call	86b50 <__sfp_lock_acquire>
   86c58:	8000030d 	sth	zero,12(r16)
   86c5c:	0086b540 	call	86b54 <__sfp_lock_release>
   86c60:	0005883a 	mov	r2,zero
   86c64:	003ff406 	br	86c38 <__alt_data_end+0xfffb1508>
   86c68:	01c00084 	movi	r7,2
   86c6c:	000d883a 	mov	r6,zero
   86c70:	800b883a 	mov	r5,r16
   86c74:	9009883a 	mov	r4,r18
   86c78:	00870d00 	call	870d0 <_fseek_r>
   86c7c:	8005883a 	mov	r2,r16
   86c80:	003fed06 	br	86c38 <__alt_data_end+0xfffb1508>

00086c84 <fopen>:
   86c84:	008002b4 	movhi	r2,10
   86c88:	10b7b804 	addi	r2,r2,-8480
   86c8c:	280d883a 	mov	r6,r5
   86c90:	200b883a 	mov	r5,r4
   86c94:	11000017 	ldw	r4,0(r2)
   86c98:	0086b901 	jmpi	86b90 <_fopen_r>

00086c9c <_malloc_trim_r>:
   86c9c:	defffb04 	addi	sp,sp,-20
   86ca0:	dcc00315 	stw	r19,12(sp)
   86ca4:	04c002b4 	movhi	r19,10
   86ca8:	dc800215 	stw	r18,8(sp)
   86cac:	dc400115 	stw	r17,4(sp)
   86cb0:	dc000015 	stw	r16,0(sp)
   86cb4:	dfc00415 	stw	ra,16(sp)
   86cb8:	2821883a 	mov	r16,r5
   86cbc:	9cf20804 	addi	r19,r19,-14304
   86cc0:	2025883a 	mov	r18,r4
   86cc4:	00919580 	call	91958 <__malloc_lock>
   86cc8:	98800217 	ldw	r2,8(r19)
   86ccc:	14400117 	ldw	r17,4(r2)
   86cd0:	00bfff04 	movi	r2,-4
   86cd4:	88a2703a 	and	r17,r17,r2
   86cd8:	8c21c83a 	sub	r16,r17,r16
   86cdc:	8403fbc4 	addi	r16,r16,4079
   86ce0:	8020d33a 	srli	r16,r16,12
   86ce4:	0083ffc4 	movi	r2,4095
   86ce8:	843fffc4 	addi	r16,r16,-1
   86cec:	8020933a 	slli	r16,r16,12
   86cf0:	1400060e 	bge	r2,r16,86d0c <_malloc_trim_r+0x70>
   86cf4:	000b883a 	mov	r5,zero
   86cf8:	9009883a 	mov	r4,r18
   86cfc:	00886c40 	call	886c4 <_sbrk_r>
   86d00:	98c00217 	ldw	r3,8(r19)
   86d04:	1c47883a 	add	r3,r3,r17
   86d08:	10c00a26 	beq	r2,r3,86d34 <_malloc_trim_r+0x98>
   86d0c:	9009883a 	mov	r4,r18
   86d10:	009197c0 	call	9197c <__malloc_unlock>
   86d14:	0005883a 	mov	r2,zero
   86d18:	dfc00417 	ldw	ra,16(sp)
   86d1c:	dcc00317 	ldw	r19,12(sp)
   86d20:	dc800217 	ldw	r18,8(sp)
   86d24:	dc400117 	ldw	r17,4(sp)
   86d28:	dc000017 	ldw	r16,0(sp)
   86d2c:	dec00504 	addi	sp,sp,20
   86d30:	f800283a 	ret
   86d34:	040bc83a 	sub	r5,zero,r16
   86d38:	9009883a 	mov	r4,r18
   86d3c:	00886c40 	call	886c4 <_sbrk_r>
   86d40:	00ffffc4 	movi	r3,-1
   86d44:	10c00d26 	beq	r2,r3,86d7c <_malloc_trim_r+0xe0>
   86d48:	00c002b4 	movhi	r3,10
   86d4c:	18deba04 	addi	r3,r3,31464
   86d50:	18800017 	ldw	r2,0(r3)
   86d54:	99000217 	ldw	r4,8(r19)
   86d58:	8c23c83a 	sub	r17,r17,r16
   86d5c:	8c400054 	ori	r17,r17,1
   86d60:	1421c83a 	sub	r16,r2,r16
   86d64:	24400115 	stw	r17,4(r4)
   86d68:	9009883a 	mov	r4,r18
   86d6c:	1c000015 	stw	r16,0(r3)
   86d70:	009197c0 	call	9197c <__malloc_unlock>
   86d74:	00800044 	movi	r2,1
   86d78:	003fe706 	br	86d18 <__alt_data_end+0xfffb15e8>
   86d7c:	000b883a 	mov	r5,zero
   86d80:	9009883a 	mov	r4,r18
   86d84:	00886c40 	call	886c4 <_sbrk_r>
   86d88:	99000217 	ldw	r4,8(r19)
   86d8c:	014003c4 	movi	r5,15
   86d90:	1107c83a 	sub	r3,r2,r4
   86d94:	28ffdd0e 	bge	r5,r3,86d0c <__alt_data_end+0xfffb15dc>
   86d98:	014002b4 	movhi	r5,10
   86d9c:	2977b904 	addi	r5,r5,-8476
   86da0:	29400017 	ldw	r5,0(r5)
   86da4:	18c00054 	ori	r3,r3,1
   86da8:	20c00115 	stw	r3,4(r4)
   86dac:	00c002b4 	movhi	r3,10
   86db0:	1145c83a 	sub	r2,r2,r5
   86db4:	18deba04 	addi	r3,r3,31464
   86db8:	18800015 	stw	r2,0(r3)
   86dbc:	003fd306 	br	86d0c <__alt_data_end+0xfffb15dc>

00086dc0 <_free_r>:
   86dc0:	28004126 	beq	r5,zero,86ec8 <_free_r+0x108>
   86dc4:	defffd04 	addi	sp,sp,-12
   86dc8:	dc400115 	stw	r17,4(sp)
   86dcc:	dc000015 	stw	r16,0(sp)
   86dd0:	2023883a 	mov	r17,r4
   86dd4:	2821883a 	mov	r16,r5
   86dd8:	dfc00215 	stw	ra,8(sp)
   86ddc:	00919580 	call	91958 <__malloc_lock>
   86de0:	81ffff17 	ldw	r7,-4(r16)
   86de4:	00bfff84 	movi	r2,-2
   86de8:	010002b4 	movhi	r4,10
   86dec:	81bffe04 	addi	r6,r16,-8
   86df0:	3884703a 	and	r2,r7,r2
   86df4:	21320804 	addi	r4,r4,-14304
   86df8:	308b883a 	add	r5,r6,r2
   86dfc:	2a400117 	ldw	r9,4(r5)
   86e00:	22000217 	ldw	r8,8(r4)
   86e04:	00ffff04 	movi	r3,-4
   86e08:	48c6703a 	and	r3,r9,r3
   86e0c:	2a005726 	beq	r5,r8,86f6c <_free_r+0x1ac>
   86e10:	28c00115 	stw	r3,4(r5)
   86e14:	39c0004c 	andi	r7,r7,1
   86e18:	3800091e 	bne	r7,zero,86e40 <_free_r+0x80>
   86e1c:	823ffe17 	ldw	r8,-8(r16)
   86e20:	22400204 	addi	r9,r4,8
   86e24:	320dc83a 	sub	r6,r6,r8
   86e28:	31c00217 	ldw	r7,8(r6)
   86e2c:	1205883a 	add	r2,r2,r8
   86e30:	3a406526 	beq	r7,r9,86fc8 <_free_r+0x208>
   86e34:	32000317 	ldw	r8,12(r6)
   86e38:	3a000315 	stw	r8,12(r7)
   86e3c:	41c00215 	stw	r7,8(r8)
   86e40:	28cf883a 	add	r7,r5,r3
   86e44:	39c00117 	ldw	r7,4(r7)
   86e48:	39c0004c 	andi	r7,r7,1
   86e4c:	38003a26 	beq	r7,zero,86f38 <_free_r+0x178>
   86e50:	10c00054 	ori	r3,r2,1
   86e54:	30c00115 	stw	r3,4(r6)
   86e58:	3087883a 	add	r3,r6,r2
   86e5c:	18800015 	stw	r2,0(r3)
   86e60:	00c07fc4 	movi	r3,511
   86e64:	18801936 	bltu	r3,r2,86ecc <_free_r+0x10c>
   86e68:	1004d0fa 	srli	r2,r2,3
   86e6c:	01c00044 	movi	r7,1
   86e70:	21400117 	ldw	r5,4(r4)
   86e74:	10c00044 	addi	r3,r2,1
   86e78:	18c7883a 	add	r3,r3,r3
   86e7c:	1005d0ba 	srai	r2,r2,2
   86e80:	18c7883a 	add	r3,r3,r3
   86e84:	18c7883a 	add	r3,r3,r3
   86e88:	1907883a 	add	r3,r3,r4
   86e8c:	3884983a 	sll	r2,r7,r2
   86e90:	19c00017 	ldw	r7,0(r3)
   86e94:	1a3ffe04 	addi	r8,r3,-8
   86e98:	1144b03a 	or	r2,r2,r5
   86e9c:	32000315 	stw	r8,12(r6)
   86ea0:	31c00215 	stw	r7,8(r6)
   86ea4:	20800115 	stw	r2,4(r4)
   86ea8:	19800015 	stw	r6,0(r3)
   86eac:	39800315 	stw	r6,12(r7)
   86eb0:	8809883a 	mov	r4,r17
   86eb4:	dfc00217 	ldw	ra,8(sp)
   86eb8:	dc400117 	ldw	r17,4(sp)
   86ebc:	dc000017 	ldw	r16,0(sp)
   86ec0:	dec00304 	addi	sp,sp,12
   86ec4:	009197c1 	jmpi	9197c <__malloc_unlock>
   86ec8:	f800283a 	ret
   86ecc:	100ad27a 	srli	r5,r2,9
   86ed0:	00c00104 	movi	r3,4
   86ed4:	19404a36 	bltu	r3,r5,87000 <_free_r+0x240>
   86ed8:	100ad1ba 	srli	r5,r2,6
   86edc:	28c00e44 	addi	r3,r5,57
   86ee0:	18c7883a 	add	r3,r3,r3
   86ee4:	29400e04 	addi	r5,r5,56
   86ee8:	18c7883a 	add	r3,r3,r3
   86eec:	18c7883a 	add	r3,r3,r3
   86ef0:	1909883a 	add	r4,r3,r4
   86ef4:	20c00017 	ldw	r3,0(r4)
   86ef8:	01c002b4 	movhi	r7,10
   86efc:	213ffe04 	addi	r4,r4,-8
   86f00:	39f20804 	addi	r7,r7,-14304
   86f04:	20c04426 	beq	r4,r3,87018 <_free_r+0x258>
   86f08:	01ffff04 	movi	r7,-4
   86f0c:	19400117 	ldw	r5,4(r3)
   86f10:	29ca703a 	and	r5,r5,r7
   86f14:	1140022e 	bgeu	r2,r5,86f20 <_free_r+0x160>
   86f18:	18c00217 	ldw	r3,8(r3)
   86f1c:	20fffb1e 	bne	r4,r3,86f0c <__alt_data_end+0xfffb17dc>
   86f20:	19000317 	ldw	r4,12(r3)
   86f24:	31000315 	stw	r4,12(r6)
   86f28:	30c00215 	stw	r3,8(r6)
   86f2c:	21800215 	stw	r6,8(r4)
   86f30:	19800315 	stw	r6,12(r3)
   86f34:	003fde06 	br	86eb0 <__alt_data_end+0xfffb1780>
   86f38:	29c00217 	ldw	r7,8(r5)
   86f3c:	10c5883a 	add	r2,r2,r3
   86f40:	00c002b4 	movhi	r3,10
   86f44:	18f20a04 	addi	r3,r3,-14296
   86f48:	38c03b26 	beq	r7,r3,87038 <_free_r+0x278>
   86f4c:	2a000317 	ldw	r8,12(r5)
   86f50:	11400054 	ori	r5,r2,1
   86f54:	3087883a 	add	r3,r6,r2
   86f58:	3a000315 	stw	r8,12(r7)
   86f5c:	41c00215 	stw	r7,8(r8)
   86f60:	31400115 	stw	r5,4(r6)
   86f64:	18800015 	stw	r2,0(r3)
   86f68:	003fbd06 	br	86e60 <__alt_data_end+0xfffb1730>
   86f6c:	39c0004c 	andi	r7,r7,1
   86f70:	10c5883a 	add	r2,r2,r3
   86f74:	3800071e 	bne	r7,zero,86f94 <_free_r+0x1d4>
   86f78:	81fffe17 	ldw	r7,-8(r16)
   86f7c:	31cdc83a 	sub	r6,r6,r7
   86f80:	30c00317 	ldw	r3,12(r6)
   86f84:	31400217 	ldw	r5,8(r6)
   86f88:	11c5883a 	add	r2,r2,r7
   86f8c:	28c00315 	stw	r3,12(r5)
   86f90:	19400215 	stw	r5,8(r3)
   86f94:	10c00054 	ori	r3,r2,1
   86f98:	30c00115 	stw	r3,4(r6)
   86f9c:	00c002b4 	movhi	r3,10
   86fa0:	18f7ba04 	addi	r3,r3,-8472
   86fa4:	18c00017 	ldw	r3,0(r3)
   86fa8:	21800215 	stw	r6,8(r4)
   86fac:	10ffc036 	bltu	r2,r3,86eb0 <__alt_data_end+0xfffb1780>
   86fb0:	008002b4 	movhi	r2,10
   86fb4:	109eaf04 	addi	r2,r2,31420
   86fb8:	11400017 	ldw	r5,0(r2)
   86fbc:	8809883a 	mov	r4,r17
   86fc0:	0086c9c0 	call	86c9c <_malloc_trim_r>
   86fc4:	003fba06 	br	86eb0 <__alt_data_end+0xfffb1780>
   86fc8:	28c9883a 	add	r4,r5,r3
   86fcc:	21000117 	ldw	r4,4(r4)
   86fd0:	2100004c 	andi	r4,r4,1
   86fd4:	2000391e 	bne	r4,zero,870bc <_free_r+0x2fc>
   86fd8:	29c00217 	ldw	r7,8(r5)
   86fdc:	29000317 	ldw	r4,12(r5)
   86fe0:	1885883a 	add	r2,r3,r2
   86fe4:	10c00054 	ori	r3,r2,1
   86fe8:	39000315 	stw	r4,12(r7)
   86fec:	21c00215 	stw	r7,8(r4)
   86ff0:	30c00115 	stw	r3,4(r6)
   86ff4:	308d883a 	add	r6,r6,r2
   86ff8:	30800015 	stw	r2,0(r6)
   86ffc:	003fac06 	br	86eb0 <__alt_data_end+0xfffb1780>
   87000:	00c00504 	movi	r3,20
   87004:	19401536 	bltu	r3,r5,8705c <_free_r+0x29c>
   87008:	28c01704 	addi	r3,r5,92
   8700c:	18c7883a 	add	r3,r3,r3
   87010:	294016c4 	addi	r5,r5,91
   87014:	003fb406 	br	86ee8 <__alt_data_end+0xfffb17b8>
   87018:	280bd0ba 	srai	r5,r5,2
   8701c:	00c00044 	movi	r3,1
   87020:	38800117 	ldw	r2,4(r7)
   87024:	194a983a 	sll	r5,r3,r5
   87028:	2007883a 	mov	r3,r4
   8702c:	2884b03a 	or	r2,r5,r2
   87030:	38800115 	stw	r2,4(r7)
   87034:	003fbb06 	br	86f24 <__alt_data_end+0xfffb17f4>
   87038:	21800515 	stw	r6,20(r4)
   8703c:	21800415 	stw	r6,16(r4)
   87040:	10c00054 	ori	r3,r2,1
   87044:	31c00315 	stw	r7,12(r6)
   87048:	31c00215 	stw	r7,8(r6)
   8704c:	30c00115 	stw	r3,4(r6)
   87050:	308d883a 	add	r6,r6,r2
   87054:	30800015 	stw	r2,0(r6)
   87058:	003f9506 	br	86eb0 <__alt_data_end+0xfffb1780>
   8705c:	00c01504 	movi	r3,84
   87060:	19400536 	bltu	r3,r5,87078 <_free_r+0x2b8>
   87064:	100ad33a 	srli	r5,r2,12
   87068:	28c01bc4 	addi	r3,r5,111
   8706c:	18c7883a 	add	r3,r3,r3
   87070:	29401b84 	addi	r5,r5,110
   87074:	003f9c06 	br	86ee8 <__alt_data_end+0xfffb17b8>
   87078:	00c05504 	movi	r3,340
   8707c:	19400536 	bltu	r3,r5,87094 <_free_r+0x2d4>
   87080:	100ad3fa 	srli	r5,r2,15
   87084:	28c01e04 	addi	r3,r5,120
   87088:	18c7883a 	add	r3,r3,r3
   8708c:	29401dc4 	addi	r5,r5,119
   87090:	003f9506 	br	86ee8 <__alt_data_end+0xfffb17b8>
   87094:	00c15504 	movi	r3,1364
   87098:	19400536 	bltu	r3,r5,870b0 <_free_r+0x2f0>
   8709c:	100ad4ba 	srli	r5,r2,18
   870a0:	28c01f44 	addi	r3,r5,125
   870a4:	18c7883a 	add	r3,r3,r3
   870a8:	29401f04 	addi	r5,r5,124
   870ac:	003f8e06 	br	86ee8 <__alt_data_end+0xfffb17b8>
   870b0:	00c03f84 	movi	r3,254
   870b4:	01401f84 	movi	r5,126
   870b8:	003f8b06 	br	86ee8 <__alt_data_end+0xfffb17b8>
   870bc:	10c00054 	ori	r3,r2,1
   870c0:	30c00115 	stw	r3,4(r6)
   870c4:	308d883a 	add	r6,r6,r2
   870c8:	30800015 	stw	r2,0(r6)
   870cc:	003f7806 	br	86eb0 <__alt_data_end+0xfffb1780>

000870d0 <_fseek_r>:
   870d0:	00870f01 	jmpi	870f0 <_fseeko_r>

000870d4 <fseek>:
   870d4:	008002b4 	movhi	r2,10
   870d8:	10b7b804 	addi	r2,r2,-8480
   870dc:	300f883a 	mov	r7,r6
   870e0:	280d883a 	mov	r6,r5
   870e4:	200b883a 	mov	r5,r4
   870e8:	11000017 	ldw	r4,0(r2)
   870ec:	00870f01 	jmpi	870f0 <_fseeko_r>

000870f0 <_fseeko_r>:
   870f0:	deffe804 	addi	sp,sp,-96
   870f4:	dd401415 	stw	r21,80(sp)
   870f8:	dc801115 	stw	r18,68(sp)
   870fc:	dc401015 	stw	r17,64(sp)
   87100:	dc000f15 	stw	r16,60(sp)
   87104:	dfc01715 	stw	ra,92(sp)
   87108:	ddc01615 	stw	r23,88(sp)
   8710c:	dd801515 	stw	r22,84(sp)
   87110:	dd001315 	stw	r20,76(sp)
   87114:	dcc01215 	stw	r19,72(sp)
   87118:	2023883a 	mov	r17,r4
   8711c:	2821883a 	mov	r16,r5
   87120:	302b883a 	mov	r21,r6
   87124:	3825883a 	mov	r18,r7
   87128:	20000226 	beq	r4,zero,87134 <_fseeko_r+0x44>
   8712c:	20800e17 	ldw	r2,56(r4)
   87130:	10005a26 	beq	r2,zero,8729c <_fseeko_r+0x1ac>
   87134:	8080030b 	ldhu	r2,12(r16)
   87138:	00c04204 	movi	r3,264
   8713c:	1080420c 	andi	r2,r2,264
   87140:	10c05b26 	beq	r2,r3,872b0 <_fseeko_r+0x1c0>
   87144:	85000a17 	ldw	r20,40(r16)
   87148:	a000f626 	beq	r20,zero,87524 <_fseeko_r+0x434>
   8714c:	00800044 	movi	r2,1
   87150:	90803e26 	beq	r18,r2,8724c <_fseeko_r+0x15c>
   87154:	00800084 	movi	r2,2
   87158:	90801026 	beq	r18,r2,8719c <_fseeko_r+0xac>
   8715c:	90000f26 	beq	r18,zero,8719c <_fseeko_r+0xac>
   87160:	00800584 	movi	r2,22
   87164:	88800015 	stw	r2,0(r17)
   87168:	04ffffc4 	movi	r19,-1
   8716c:	9805883a 	mov	r2,r19
   87170:	dfc01717 	ldw	ra,92(sp)
   87174:	ddc01617 	ldw	r23,88(sp)
   87178:	dd801517 	ldw	r22,84(sp)
   8717c:	dd401417 	ldw	r21,80(sp)
   87180:	dd001317 	ldw	r20,76(sp)
   87184:	dcc01217 	ldw	r19,72(sp)
   87188:	dc801117 	ldw	r18,68(sp)
   8718c:	dc401017 	ldw	r17,64(sp)
   87190:	dc000f17 	ldw	r16,60(sp)
   87194:	dec01804 	addi	sp,sp,96
   87198:	f800283a 	ret
   8719c:	80800417 	ldw	r2,16(r16)
   871a0:	002f883a 	mov	r23,zero
   871a4:	0027883a 	mov	r19,zero
   871a8:	1000cb26 	beq	r2,zero,874d8 <_fseeko_r+0x3e8>
   871ac:	8080030b 	ldhu	r2,12(r16)
   871b0:	10c2068c 	andi	r3,r2,2074
   871b4:	1800071e 	bne	r3,zero,871d4 <_fseeko_r+0xe4>
   871b8:	10c1000c 	andi	r3,r2,1024
   871bc:	1800451e 	bne	r3,zero,872d4 <_fseeko_r+0x1e4>
   871c0:	00c00274 	movhi	r3,9
   871c4:	18e1fc04 	addi	r3,r3,-30736
   871c8:	a0c0b726 	beq	r20,r3,874a8 <_fseeko_r+0x3b8>
   871cc:	10820014 	ori	r2,r2,2048
   871d0:	8080030d 	sth	r2,12(r16)
   871d4:	800b883a 	mov	r5,r16
   871d8:	8809883a 	mov	r4,r17
   871dc:	00867540 	call	86754 <_fflush_r>
   871e0:	1027883a 	mov	r19,r2
   871e4:	103fe01e 	bne	r2,zero,87168 <__alt_data_end+0xfffb1a38>
   871e8:	81400717 	ldw	r5,28(r16)
   871ec:	900f883a 	mov	r7,r18
   871f0:	a80d883a 	mov	r6,r21
   871f4:	8809883a 	mov	r4,r17
   871f8:	a03ee83a 	callr	r20
   871fc:	00ffffc4 	movi	r3,-1
   87200:	10ffd926 	beq	r2,r3,87168 <__alt_data_end+0xfffb1a38>
   87204:	81400c17 	ldw	r5,48(r16)
   87208:	28000526 	beq	r5,zero,87220 <_fseeko_r+0x130>
   8720c:	80801004 	addi	r2,r16,64
   87210:	28800226 	beq	r5,r2,8721c <_fseeko_r+0x12c>
   87214:	8809883a 	mov	r4,r17
   87218:	0086dc00 	call	86dc0 <_free_r>
   8721c:	80000c15 	stw	zero,48(r16)
   87220:	8080030b 	ldhu	r2,12(r16)
   87224:	80c00417 	ldw	r3,16(r16)
   87228:	80000115 	stw	zero,4(r16)
   8722c:	10bdf7cc 	andi	r2,r2,63455
   87230:	80c00015 	stw	r3,0(r16)
   87234:	8080030d 	sth	r2,12(r16)
   87238:	01800204 	movi	r6,8
   8723c:	000b883a 	mov	r5,zero
   87240:	81001704 	addi	r4,r16,92
   87244:	008820c0 	call	8820c <memset>
   87248:	003fc806 	br	8716c <__alt_data_end+0xfffb1a3c>
   8724c:	800b883a 	mov	r5,r16
   87250:	8809883a 	mov	r4,r17
   87254:	00867540 	call	86754 <_fflush_r>
   87258:	8080030b 	ldhu	r2,12(r16)
   8725c:	10c4000c 	andi	r3,r2,4096
   87260:	18008726 	beq	r3,zero,87480 <_fseeko_r+0x390>
   87264:	84c01417 	ldw	r19,80(r16)
   87268:	10c0010c 	andi	r3,r2,4
   8726c:	1800431e 	bne	r3,zero,8737c <_fseeko_r+0x28c>
   87270:	1080020c 	andi	r2,r2,8
   87274:	10008026 	beq	r2,zero,87478 <_fseeko_r+0x388>
   87278:	80c00017 	ldw	r3,0(r16)
   8727c:	80800417 	ldw	r2,16(r16)
   87280:	18000226 	beq	r3,zero,8728c <_fseeko_r+0x19c>
   87284:	1887c83a 	sub	r3,r3,r2
   87288:	98e7883a 	add	r19,r19,r3
   8728c:	aceb883a 	add	r21,r21,r19
   87290:	05c00044 	movi	r23,1
   87294:	0025883a 	mov	r18,zero
   87298:	003fc306 	br	871a8 <__alt_data_end+0xfffb1a78>
   8729c:	0086b400 	call	86b40 <__sinit>
   872a0:	8080030b 	ldhu	r2,12(r16)
   872a4:	00c04204 	movi	r3,264
   872a8:	1080420c 	andi	r2,r2,264
   872ac:	10ffa51e 	bne	r2,r3,87144 <__alt_data_end+0xfffb1a14>
   872b0:	800b883a 	mov	r5,r16
   872b4:	8809883a 	mov	r4,r17
   872b8:	00867540 	call	86754 <_fflush_r>
   872bc:	003fa106 	br	87144 <__alt_data_end+0xfffb1a14>
   872c0:	8080030b 	ldhu	r2,12(r16)
   872c4:	00c10004 	movi	r3,1024
   872c8:	80c01315 	stw	r3,76(r16)
   872cc:	10c4b03a 	or	r2,r2,r3
   872d0:	8080030d 	sth	r2,12(r16)
   872d4:	9000311e 	bne	r18,zero,8739c <_fseeko_r+0x2ac>
   872d8:	a82d883a 	mov	r22,r21
   872dc:	b800371e 	bne	r23,zero,873bc <_fseeko_r+0x2cc>
   872e0:	8080030b 	ldhu	r2,12(r16)
   872e4:	1084000c 	andi	r2,r2,4096
   872e8:	10007f26 	beq	r2,zero,874e8 <_fseeko_r+0x3f8>
   872ec:	80801417 	ldw	r2,80(r16)
   872f0:	81800117 	ldw	r6,4(r16)
   872f4:	81400c17 	ldw	r5,48(r16)
   872f8:	11a7c83a 	sub	r19,r2,r6
   872fc:	28008226 	beq	r5,zero,87508 <_fseeko_r+0x418>
   87300:	81c00f17 	ldw	r7,60(r16)
   87304:	99e7c83a 	sub	r19,r19,r7
   87308:	81000e17 	ldw	r4,56(r16)
   8730c:	80800417 	ldw	r2,16(r16)
   87310:	99a7883a 	add	r19,r19,r6
   87314:	2087c83a 	sub	r3,r4,r2
   87318:	98e7c83a 	sub	r19,r19,r3
   8731c:	38c7883a 	add	r3,r7,r3
   87320:	b4c02b16 	blt	r22,r19,873d0 <_fseeko_r+0x2e0>
   87324:	98c9883a 	add	r4,r19,r3
   87328:	b100292e 	bgeu	r22,r4,873d0 <_fseeko_r+0x2e0>
   8732c:	b4e7c83a 	sub	r19,r22,r19
   87330:	14c5883a 	add	r2,r2,r19
   87334:	1ce7c83a 	sub	r19,r3,r19
   87338:	80800015 	stw	r2,0(r16)
   8733c:	84c00115 	stw	r19,4(r16)
   87340:	28000526 	beq	r5,zero,87358 <_fseeko_r+0x268>
   87344:	80801004 	addi	r2,r16,64
   87348:	28800226 	beq	r5,r2,87354 <_fseeko_r+0x264>
   8734c:	8809883a 	mov	r4,r17
   87350:	0086dc00 	call	86dc0 <_free_r>
   87354:	80000c15 	stw	zero,48(r16)
   87358:	8080030b 	ldhu	r2,12(r16)
   8735c:	01800204 	movi	r6,8
   87360:	000b883a 	mov	r5,zero
   87364:	10bff7cc 	andi	r2,r2,65503
   87368:	8080030d 	sth	r2,12(r16)
   8736c:	81001704 	addi	r4,r16,92
   87370:	008820c0 	call	8820c <memset>
   87374:	0027883a 	mov	r19,zero
   87378:	003f7c06 	br	8716c <__alt_data_end+0xfffb1a3c>
   8737c:	80c00117 	ldw	r3,4(r16)
   87380:	80800c17 	ldw	r2,48(r16)
   87384:	98e7c83a 	sub	r19,r19,r3
   87388:	10003b26 	beq	r2,zero,87478 <_fseeko_r+0x388>
   8738c:	80c00f17 	ldw	r3,60(r16)
   87390:	80800417 	ldw	r2,16(r16)
   87394:	98e7c83a 	sub	r19,r19,r3
   87398:	003fbc06 	br	8728c <__alt_data_end+0xfffb1b5c>
   8739c:	8140038f 	ldh	r5,14(r16)
   873a0:	d80d883a 	mov	r6,sp
   873a4:	8809883a 	mov	r4,r17
   873a8:	00875500 	call	87550 <_fstat_r>
   873ac:	103f891e 	bne	r2,zero,871d4 <__alt_data_end+0xfffb1aa4>
   873b0:	dd800417 	ldw	r22,16(sp)
   873b4:	adad883a 	add	r22,r21,r22
   873b8:	b83fc926 	beq	r23,zero,872e0 <__alt_data_end+0xfffb1bb0>
   873bc:	81400c17 	ldw	r5,48(r16)
   873c0:	81800117 	ldw	r6,4(r16)
   873c4:	28005026 	beq	r5,zero,87508 <_fseeko_r+0x418>
   873c8:	81c00f17 	ldw	r7,60(r16)
   873cc:	003fce06 	br	87308 <__alt_data_end+0xfffb1bd8>
   873d0:	84c01317 	ldw	r19,76(r16)
   873d4:	81400717 	ldw	r5,28(r16)
   873d8:	000f883a 	mov	r7,zero
   873dc:	04e7c83a 	sub	r19,zero,r19
   873e0:	9da6703a 	and	r19,r19,r22
   873e4:	980d883a 	mov	r6,r19
   873e8:	8809883a 	mov	r4,r17
   873ec:	a03ee83a 	callr	r20
   873f0:	00ffffc4 	movi	r3,-1
   873f4:	10ff7726 	beq	r2,r3,871d4 <__alt_data_end+0xfffb1aa4>
   873f8:	80800417 	ldw	r2,16(r16)
   873fc:	81400c17 	ldw	r5,48(r16)
   87400:	80000115 	stw	zero,4(r16)
   87404:	80800015 	stw	r2,0(r16)
   87408:	28000526 	beq	r5,zero,87420 <_fseeko_r+0x330>
   8740c:	80801004 	addi	r2,r16,64
   87410:	28800226 	beq	r5,r2,8741c <_fseeko_r+0x32c>
   87414:	8809883a 	mov	r4,r17
   87418:	0086dc00 	call	86dc0 <_free_r>
   8741c:	80000c15 	stw	zero,48(r16)
   87420:	8080030b 	ldhu	r2,12(r16)
   87424:	b4e7c83a 	sub	r19,r22,r19
   87428:	10bff7cc 	andi	r2,r2,65503
   8742c:	8080030d 	sth	r2,12(r16)
   87430:	98000b26 	beq	r19,zero,87460 <_fseeko_r+0x370>
   87434:	800b883a 	mov	r5,r16
   87438:	8809883a 	mov	r4,r17
   8743c:	00884f00 	call	884f0 <__srefill_r>
   87440:	103f641e 	bne	r2,zero,871d4 <__alt_data_end+0xfffb1aa4>
   87444:	80800117 	ldw	r2,4(r16)
   87448:	14ff6236 	bltu	r2,r19,871d4 <__alt_data_end+0xfffb1aa4>
   8744c:	80c00017 	ldw	r3,0(r16)
   87450:	14c5c83a 	sub	r2,r2,r19
   87454:	80800115 	stw	r2,4(r16)
   87458:	1ce7883a 	add	r19,r3,r19
   8745c:	84c00015 	stw	r19,0(r16)
   87460:	01800204 	movi	r6,8
   87464:	000b883a 	mov	r5,zero
   87468:	81001704 	addi	r4,r16,92
   8746c:	008820c0 	call	8820c <memset>
   87470:	0027883a 	mov	r19,zero
   87474:	003f3d06 	br	8716c <__alt_data_end+0xfffb1a3c>
   87478:	80800417 	ldw	r2,16(r16)
   8747c:	003f8306 	br	8728c <__alt_data_end+0xfffb1b5c>
   87480:	81400717 	ldw	r5,28(r16)
   87484:	900f883a 	mov	r7,r18
   87488:	000d883a 	mov	r6,zero
   8748c:	8809883a 	mov	r4,r17
   87490:	a03ee83a 	callr	r20
   87494:	1027883a 	mov	r19,r2
   87498:	00bfffc4 	movi	r2,-1
   8749c:	98bf3226 	beq	r19,r2,87168 <__alt_data_end+0xfffb1a38>
   874a0:	8080030b 	ldhu	r2,12(r16)
   874a4:	003f7006 	br	87268 <__alt_data_end+0xfffb1b38>
   874a8:	8140038f 	ldh	r5,14(r16)
   874ac:	283f4716 	blt	r5,zero,871cc <__alt_data_end+0xfffb1a9c>
   874b0:	d80d883a 	mov	r6,sp
   874b4:	8809883a 	mov	r4,r17
   874b8:	00875500 	call	87550 <_fstat_r>
   874bc:	1000041e 	bne	r2,zero,874d0 <_fseeko_r+0x3e0>
   874c0:	d8800117 	ldw	r2,4(sp)
   874c4:	00e00014 	movui	r3,32768
   874c8:	10bc000c 	andi	r2,r2,61440
   874cc:	10ff7c26 	beq	r2,r3,872c0 <__alt_data_end+0xfffb1b90>
   874d0:	8080030b 	ldhu	r2,12(r16)
   874d4:	003f3d06 	br	871cc <__alt_data_end+0xfffb1a9c>
   874d8:	800b883a 	mov	r5,r16
   874dc:	8809883a 	mov	r4,r17
   874e0:	00878440 	call	87844 <__smakebuf_r>
   874e4:	003f3106 	br	871ac <__alt_data_end+0xfffb1a7c>
   874e8:	81400717 	ldw	r5,28(r16)
   874ec:	01c00044 	movi	r7,1
   874f0:	000d883a 	mov	r6,zero
   874f4:	8809883a 	mov	r4,r17
   874f8:	a03ee83a 	callr	r20
   874fc:	00ffffc4 	movi	r3,-1
   87500:	10ff7b1e 	bne	r2,r3,872f0 <__alt_data_end+0xfffb1bc0>
   87504:	003f3306 	br	871d4 <__alt_data_end+0xfffb1aa4>
   87508:	80c00017 	ldw	r3,0(r16)
   8750c:	80800417 	ldw	r2,16(r16)
   87510:	000b883a 	mov	r5,zero
   87514:	1887c83a 	sub	r3,r3,r2
   87518:	98e7c83a 	sub	r19,r19,r3
   8751c:	30c7883a 	add	r3,r6,r3
   87520:	003f7f06 	br	87320 <__alt_data_end+0xfffb1bf0>
   87524:	00800744 	movi	r2,29
   87528:	88800015 	stw	r2,0(r17)
   8752c:	04ffffc4 	movi	r19,-1
   87530:	003f0e06 	br	8716c <__alt_data_end+0xfffb1a3c>

00087534 <fseeko>:
   87534:	008002b4 	movhi	r2,10
   87538:	10b7b804 	addi	r2,r2,-8480
   8753c:	300f883a 	mov	r7,r6
   87540:	280d883a 	mov	r6,r5
   87544:	200b883a 	mov	r5,r4
   87548:	11000017 	ldw	r4,0(r2)
   8754c:	00870f01 	jmpi	870f0 <_fseeko_r>

00087550 <_fstat_r>:
   87550:	defffd04 	addi	sp,sp,-12
   87554:	2805883a 	mov	r2,r5
   87558:	dc000015 	stw	r16,0(sp)
   8755c:	040002b4 	movhi	r16,10
   87560:	dc400115 	stw	r17,4(sp)
   87564:	841eac04 	addi	r16,r16,31408
   87568:	2023883a 	mov	r17,r4
   8756c:	300b883a 	mov	r5,r6
   87570:	1009883a 	mov	r4,r2
   87574:	dfc00215 	stw	ra,8(sp)
   87578:	80000015 	stw	zero,0(r16)
   8757c:	00915380 	call	91538 <fstat>
   87580:	00ffffc4 	movi	r3,-1
   87584:	10c00526 	beq	r2,r3,8759c <_fstat_r+0x4c>
   87588:	dfc00217 	ldw	ra,8(sp)
   8758c:	dc400117 	ldw	r17,4(sp)
   87590:	dc000017 	ldw	r16,0(sp)
   87594:	dec00304 	addi	sp,sp,12
   87598:	f800283a 	ret
   8759c:	80c00017 	ldw	r3,0(r16)
   875a0:	183ff926 	beq	r3,zero,87588 <__alt_data_end+0xfffb1e58>
   875a4:	88c00015 	stw	r3,0(r17)
   875a8:	003ff706 	br	87588 <__alt_data_end+0xfffb1e58>

000875ac <_fwalk>:
   875ac:	defff704 	addi	sp,sp,-36
   875b0:	dd000415 	stw	r20,16(sp)
   875b4:	dfc00815 	stw	ra,32(sp)
   875b8:	ddc00715 	stw	r23,28(sp)
   875bc:	dd800615 	stw	r22,24(sp)
   875c0:	dd400515 	stw	r21,20(sp)
   875c4:	dcc00315 	stw	r19,12(sp)
   875c8:	dc800215 	stw	r18,8(sp)
   875cc:	dc400115 	stw	r17,4(sp)
   875d0:	dc000015 	stw	r16,0(sp)
   875d4:	2500b804 	addi	r20,r4,736
   875d8:	a0002326 	beq	r20,zero,87668 <_fwalk+0xbc>
   875dc:	282b883a 	mov	r21,r5
   875e0:	002f883a 	mov	r23,zero
   875e4:	05800044 	movi	r22,1
   875e8:	04ffffc4 	movi	r19,-1
   875ec:	a4400117 	ldw	r17,4(r20)
   875f0:	a4800217 	ldw	r18,8(r20)
   875f4:	8c7fffc4 	addi	r17,r17,-1
   875f8:	88000d16 	blt	r17,zero,87630 <_fwalk+0x84>
   875fc:	94000304 	addi	r16,r18,12
   87600:	94800384 	addi	r18,r18,14
   87604:	8080000b 	ldhu	r2,0(r16)
   87608:	8c7fffc4 	addi	r17,r17,-1
   8760c:	813ffd04 	addi	r4,r16,-12
   87610:	b080042e 	bgeu	r22,r2,87624 <_fwalk+0x78>
   87614:	9080000f 	ldh	r2,0(r18)
   87618:	14c00226 	beq	r2,r19,87624 <_fwalk+0x78>
   8761c:	a83ee83a 	callr	r21
   87620:	b8aeb03a 	or	r23,r23,r2
   87624:	84001a04 	addi	r16,r16,104
   87628:	94801a04 	addi	r18,r18,104
   8762c:	8cfff51e 	bne	r17,r19,87604 <__alt_data_end+0xfffb1ed4>
   87630:	a5000017 	ldw	r20,0(r20)
   87634:	a03fed1e 	bne	r20,zero,875ec <__alt_data_end+0xfffb1ebc>
   87638:	b805883a 	mov	r2,r23
   8763c:	dfc00817 	ldw	ra,32(sp)
   87640:	ddc00717 	ldw	r23,28(sp)
   87644:	dd800617 	ldw	r22,24(sp)
   87648:	dd400517 	ldw	r21,20(sp)
   8764c:	dd000417 	ldw	r20,16(sp)
   87650:	dcc00317 	ldw	r19,12(sp)
   87654:	dc800217 	ldw	r18,8(sp)
   87658:	dc400117 	ldw	r17,4(sp)
   8765c:	dc000017 	ldw	r16,0(sp)
   87660:	dec00904 	addi	sp,sp,36
   87664:	f800283a 	ret
   87668:	002f883a 	mov	r23,zero
   8766c:	003ff206 	br	87638 <__alt_data_end+0xfffb1f08>

00087670 <_fwalk_reent>:
   87670:	defff704 	addi	sp,sp,-36
   87674:	dd000415 	stw	r20,16(sp)
   87678:	dfc00815 	stw	ra,32(sp)
   8767c:	ddc00715 	stw	r23,28(sp)
   87680:	dd800615 	stw	r22,24(sp)
   87684:	dd400515 	stw	r21,20(sp)
   87688:	dcc00315 	stw	r19,12(sp)
   8768c:	dc800215 	stw	r18,8(sp)
   87690:	dc400115 	stw	r17,4(sp)
   87694:	dc000015 	stw	r16,0(sp)
   87698:	2500b804 	addi	r20,r4,736
   8769c:	a0002326 	beq	r20,zero,8772c <_fwalk_reent+0xbc>
   876a0:	282b883a 	mov	r21,r5
   876a4:	2027883a 	mov	r19,r4
   876a8:	002f883a 	mov	r23,zero
   876ac:	05800044 	movi	r22,1
   876b0:	04bfffc4 	movi	r18,-1
   876b4:	a4400117 	ldw	r17,4(r20)
   876b8:	a4000217 	ldw	r16,8(r20)
   876bc:	8c7fffc4 	addi	r17,r17,-1
   876c0:	88000c16 	blt	r17,zero,876f4 <_fwalk_reent+0x84>
   876c4:	84000304 	addi	r16,r16,12
   876c8:	8080000b 	ldhu	r2,0(r16)
   876cc:	8c7fffc4 	addi	r17,r17,-1
   876d0:	817ffd04 	addi	r5,r16,-12
   876d4:	b080052e 	bgeu	r22,r2,876ec <_fwalk_reent+0x7c>
   876d8:	8080008f 	ldh	r2,2(r16)
   876dc:	9809883a 	mov	r4,r19
   876e0:	14800226 	beq	r2,r18,876ec <_fwalk_reent+0x7c>
   876e4:	a83ee83a 	callr	r21
   876e8:	b8aeb03a 	or	r23,r23,r2
   876ec:	84001a04 	addi	r16,r16,104
   876f0:	8cbff51e 	bne	r17,r18,876c8 <__alt_data_end+0xfffb1f98>
   876f4:	a5000017 	ldw	r20,0(r20)
   876f8:	a03fee1e 	bne	r20,zero,876b4 <__alt_data_end+0xfffb1f84>
   876fc:	b805883a 	mov	r2,r23
   87700:	dfc00817 	ldw	ra,32(sp)
   87704:	ddc00717 	ldw	r23,28(sp)
   87708:	dd800617 	ldw	r22,24(sp)
   8770c:	dd400517 	ldw	r21,20(sp)
   87710:	dd000417 	ldw	r20,16(sp)
   87714:	dcc00317 	ldw	r19,12(sp)
   87718:	dc800217 	ldw	r18,8(sp)
   8771c:	dc400117 	ldw	r17,4(sp)
   87720:	dc000017 	ldw	r16,0(sp)
   87724:	dec00904 	addi	sp,sp,36
   87728:	f800283a 	ret
   8772c:	002f883a 	mov	r23,zero
   87730:	003ff206 	br	876fc <__alt_data_end+0xfffb1fcc>

00087734 <_fwrite_r>:
   87734:	defff504 	addi	sp,sp,-44
   87738:	dc400715 	stw	r17,28(sp)
   8773c:	d9400315 	stw	r5,12(sp)
   87740:	2023883a 	mov	r17,r4
   87744:	300b883a 	mov	r5,r6
   87748:	3809883a 	mov	r4,r7
   8774c:	dcc00915 	stw	r19,36(sp)
   87750:	dc800815 	stw	r18,32(sp)
   87754:	dc000615 	stw	r16,24(sp)
   87758:	dfc00a15 	stw	ra,40(sp)
   8775c:	3027883a 	mov	r19,r6
   87760:	3821883a 	mov	r16,r7
   87764:	0082a480 	call	82a48 <__mulsi3>
   87768:	1025883a 	mov	r18,r2
   8776c:	d8800415 	stw	r2,16(sp)
   87770:	d8800215 	stw	r2,8(sp)
   87774:	d8800304 	addi	r2,sp,12
   87778:	d8800015 	stw	r2,0(sp)
   8777c:	00800044 	movi	r2,1
   87780:	d8800115 	stw	r2,4(sp)
   87784:	d9400b17 	ldw	r5,44(sp)
   87788:	88000226 	beq	r17,zero,87794 <_fwrite_r+0x60>
   8778c:	88800e17 	ldw	r2,56(r17)
   87790:	10001a26 	beq	r2,zero,877fc <_fwrite_r+0xc8>
   87794:	2880030b 	ldhu	r2,12(r5)
   87798:	10c8000c 	andi	r3,r2,8192
   8779c:	1800061e 	bne	r3,zero,877b8 <_fwrite_r+0x84>
   877a0:	29001917 	ldw	r4,100(r5)
   877a4:	00f7ffc4 	movi	r3,-8193
   877a8:	10880014 	ori	r2,r2,8192
   877ac:	20c6703a 	and	r3,r4,r3
   877b0:	2880030d 	sth	r2,12(r5)
   877b4:	28c01915 	stw	r3,100(r5)
   877b8:	d80d883a 	mov	r6,sp
   877bc:	8809883a 	mov	r4,r17
   877c0:	008c8040 	call	8c804 <__sfvwrite_r>
   877c4:	10000b26 	beq	r2,zero,877f4 <_fwrite_r+0xc0>
   877c8:	d9000217 	ldw	r4,8(sp)
   877cc:	980b883a 	mov	r5,r19
   877d0:	9109c83a 	sub	r4,r18,r4
   877d4:	008298c0 	call	8298c <__udivsi3>
   877d8:	dfc00a17 	ldw	ra,40(sp)
   877dc:	dcc00917 	ldw	r19,36(sp)
   877e0:	dc800817 	ldw	r18,32(sp)
   877e4:	dc400717 	ldw	r17,28(sp)
   877e8:	dc000617 	ldw	r16,24(sp)
   877ec:	dec00b04 	addi	sp,sp,44
   877f0:	f800283a 	ret
   877f4:	8005883a 	mov	r2,r16
   877f8:	003ff706 	br	877d8 <__alt_data_end+0xfffb20a8>
   877fc:	8809883a 	mov	r4,r17
   87800:	d9400515 	stw	r5,20(sp)
   87804:	0086b400 	call	86b40 <__sinit>
   87808:	d9400517 	ldw	r5,20(sp)
   8780c:	003fe106 	br	87794 <__alt_data_end+0xfffb2064>

00087810 <fwrite>:
   87810:	defffe04 	addi	sp,sp,-8
   87814:	008002b4 	movhi	r2,10
   87818:	d9c00015 	stw	r7,0(sp)
   8781c:	10b7b804 	addi	r2,r2,-8480
   87820:	300f883a 	mov	r7,r6
   87824:	280d883a 	mov	r6,r5
   87828:	200b883a 	mov	r5,r4
   8782c:	11000017 	ldw	r4,0(r2)
   87830:	dfc00115 	stw	ra,4(sp)
   87834:	00877340 	call	87734 <_fwrite_r>
   87838:	dfc00117 	ldw	ra,4(sp)
   8783c:	dec00204 	addi	sp,sp,8
   87840:	f800283a 	ret

00087844 <__smakebuf_r>:
   87844:	2880030b 	ldhu	r2,12(r5)
   87848:	10c0008c 	andi	r3,r2,2
   8784c:	1800411e 	bne	r3,zero,87954 <__smakebuf_r+0x110>
   87850:	deffec04 	addi	sp,sp,-80
   87854:	dc000f15 	stw	r16,60(sp)
   87858:	2821883a 	mov	r16,r5
   8785c:	2940038f 	ldh	r5,14(r5)
   87860:	dc401015 	stw	r17,64(sp)
   87864:	dfc01315 	stw	ra,76(sp)
   87868:	dcc01215 	stw	r19,72(sp)
   8786c:	dc801115 	stw	r18,68(sp)
   87870:	2023883a 	mov	r17,r4
   87874:	28001c16 	blt	r5,zero,878e8 <__smakebuf_r+0xa4>
   87878:	d80d883a 	mov	r6,sp
   8787c:	00875500 	call	87550 <_fstat_r>
   87880:	10001816 	blt	r2,zero,878e4 <__smakebuf_r+0xa0>
   87884:	d8800117 	ldw	r2,4(sp)
   87888:	00e00014 	movui	r3,32768
   8788c:	10bc000c 	andi	r2,r2,61440
   87890:	14c80020 	cmpeqi	r19,r2,8192
   87894:	10c03726 	beq	r2,r3,87974 <__smakebuf_r+0x130>
   87898:	80c0030b 	ldhu	r3,12(r16)
   8789c:	18c20014 	ori	r3,r3,2048
   878a0:	80c0030d 	sth	r3,12(r16)
   878a4:	00c80004 	movi	r3,8192
   878a8:	10c0521e 	bne	r2,r3,879f4 <__smakebuf_r+0x1b0>
   878ac:	8140038f 	ldh	r5,14(r16)
   878b0:	8809883a 	mov	r4,r17
   878b4:	008cccc0 	call	8cccc <_isatty_r>
   878b8:	10004c26 	beq	r2,zero,879ec <__smakebuf_r+0x1a8>
   878bc:	8080030b 	ldhu	r2,12(r16)
   878c0:	80c010c4 	addi	r3,r16,67
   878c4:	80c00015 	stw	r3,0(r16)
   878c8:	10800054 	ori	r2,r2,1
   878cc:	8080030d 	sth	r2,12(r16)
   878d0:	00800044 	movi	r2,1
   878d4:	80c00415 	stw	r3,16(r16)
   878d8:	80800515 	stw	r2,20(r16)
   878dc:	04810004 	movi	r18,1024
   878e0:	00000706 	br	87900 <__smakebuf_r+0xbc>
   878e4:	8080030b 	ldhu	r2,12(r16)
   878e8:	10c0200c 	andi	r3,r2,128
   878ec:	18001f1e 	bne	r3,zero,8796c <__smakebuf_r+0x128>
   878f0:	04810004 	movi	r18,1024
   878f4:	10820014 	ori	r2,r2,2048
   878f8:	8080030d 	sth	r2,12(r16)
   878fc:	0027883a 	mov	r19,zero
   87900:	900b883a 	mov	r5,r18
   87904:	8809883a 	mov	r4,r17
   87908:	0087a000 	call	87a00 <_malloc_r>
   8790c:	10002c26 	beq	r2,zero,879c0 <__smakebuf_r+0x17c>
   87910:	80c0030b 	ldhu	r3,12(r16)
   87914:	01000234 	movhi	r4,8
   87918:	2119fa04 	addi	r4,r4,26600
   8791c:	89000f15 	stw	r4,60(r17)
   87920:	18c02014 	ori	r3,r3,128
   87924:	80c0030d 	sth	r3,12(r16)
   87928:	80800015 	stw	r2,0(r16)
   8792c:	80800415 	stw	r2,16(r16)
   87930:	84800515 	stw	r18,20(r16)
   87934:	98001a1e 	bne	r19,zero,879a0 <__smakebuf_r+0x15c>
   87938:	dfc01317 	ldw	ra,76(sp)
   8793c:	dcc01217 	ldw	r19,72(sp)
   87940:	dc801117 	ldw	r18,68(sp)
   87944:	dc401017 	ldw	r17,64(sp)
   87948:	dc000f17 	ldw	r16,60(sp)
   8794c:	dec01404 	addi	sp,sp,80
   87950:	f800283a 	ret
   87954:	288010c4 	addi	r2,r5,67
   87958:	28800015 	stw	r2,0(r5)
   8795c:	28800415 	stw	r2,16(r5)
   87960:	00800044 	movi	r2,1
   87964:	28800515 	stw	r2,20(r5)
   87968:	f800283a 	ret
   8796c:	04801004 	movi	r18,64
   87970:	003fe006 	br	878f4 <__alt_data_end+0xfffb21c4>
   87974:	81000a17 	ldw	r4,40(r16)
   87978:	00c00274 	movhi	r3,9
   8797c:	18e1fc04 	addi	r3,r3,-30736
   87980:	20ffc51e 	bne	r4,r3,87898 <__alt_data_end+0xfffb2168>
   87984:	8080030b 	ldhu	r2,12(r16)
   87988:	04810004 	movi	r18,1024
   8798c:	84801315 	stw	r18,76(r16)
   87990:	1484b03a 	or	r2,r2,r18
   87994:	8080030d 	sth	r2,12(r16)
   87998:	0027883a 	mov	r19,zero
   8799c:	003fd806 	br	87900 <__alt_data_end+0xfffb21d0>
   879a0:	8140038f 	ldh	r5,14(r16)
   879a4:	8809883a 	mov	r4,r17
   879a8:	008cccc0 	call	8cccc <_isatty_r>
   879ac:	103fe226 	beq	r2,zero,87938 <__alt_data_end+0xfffb2208>
   879b0:	8080030b 	ldhu	r2,12(r16)
   879b4:	10800054 	ori	r2,r2,1
   879b8:	8080030d 	sth	r2,12(r16)
   879bc:	003fde06 	br	87938 <__alt_data_end+0xfffb2208>
   879c0:	8080030b 	ldhu	r2,12(r16)
   879c4:	10c0800c 	andi	r3,r2,512
   879c8:	183fdb1e 	bne	r3,zero,87938 <__alt_data_end+0xfffb2208>
   879cc:	10800094 	ori	r2,r2,2
   879d0:	80c010c4 	addi	r3,r16,67
   879d4:	8080030d 	sth	r2,12(r16)
   879d8:	00800044 	movi	r2,1
   879dc:	80c00015 	stw	r3,0(r16)
   879e0:	80c00415 	stw	r3,16(r16)
   879e4:	80800515 	stw	r2,20(r16)
   879e8:	003fd306 	br	87938 <__alt_data_end+0xfffb2208>
   879ec:	04810004 	movi	r18,1024
   879f0:	003fc306 	br	87900 <__alt_data_end+0xfffb21d0>
   879f4:	0027883a 	mov	r19,zero
   879f8:	04810004 	movi	r18,1024
   879fc:	003fc006 	br	87900 <__alt_data_end+0xfffb21d0>

00087a00 <_malloc_r>:
   87a00:	defff504 	addi	sp,sp,-44
   87a04:	dc800315 	stw	r18,12(sp)
   87a08:	dfc00a15 	stw	ra,40(sp)
   87a0c:	df000915 	stw	fp,36(sp)
   87a10:	ddc00815 	stw	r23,32(sp)
   87a14:	dd800715 	stw	r22,28(sp)
   87a18:	dd400615 	stw	r21,24(sp)
   87a1c:	dd000515 	stw	r20,20(sp)
   87a20:	dcc00415 	stw	r19,16(sp)
   87a24:	dc400215 	stw	r17,8(sp)
   87a28:	dc000115 	stw	r16,4(sp)
   87a2c:	288002c4 	addi	r2,r5,11
   87a30:	00c00584 	movi	r3,22
   87a34:	2025883a 	mov	r18,r4
   87a38:	18807f2e 	bgeu	r3,r2,87c38 <_malloc_r+0x238>
   87a3c:	047ffe04 	movi	r17,-8
   87a40:	1462703a 	and	r17,r2,r17
   87a44:	8800a316 	blt	r17,zero,87cd4 <_malloc_r+0x2d4>
   87a48:	8940a236 	bltu	r17,r5,87cd4 <_malloc_r+0x2d4>
   87a4c:	00919580 	call	91958 <__malloc_lock>
   87a50:	00807dc4 	movi	r2,503
   87a54:	1441e92e 	bgeu	r2,r17,881fc <_malloc_r+0x7fc>
   87a58:	8804d27a 	srli	r2,r17,9
   87a5c:	1000a126 	beq	r2,zero,87ce4 <_malloc_r+0x2e4>
   87a60:	00c00104 	movi	r3,4
   87a64:	18811e36 	bltu	r3,r2,87ee0 <_malloc_r+0x4e0>
   87a68:	8804d1ba 	srli	r2,r17,6
   87a6c:	12000e44 	addi	r8,r2,57
   87a70:	11c00e04 	addi	r7,r2,56
   87a74:	4209883a 	add	r4,r8,r8
   87a78:	04c002b4 	movhi	r19,10
   87a7c:	2109883a 	add	r4,r4,r4
   87a80:	9cf20804 	addi	r19,r19,-14304
   87a84:	2109883a 	add	r4,r4,r4
   87a88:	9909883a 	add	r4,r19,r4
   87a8c:	24000117 	ldw	r16,4(r4)
   87a90:	213ffe04 	addi	r4,r4,-8
   87a94:	24009726 	beq	r4,r16,87cf4 <_malloc_r+0x2f4>
   87a98:	80800117 	ldw	r2,4(r16)
   87a9c:	01bfff04 	movi	r6,-4
   87aa0:	014003c4 	movi	r5,15
   87aa4:	1184703a 	and	r2,r2,r6
   87aa8:	1447c83a 	sub	r3,r2,r17
   87aac:	28c00716 	blt	r5,r3,87acc <_malloc_r+0xcc>
   87ab0:	1800920e 	bge	r3,zero,87cfc <_malloc_r+0x2fc>
   87ab4:	84000317 	ldw	r16,12(r16)
   87ab8:	24008e26 	beq	r4,r16,87cf4 <_malloc_r+0x2f4>
   87abc:	80800117 	ldw	r2,4(r16)
   87ac0:	1184703a 	and	r2,r2,r6
   87ac4:	1447c83a 	sub	r3,r2,r17
   87ac8:	28fff90e 	bge	r5,r3,87ab0 <__alt_data_end+0xfffb2380>
   87acc:	3809883a 	mov	r4,r7
   87ad0:	018002b4 	movhi	r6,10
   87ad4:	9c000417 	ldw	r16,16(r19)
   87ad8:	31b20804 	addi	r6,r6,-14304
   87adc:	32000204 	addi	r8,r6,8
   87ae0:	82013426 	beq	r16,r8,87fb4 <_malloc_r+0x5b4>
   87ae4:	80c00117 	ldw	r3,4(r16)
   87ae8:	00bfff04 	movi	r2,-4
   87aec:	188e703a 	and	r7,r3,r2
   87af0:	3c45c83a 	sub	r2,r7,r17
   87af4:	00c003c4 	movi	r3,15
   87af8:	18811f16 	blt	r3,r2,87f78 <_malloc_r+0x578>
   87afc:	32000515 	stw	r8,20(r6)
   87b00:	32000415 	stw	r8,16(r6)
   87b04:	10007f0e 	bge	r2,zero,87d04 <_malloc_r+0x304>
   87b08:	00807fc4 	movi	r2,511
   87b0c:	11c0fd36 	bltu	r2,r7,87f04 <_malloc_r+0x504>
   87b10:	3806d0fa 	srli	r3,r7,3
   87b14:	01c00044 	movi	r7,1
   87b18:	30800117 	ldw	r2,4(r6)
   87b1c:	19400044 	addi	r5,r3,1
   87b20:	294b883a 	add	r5,r5,r5
   87b24:	1807d0ba 	srai	r3,r3,2
   87b28:	294b883a 	add	r5,r5,r5
   87b2c:	294b883a 	add	r5,r5,r5
   87b30:	298b883a 	add	r5,r5,r6
   87b34:	38c6983a 	sll	r3,r7,r3
   87b38:	29c00017 	ldw	r7,0(r5)
   87b3c:	2a7ffe04 	addi	r9,r5,-8
   87b40:	1886b03a 	or	r3,r3,r2
   87b44:	82400315 	stw	r9,12(r16)
   87b48:	81c00215 	stw	r7,8(r16)
   87b4c:	30c00115 	stw	r3,4(r6)
   87b50:	2c000015 	stw	r16,0(r5)
   87b54:	3c000315 	stw	r16,12(r7)
   87b58:	2005d0ba 	srai	r2,r4,2
   87b5c:	01400044 	movi	r5,1
   87b60:	288a983a 	sll	r5,r5,r2
   87b64:	19406f36 	bltu	r3,r5,87d24 <_malloc_r+0x324>
   87b68:	28c4703a 	and	r2,r5,r3
   87b6c:	10000a1e 	bne	r2,zero,87b98 <_malloc_r+0x198>
   87b70:	00bfff04 	movi	r2,-4
   87b74:	294b883a 	add	r5,r5,r5
   87b78:	2088703a 	and	r4,r4,r2
   87b7c:	28c4703a 	and	r2,r5,r3
   87b80:	21000104 	addi	r4,r4,4
   87b84:	1000041e 	bne	r2,zero,87b98 <_malloc_r+0x198>
   87b88:	294b883a 	add	r5,r5,r5
   87b8c:	28c4703a 	and	r2,r5,r3
   87b90:	21000104 	addi	r4,r4,4
   87b94:	103ffc26 	beq	r2,zero,87b88 <__alt_data_end+0xfffb2458>
   87b98:	02bfff04 	movi	r10,-4
   87b9c:	024003c4 	movi	r9,15
   87ba0:	21800044 	addi	r6,r4,1
   87ba4:	318d883a 	add	r6,r6,r6
   87ba8:	318d883a 	add	r6,r6,r6
   87bac:	318d883a 	add	r6,r6,r6
   87bb0:	998d883a 	add	r6,r19,r6
   87bb4:	333ffe04 	addi	r12,r6,-8
   87bb8:	2017883a 	mov	r11,r4
   87bbc:	31800104 	addi	r6,r6,4
   87bc0:	34000017 	ldw	r16,0(r6)
   87bc4:	31fffd04 	addi	r7,r6,-12
   87bc8:	81c0041e 	bne	r16,r7,87bdc <_malloc_r+0x1dc>
   87bcc:	0000fb06 	br	87fbc <_malloc_r+0x5bc>
   87bd0:	1801030e 	bge	r3,zero,87fe0 <_malloc_r+0x5e0>
   87bd4:	84000317 	ldw	r16,12(r16)
   87bd8:	81c0f826 	beq	r16,r7,87fbc <_malloc_r+0x5bc>
   87bdc:	80800117 	ldw	r2,4(r16)
   87be0:	1284703a 	and	r2,r2,r10
   87be4:	1447c83a 	sub	r3,r2,r17
   87be8:	48fff90e 	bge	r9,r3,87bd0 <__alt_data_end+0xfffb24a0>
   87bec:	80800317 	ldw	r2,12(r16)
   87bf0:	81000217 	ldw	r4,8(r16)
   87bf4:	89400054 	ori	r5,r17,1
   87bf8:	81400115 	stw	r5,4(r16)
   87bfc:	20800315 	stw	r2,12(r4)
   87c00:	11000215 	stw	r4,8(r2)
   87c04:	8463883a 	add	r17,r16,r17
   87c08:	9c400515 	stw	r17,20(r19)
   87c0c:	9c400415 	stw	r17,16(r19)
   87c10:	18800054 	ori	r2,r3,1
   87c14:	88800115 	stw	r2,4(r17)
   87c18:	8a000315 	stw	r8,12(r17)
   87c1c:	8a000215 	stw	r8,8(r17)
   87c20:	88e3883a 	add	r17,r17,r3
   87c24:	88c00015 	stw	r3,0(r17)
   87c28:	9009883a 	mov	r4,r18
   87c2c:	009197c0 	call	9197c <__malloc_unlock>
   87c30:	80800204 	addi	r2,r16,8
   87c34:	00001b06 	br	87ca4 <_malloc_r+0x2a4>
   87c38:	04400404 	movi	r17,16
   87c3c:	89402536 	bltu	r17,r5,87cd4 <_malloc_r+0x2d4>
   87c40:	00919580 	call	91958 <__malloc_lock>
   87c44:	00800184 	movi	r2,6
   87c48:	01000084 	movi	r4,2
   87c4c:	04c002b4 	movhi	r19,10
   87c50:	1085883a 	add	r2,r2,r2
   87c54:	9cf20804 	addi	r19,r19,-14304
   87c58:	1085883a 	add	r2,r2,r2
   87c5c:	9885883a 	add	r2,r19,r2
   87c60:	14000117 	ldw	r16,4(r2)
   87c64:	10fffe04 	addi	r3,r2,-8
   87c68:	80c0d926 	beq	r16,r3,87fd0 <_malloc_r+0x5d0>
   87c6c:	80c00117 	ldw	r3,4(r16)
   87c70:	81000317 	ldw	r4,12(r16)
   87c74:	00bfff04 	movi	r2,-4
   87c78:	1884703a 	and	r2,r3,r2
   87c7c:	81400217 	ldw	r5,8(r16)
   87c80:	8085883a 	add	r2,r16,r2
   87c84:	10c00117 	ldw	r3,4(r2)
   87c88:	29000315 	stw	r4,12(r5)
   87c8c:	21400215 	stw	r5,8(r4)
   87c90:	18c00054 	ori	r3,r3,1
   87c94:	10c00115 	stw	r3,4(r2)
   87c98:	9009883a 	mov	r4,r18
   87c9c:	009197c0 	call	9197c <__malloc_unlock>
   87ca0:	80800204 	addi	r2,r16,8
   87ca4:	dfc00a17 	ldw	ra,40(sp)
   87ca8:	df000917 	ldw	fp,36(sp)
   87cac:	ddc00817 	ldw	r23,32(sp)
   87cb0:	dd800717 	ldw	r22,28(sp)
   87cb4:	dd400617 	ldw	r21,24(sp)
   87cb8:	dd000517 	ldw	r20,20(sp)
   87cbc:	dcc00417 	ldw	r19,16(sp)
   87cc0:	dc800317 	ldw	r18,12(sp)
   87cc4:	dc400217 	ldw	r17,8(sp)
   87cc8:	dc000117 	ldw	r16,4(sp)
   87ccc:	dec00b04 	addi	sp,sp,44
   87cd0:	f800283a 	ret
   87cd4:	00800304 	movi	r2,12
   87cd8:	90800015 	stw	r2,0(r18)
   87cdc:	0005883a 	mov	r2,zero
   87ce0:	003ff006 	br	87ca4 <__alt_data_end+0xfffb2574>
   87ce4:	01002004 	movi	r4,128
   87ce8:	02001004 	movi	r8,64
   87cec:	01c00fc4 	movi	r7,63
   87cf0:	003f6106 	br	87a78 <__alt_data_end+0xfffb2348>
   87cf4:	4009883a 	mov	r4,r8
   87cf8:	003f7506 	br	87ad0 <__alt_data_end+0xfffb23a0>
   87cfc:	81000317 	ldw	r4,12(r16)
   87d00:	003fde06 	br	87c7c <__alt_data_end+0xfffb254c>
   87d04:	81c5883a 	add	r2,r16,r7
   87d08:	11400117 	ldw	r5,4(r2)
   87d0c:	9009883a 	mov	r4,r18
   87d10:	29400054 	ori	r5,r5,1
   87d14:	11400115 	stw	r5,4(r2)
   87d18:	009197c0 	call	9197c <__malloc_unlock>
   87d1c:	80800204 	addi	r2,r16,8
   87d20:	003fe006 	br	87ca4 <__alt_data_end+0xfffb2574>
   87d24:	9c000217 	ldw	r16,8(r19)
   87d28:	00bfff04 	movi	r2,-4
   87d2c:	85800117 	ldw	r22,4(r16)
   87d30:	b0ac703a 	and	r22,r22,r2
   87d34:	b4400336 	bltu	r22,r17,87d44 <_malloc_r+0x344>
   87d38:	b445c83a 	sub	r2,r22,r17
   87d3c:	00c003c4 	movi	r3,15
   87d40:	18805d16 	blt	r3,r2,87eb8 <_malloc_r+0x4b8>
   87d44:	05c002b4 	movhi	r23,10
   87d48:	008002b4 	movhi	r2,10
   87d4c:	109eaf04 	addi	r2,r2,31420
   87d50:	bdf7b904 	addi	r23,r23,-8476
   87d54:	15400017 	ldw	r21,0(r2)
   87d58:	b8c00017 	ldw	r3,0(r23)
   87d5c:	00bfffc4 	movi	r2,-1
   87d60:	858d883a 	add	r6,r16,r22
   87d64:	8d6b883a 	add	r21,r17,r21
   87d68:	1880ea26 	beq	r3,r2,88114 <_malloc_r+0x714>
   87d6c:	ad4403c4 	addi	r21,r21,4111
   87d70:	00bc0004 	movi	r2,-4096
   87d74:	a8aa703a 	and	r21,r21,r2
   87d78:	a80b883a 	mov	r5,r21
   87d7c:	9009883a 	mov	r4,r18
   87d80:	d9800015 	stw	r6,0(sp)
   87d84:	00886c40 	call	886c4 <_sbrk_r>
   87d88:	1029883a 	mov	r20,r2
   87d8c:	00bfffc4 	movi	r2,-1
   87d90:	d9800017 	ldw	r6,0(sp)
   87d94:	a080e826 	beq	r20,r2,88138 <_malloc_r+0x738>
   87d98:	a180a636 	bltu	r20,r6,88034 <_malloc_r+0x634>
   87d9c:	070002b4 	movhi	fp,10
   87da0:	e71eba04 	addi	fp,fp,31464
   87da4:	e0800017 	ldw	r2,0(fp)
   87da8:	a887883a 	add	r3,r21,r2
   87dac:	e0c00015 	stw	r3,0(fp)
   87db0:	3500e626 	beq	r6,r20,8814c <_malloc_r+0x74c>
   87db4:	b9000017 	ldw	r4,0(r23)
   87db8:	00bfffc4 	movi	r2,-1
   87dbc:	2080ee26 	beq	r4,r2,88178 <_malloc_r+0x778>
   87dc0:	a185c83a 	sub	r2,r20,r6
   87dc4:	10c5883a 	add	r2,r2,r3
   87dc8:	e0800015 	stw	r2,0(fp)
   87dcc:	a0c001cc 	andi	r3,r20,7
   87dd0:	1800bc26 	beq	r3,zero,880c4 <_malloc_r+0x6c4>
   87dd4:	a0e9c83a 	sub	r20,r20,r3
   87dd8:	00840204 	movi	r2,4104
   87ddc:	a5000204 	addi	r20,r20,8
   87de0:	10c7c83a 	sub	r3,r2,r3
   87de4:	a545883a 	add	r2,r20,r21
   87de8:	1083ffcc 	andi	r2,r2,4095
   87dec:	18abc83a 	sub	r21,r3,r2
   87df0:	a80b883a 	mov	r5,r21
   87df4:	9009883a 	mov	r4,r18
   87df8:	00886c40 	call	886c4 <_sbrk_r>
   87dfc:	00ffffc4 	movi	r3,-1
   87e00:	10c0e126 	beq	r2,r3,88188 <_malloc_r+0x788>
   87e04:	1505c83a 	sub	r2,r2,r20
   87e08:	1545883a 	add	r2,r2,r21
   87e0c:	10800054 	ori	r2,r2,1
   87e10:	e0c00017 	ldw	r3,0(fp)
   87e14:	9d000215 	stw	r20,8(r19)
   87e18:	a0800115 	stw	r2,4(r20)
   87e1c:	a8c7883a 	add	r3,r21,r3
   87e20:	e0c00015 	stw	r3,0(fp)
   87e24:	84c00e26 	beq	r16,r19,87e60 <_malloc_r+0x460>
   87e28:	018003c4 	movi	r6,15
   87e2c:	3580a72e 	bgeu	r6,r22,880cc <_malloc_r+0x6cc>
   87e30:	81400117 	ldw	r5,4(r16)
   87e34:	013ffe04 	movi	r4,-8
   87e38:	b0bffd04 	addi	r2,r22,-12
   87e3c:	1104703a 	and	r2,r2,r4
   87e40:	2900004c 	andi	r4,r5,1
   87e44:	2088b03a 	or	r4,r4,r2
   87e48:	81000115 	stw	r4,4(r16)
   87e4c:	01400144 	movi	r5,5
   87e50:	8089883a 	add	r4,r16,r2
   87e54:	21400115 	stw	r5,4(r4)
   87e58:	21400215 	stw	r5,8(r4)
   87e5c:	3080cd36 	bltu	r6,r2,88194 <_malloc_r+0x794>
   87e60:	008002b4 	movhi	r2,10
   87e64:	109eae04 	addi	r2,r2,31416
   87e68:	11000017 	ldw	r4,0(r2)
   87e6c:	20c0012e 	bgeu	r4,r3,87e74 <_malloc_r+0x474>
   87e70:	10c00015 	stw	r3,0(r2)
   87e74:	008002b4 	movhi	r2,10
   87e78:	109ead04 	addi	r2,r2,31412
   87e7c:	11000017 	ldw	r4,0(r2)
   87e80:	9c000217 	ldw	r16,8(r19)
   87e84:	20c0012e 	bgeu	r4,r3,87e8c <_malloc_r+0x48c>
   87e88:	10c00015 	stw	r3,0(r2)
   87e8c:	80c00117 	ldw	r3,4(r16)
   87e90:	00bfff04 	movi	r2,-4
   87e94:	1886703a 	and	r3,r3,r2
   87e98:	1c45c83a 	sub	r2,r3,r17
   87e9c:	1c400236 	bltu	r3,r17,87ea8 <_malloc_r+0x4a8>
   87ea0:	00c003c4 	movi	r3,15
   87ea4:	18800416 	blt	r3,r2,87eb8 <_malloc_r+0x4b8>
   87ea8:	9009883a 	mov	r4,r18
   87eac:	009197c0 	call	9197c <__malloc_unlock>
   87eb0:	0005883a 	mov	r2,zero
   87eb4:	003f7b06 	br	87ca4 <__alt_data_end+0xfffb2574>
   87eb8:	88c00054 	ori	r3,r17,1
   87ebc:	80c00115 	stw	r3,4(r16)
   87ec0:	8463883a 	add	r17,r16,r17
   87ec4:	10800054 	ori	r2,r2,1
   87ec8:	9c400215 	stw	r17,8(r19)
   87ecc:	88800115 	stw	r2,4(r17)
   87ed0:	9009883a 	mov	r4,r18
   87ed4:	009197c0 	call	9197c <__malloc_unlock>
   87ed8:	80800204 	addi	r2,r16,8
   87edc:	003f7106 	br	87ca4 <__alt_data_end+0xfffb2574>
   87ee0:	00c00504 	movi	r3,20
   87ee4:	18804a2e 	bgeu	r3,r2,88010 <_malloc_r+0x610>
   87ee8:	00c01504 	movi	r3,84
   87eec:	18806e36 	bltu	r3,r2,880a8 <_malloc_r+0x6a8>
   87ef0:	8804d33a 	srli	r2,r17,12
   87ef4:	12001bc4 	addi	r8,r2,111
   87ef8:	11c01b84 	addi	r7,r2,110
   87efc:	4209883a 	add	r4,r8,r8
   87f00:	003edd06 	br	87a78 <__alt_data_end+0xfffb2348>
   87f04:	3804d27a 	srli	r2,r7,9
   87f08:	00c00104 	movi	r3,4
   87f0c:	1880442e 	bgeu	r3,r2,88020 <_malloc_r+0x620>
   87f10:	00c00504 	movi	r3,20
   87f14:	18808136 	bltu	r3,r2,8811c <_malloc_r+0x71c>
   87f18:	11401704 	addi	r5,r2,92
   87f1c:	10c016c4 	addi	r3,r2,91
   87f20:	294b883a 	add	r5,r5,r5
   87f24:	294b883a 	add	r5,r5,r5
   87f28:	294b883a 	add	r5,r5,r5
   87f2c:	994b883a 	add	r5,r19,r5
   87f30:	28800017 	ldw	r2,0(r5)
   87f34:	018002b4 	movhi	r6,10
   87f38:	297ffe04 	addi	r5,r5,-8
   87f3c:	31b20804 	addi	r6,r6,-14304
   87f40:	28806526 	beq	r5,r2,880d8 <_malloc_r+0x6d8>
   87f44:	01bfff04 	movi	r6,-4
   87f48:	10c00117 	ldw	r3,4(r2)
   87f4c:	1986703a 	and	r3,r3,r6
   87f50:	38c0022e 	bgeu	r7,r3,87f5c <_malloc_r+0x55c>
   87f54:	10800217 	ldw	r2,8(r2)
   87f58:	28bffb1e 	bne	r5,r2,87f48 <__alt_data_end+0xfffb2818>
   87f5c:	11400317 	ldw	r5,12(r2)
   87f60:	98c00117 	ldw	r3,4(r19)
   87f64:	81400315 	stw	r5,12(r16)
   87f68:	80800215 	stw	r2,8(r16)
   87f6c:	2c000215 	stw	r16,8(r5)
   87f70:	14000315 	stw	r16,12(r2)
   87f74:	003ef806 	br	87b58 <__alt_data_end+0xfffb2428>
   87f78:	88c00054 	ori	r3,r17,1
   87f7c:	80c00115 	stw	r3,4(r16)
   87f80:	8463883a 	add	r17,r16,r17
   87f84:	34400515 	stw	r17,20(r6)
   87f88:	34400415 	stw	r17,16(r6)
   87f8c:	10c00054 	ori	r3,r2,1
   87f90:	8a000315 	stw	r8,12(r17)
   87f94:	8a000215 	stw	r8,8(r17)
   87f98:	88c00115 	stw	r3,4(r17)
   87f9c:	88a3883a 	add	r17,r17,r2
   87fa0:	88800015 	stw	r2,0(r17)
   87fa4:	9009883a 	mov	r4,r18
   87fa8:	009197c0 	call	9197c <__malloc_unlock>
   87fac:	80800204 	addi	r2,r16,8
   87fb0:	003f3c06 	br	87ca4 <__alt_data_end+0xfffb2574>
   87fb4:	30c00117 	ldw	r3,4(r6)
   87fb8:	003ee706 	br	87b58 <__alt_data_end+0xfffb2428>
   87fbc:	5ac00044 	addi	r11,r11,1
   87fc0:	588000cc 	andi	r2,r11,3
   87fc4:	31800204 	addi	r6,r6,8
   87fc8:	103efd1e 	bne	r2,zero,87bc0 <__alt_data_end+0xfffb2490>
   87fcc:	00002406 	br	88060 <_malloc_r+0x660>
   87fd0:	14000317 	ldw	r16,12(r2)
   87fd4:	143f251e 	bne	r2,r16,87c6c <__alt_data_end+0xfffb253c>
   87fd8:	21000084 	addi	r4,r4,2
   87fdc:	003ebc06 	br	87ad0 <__alt_data_end+0xfffb23a0>
   87fe0:	8085883a 	add	r2,r16,r2
   87fe4:	10c00117 	ldw	r3,4(r2)
   87fe8:	81000317 	ldw	r4,12(r16)
   87fec:	81400217 	ldw	r5,8(r16)
   87ff0:	18c00054 	ori	r3,r3,1
   87ff4:	10c00115 	stw	r3,4(r2)
   87ff8:	29000315 	stw	r4,12(r5)
   87ffc:	21400215 	stw	r5,8(r4)
   88000:	9009883a 	mov	r4,r18
   88004:	009197c0 	call	9197c <__malloc_unlock>
   88008:	80800204 	addi	r2,r16,8
   8800c:	003f2506 	br	87ca4 <__alt_data_end+0xfffb2574>
   88010:	12001704 	addi	r8,r2,92
   88014:	11c016c4 	addi	r7,r2,91
   88018:	4209883a 	add	r4,r8,r8
   8801c:	003e9606 	br	87a78 <__alt_data_end+0xfffb2348>
   88020:	3804d1ba 	srli	r2,r7,6
   88024:	11400e44 	addi	r5,r2,57
   88028:	10c00e04 	addi	r3,r2,56
   8802c:	294b883a 	add	r5,r5,r5
   88030:	003fbc06 	br	87f24 <__alt_data_end+0xfffb27f4>
   88034:	84ff5926 	beq	r16,r19,87d9c <__alt_data_end+0xfffb266c>
   88038:	008002b4 	movhi	r2,10
   8803c:	10b20804 	addi	r2,r2,-14304
   88040:	14000217 	ldw	r16,8(r2)
   88044:	00bfff04 	movi	r2,-4
   88048:	80c00117 	ldw	r3,4(r16)
   8804c:	1886703a 	and	r3,r3,r2
   88050:	003f9106 	br	87e98 <__alt_data_end+0xfffb2768>
   88054:	60800217 	ldw	r2,8(r12)
   88058:	213fffc4 	addi	r4,r4,-1
   8805c:	1300651e 	bne	r2,r12,881f4 <_malloc_r+0x7f4>
   88060:	208000cc 	andi	r2,r4,3
   88064:	633ffe04 	addi	r12,r12,-8
   88068:	103ffa1e 	bne	r2,zero,88054 <__alt_data_end+0xfffb2924>
   8806c:	98800117 	ldw	r2,4(r19)
   88070:	0146303a 	nor	r3,zero,r5
   88074:	1884703a 	and	r2,r3,r2
   88078:	98800115 	stw	r2,4(r19)
   8807c:	294b883a 	add	r5,r5,r5
   88080:	117f2836 	bltu	r2,r5,87d24 <__alt_data_end+0xfffb25f4>
   88084:	283f2726 	beq	r5,zero,87d24 <__alt_data_end+0xfffb25f4>
   88088:	2886703a 	and	r3,r5,r2
   8808c:	5809883a 	mov	r4,r11
   88090:	183ec31e 	bne	r3,zero,87ba0 <__alt_data_end+0xfffb2470>
   88094:	294b883a 	add	r5,r5,r5
   88098:	2886703a 	and	r3,r5,r2
   8809c:	21000104 	addi	r4,r4,4
   880a0:	183ffc26 	beq	r3,zero,88094 <__alt_data_end+0xfffb2964>
   880a4:	003ebe06 	br	87ba0 <__alt_data_end+0xfffb2470>
   880a8:	00c05504 	movi	r3,340
   880ac:	18801236 	bltu	r3,r2,880f8 <_malloc_r+0x6f8>
   880b0:	8804d3fa 	srli	r2,r17,15
   880b4:	12001e04 	addi	r8,r2,120
   880b8:	11c01dc4 	addi	r7,r2,119
   880bc:	4209883a 	add	r4,r8,r8
   880c0:	003e6d06 	br	87a78 <__alt_data_end+0xfffb2348>
   880c4:	00c40004 	movi	r3,4096
   880c8:	003f4606 	br	87de4 <__alt_data_end+0xfffb26b4>
   880cc:	00800044 	movi	r2,1
   880d0:	a0800115 	stw	r2,4(r20)
   880d4:	003f7406 	br	87ea8 <__alt_data_end+0xfffb2778>
   880d8:	1805d0ba 	srai	r2,r3,2
   880dc:	01c00044 	movi	r7,1
   880e0:	30c00117 	ldw	r3,4(r6)
   880e4:	388e983a 	sll	r7,r7,r2
   880e8:	2805883a 	mov	r2,r5
   880ec:	38c6b03a 	or	r3,r7,r3
   880f0:	30c00115 	stw	r3,4(r6)
   880f4:	003f9b06 	br	87f64 <__alt_data_end+0xfffb2834>
   880f8:	00c15504 	movi	r3,1364
   880fc:	18801a36 	bltu	r3,r2,88168 <_malloc_r+0x768>
   88100:	8804d4ba 	srli	r2,r17,18
   88104:	12001f44 	addi	r8,r2,125
   88108:	11c01f04 	addi	r7,r2,124
   8810c:	4209883a 	add	r4,r8,r8
   88110:	003e5906 	br	87a78 <__alt_data_end+0xfffb2348>
   88114:	ad400404 	addi	r21,r21,16
   88118:	003f1706 	br	87d78 <__alt_data_end+0xfffb2648>
   8811c:	00c01504 	movi	r3,84
   88120:	18802336 	bltu	r3,r2,881b0 <_malloc_r+0x7b0>
   88124:	3804d33a 	srli	r2,r7,12
   88128:	11401bc4 	addi	r5,r2,111
   8812c:	10c01b84 	addi	r3,r2,110
   88130:	294b883a 	add	r5,r5,r5
   88134:	003f7b06 	br	87f24 <__alt_data_end+0xfffb27f4>
   88138:	9c000217 	ldw	r16,8(r19)
   8813c:	00bfff04 	movi	r2,-4
   88140:	80c00117 	ldw	r3,4(r16)
   88144:	1886703a 	and	r3,r3,r2
   88148:	003f5306 	br	87e98 <__alt_data_end+0xfffb2768>
   8814c:	3083ffcc 	andi	r2,r6,4095
   88150:	103f181e 	bne	r2,zero,87db4 <__alt_data_end+0xfffb2684>
   88154:	99000217 	ldw	r4,8(r19)
   88158:	b545883a 	add	r2,r22,r21
   8815c:	10800054 	ori	r2,r2,1
   88160:	20800115 	stw	r2,4(r4)
   88164:	003f3e06 	br	87e60 <__alt_data_end+0xfffb2730>
   88168:	01003f84 	movi	r4,254
   8816c:	02001fc4 	movi	r8,127
   88170:	01c01f84 	movi	r7,126
   88174:	003e4006 	br	87a78 <__alt_data_end+0xfffb2348>
   88178:	008002b4 	movhi	r2,10
   8817c:	10b7b904 	addi	r2,r2,-8476
   88180:	15000015 	stw	r20,0(r2)
   88184:	003f1106 	br	87dcc <__alt_data_end+0xfffb269c>
   88188:	00800044 	movi	r2,1
   8818c:	002b883a 	mov	r21,zero
   88190:	003f1f06 	br	87e10 <__alt_data_end+0xfffb26e0>
   88194:	81400204 	addi	r5,r16,8
   88198:	9009883a 	mov	r4,r18
   8819c:	0086dc00 	call	86dc0 <_free_r>
   881a0:	008002b4 	movhi	r2,10
   881a4:	109eba04 	addi	r2,r2,31464
   881a8:	10c00017 	ldw	r3,0(r2)
   881ac:	003f2c06 	br	87e60 <__alt_data_end+0xfffb2730>
   881b0:	00c05504 	movi	r3,340
   881b4:	18800536 	bltu	r3,r2,881cc <_malloc_r+0x7cc>
   881b8:	3804d3fa 	srli	r2,r7,15
   881bc:	11401e04 	addi	r5,r2,120
   881c0:	10c01dc4 	addi	r3,r2,119
   881c4:	294b883a 	add	r5,r5,r5
   881c8:	003f5606 	br	87f24 <__alt_data_end+0xfffb27f4>
   881cc:	00c15504 	movi	r3,1364
   881d0:	18800536 	bltu	r3,r2,881e8 <_malloc_r+0x7e8>
   881d4:	3804d4ba 	srli	r2,r7,18
   881d8:	11401f44 	addi	r5,r2,125
   881dc:	10c01f04 	addi	r3,r2,124
   881e0:	294b883a 	add	r5,r5,r5
   881e4:	003f4f06 	br	87f24 <__alt_data_end+0xfffb27f4>
   881e8:	01403f84 	movi	r5,254
   881ec:	00c01f84 	movi	r3,126
   881f0:	003f4c06 	br	87f24 <__alt_data_end+0xfffb27f4>
   881f4:	98800117 	ldw	r2,4(r19)
   881f8:	003fa006 	br	8807c <__alt_data_end+0xfffb294c>
   881fc:	8808d0fa 	srli	r4,r17,3
   88200:	20800044 	addi	r2,r4,1
   88204:	1085883a 	add	r2,r2,r2
   88208:	003e9006 	br	87c4c <__alt_data_end+0xfffb251c>

0008820c <memset>:
   8820c:	20c000cc 	andi	r3,r4,3
   88210:	2005883a 	mov	r2,r4
   88214:	18004426 	beq	r3,zero,88328 <memset+0x11c>
   88218:	31ffffc4 	addi	r7,r6,-1
   8821c:	30004026 	beq	r6,zero,88320 <memset+0x114>
   88220:	2813883a 	mov	r9,r5
   88224:	200d883a 	mov	r6,r4
   88228:	2007883a 	mov	r3,r4
   8822c:	00000406 	br	88240 <memset+0x34>
   88230:	3a3fffc4 	addi	r8,r7,-1
   88234:	31800044 	addi	r6,r6,1
   88238:	38003926 	beq	r7,zero,88320 <memset+0x114>
   8823c:	400f883a 	mov	r7,r8
   88240:	18c00044 	addi	r3,r3,1
   88244:	32400005 	stb	r9,0(r6)
   88248:	1a0000cc 	andi	r8,r3,3
   8824c:	403ff81e 	bne	r8,zero,88230 <__alt_data_end+0xfffb2b00>
   88250:	010000c4 	movi	r4,3
   88254:	21c02d2e 	bgeu	r4,r7,8830c <memset+0x100>
   88258:	29003fcc 	andi	r4,r5,255
   8825c:	200c923a 	slli	r6,r4,8
   88260:	3108b03a 	or	r4,r6,r4
   88264:	200c943a 	slli	r6,r4,16
   88268:	218cb03a 	or	r6,r4,r6
   8826c:	010003c4 	movi	r4,15
   88270:	21c0182e 	bgeu	r4,r7,882d4 <memset+0xc8>
   88274:	3b3ffc04 	addi	r12,r7,-16
   88278:	6018d13a 	srli	r12,r12,4
   8827c:	1a000104 	addi	r8,r3,4
   88280:	1ac00204 	addi	r11,r3,8
   88284:	6008913a 	slli	r4,r12,4
   88288:	1a800304 	addi	r10,r3,12
   8828c:	1813883a 	mov	r9,r3
   88290:	21000504 	addi	r4,r4,20
   88294:	1909883a 	add	r4,r3,r4
   88298:	49800015 	stw	r6,0(r9)
   8829c:	41800015 	stw	r6,0(r8)
   882a0:	59800015 	stw	r6,0(r11)
   882a4:	51800015 	stw	r6,0(r10)
   882a8:	42000404 	addi	r8,r8,16
   882ac:	4a400404 	addi	r9,r9,16
   882b0:	5ac00404 	addi	r11,r11,16
   882b4:	52800404 	addi	r10,r10,16
   882b8:	413ff71e 	bne	r8,r4,88298 <__alt_data_end+0xfffb2b68>
   882bc:	63000044 	addi	r12,r12,1
   882c0:	6018913a 	slli	r12,r12,4
   882c4:	39c003cc 	andi	r7,r7,15
   882c8:	010000c4 	movi	r4,3
   882cc:	1b07883a 	add	r3,r3,r12
   882d0:	21c00e2e 	bgeu	r4,r7,8830c <memset+0x100>
   882d4:	1813883a 	mov	r9,r3
   882d8:	3811883a 	mov	r8,r7
   882dc:	010000c4 	movi	r4,3
   882e0:	49800015 	stw	r6,0(r9)
   882e4:	423fff04 	addi	r8,r8,-4
   882e8:	4a400104 	addi	r9,r9,4
   882ec:	223ffc36 	bltu	r4,r8,882e0 <__alt_data_end+0xfffb2bb0>
   882f0:	393fff04 	addi	r4,r7,-4
   882f4:	2008d0ba 	srli	r4,r4,2
   882f8:	39c000cc 	andi	r7,r7,3
   882fc:	21000044 	addi	r4,r4,1
   88300:	2109883a 	add	r4,r4,r4
   88304:	2109883a 	add	r4,r4,r4
   88308:	1907883a 	add	r3,r3,r4
   8830c:	38000526 	beq	r7,zero,88324 <memset+0x118>
   88310:	19cf883a 	add	r7,r3,r7
   88314:	19400005 	stb	r5,0(r3)
   88318:	18c00044 	addi	r3,r3,1
   8831c:	38fffd1e 	bne	r7,r3,88314 <__alt_data_end+0xfffb2be4>
   88320:	f800283a 	ret
   88324:	f800283a 	ret
   88328:	2007883a 	mov	r3,r4
   8832c:	300f883a 	mov	r7,r6
   88330:	003fc706 	br	88250 <__alt_data_end+0xfffb2b20>

00088334 <_open_r>:
   88334:	defffd04 	addi	sp,sp,-12
   88338:	2805883a 	mov	r2,r5
   8833c:	dc000015 	stw	r16,0(sp)
   88340:	040002b4 	movhi	r16,10
   88344:	dc400115 	stw	r17,4(sp)
   88348:	300b883a 	mov	r5,r6
   8834c:	841eac04 	addi	r16,r16,31408
   88350:	2023883a 	mov	r17,r4
   88354:	380d883a 	mov	r6,r7
   88358:	1009883a 	mov	r4,r2
   8835c:	dfc00215 	stw	ra,8(sp)
   88360:	80000015 	stw	zero,0(r16)
   88364:	0091ac80 	call	91ac8 <open>
   88368:	00ffffc4 	movi	r3,-1
   8836c:	10c00526 	beq	r2,r3,88384 <_open_r+0x50>
   88370:	dfc00217 	ldw	ra,8(sp)
   88374:	dc400117 	ldw	r17,4(sp)
   88378:	dc000017 	ldw	r16,0(sp)
   8837c:	dec00304 	addi	sp,sp,12
   88380:	f800283a 	ret
   88384:	80c00017 	ldw	r3,0(r16)
   88388:	183ff926 	beq	r3,zero,88370 <__alt_data_end+0xfffb2c40>
   8838c:	88c00015 	stw	r3,0(r17)
   88390:	003ff706 	br	88370 <__alt_data_end+0xfffb2c40>

00088394 <_printf_r>:
   88394:	defffd04 	addi	sp,sp,-12
   88398:	2805883a 	mov	r2,r5
   8839c:	dfc00015 	stw	ra,0(sp)
   883a0:	d9800115 	stw	r6,4(sp)
   883a4:	d9c00215 	stw	r7,8(sp)
   883a8:	21400217 	ldw	r5,8(r4)
   883ac:	d9c00104 	addi	r7,sp,4
   883b0:	100d883a 	mov	r6,r2
   883b4:	00888ec0 	call	888ec <___vfprintf_internal_r>
   883b8:	dfc00017 	ldw	ra,0(sp)
   883bc:	dec00304 	addi	sp,sp,12
   883c0:	f800283a 	ret

000883c4 <printf>:
   883c4:	defffc04 	addi	sp,sp,-16
   883c8:	dfc00015 	stw	ra,0(sp)
   883cc:	d9400115 	stw	r5,4(sp)
   883d0:	d9800215 	stw	r6,8(sp)
   883d4:	d9c00315 	stw	r7,12(sp)
   883d8:	008002b4 	movhi	r2,10
   883dc:	10b7b804 	addi	r2,r2,-8480
   883e0:	10800017 	ldw	r2,0(r2)
   883e4:	200b883a 	mov	r5,r4
   883e8:	d9800104 	addi	r6,sp,4
   883ec:	11000217 	ldw	r4,8(r2)
   883f0:	008abc80 	call	8abc8 <__vfprintf_internal>
   883f4:	dfc00017 	ldw	ra,0(sp)
   883f8:	dec00404 	addi	sp,sp,16
   883fc:	f800283a 	ret

00088400 <_puts_r>:
   88400:	defff604 	addi	sp,sp,-40
   88404:	dc000715 	stw	r16,28(sp)
   88408:	2021883a 	mov	r16,r4
   8840c:	2809883a 	mov	r4,r5
   88410:	dc400815 	stw	r17,32(sp)
   88414:	dfc00915 	stw	ra,36(sp)
   88418:	2823883a 	mov	r17,r5
   8841c:	00888540 	call	88854 <strlen>
   88420:	10c00044 	addi	r3,r2,1
   88424:	d8800115 	stw	r2,4(sp)
   88428:	00800274 	movhi	r2,9
   8842c:	10906304 	addi	r2,r2,16780
   88430:	d8800215 	stw	r2,8(sp)
   88434:	00800044 	movi	r2,1
   88438:	d8800315 	stw	r2,12(sp)
   8843c:	00800084 	movi	r2,2
   88440:	dc400015 	stw	r17,0(sp)
   88444:	d8c00615 	stw	r3,24(sp)
   88448:	dec00415 	stw	sp,16(sp)
   8844c:	d8800515 	stw	r2,20(sp)
   88450:	80000226 	beq	r16,zero,8845c <_puts_r+0x5c>
   88454:	80800e17 	ldw	r2,56(r16)
   88458:	10001426 	beq	r2,zero,884ac <_puts_r+0xac>
   8845c:	81400217 	ldw	r5,8(r16)
   88460:	2880030b 	ldhu	r2,12(r5)
   88464:	10c8000c 	andi	r3,r2,8192
   88468:	1800061e 	bne	r3,zero,88484 <_puts_r+0x84>
   8846c:	29001917 	ldw	r4,100(r5)
   88470:	00f7ffc4 	movi	r3,-8193
   88474:	10880014 	ori	r2,r2,8192
   88478:	20c6703a 	and	r3,r4,r3
   8847c:	2880030d 	sth	r2,12(r5)
   88480:	28c01915 	stw	r3,100(r5)
   88484:	d9800404 	addi	r6,sp,16
   88488:	8009883a 	mov	r4,r16
   8848c:	008c8040 	call	8c804 <__sfvwrite_r>
   88490:	1000091e 	bne	r2,zero,884b8 <_puts_r+0xb8>
   88494:	00800284 	movi	r2,10
   88498:	dfc00917 	ldw	ra,36(sp)
   8849c:	dc400817 	ldw	r17,32(sp)
   884a0:	dc000717 	ldw	r16,28(sp)
   884a4:	dec00a04 	addi	sp,sp,40
   884a8:	f800283a 	ret
   884ac:	8009883a 	mov	r4,r16
   884b0:	0086b400 	call	86b40 <__sinit>
   884b4:	003fe906 	br	8845c <__alt_data_end+0xfffb2d2c>
   884b8:	00bfffc4 	movi	r2,-1
   884bc:	003ff606 	br	88498 <__alt_data_end+0xfffb2d68>

000884c0 <puts>:
   884c0:	008002b4 	movhi	r2,10
   884c4:	10b7b804 	addi	r2,r2,-8480
   884c8:	200b883a 	mov	r5,r4
   884cc:	11000017 	ldw	r4,0(r2)
   884d0:	00884001 	jmpi	88400 <_puts_r>

000884d4 <lflush>:
   884d4:	2080030b 	ldhu	r2,12(r4)
   884d8:	00c00244 	movi	r3,9
   884dc:	1080024c 	andi	r2,r2,9
   884e0:	10c00226 	beq	r2,r3,884ec <lflush+0x18>
   884e4:	0005883a 	mov	r2,zero
   884e8:	f800283a 	ret
   884ec:	00867b01 	jmpi	867b0 <fflush>

000884f0 <__srefill_r>:
   884f0:	defffc04 	addi	sp,sp,-16
   884f4:	dc400115 	stw	r17,4(sp)
   884f8:	dc000015 	stw	r16,0(sp)
   884fc:	dfc00315 	stw	ra,12(sp)
   88500:	dc800215 	stw	r18,8(sp)
   88504:	2023883a 	mov	r17,r4
   88508:	2821883a 	mov	r16,r5
   8850c:	20000226 	beq	r4,zero,88518 <__srefill_r+0x28>
   88510:	20800e17 	ldw	r2,56(r4)
   88514:	10003c26 	beq	r2,zero,88608 <__srefill_r+0x118>
   88518:	80c0030b 	ldhu	r3,12(r16)
   8851c:	1908000c 	andi	r4,r3,8192
   88520:	1805883a 	mov	r2,r3
   88524:	2000071e 	bne	r4,zero,88544 <__srefill_r+0x54>
   88528:	81001917 	ldw	r4,100(r16)
   8852c:	18880014 	ori	r2,r3,8192
   88530:	00f7ffc4 	movi	r3,-8193
   88534:	20c8703a 	and	r4,r4,r3
   88538:	8080030d 	sth	r2,12(r16)
   8853c:	1007883a 	mov	r3,r2
   88540:	81001915 	stw	r4,100(r16)
   88544:	80000115 	stw	zero,4(r16)
   88548:	1100080c 	andi	r4,r2,32
   8854c:	2000571e 	bne	r4,zero,886ac <__srefill_r+0x1bc>
   88550:	1100010c 	andi	r4,r2,4
   88554:	20001f26 	beq	r4,zero,885d4 <__srefill_r+0xe4>
   88558:	81400c17 	ldw	r5,48(r16)
   8855c:	28000826 	beq	r5,zero,88580 <__srefill_r+0x90>
   88560:	80801004 	addi	r2,r16,64
   88564:	28800226 	beq	r5,r2,88570 <__srefill_r+0x80>
   88568:	8809883a 	mov	r4,r17
   8856c:	0086dc00 	call	86dc0 <_free_r>
   88570:	80800f17 	ldw	r2,60(r16)
   88574:	80000c15 	stw	zero,48(r16)
   88578:	80800115 	stw	r2,4(r16)
   8857c:	1000391e 	bne	r2,zero,88664 <__srefill_r+0x174>
   88580:	80800417 	ldw	r2,16(r16)
   88584:	10004b26 	beq	r2,zero,886b4 <__srefill_r+0x1c4>
   88588:	8480030b 	ldhu	r18,12(r16)
   8858c:	908000cc 	andi	r2,r18,3
   88590:	10001f1e 	bne	r2,zero,88610 <__srefill_r+0x120>
   88594:	81800417 	ldw	r6,16(r16)
   88598:	80800817 	ldw	r2,32(r16)
   8859c:	81c00517 	ldw	r7,20(r16)
   885a0:	81400717 	ldw	r5,28(r16)
   885a4:	81800015 	stw	r6,0(r16)
   885a8:	8809883a 	mov	r4,r17
   885ac:	103ee83a 	callr	r2
   885b0:	80800115 	stw	r2,4(r16)
   885b4:	00800e0e 	bge	zero,r2,885f0 <__srefill_r+0x100>
   885b8:	0005883a 	mov	r2,zero
   885bc:	dfc00317 	ldw	ra,12(sp)
   885c0:	dc800217 	ldw	r18,8(sp)
   885c4:	dc400117 	ldw	r17,4(sp)
   885c8:	dc000017 	ldw	r16,0(sp)
   885cc:	dec00404 	addi	sp,sp,16
   885d0:	f800283a 	ret
   885d4:	1100040c 	andi	r4,r2,16
   885d8:	20003026 	beq	r4,zero,8869c <__srefill_r+0x1ac>
   885dc:	1080020c 	andi	r2,r2,8
   885e0:	1000241e 	bne	r2,zero,88674 <__srefill_r+0x184>
   885e4:	18c00114 	ori	r3,r3,4
   885e8:	80c0030d 	sth	r3,12(r16)
   885ec:	003fe406 	br	88580 <__alt_data_end+0xfffb2e50>
   885f0:	80c0030b 	ldhu	r3,12(r16)
   885f4:	1000161e 	bne	r2,zero,88650 <__srefill_r+0x160>
   885f8:	18c00814 	ori	r3,r3,32
   885fc:	00bfffc4 	movi	r2,-1
   88600:	80c0030d 	sth	r3,12(r16)
   88604:	003fed06 	br	885bc <__alt_data_end+0xfffb2e8c>
   88608:	0086b400 	call	86b40 <__sinit>
   8860c:	003fc206 	br	88518 <__alt_data_end+0xfffb2de8>
   88610:	008002b4 	movhi	r2,10
   88614:	10b7b704 	addi	r2,r2,-8484
   88618:	11000017 	ldw	r4,0(r2)
   8861c:	01400274 	movhi	r5,9
   88620:	00800044 	movi	r2,1
   88624:	29613504 	addi	r5,r5,-31532
   88628:	8080030d 	sth	r2,12(r16)
   8862c:	00875ac0 	call	875ac <_fwalk>
   88630:	00800244 	movi	r2,9
   88634:	8480030d 	sth	r18,12(r16)
   88638:	9480024c 	andi	r18,r18,9
   8863c:	90bfd51e 	bne	r18,r2,88594 <__alt_data_end+0xfffb2e64>
   88640:	800b883a 	mov	r5,r16
   88644:	8809883a 	mov	r4,r17
   88648:	00865380 	call	86538 <__sflush_r>
   8864c:	003fd106 	br	88594 <__alt_data_end+0xfffb2e64>
   88650:	18c01014 	ori	r3,r3,64
   88654:	80000115 	stw	zero,4(r16)
   88658:	00bfffc4 	movi	r2,-1
   8865c:	80c0030d 	sth	r3,12(r16)
   88660:	003fd606 	br	885bc <__alt_data_end+0xfffb2e8c>
   88664:	80c00e17 	ldw	r3,56(r16)
   88668:	0005883a 	mov	r2,zero
   8866c:	80c00015 	stw	r3,0(r16)
   88670:	003fd206 	br	885bc <__alt_data_end+0xfffb2e8c>
   88674:	800b883a 	mov	r5,r16
   88678:	8809883a 	mov	r4,r17
   8867c:	00867540 	call	86754 <_fflush_r>
   88680:	10000a1e 	bne	r2,zero,886ac <__srefill_r+0x1bc>
   88684:	8080030b 	ldhu	r2,12(r16)
   88688:	00fffdc4 	movi	r3,-9
   8868c:	80000215 	stw	zero,8(r16)
   88690:	1886703a 	and	r3,r3,r2
   88694:	80000615 	stw	zero,24(r16)
   88698:	003fd206 	br	885e4 <__alt_data_end+0xfffb2eb4>
   8869c:	00800244 	movi	r2,9
   886a0:	88800015 	stw	r2,0(r17)
   886a4:	18c01014 	ori	r3,r3,64
   886a8:	80c0030d 	sth	r3,12(r16)
   886ac:	00bfffc4 	movi	r2,-1
   886b0:	003fc206 	br	885bc <__alt_data_end+0xfffb2e8c>
   886b4:	800b883a 	mov	r5,r16
   886b8:	8809883a 	mov	r4,r17
   886bc:	00878440 	call	87844 <__smakebuf_r>
   886c0:	003fb106 	br	88588 <__alt_data_end+0xfffb2e58>

000886c4 <_sbrk_r>:
   886c4:	defffd04 	addi	sp,sp,-12
   886c8:	dc000015 	stw	r16,0(sp)
   886cc:	040002b4 	movhi	r16,10
   886d0:	dc400115 	stw	r17,4(sp)
   886d4:	841eac04 	addi	r16,r16,31408
   886d8:	2023883a 	mov	r17,r4
   886dc:	2809883a 	mov	r4,r5
   886e0:	dfc00215 	stw	ra,8(sp)
   886e4:	80000015 	stw	zero,0(r16)
   886e8:	0091de80 	call	91de8 <sbrk>
   886ec:	00ffffc4 	movi	r3,-1
   886f0:	10c00526 	beq	r2,r3,88708 <_sbrk_r+0x44>
   886f4:	dfc00217 	ldw	ra,8(sp)
   886f8:	dc400117 	ldw	r17,4(sp)
   886fc:	dc000017 	ldw	r16,0(sp)
   88700:	dec00304 	addi	sp,sp,12
   88704:	f800283a 	ret
   88708:	80c00017 	ldw	r3,0(r16)
   8870c:	183ff926 	beq	r3,zero,886f4 <__alt_data_end+0xfffb2fc4>
   88710:	88c00015 	stw	r3,0(r17)
   88714:	003ff706 	br	886f4 <__alt_data_end+0xfffb2fc4>

00088718 <__sread>:
   88718:	defffe04 	addi	sp,sp,-8
   8871c:	dc000015 	stw	r16,0(sp)
   88720:	2821883a 	mov	r16,r5
   88724:	2940038f 	ldh	r5,14(r5)
   88728:	dfc00115 	stw	ra,4(sp)
   8872c:	008e29c0 	call	8e29c <_read_r>
   88730:	10000716 	blt	r2,zero,88750 <__sread+0x38>
   88734:	80c01417 	ldw	r3,80(r16)
   88738:	1887883a 	add	r3,r3,r2
   8873c:	80c01415 	stw	r3,80(r16)
   88740:	dfc00117 	ldw	ra,4(sp)
   88744:	dc000017 	ldw	r16,0(sp)
   88748:	dec00204 	addi	sp,sp,8
   8874c:	f800283a 	ret
   88750:	80c0030b 	ldhu	r3,12(r16)
   88754:	18fbffcc 	andi	r3,r3,61439
   88758:	80c0030d 	sth	r3,12(r16)
   8875c:	dfc00117 	ldw	ra,4(sp)
   88760:	dc000017 	ldw	r16,0(sp)
   88764:	dec00204 	addi	sp,sp,8
   88768:	f800283a 	ret

0008876c <__seofread>:
   8876c:	0005883a 	mov	r2,zero
   88770:	f800283a 	ret

00088774 <__swrite>:
   88774:	2880030b 	ldhu	r2,12(r5)
   88778:	defffb04 	addi	sp,sp,-20
   8877c:	dcc00315 	stw	r19,12(sp)
   88780:	dc800215 	stw	r18,8(sp)
   88784:	dc400115 	stw	r17,4(sp)
   88788:	dc000015 	stw	r16,0(sp)
   8878c:	dfc00415 	stw	ra,16(sp)
   88790:	10c0400c 	andi	r3,r2,256
   88794:	2821883a 	mov	r16,r5
   88798:	2023883a 	mov	r17,r4
   8879c:	3025883a 	mov	r18,r6
   887a0:	3827883a 	mov	r19,r7
   887a4:	18000526 	beq	r3,zero,887bc <__swrite+0x48>
   887a8:	2940038f 	ldh	r5,14(r5)
   887ac:	01c00084 	movi	r7,2
   887b0:	000d883a 	mov	r6,zero
   887b4:	008cdfc0 	call	8cdfc <_lseek_r>
   887b8:	8080030b 	ldhu	r2,12(r16)
   887bc:	8140038f 	ldh	r5,14(r16)
   887c0:	10bbffcc 	andi	r2,r2,61439
   887c4:	980f883a 	mov	r7,r19
   887c8:	900d883a 	mov	r6,r18
   887cc:	8809883a 	mov	r4,r17
   887d0:	8080030d 	sth	r2,12(r16)
   887d4:	dfc00417 	ldw	ra,16(sp)
   887d8:	dcc00317 	ldw	r19,12(sp)
   887dc:	dc800217 	ldw	r18,8(sp)
   887e0:	dc400117 	ldw	r17,4(sp)
   887e4:	dc000017 	ldw	r16,0(sp)
   887e8:	dec00504 	addi	sp,sp,20
   887ec:	008aca01 	jmpi	8aca0 <_write_r>

000887f0 <__sseek>:
   887f0:	defffe04 	addi	sp,sp,-8
   887f4:	dc000015 	stw	r16,0(sp)
   887f8:	2821883a 	mov	r16,r5
   887fc:	2940038f 	ldh	r5,14(r5)
   88800:	dfc00115 	stw	ra,4(sp)
   88804:	008cdfc0 	call	8cdfc <_lseek_r>
   88808:	00ffffc4 	movi	r3,-1
   8880c:	10c00826 	beq	r2,r3,88830 <__sseek+0x40>
   88810:	80c0030b 	ldhu	r3,12(r16)
   88814:	80801415 	stw	r2,80(r16)
   88818:	18c40014 	ori	r3,r3,4096
   8881c:	80c0030d 	sth	r3,12(r16)
   88820:	dfc00117 	ldw	ra,4(sp)
   88824:	dc000017 	ldw	r16,0(sp)
   88828:	dec00204 	addi	sp,sp,8
   8882c:	f800283a 	ret
   88830:	80c0030b 	ldhu	r3,12(r16)
   88834:	18fbffcc 	andi	r3,r3,61439
   88838:	80c0030d 	sth	r3,12(r16)
   8883c:	dfc00117 	ldw	ra,4(sp)
   88840:	dc000017 	ldw	r16,0(sp)
   88844:	dec00204 	addi	sp,sp,8
   88848:	f800283a 	ret

0008884c <__sclose>:
   8884c:	2940038f 	ldh	r5,14(r5)
   88850:	008ae541 	jmpi	8ae54 <_close_r>

00088854 <strlen>:
   88854:	208000cc 	andi	r2,r4,3
   88858:	10002026 	beq	r2,zero,888dc <strlen+0x88>
   8885c:	20800007 	ldb	r2,0(r4)
   88860:	10002026 	beq	r2,zero,888e4 <strlen+0x90>
   88864:	2005883a 	mov	r2,r4
   88868:	00000206 	br	88874 <strlen+0x20>
   8886c:	10c00007 	ldb	r3,0(r2)
   88870:	18001826 	beq	r3,zero,888d4 <strlen+0x80>
   88874:	10800044 	addi	r2,r2,1
   88878:	10c000cc 	andi	r3,r2,3
   8887c:	183ffb1e 	bne	r3,zero,8886c <__alt_data_end+0xfffb313c>
   88880:	10c00017 	ldw	r3,0(r2)
   88884:	01ffbff4 	movhi	r7,65279
   88888:	39ffbfc4 	addi	r7,r7,-257
   8888c:	00ca303a 	nor	r5,zero,r3
   88890:	01a02074 	movhi	r6,32897
   88894:	19c7883a 	add	r3,r3,r7
   88898:	31a02004 	addi	r6,r6,-32640
   8889c:	1946703a 	and	r3,r3,r5
   888a0:	1986703a 	and	r3,r3,r6
   888a4:	1800091e 	bne	r3,zero,888cc <strlen+0x78>
   888a8:	10800104 	addi	r2,r2,4
   888ac:	10c00017 	ldw	r3,0(r2)
   888b0:	19cb883a 	add	r5,r3,r7
   888b4:	00c6303a 	nor	r3,zero,r3
   888b8:	28c6703a 	and	r3,r5,r3
   888bc:	1986703a 	and	r3,r3,r6
   888c0:	183ff926 	beq	r3,zero,888a8 <__alt_data_end+0xfffb3178>
   888c4:	00000106 	br	888cc <strlen+0x78>
   888c8:	10800044 	addi	r2,r2,1
   888cc:	10c00007 	ldb	r3,0(r2)
   888d0:	183ffd1e 	bne	r3,zero,888c8 <__alt_data_end+0xfffb3198>
   888d4:	1105c83a 	sub	r2,r2,r4
   888d8:	f800283a 	ret
   888dc:	2005883a 	mov	r2,r4
   888e0:	003fe706 	br	88880 <__alt_data_end+0xfffb3150>
   888e4:	0005883a 	mov	r2,zero
   888e8:	f800283a 	ret

000888ec <___vfprintf_internal_r>:
   888ec:	deffb804 	addi	sp,sp,-288
   888f0:	dfc04715 	stw	ra,284(sp)
   888f4:	ddc04515 	stw	r23,276(sp)
   888f8:	dd404315 	stw	r21,268(sp)
   888fc:	d9002d15 	stw	r4,180(sp)
   88900:	282f883a 	mov	r23,r5
   88904:	302b883a 	mov	r21,r6
   88908:	d9c02e15 	stw	r7,184(sp)
   8890c:	df004615 	stw	fp,280(sp)
   88910:	dd804415 	stw	r22,272(sp)
   88914:	dd004215 	stw	r20,264(sp)
   88918:	dcc04115 	stw	r19,260(sp)
   8891c:	dc804015 	stw	r18,256(sp)
   88920:	dc403f15 	stw	r17,252(sp)
   88924:	dc003e15 	stw	r16,248(sp)
   88928:	008cdcc0 	call	8cdcc <_localeconv_r>
   8892c:	10800017 	ldw	r2,0(r2)
   88930:	1009883a 	mov	r4,r2
   88934:	d8803415 	stw	r2,208(sp)
   88938:	00888540 	call	88854 <strlen>
   8893c:	d8803715 	stw	r2,220(sp)
   88940:	d8802d17 	ldw	r2,180(sp)
   88944:	10000226 	beq	r2,zero,88950 <___vfprintf_internal_r+0x64>
   88948:	10800e17 	ldw	r2,56(r2)
   8894c:	1000fb26 	beq	r2,zero,88d3c <___vfprintf_internal_r+0x450>
   88950:	b880030b 	ldhu	r2,12(r23)
   88954:	10c8000c 	andi	r3,r2,8192
   88958:	1800061e 	bne	r3,zero,88974 <___vfprintf_internal_r+0x88>
   8895c:	b9001917 	ldw	r4,100(r23)
   88960:	00f7ffc4 	movi	r3,-8193
   88964:	10880014 	ori	r2,r2,8192
   88968:	20c6703a 	and	r3,r4,r3
   8896c:	b880030d 	sth	r2,12(r23)
   88970:	b8c01915 	stw	r3,100(r23)
   88974:	10c0020c 	andi	r3,r2,8
   88978:	1800c326 	beq	r3,zero,88c88 <___vfprintf_internal_r+0x39c>
   8897c:	b8c00417 	ldw	r3,16(r23)
   88980:	1800c126 	beq	r3,zero,88c88 <___vfprintf_internal_r+0x39c>
   88984:	1080068c 	andi	r2,r2,26
   88988:	00c00284 	movi	r3,10
   8898c:	10c0c626 	beq	r2,r3,88ca8 <___vfprintf_internal_r+0x3bc>
   88990:	d8c00404 	addi	r3,sp,16
   88994:	05000274 	movhi	r20,9
   88998:	d9001e04 	addi	r4,sp,120
   8899c:	a5107484 	addi	r20,r20,16850
   889a0:	d8c01e15 	stw	r3,120(sp)
   889a4:	d8002015 	stw	zero,128(sp)
   889a8:	d8001f15 	stw	zero,124(sp)
   889ac:	d8003315 	stw	zero,204(sp)
   889b0:	d8003615 	stw	zero,216(sp)
   889b4:	d8003815 	stw	zero,224(sp)
   889b8:	1811883a 	mov	r8,r3
   889bc:	d8003915 	stw	zero,228(sp)
   889c0:	d8003a15 	stw	zero,232(sp)
   889c4:	d8002f15 	stw	zero,188(sp)
   889c8:	d9002815 	stw	r4,160(sp)
   889cc:	a8800007 	ldb	r2,0(r21)
   889d0:	10028b26 	beq	r2,zero,89400 <___vfprintf_internal_r+0xb14>
   889d4:	00c00944 	movi	r3,37
   889d8:	a823883a 	mov	r17,r21
   889dc:	10c0021e 	bne	r2,r3,889e8 <___vfprintf_internal_r+0xfc>
   889e0:	00001406 	br	88a34 <___vfprintf_internal_r+0x148>
   889e4:	10c00326 	beq	r2,r3,889f4 <___vfprintf_internal_r+0x108>
   889e8:	8c400044 	addi	r17,r17,1
   889ec:	88800007 	ldb	r2,0(r17)
   889f0:	103ffc1e 	bne	r2,zero,889e4 <__alt_data_end+0xfffb32b4>
   889f4:	8d61c83a 	sub	r16,r17,r21
   889f8:	80000e26 	beq	r16,zero,88a34 <___vfprintf_internal_r+0x148>
   889fc:	d8c02017 	ldw	r3,128(sp)
   88a00:	d8801f17 	ldw	r2,124(sp)
   88a04:	45400015 	stw	r21,0(r8)
   88a08:	1c07883a 	add	r3,r3,r16
   88a0c:	10800044 	addi	r2,r2,1
   88a10:	d8c02015 	stw	r3,128(sp)
   88a14:	44000115 	stw	r16,4(r8)
   88a18:	d8801f15 	stw	r2,124(sp)
   88a1c:	00c001c4 	movi	r3,7
   88a20:	1880a916 	blt	r3,r2,88cc8 <___vfprintf_internal_r+0x3dc>
   88a24:	42000204 	addi	r8,r8,8
   88a28:	d9402f17 	ldw	r5,188(sp)
   88a2c:	2c0b883a 	add	r5,r5,r16
   88a30:	d9402f15 	stw	r5,188(sp)
   88a34:	88800007 	ldb	r2,0(r17)
   88a38:	1000aa26 	beq	r2,zero,88ce4 <___vfprintf_internal_r+0x3f8>
   88a3c:	8d400044 	addi	r21,r17,1
   88a40:	8c400047 	ldb	r17,1(r17)
   88a44:	0021883a 	mov	r16,zero
   88a48:	00bfffc4 	movi	r2,-1
   88a4c:	0025883a 	mov	r18,zero
   88a50:	dc002905 	stb	r16,164(sp)
   88a54:	d8002785 	stb	zero,158(sp)
   88a58:	d8002b05 	stb	zero,172(sp)
   88a5c:	d8802a15 	stw	r2,168(sp)
   88a60:	d8003115 	stw	zero,196(sp)
   88a64:	04c01604 	movi	r19,88
   88a68:	05800244 	movi	r22,9
   88a6c:	9021883a 	mov	r16,r18
   88a70:	4039883a 	mov	fp,r8
   88a74:	ad400044 	addi	r21,r21,1
   88a78:	88bff804 	addi	r2,r17,-32
   88a7c:	98833236 	bltu	r19,r2,89748 <___vfprintf_internal_r+0xe5c>
   88a80:	100490ba 	slli	r2,r2,2
   88a84:	00c00274 	movhi	r3,9
   88a88:	18e2a604 	addi	r3,r3,-30056
   88a8c:	10c5883a 	add	r2,r2,r3
   88a90:	10800017 	ldw	r2,0(r2)
   88a94:	1000683a 	jmp	r2
   88a98:	00089640 	call	8964 <__alt_mem_onchip_memory2_0-0x7769c>
   88a9c:	00089748 	cmpgei	zero,zero,8797
   88aa0:	00089748 	cmpgei	zero,zero,8797
   88aa4:	00089660 	cmpeqi	zero,zero,8793
   88aa8:	00089748 	cmpgei	zero,zero,8797
   88aac:	00089748 	cmpgei	zero,zero,8797
   88ab0:	00089748 	cmpgei	zero,zero,8797
   88ab4:	00089748 	cmpgei	zero,zero,8797
   88ab8:	00089748 	cmpgei	zero,zero,8797
   88abc:	00089748 	cmpgei	zero,zero,8797
   88ac0:	00088d48 	cmpgei	zero,zero,8757
   88ac4:	00089550 	cmplti	zero,zero,8789
   88ac8:	00089748 	cmpgei	zero,zero,8797
   88acc:	00088c0c 	andi	zero,zero,8752
   88ad0:	00088d6c 	andhi	zero,zero,8757
   88ad4:	00089748 	cmpgei	zero,zero,8797
   88ad8:	00088dbc 	xorhi	zero,zero,8758
   88adc:	00088dc8 	cmpgei	zero,zero,8759
   88ae0:	00088dc8 	cmpgei	zero,zero,8759
   88ae4:	00088dc8 	cmpgei	zero,zero,8759
   88ae8:	00088dc8 	cmpgei	zero,zero,8759
   88aec:	00088dc8 	cmpgei	zero,zero,8759
   88af0:	00088dc8 	cmpgei	zero,zero,8759
   88af4:	00088dc8 	cmpgei	zero,zero,8759
   88af8:	00088dc8 	cmpgei	zero,zero,8759
   88afc:	00088dc8 	cmpgei	zero,zero,8759
   88b00:	00089748 	cmpgei	zero,zero,8797
   88b04:	00089748 	cmpgei	zero,zero,8797
   88b08:	00089748 	cmpgei	zero,zero,8797
   88b0c:	00089748 	cmpgei	zero,zero,8797
   88b10:	00089748 	cmpgei	zero,zero,8797
   88b14:	00089748 	cmpgei	zero,zero,8797
   88b18:	00089748 	cmpgei	zero,zero,8797
   88b1c:	00089748 	cmpgei	zero,zero,8797
   88b20:	00089748 	cmpgei	zero,zero,8797
   88b24:	00089748 	cmpgei	zero,zero,8797
   88b28:	00088e04 	movi	zero,8760
   88b2c:	00088ecc 	andi	zero,zero,8763
   88b30:	00089748 	cmpgei	zero,zero,8797
   88b34:	00088ecc 	andi	zero,zero,8763
   88b38:	00089748 	cmpgei	zero,zero,8797
   88b3c:	00089748 	cmpgei	zero,zero,8797
   88b40:	00089748 	cmpgei	zero,zero,8797
   88b44:	00089748 	cmpgei	zero,zero,8797
   88b48:	00088f78 	rdprs	zero,zero,8765
   88b4c:	00089748 	cmpgei	zero,zero,8797
   88b50:	00089748 	cmpgei	zero,zero,8797
   88b54:	00088f84 	movi	zero,8766
   88b58:	00089748 	cmpgei	zero,zero,8797
   88b5c:	00089748 	cmpgei	zero,zero,8797
   88b60:	00089748 	cmpgei	zero,zero,8797
   88b64:	00089748 	cmpgei	zero,zero,8797
   88b68:	00089748 	cmpgei	zero,zero,8797
   88b6c:	00089408 	cmpgei	zero,zero,8784
   88b70:	00089748 	cmpgei	zero,zero,8797
   88b74:	00089748 	cmpgei	zero,zero,8797
   88b78:	00089474 	movhi	zero,8785
   88b7c:	00089748 	cmpgei	zero,zero,8797
   88b80:	00089748 	cmpgei	zero,zero,8797
   88b84:	00089748 	cmpgei	zero,zero,8797
   88b88:	00089748 	cmpgei	zero,zero,8797
   88b8c:	00089748 	cmpgei	zero,zero,8797
   88b90:	00089748 	cmpgei	zero,zero,8797
   88b94:	00089748 	cmpgei	zero,zero,8797
   88b98:	00089748 	cmpgei	zero,zero,8797
   88b9c:	00089748 	cmpgei	zero,zero,8797
   88ba0:	00089748 	cmpgei	zero,zero,8797
   88ba4:	000896ec 	andhi	zero,zero,8795
   88ba8:	0008966c 	andhi	zero,zero,8793
   88bac:	00088ecc 	andi	zero,zero,8763
   88bb0:	00088ecc 	andi	zero,zero,8763
   88bb4:	00088ecc 	andi	zero,zero,8763
   88bb8:	0008968c 	andi	zero,zero,8794
   88bbc:	0008966c 	andhi	zero,zero,8793
   88bc0:	00089748 	cmpgei	zero,zero,8797
   88bc4:	00089748 	cmpgei	zero,zero,8797
   88bc8:	00089698 	cmpnei	zero,zero,8794
   88bcc:	00089748 	cmpgei	zero,zero,8797
   88bd0:	000896ac 	andhi	zero,zero,8794
   88bd4:	00089530 	cmpltui	zero,zero,8788
   88bd8:	00088c18 	cmpnei	zero,zero,8752
   88bdc:	00089568 	cmpgeui	zero,zero,8789
   88be0:	00089748 	cmpgei	zero,zero,8797
   88be4:	00089574 	movhi	zero,8789
   88be8:	00089748 	cmpgei	zero,zero,8797
   88bec:	000895d8 	cmpnei	zero,zero,8791
   88bf0:	00089748 	cmpgei	zero,zero,8797
   88bf4:	00089748 	cmpgei	zero,zero,8797
   88bf8:	000895f8 	rdprs	zero,zero,8791
   88bfc:	d8c03117 	ldw	r3,196(sp)
   88c00:	d8802e15 	stw	r2,184(sp)
   88c04:	00c7c83a 	sub	r3,zero,r3
   88c08:	d8c03115 	stw	r3,196(sp)
   88c0c:	84000114 	ori	r16,r16,4
   88c10:	ac400007 	ldb	r17,0(r21)
   88c14:	003f9706 	br	88a74 <__alt_data_end+0xfffb3344>
   88c18:	00800c04 	movi	r2,48
   88c1c:	d8802705 	stb	r2,156(sp)
   88c20:	00801e04 	movi	r2,120
   88c24:	d8802745 	stb	r2,157(sp)
   88c28:	d9002a17 	ldw	r4,168(sp)
   88c2c:	d8802e17 	ldw	r2,184(sp)
   88c30:	d8002785 	stb	zero,158(sp)
   88c34:	e011883a 	mov	r8,fp
   88c38:	10c00104 	addi	r3,r2,4
   88c3c:	14c00017 	ldw	r19,0(r2)
   88c40:	002d883a 	mov	r22,zero
   88c44:	80800094 	ori	r2,r16,2
   88c48:	2002ca16 	blt	r4,zero,89774 <___vfprintf_internal_r+0xe88>
   88c4c:	00bfdfc4 	movi	r2,-129
   88c50:	80a4703a 	and	r18,r16,r2
   88c54:	d8c02e15 	stw	r3,184(sp)
   88c58:	94800094 	ori	r18,r18,2
   88c5c:	9802b41e 	bne	r19,zero,89730 <___vfprintf_internal_r+0xe44>
   88c60:	01400274 	movhi	r5,9
   88c64:	29506d04 	addi	r5,r5,16820
   88c68:	d9403915 	stw	r5,228(sp)
   88c6c:	04401e04 	movi	r17,120
   88c70:	d8802a17 	ldw	r2,168(sp)
   88c74:	0039883a 	mov	fp,zero
   88c78:	1001fa26 	beq	r2,zero,89464 <___vfprintf_internal_r+0xb78>
   88c7c:	0027883a 	mov	r19,zero
   88c80:	002d883a 	mov	r22,zero
   88c84:	00021906 	br	894ec <___vfprintf_internal_r+0xc00>
   88c88:	d9002d17 	ldw	r4,180(sp)
   88c8c:	b80b883a 	mov	r5,r23
   88c90:	008ad000 	call	8ad00 <__swsetup_r>
   88c94:	1005dc1e 	bne	r2,zero,8a408 <___vfprintf_internal_r+0x1b1c>
   88c98:	b880030b 	ldhu	r2,12(r23)
   88c9c:	00c00284 	movi	r3,10
   88ca0:	1080068c 	andi	r2,r2,26
   88ca4:	10ff3a1e 	bne	r2,r3,88990 <__alt_data_end+0xfffb3260>
   88ca8:	b880038f 	ldh	r2,14(r23)
   88cac:	103f3816 	blt	r2,zero,88990 <__alt_data_end+0xfffb3260>
   88cb0:	d9c02e17 	ldw	r7,184(sp)
   88cb4:	d9002d17 	ldw	r4,180(sp)
   88cb8:	a80d883a 	mov	r6,r21
   88cbc:	b80b883a 	mov	r5,r23
   88cc0:	008abe40 	call	8abe4 <__sbprintf>
   88cc4:	00001106 	br	88d0c <___vfprintf_internal_r+0x420>
   88cc8:	d9002d17 	ldw	r4,180(sp)
   88ccc:	d9801e04 	addi	r6,sp,120
   88cd0:	b80b883a 	mov	r5,r23
   88cd4:	008eaac0 	call	8eaac <__sprint_r>
   88cd8:	1000081e 	bne	r2,zero,88cfc <___vfprintf_internal_r+0x410>
   88cdc:	da000404 	addi	r8,sp,16
   88ce0:	003f5106 	br	88a28 <__alt_data_end+0xfffb32f8>
   88ce4:	d8802017 	ldw	r2,128(sp)
   88ce8:	10000426 	beq	r2,zero,88cfc <___vfprintf_internal_r+0x410>
   88cec:	d9002d17 	ldw	r4,180(sp)
   88cf0:	d9801e04 	addi	r6,sp,120
   88cf4:	b80b883a 	mov	r5,r23
   88cf8:	008eaac0 	call	8eaac <__sprint_r>
   88cfc:	b880030b 	ldhu	r2,12(r23)
   88d00:	1080100c 	andi	r2,r2,64
   88d04:	1005c01e 	bne	r2,zero,8a408 <___vfprintf_internal_r+0x1b1c>
   88d08:	d8802f17 	ldw	r2,188(sp)
   88d0c:	dfc04717 	ldw	ra,284(sp)
   88d10:	df004617 	ldw	fp,280(sp)
   88d14:	ddc04517 	ldw	r23,276(sp)
   88d18:	dd804417 	ldw	r22,272(sp)
   88d1c:	dd404317 	ldw	r21,268(sp)
   88d20:	dd004217 	ldw	r20,264(sp)
   88d24:	dcc04117 	ldw	r19,260(sp)
   88d28:	dc804017 	ldw	r18,256(sp)
   88d2c:	dc403f17 	ldw	r17,252(sp)
   88d30:	dc003e17 	ldw	r16,248(sp)
   88d34:	dec04804 	addi	sp,sp,288
   88d38:	f800283a 	ret
   88d3c:	d9002d17 	ldw	r4,180(sp)
   88d40:	0086b400 	call	86b40 <__sinit>
   88d44:	003f0206 	br	88950 <__alt_data_end+0xfffb3220>
   88d48:	d9002e17 	ldw	r4,184(sp)
   88d4c:	d9402e17 	ldw	r5,184(sp)
   88d50:	21000017 	ldw	r4,0(r4)
   88d54:	28800104 	addi	r2,r5,4
   88d58:	d9003115 	stw	r4,196(sp)
   88d5c:	203fa716 	blt	r4,zero,88bfc <__alt_data_end+0xfffb34cc>
   88d60:	d8802e15 	stw	r2,184(sp)
   88d64:	ac400007 	ldb	r17,0(r21)
   88d68:	003f4206 	br	88a74 <__alt_data_end+0xfffb3344>
   88d6c:	ac400007 	ldb	r17,0(r21)
   88d70:	01000a84 	movi	r4,42
   88d74:	a8c00044 	addi	r3,r21,1
   88d78:	89075826 	beq	r17,r4,8aadc <___vfprintf_internal_r+0x21f0>
   88d7c:	8cbff404 	addi	r18,r17,-48
   88d80:	b486ae36 	bltu	r22,r18,8a83c <___vfprintf_internal_r+0x1f50>
   88d84:	0009883a 	mov	r4,zero
   88d88:	1823883a 	mov	r17,r3
   88d8c:	01400284 	movi	r5,10
   88d90:	0082a480 	call	82a48 <__mulsi3>
   88d94:	88c00007 	ldb	r3,0(r17)
   88d98:	1489883a 	add	r4,r2,r18
   88d9c:	8d400044 	addi	r21,r17,1
   88da0:	1cbff404 	addi	r18,r3,-48
   88da4:	a823883a 	mov	r17,r21
   88da8:	b4bff82e 	bgeu	r22,r18,88d8c <__alt_data_end+0xfffb365c>
   88dac:	1823883a 	mov	r17,r3
   88db0:	2005f616 	blt	r4,zero,8a58c <___vfprintf_internal_r+0x1ca0>
   88db4:	d9002a15 	stw	r4,168(sp)
   88db8:	003f2f06 	br	88a78 <__alt_data_end+0xfffb3348>
   88dbc:	84002014 	ori	r16,r16,128
   88dc0:	ac400007 	ldb	r17,0(r21)
   88dc4:	003f2b06 	br	88a74 <__alt_data_end+0xfffb3344>
   88dc8:	8cbff404 	addi	r18,r17,-48
   88dcc:	d8003115 	stw	zero,196(sp)
   88dd0:	0009883a 	mov	r4,zero
   88dd4:	a823883a 	mov	r17,r21
   88dd8:	01400284 	movi	r5,10
   88ddc:	0082a480 	call	82a48 <__mulsi3>
   88de0:	88c00007 	ldb	r3,0(r17)
   88de4:	9089883a 	add	r4,r18,r2
   88de8:	ad400044 	addi	r21,r21,1
   88dec:	1cbff404 	addi	r18,r3,-48
   88df0:	a823883a 	mov	r17,r21
   88df4:	b4bff82e 	bgeu	r22,r18,88dd8 <__alt_data_end+0xfffb36a8>
   88df8:	1823883a 	mov	r17,r3
   88dfc:	d9003115 	stw	r4,196(sp)
   88e00:	003f1d06 	br	88a78 <__alt_data_end+0xfffb3348>
   88e04:	8025883a 	mov	r18,r16
   88e08:	dc002903 	ldbu	r16,164(sp)
   88e0c:	e011883a 	mov	r8,fp
   88e10:	84003fcc 	andi	r16,r16,255
   88e14:	8007531e 	bne	r16,zero,8ab64 <___vfprintf_internal_r+0x2278>
   88e18:	94800414 	ori	r18,r18,16
   88e1c:	9080080c 	andi	r2,r18,32
   88e20:	1003a326 	beq	r2,zero,89cb0 <___vfprintf_internal_r+0x13c4>
   88e24:	d9002e17 	ldw	r4,184(sp)
   88e28:	20800117 	ldw	r2,4(r4)
   88e2c:	24c00017 	ldw	r19,0(r4)
   88e30:	21000204 	addi	r4,r4,8
   88e34:	d9002e15 	stw	r4,184(sp)
   88e38:	102d883a 	mov	r22,r2
   88e3c:	10047316 	blt	r2,zero,8a00c <___vfprintf_internal_r+0x1720>
   88e40:	d9002a17 	ldw	r4,168(sp)
   88e44:	df002783 	ldbu	fp,158(sp)
   88e48:	2003e416 	blt	r4,zero,89ddc <___vfprintf_internal_r+0x14f0>
   88e4c:	00ffdfc4 	movi	r3,-129
   88e50:	9d84b03a 	or	r2,r19,r22
   88e54:	90e4703a 	and	r18,r18,r3
   88e58:	10018026 	beq	r2,zero,8945c <___vfprintf_internal_r+0xb70>
   88e5c:	b003ab26 	beq	r22,zero,89d0c <___vfprintf_internal_r+0x1420>
   88e60:	dc402915 	stw	r17,164(sp)
   88e64:	dc001e04 	addi	r16,sp,120
   88e68:	b023883a 	mov	r17,r22
   88e6c:	402d883a 	mov	r22,r8
   88e70:	9809883a 	mov	r4,r19
   88e74:	880b883a 	mov	r5,r17
   88e78:	01800284 	movi	r6,10
   88e7c:	000f883a 	mov	r7,zero
   88e80:	0090cc80 	call	90cc8 <__umoddi3>
   88e84:	10800c04 	addi	r2,r2,48
   88e88:	843fffc4 	addi	r16,r16,-1
   88e8c:	9809883a 	mov	r4,r19
   88e90:	880b883a 	mov	r5,r17
   88e94:	80800005 	stb	r2,0(r16)
   88e98:	01800284 	movi	r6,10
   88e9c:	000f883a 	mov	r7,zero
   88ea0:	00906cc0 	call	906cc <__udivdi3>
   88ea4:	1027883a 	mov	r19,r2
   88ea8:	10c4b03a 	or	r2,r2,r3
   88eac:	1823883a 	mov	r17,r3
   88eb0:	103fef1e 	bne	r2,zero,88e70 <__alt_data_end+0xfffb3740>
   88eb4:	d8c02817 	ldw	r3,160(sp)
   88eb8:	dc402917 	ldw	r17,164(sp)
   88ebc:	b011883a 	mov	r8,r22
   88ec0:	1c07c83a 	sub	r3,r3,r16
   88ec4:	d8c02b15 	stw	r3,172(sp)
   88ec8:	00005f06 	br	89048 <___vfprintf_internal_r+0x75c>
   88ecc:	8025883a 	mov	r18,r16
   88ed0:	dc002903 	ldbu	r16,164(sp)
   88ed4:	e011883a 	mov	r8,fp
   88ed8:	84003fcc 	andi	r16,r16,255
   88edc:	80071e1e 	bne	r16,zero,8ab58 <___vfprintf_internal_r+0x226c>
   88ee0:	9080020c 	andi	r2,r18,8
   88ee4:	1004af26 	beq	r2,zero,8a1a4 <___vfprintf_internal_r+0x18b8>
   88ee8:	d9002e17 	ldw	r4,184(sp)
   88eec:	d9402e17 	ldw	r5,184(sp)
   88ef0:	d8802e17 	ldw	r2,184(sp)
   88ef4:	21000017 	ldw	r4,0(r4)
   88ef8:	29400117 	ldw	r5,4(r5)
   88efc:	10800204 	addi	r2,r2,8
   88f00:	d9003615 	stw	r4,216(sp)
   88f04:	d9403815 	stw	r5,224(sp)
   88f08:	d8802e15 	stw	r2,184(sp)
   88f0c:	d9003617 	ldw	r4,216(sp)
   88f10:	d9403817 	ldw	r5,224(sp)
   88f14:	da003d15 	stw	r8,244(sp)
   88f18:	04000044 	movi	r16,1
   88f1c:	008e8600 	call	8e860 <__fpclassifyd>
   88f20:	da003d17 	ldw	r8,244(sp)
   88f24:	1404441e 	bne	r2,r16,8a038 <___vfprintf_internal_r+0x174c>
   88f28:	d9003617 	ldw	r4,216(sp)
   88f2c:	d9403817 	ldw	r5,224(sp)
   88f30:	000d883a 	mov	r6,zero
   88f34:	000f883a 	mov	r7,zero
   88f38:	0084d500 	call	84d50 <__ledf2>
   88f3c:	da003d17 	ldw	r8,244(sp)
   88f40:	1005e316 	blt	r2,zero,8a6d0 <___vfprintf_internal_r+0x1de4>
   88f44:	df002783 	ldbu	fp,158(sp)
   88f48:	008011c4 	movi	r2,71
   88f4c:	1445580e 	bge	r2,r17,8a4b0 <___vfprintf_internal_r+0x1bc4>
   88f50:	04000274 	movhi	r16,9
   88f54:	84106504 	addi	r16,r16,16788
   88f58:	00c000c4 	movi	r3,3
   88f5c:	00bfdfc4 	movi	r2,-129
   88f60:	d8c02915 	stw	r3,164(sp)
   88f64:	90a4703a 	and	r18,r18,r2
   88f68:	d8c02b15 	stw	r3,172(sp)
   88f6c:	d8002a15 	stw	zero,168(sp)
   88f70:	d8003215 	stw	zero,200(sp)
   88f74:	00003a06 	br	89060 <___vfprintf_internal_r+0x774>
   88f78:	84000214 	ori	r16,r16,8
   88f7c:	ac400007 	ldb	r17,0(r21)
   88f80:	003ebc06 	br	88a74 <__alt_data_end+0xfffb3344>
   88f84:	8025883a 	mov	r18,r16
   88f88:	dc002903 	ldbu	r16,164(sp)
   88f8c:	e011883a 	mov	r8,fp
   88f90:	84003fcc 	andi	r16,r16,255
   88f94:	8007001e 	bne	r16,zero,8ab98 <___vfprintf_internal_r+0x22ac>
   88f98:	94800414 	ori	r18,r18,16
   88f9c:	9080080c 	andi	r2,r18,32
   88fa0:	1002fa26 	beq	r2,zero,89b8c <___vfprintf_internal_r+0x12a0>
   88fa4:	d9002e17 	ldw	r4,184(sp)
   88fa8:	d9402a17 	ldw	r5,168(sp)
   88fac:	d8002785 	stb	zero,158(sp)
   88fb0:	20800204 	addi	r2,r4,8
   88fb4:	24c00017 	ldw	r19,0(r4)
   88fb8:	25800117 	ldw	r22,4(r4)
   88fbc:	2804b116 	blt	r5,zero,8a284 <___vfprintf_internal_r+0x1998>
   88fc0:	013fdfc4 	movi	r4,-129
   88fc4:	9d86b03a 	or	r3,r19,r22
   88fc8:	d8802e15 	stw	r2,184(sp)
   88fcc:	9124703a 	and	r18,r18,r4
   88fd0:	1802fb1e 	bne	r3,zero,89bc0 <___vfprintf_internal_r+0x12d4>
   88fd4:	d8c02a17 	ldw	r3,168(sp)
   88fd8:	0039883a 	mov	fp,zero
   88fdc:	1805e526 	beq	r3,zero,8a774 <___vfprintf_internal_r+0x1e88>
   88fe0:	0027883a 	mov	r19,zero
   88fe4:	002d883a 	mov	r22,zero
   88fe8:	dc001e04 	addi	r16,sp,120
   88fec:	9806d0fa 	srli	r3,r19,3
   88ff0:	b008977a 	slli	r4,r22,29
   88ff4:	b02cd0fa 	srli	r22,r22,3
   88ff8:	9cc001cc 	andi	r19,r19,7
   88ffc:	98800c04 	addi	r2,r19,48
   89000:	843fffc4 	addi	r16,r16,-1
   89004:	20e6b03a 	or	r19,r4,r3
   89008:	80800005 	stb	r2,0(r16)
   8900c:	9d86b03a 	or	r3,r19,r22
   89010:	183ff61e 	bne	r3,zero,88fec <__alt_data_end+0xfffb38bc>
   89014:	90c0004c 	andi	r3,r18,1
   89018:	18014126 	beq	r3,zero,89520 <___vfprintf_internal_r+0xc34>
   8901c:	10803fcc 	andi	r2,r2,255
   89020:	1080201c 	xori	r2,r2,128
   89024:	10bfe004 	addi	r2,r2,-128
   89028:	00c00c04 	movi	r3,48
   8902c:	10c13c26 	beq	r2,r3,89520 <___vfprintf_internal_r+0xc34>
   89030:	80ffffc5 	stb	r3,-1(r16)
   89034:	d8c02817 	ldw	r3,160(sp)
   89038:	80bfffc4 	addi	r2,r16,-1
   8903c:	1021883a 	mov	r16,r2
   89040:	1887c83a 	sub	r3,r3,r2
   89044:	d8c02b15 	stw	r3,172(sp)
   89048:	d8802b17 	ldw	r2,172(sp)
   8904c:	d9002a17 	ldw	r4,168(sp)
   89050:	1100010e 	bge	r2,r4,89058 <___vfprintf_internal_r+0x76c>
   89054:	2005883a 	mov	r2,r4
   89058:	d8802915 	stw	r2,164(sp)
   8905c:	d8003215 	stw	zero,200(sp)
   89060:	e7003fcc 	andi	fp,fp,255
   89064:	e700201c 	xori	fp,fp,128
   89068:	e73fe004 	addi	fp,fp,-128
   8906c:	e0000326 	beq	fp,zero,8907c <___vfprintf_internal_r+0x790>
   89070:	d8c02917 	ldw	r3,164(sp)
   89074:	18c00044 	addi	r3,r3,1
   89078:	d8c02915 	stw	r3,164(sp)
   8907c:	90c0008c 	andi	r3,r18,2
   89080:	d8c02c15 	stw	r3,176(sp)
   89084:	18000326 	beq	r3,zero,89094 <___vfprintf_internal_r+0x7a8>
   89088:	d8c02917 	ldw	r3,164(sp)
   8908c:	18c00084 	addi	r3,r3,2
   89090:	d8c02915 	stw	r3,164(sp)
   89094:	90c0210c 	andi	r3,r18,132
   89098:	d8c03015 	stw	r3,192(sp)
   8909c:	1801c51e 	bne	r3,zero,897b4 <___vfprintf_internal_r+0xec8>
   890a0:	d9003117 	ldw	r4,196(sp)
   890a4:	d8c02917 	ldw	r3,164(sp)
   890a8:	20e7c83a 	sub	r19,r4,r3
   890ac:	04c1c10e 	bge	zero,r19,897b4 <___vfprintf_internal_r+0xec8>
   890b0:	02400404 	movi	r9,16
   890b4:	d8c02017 	ldw	r3,128(sp)
   890b8:	d8801f17 	ldw	r2,124(sp)
   890bc:	4cc52f0e 	bge	r9,r19,8a57c <___vfprintf_internal_r+0x1c90>
   890c0:	01400274 	movhi	r5,9
   890c4:	29507884 	addi	r5,r5,16866
   890c8:	dc403b15 	stw	r17,236(sp)
   890cc:	d9403515 	stw	r5,212(sp)
   890d0:	9823883a 	mov	r17,r19
   890d4:	482d883a 	mov	r22,r9
   890d8:	9027883a 	mov	r19,r18
   890dc:	070001c4 	movi	fp,7
   890e0:	8025883a 	mov	r18,r16
   890e4:	dc002d17 	ldw	r16,180(sp)
   890e8:	00000306 	br	890f8 <___vfprintf_internal_r+0x80c>
   890ec:	8c7ffc04 	addi	r17,r17,-16
   890f0:	42000204 	addi	r8,r8,8
   890f4:	b440130e 	bge	r22,r17,89144 <___vfprintf_internal_r+0x858>
   890f8:	01000274 	movhi	r4,9
   890fc:	18c00404 	addi	r3,r3,16
   89100:	10800044 	addi	r2,r2,1
   89104:	21107884 	addi	r4,r4,16866
   89108:	41000015 	stw	r4,0(r8)
   8910c:	45800115 	stw	r22,4(r8)
   89110:	d8c02015 	stw	r3,128(sp)
   89114:	d8801f15 	stw	r2,124(sp)
   89118:	e0bff40e 	bge	fp,r2,890ec <__alt_data_end+0xfffb39bc>
   8911c:	d9801e04 	addi	r6,sp,120
   89120:	b80b883a 	mov	r5,r23
   89124:	8009883a 	mov	r4,r16
   89128:	008eaac0 	call	8eaac <__sprint_r>
   8912c:	103ef31e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89130:	8c7ffc04 	addi	r17,r17,-16
   89134:	d8c02017 	ldw	r3,128(sp)
   89138:	d8801f17 	ldw	r2,124(sp)
   8913c:	da000404 	addi	r8,sp,16
   89140:	b47fed16 	blt	r22,r17,890f8 <__alt_data_end+0xfffb39c8>
   89144:	9021883a 	mov	r16,r18
   89148:	9825883a 	mov	r18,r19
   8914c:	8827883a 	mov	r19,r17
   89150:	dc403b17 	ldw	r17,236(sp)
   89154:	d9403517 	ldw	r5,212(sp)
   89158:	98c7883a 	add	r3,r19,r3
   8915c:	10800044 	addi	r2,r2,1
   89160:	41400015 	stw	r5,0(r8)
   89164:	44c00115 	stw	r19,4(r8)
   89168:	d8c02015 	stw	r3,128(sp)
   8916c:	d8801f15 	stw	r2,124(sp)
   89170:	010001c4 	movi	r4,7
   89174:	2082c516 	blt	r4,r2,89c8c <___vfprintf_internal_r+0x13a0>
   89178:	df002787 	ldb	fp,158(sp)
   8917c:	42000204 	addi	r8,r8,8
   89180:	e0000c26 	beq	fp,zero,891b4 <___vfprintf_internal_r+0x8c8>
   89184:	d8801f17 	ldw	r2,124(sp)
   89188:	d9002784 	addi	r4,sp,158
   8918c:	18c00044 	addi	r3,r3,1
   89190:	10800044 	addi	r2,r2,1
   89194:	41000015 	stw	r4,0(r8)
   89198:	01000044 	movi	r4,1
   8919c:	41000115 	stw	r4,4(r8)
   891a0:	d8c02015 	stw	r3,128(sp)
   891a4:	d8801f15 	stw	r2,124(sp)
   891a8:	010001c4 	movi	r4,7
   891ac:	20825e16 	blt	r4,r2,89b28 <___vfprintf_internal_r+0x123c>
   891b0:	42000204 	addi	r8,r8,8
   891b4:	d8802c17 	ldw	r2,176(sp)
   891b8:	10000c26 	beq	r2,zero,891ec <___vfprintf_internal_r+0x900>
   891bc:	d8801f17 	ldw	r2,124(sp)
   891c0:	d9002704 	addi	r4,sp,156
   891c4:	18c00084 	addi	r3,r3,2
   891c8:	10800044 	addi	r2,r2,1
   891cc:	41000015 	stw	r4,0(r8)
   891d0:	01000084 	movi	r4,2
   891d4:	41000115 	stw	r4,4(r8)
   891d8:	d8c02015 	stw	r3,128(sp)
   891dc:	d8801f15 	stw	r2,124(sp)
   891e0:	010001c4 	movi	r4,7
   891e4:	20825816 	blt	r4,r2,89b48 <___vfprintf_internal_r+0x125c>
   891e8:	42000204 	addi	r8,r8,8
   891ec:	d9003017 	ldw	r4,192(sp)
   891f0:	00802004 	movi	r2,128
   891f4:	2081bb26 	beq	r4,r2,898e4 <___vfprintf_internal_r+0xff8>
   891f8:	d9402a17 	ldw	r5,168(sp)
   891fc:	d8802b17 	ldw	r2,172(sp)
   89200:	28adc83a 	sub	r22,r5,r2
   89204:	0580310e 	bge	zero,r22,892cc <___vfprintf_internal_r+0x9e0>
   89208:	07000404 	movi	fp,16
   8920c:	d8801f17 	ldw	r2,124(sp)
   89210:	e584360e 	bge	fp,r22,8a2ec <___vfprintf_internal_r+0x1a00>
   89214:	01400274 	movhi	r5,9
   89218:	29507484 	addi	r5,r5,16850
   8921c:	dc402a15 	stw	r17,168(sp)
   89220:	d9402c15 	stw	r5,176(sp)
   89224:	b023883a 	mov	r17,r22
   89228:	04c001c4 	movi	r19,7
   8922c:	a82d883a 	mov	r22,r21
   89230:	902b883a 	mov	r21,r18
   89234:	8025883a 	mov	r18,r16
   89238:	dc002d17 	ldw	r16,180(sp)
   8923c:	00000306 	br	8924c <___vfprintf_internal_r+0x960>
   89240:	8c7ffc04 	addi	r17,r17,-16
   89244:	42000204 	addi	r8,r8,8
   89248:	e440110e 	bge	fp,r17,89290 <___vfprintf_internal_r+0x9a4>
   8924c:	18c00404 	addi	r3,r3,16
   89250:	10800044 	addi	r2,r2,1
   89254:	45000015 	stw	r20,0(r8)
   89258:	47000115 	stw	fp,4(r8)
   8925c:	d8c02015 	stw	r3,128(sp)
   89260:	d8801f15 	stw	r2,124(sp)
   89264:	98bff60e 	bge	r19,r2,89240 <__alt_data_end+0xfffb3b10>
   89268:	d9801e04 	addi	r6,sp,120
   8926c:	b80b883a 	mov	r5,r23
   89270:	8009883a 	mov	r4,r16
   89274:	008eaac0 	call	8eaac <__sprint_r>
   89278:	103ea01e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8927c:	8c7ffc04 	addi	r17,r17,-16
   89280:	d8c02017 	ldw	r3,128(sp)
   89284:	d8801f17 	ldw	r2,124(sp)
   89288:	da000404 	addi	r8,sp,16
   8928c:	e47fef16 	blt	fp,r17,8924c <__alt_data_end+0xfffb3b1c>
   89290:	9021883a 	mov	r16,r18
   89294:	a825883a 	mov	r18,r21
   89298:	b02b883a 	mov	r21,r22
   8929c:	882d883a 	mov	r22,r17
   892a0:	dc402a17 	ldw	r17,168(sp)
   892a4:	d9002c17 	ldw	r4,176(sp)
   892a8:	1d87883a 	add	r3,r3,r22
   892ac:	10800044 	addi	r2,r2,1
   892b0:	41000015 	stw	r4,0(r8)
   892b4:	45800115 	stw	r22,4(r8)
   892b8:	d8c02015 	stw	r3,128(sp)
   892bc:	d8801f15 	stw	r2,124(sp)
   892c0:	010001c4 	movi	r4,7
   892c4:	20821016 	blt	r4,r2,89b08 <___vfprintf_internal_r+0x121c>
   892c8:	42000204 	addi	r8,r8,8
   892cc:	9080400c 	andi	r2,r18,256
   892d0:	10013a1e 	bne	r2,zero,897bc <___vfprintf_internal_r+0xed0>
   892d4:	d9402b17 	ldw	r5,172(sp)
   892d8:	d8801f17 	ldw	r2,124(sp)
   892dc:	44000015 	stw	r16,0(r8)
   892e0:	1947883a 	add	r3,r3,r5
   892e4:	10800044 	addi	r2,r2,1
   892e8:	41400115 	stw	r5,4(r8)
   892ec:	d8c02015 	stw	r3,128(sp)
   892f0:	d8801f15 	stw	r2,124(sp)
   892f4:	010001c4 	movi	r4,7
   892f8:	2081f516 	blt	r4,r2,89ad0 <___vfprintf_internal_r+0x11e4>
   892fc:	42000204 	addi	r8,r8,8
   89300:	9480010c 	andi	r18,r18,4
   89304:	90003226 	beq	r18,zero,893d0 <___vfprintf_internal_r+0xae4>
   89308:	d9403117 	ldw	r5,196(sp)
   8930c:	d8802917 	ldw	r2,164(sp)
   89310:	28a1c83a 	sub	r16,r5,r2
   89314:	04002e0e 	bge	zero,r16,893d0 <___vfprintf_internal_r+0xae4>
   89318:	04400404 	movi	r17,16
   8931c:	d8801f17 	ldw	r2,124(sp)
   89320:	8c04c40e 	bge	r17,r16,8a634 <___vfprintf_internal_r+0x1d48>
   89324:	01400274 	movhi	r5,9
   89328:	29507884 	addi	r5,r5,16866
   8932c:	d9403515 	stw	r5,212(sp)
   89330:	048001c4 	movi	r18,7
   89334:	dcc02d17 	ldw	r19,180(sp)
   89338:	00000306 	br	89348 <___vfprintf_internal_r+0xa5c>
   8933c:	843ffc04 	addi	r16,r16,-16
   89340:	42000204 	addi	r8,r8,8
   89344:	8c00130e 	bge	r17,r16,89394 <___vfprintf_internal_r+0xaa8>
   89348:	01000274 	movhi	r4,9
   8934c:	18c00404 	addi	r3,r3,16
   89350:	10800044 	addi	r2,r2,1
   89354:	21107884 	addi	r4,r4,16866
   89358:	41000015 	stw	r4,0(r8)
   8935c:	44400115 	stw	r17,4(r8)
   89360:	d8c02015 	stw	r3,128(sp)
   89364:	d8801f15 	stw	r2,124(sp)
   89368:	90bff40e 	bge	r18,r2,8933c <__alt_data_end+0xfffb3c0c>
   8936c:	d9801e04 	addi	r6,sp,120
   89370:	b80b883a 	mov	r5,r23
   89374:	9809883a 	mov	r4,r19
   89378:	008eaac0 	call	8eaac <__sprint_r>
   8937c:	103e5f1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89380:	843ffc04 	addi	r16,r16,-16
   89384:	d8c02017 	ldw	r3,128(sp)
   89388:	d8801f17 	ldw	r2,124(sp)
   8938c:	da000404 	addi	r8,sp,16
   89390:	8c3fed16 	blt	r17,r16,89348 <__alt_data_end+0xfffb3c18>
   89394:	d9403517 	ldw	r5,212(sp)
   89398:	1c07883a 	add	r3,r3,r16
   8939c:	10800044 	addi	r2,r2,1
   893a0:	41400015 	stw	r5,0(r8)
   893a4:	44000115 	stw	r16,4(r8)
   893a8:	d8c02015 	stw	r3,128(sp)
   893ac:	d8801f15 	stw	r2,124(sp)
   893b0:	010001c4 	movi	r4,7
   893b4:	2080060e 	bge	r4,r2,893d0 <___vfprintf_internal_r+0xae4>
   893b8:	d9002d17 	ldw	r4,180(sp)
   893bc:	d9801e04 	addi	r6,sp,120
   893c0:	b80b883a 	mov	r5,r23
   893c4:	008eaac0 	call	8eaac <__sprint_r>
   893c8:	103e4c1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   893cc:	d8c02017 	ldw	r3,128(sp)
   893d0:	d8803117 	ldw	r2,196(sp)
   893d4:	d9002917 	ldw	r4,164(sp)
   893d8:	1100010e 	bge	r2,r4,893e0 <___vfprintf_internal_r+0xaf4>
   893dc:	2005883a 	mov	r2,r4
   893e0:	d9402f17 	ldw	r5,188(sp)
   893e4:	288b883a 	add	r5,r5,r2
   893e8:	d9402f15 	stw	r5,188(sp)
   893ec:	1801c01e 	bne	r3,zero,89af0 <___vfprintf_internal_r+0x1204>
   893f0:	a8800007 	ldb	r2,0(r21)
   893f4:	d8001f15 	stw	zero,124(sp)
   893f8:	da000404 	addi	r8,sp,16
   893fc:	103d751e 	bne	r2,zero,889d4 <__alt_data_end+0xfffb32a4>
   89400:	a823883a 	mov	r17,r21
   89404:	003d8b06 	br	88a34 <__alt_data_end+0xfffb3304>
   89408:	8025883a 	mov	r18,r16
   8940c:	dc002903 	ldbu	r16,164(sp)
   89410:	e011883a 	mov	r8,fp
   89414:	84003fcc 	andi	r16,r16,255
   89418:	8005e51e 	bne	r16,zero,8abb0 <___vfprintf_internal_r+0x22c4>
   8941c:	94800414 	ori	r18,r18,16
   89420:	9080080c 	andi	r2,r18,32
   89424:	10022b26 	beq	r2,zero,89cd4 <___vfprintf_internal_r+0x13e8>
   89428:	d9002e17 	ldw	r4,184(sp)
   8942c:	d9402a17 	ldw	r5,168(sp)
   89430:	d8002785 	stb	zero,158(sp)
   89434:	20c00204 	addi	r3,r4,8
   89438:	24c00017 	ldw	r19,0(r4)
   8943c:	25800117 	ldw	r22,4(r4)
   89440:	28042e16 	blt	r5,zero,8a4fc <___vfprintf_internal_r+0x1c10>
   89444:	013fdfc4 	movi	r4,-129
   89448:	9d84b03a 	or	r2,r19,r22
   8944c:	d8c02e15 	stw	r3,184(sp)
   89450:	9124703a 	and	r18,r18,r4
   89454:	0039883a 	mov	fp,zero
   89458:	103e801e 	bne	r2,zero,88e5c <__alt_data_end+0xfffb372c>
   8945c:	d9002a17 	ldw	r4,168(sp)
   89460:	2002e01e 	bne	r4,zero,89fe4 <___vfprintf_internal_r+0x16f8>
   89464:	d8002a15 	stw	zero,168(sp)
   89468:	d8002b15 	stw	zero,172(sp)
   8946c:	dc001e04 	addi	r16,sp,120
   89470:	003ef506 	br	89048 <__alt_data_end+0xfffb3918>
   89474:	8025883a 	mov	r18,r16
   89478:	dc002903 	ldbu	r16,164(sp)
   8947c:	e011883a 	mov	r8,fp
   89480:	84003fcc 	andi	r16,r16,255
   89484:	8005ba1e 	bne	r16,zero,8ab70 <___vfprintf_internal_r+0x2284>
   89488:	01000274 	movhi	r4,9
   8948c:	21106804 	addi	r4,r4,16800
   89490:	d9003915 	stw	r4,228(sp)
   89494:	9080080c 	andi	r2,r18,32
   89498:	10006126 	beq	r2,zero,89620 <___vfprintf_internal_r+0xd34>
   8949c:	d9402e17 	ldw	r5,184(sp)
   894a0:	2cc00017 	ldw	r19,0(r5)
   894a4:	2d800117 	ldw	r22,4(r5)
   894a8:	29400204 	addi	r5,r5,8
   894ac:	d9402e15 	stw	r5,184(sp)
   894b0:	9080004c 	andi	r2,r18,1
   894b4:	1001ac26 	beq	r2,zero,89b68 <___vfprintf_internal_r+0x127c>
   894b8:	9d84b03a 	or	r2,r19,r22
   894bc:	10038526 	beq	r2,zero,8a2d4 <___vfprintf_internal_r+0x19e8>
   894c0:	d8c02a17 	ldw	r3,168(sp)
   894c4:	00800c04 	movi	r2,48
   894c8:	d8802705 	stb	r2,156(sp)
   894cc:	dc402745 	stb	r17,157(sp)
   894d0:	d8002785 	stb	zero,158(sp)
   894d4:	90800094 	ori	r2,r18,2
   894d8:	18047916 	blt	r3,zero,8a6c0 <___vfprintf_internal_r+0x1dd4>
   894dc:	00bfdfc4 	movi	r2,-129
   894e0:	90a4703a 	and	r18,r18,r2
   894e4:	94800094 	ori	r18,r18,2
   894e8:	0039883a 	mov	fp,zero
   894ec:	d9003917 	ldw	r4,228(sp)
   894f0:	dc001e04 	addi	r16,sp,120
   894f4:	988003cc 	andi	r2,r19,15
   894f8:	b006973a 	slli	r3,r22,28
   894fc:	2085883a 	add	r2,r4,r2
   89500:	9826d13a 	srli	r19,r19,4
   89504:	10800003 	ldbu	r2,0(r2)
   89508:	b02cd13a 	srli	r22,r22,4
   8950c:	843fffc4 	addi	r16,r16,-1
   89510:	1ce6b03a 	or	r19,r3,r19
   89514:	80800005 	stb	r2,0(r16)
   89518:	9d84b03a 	or	r2,r19,r22
   8951c:	103ff51e 	bne	r2,zero,894f4 <__alt_data_end+0xfffb3dc4>
   89520:	d8c02817 	ldw	r3,160(sp)
   89524:	1c07c83a 	sub	r3,r3,r16
   89528:	d8c02b15 	stw	r3,172(sp)
   8952c:	003ec606 	br	89048 <__alt_data_end+0xfffb3918>
   89530:	8025883a 	mov	r18,r16
   89534:	dc002903 	ldbu	r16,164(sp)
   89538:	e011883a 	mov	r8,fp
   8953c:	84003fcc 	andi	r16,r16,255
   89540:	803e9626 	beq	r16,zero,88f9c <__alt_data_end+0xfffb386c>
   89544:	d8c02b03 	ldbu	r3,172(sp)
   89548:	d8c02785 	stb	r3,158(sp)
   8954c:	003e9306 	br	88f9c <__alt_data_end+0xfffb386c>
   89550:	00c00044 	movi	r3,1
   89554:	d8c02905 	stb	r3,164(sp)
   89558:	00c00ac4 	movi	r3,43
   8955c:	d8c02b05 	stb	r3,172(sp)
   89560:	ac400007 	ldb	r17,0(r21)
   89564:	003d4306 	br	88a74 <__alt_data_end+0xfffb3344>
   89568:	84000814 	ori	r16,r16,32
   8956c:	ac400007 	ldb	r17,0(r21)
   89570:	003d4006 	br	88a74 <__alt_data_end+0xfffb3344>
   89574:	d8802e17 	ldw	r2,184(sp)
   89578:	8025883a 	mov	r18,r16
   8957c:	d8002785 	stb	zero,158(sp)
   89580:	14000017 	ldw	r16,0(r2)
   89584:	e011883a 	mov	r8,fp
   89588:	14c00104 	addi	r19,r2,4
   8958c:	80042d26 	beq	r16,zero,8a644 <___vfprintf_internal_r+0x1d58>
   89590:	d8c02a17 	ldw	r3,168(sp)
   89594:	1803e416 	blt	r3,zero,8a528 <___vfprintf_internal_r+0x1c3c>
   89598:	180d883a 	mov	r6,r3
   8959c:	000b883a 	mov	r5,zero
   895a0:	8009883a 	mov	r4,r16
   895a4:	df003d15 	stw	fp,244(sp)
   895a8:	008ce5c0 	call	8ce5c <memchr>
   895ac:	da003d17 	ldw	r8,244(sp)
   895b0:	10046826 	beq	r2,zero,8a754 <___vfprintf_internal_r+0x1e68>
   895b4:	1405c83a 	sub	r2,r2,r16
   895b8:	d8802b15 	stw	r2,172(sp)
   895bc:	1003e016 	blt	r2,zero,8a540 <___vfprintf_internal_r+0x1c54>
   895c0:	df002783 	ldbu	fp,158(sp)
   895c4:	d8802915 	stw	r2,164(sp)
   895c8:	dcc02e15 	stw	r19,184(sp)
   895cc:	d8002a15 	stw	zero,168(sp)
   895d0:	d8003215 	stw	zero,200(sp)
   895d4:	003ea206 	br	89060 <__alt_data_end+0xfffb3930>
   895d8:	8025883a 	mov	r18,r16
   895dc:	dc002903 	ldbu	r16,164(sp)
   895e0:	e011883a 	mov	r8,fp
   895e4:	84003fcc 	andi	r16,r16,255
   895e8:	803f8d26 	beq	r16,zero,89420 <__alt_data_end+0xfffb3cf0>
   895ec:	d8c02b03 	ldbu	r3,172(sp)
   895f0:	d8c02785 	stb	r3,158(sp)
   895f4:	003f8a06 	br	89420 <__alt_data_end+0xfffb3cf0>
   895f8:	8025883a 	mov	r18,r16
   895fc:	dc002903 	ldbu	r16,164(sp)
   89600:	e011883a 	mov	r8,fp
   89604:	84003fcc 	andi	r16,r16,255
   89608:	8005661e 	bne	r16,zero,8aba4 <___vfprintf_internal_r+0x22b8>
   8960c:	01000274 	movhi	r4,9
   89610:	21106d04 	addi	r4,r4,16820
   89614:	d9003915 	stw	r4,228(sp)
   89618:	9080080c 	andi	r2,r18,32
   8961c:	103f9f1e 	bne	r2,zero,8949c <__alt_data_end+0xfffb3d6c>
   89620:	9080040c 	andi	r2,r18,16
   89624:	1002eb26 	beq	r2,zero,8a1d4 <___vfprintf_internal_r+0x18e8>
   89628:	d8802e17 	ldw	r2,184(sp)
   8962c:	002d883a 	mov	r22,zero
   89630:	14c00017 	ldw	r19,0(r2)
   89634:	10800104 	addi	r2,r2,4
   89638:	d8802e15 	stw	r2,184(sp)
   8963c:	003f9c06 	br	894b0 <__alt_data_end+0xfffb3d80>
   89640:	d8802b07 	ldb	r2,172(sp)
   89644:	1002e11e 	bne	r2,zero,8a1cc <___vfprintf_internal_r+0x18e0>
   89648:	00c00044 	movi	r3,1
   8964c:	d8c02905 	stb	r3,164(sp)
   89650:	00c00804 	movi	r3,32
   89654:	d8c02b05 	stb	r3,172(sp)
   89658:	ac400007 	ldb	r17,0(r21)
   8965c:	003d0506 	br	88a74 <__alt_data_end+0xfffb3344>
   89660:	84000054 	ori	r16,r16,1
   89664:	ac400007 	ldb	r17,0(r21)
   89668:	003d0206 	br	88a74 <__alt_data_end+0xfffb3344>
   8966c:	8025883a 	mov	r18,r16
   89670:	dc002903 	ldbu	r16,164(sp)
   89674:	e011883a 	mov	r8,fp
   89678:	84003fcc 	andi	r16,r16,255
   8967c:	803de726 	beq	r16,zero,88e1c <__alt_data_end+0xfffb36ec>
   89680:	d8c02b03 	ldbu	r3,172(sp)
   89684:	d8c02785 	stb	r3,158(sp)
   89688:	003de406 	br	88e1c <__alt_data_end+0xfffb36ec>
   8968c:	84001014 	ori	r16,r16,64
   89690:	ac400007 	ldb	r17,0(r21)
   89694:	003cf706 	br	88a74 <__alt_data_end+0xfffb3344>
   89698:	ac400007 	ldb	r17,0(r21)
   8969c:	00801b04 	movi	r2,108
   896a0:	88838f26 	beq	r17,r2,8a4e0 <___vfprintf_internal_r+0x1bf4>
   896a4:	84000414 	ori	r16,r16,16
   896a8:	003cf206 	br	88a74 <__alt_data_end+0xfffb3344>
   896ac:	8025883a 	mov	r18,r16
   896b0:	dc002903 	ldbu	r16,164(sp)
   896b4:	e011883a 	mov	r8,fp
   896b8:	84003fcc 	andi	r16,r16,255
   896bc:	80053f1e 	bne	r16,zero,8abbc <___vfprintf_internal_r+0x22d0>
   896c0:	9080080c 	andi	r2,r18,32
   896c4:	1002d226 	beq	r2,zero,8a210 <___vfprintf_internal_r+0x1924>
   896c8:	d9002e17 	ldw	r4,184(sp)
   896cc:	d9402f17 	ldw	r5,188(sp)
   896d0:	20800017 	ldw	r2,0(r4)
   896d4:	2807d7fa 	srai	r3,r5,31
   896d8:	21000104 	addi	r4,r4,4
   896dc:	d9002e15 	stw	r4,184(sp)
   896e0:	11400015 	stw	r5,0(r2)
   896e4:	10c00115 	stw	r3,4(r2)
   896e8:	003cb806 	br	889cc <__alt_data_end+0xfffb329c>
   896ec:	d8c02e17 	ldw	r3,184(sp)
   896f0:	d9002e17 	ldw	r4,184(sp)
   896f4:	8025883a 	mov	r18,r16
   896f8:	18800017 	ldw	r2,0(r3)
   896fc:	21000104 	addi	r4,r4,4
   89700:	00c00044 	movi	r3,1
   89704:	e011883a 	mov	r8,fp
   89708:	d8c02915 	stw	r3,164(sp)
   8970c:	d8002785 	stb	zero,158(sp)
   89710:	d8801405 	stb	r2,80(sp)
   89714:	d9002e15 	stw	r4,184(sp)
   89718:	d8c02b15 	stw	r3,172(sp)
   8971c:	d8002a15 	stw	zero,168(sp)
   89720:	d8003215 	stw	zero,200(sp)
   89724:	dc001404 	addi	r16,sp,80
   89728:	0039883a 	mov	fp,zero
   8972c:	003e5306 	br	8907c <__alt_data_end+0xfffb394c>
   89730:	01000274 	movhi	r4,9
   89734:	21106d04 	addi	r4,r4,16820
   89738:	0039883a 	mov	fp,zero
   8973c:	d9003915 	stw	r4,228(sp)
   89740:	04401e04 	movi	r17,120
   89744:	003f6906 	br	894ec <__alt_data_end+0xfffb3dbc>
   89748:	8025883a 	mov	r18,r16
   8974c:	dc002903 	ldbu	r16,164(sp)
   89750:	e011883a 	mov	r8,fp
   89754:	84003fcc 	andi	r16,r16,255
   89758:	8005081e 	bne	r16,zero,8ab7c <___vfprintf_internal_r+0x2290>
   8975c:	883d6126 	beq	r17,zero,88ce4 <__alt_data_end+0xfffb35b4>
   89760:	00c00044 	movi	r3,1
   89764:	d8c02915 	stw	r3,164(sp)
   89768:	dc401405 	stb	r17,80(sp)
   8976c:	d8002785 	stb	zero,158(sp)
   89770:	003fe906 	br	89718 <__alt_data_end+0xfffb3fe8>
   89774:	01400274 	movhi	r5,9
   89778:	29506d04 	addi	r5,r5,16820
   8977c:	d9403915 	stw	r5,228(sp)
   89780:	d8c02e15 	stw	r3,184(sp)
   89784:	1025883a 	mov	r18,r2
   89788:	04401e04 	movi	r17,120
   8978c:	9d84b03a 	or	r2,r19,r22
   89790:	1000fc1e 	bne	r2,zero,89b84 <___vfprintf_internal_r+0x1298>
   89794:	0039883a 	mov	fp,zero
   89798:	00800084 	movi	r2,2
   8979c:	10803fcc 	andi	r2,r2,255
   897a0:	00c00044 	movi	r3,1
   897a4:	10c20f26 	beq	r2,r3,89fe4 <___vfprintf_internal_r+0x16f8>
   897a8:	00c00084 	movi	r3,2
   897ac:	10fd3326 	beq	r2,r3,88c7c <__alt_data_end+0xfffb354c>
   897b0:	003e0b06 	br	88fe0 <__alt_data_end+0xfffb38b0>
   897b4:	d8c02017 	ldw	r3,128(sp)
   897b8:	003e7106 	br	89180 <__alt_data_end+0xfffb3a50>
   897bc:	00801944 	movi	r2,101
   897c0:	14407e0e 	bge	r2,r17,899bc <___vfprintf_internal_r+0x10d0>
   897c4:	d9003617 	ldw	r4,216(sp)
   897c8:	d9403817 	ldw	r5,224(sp)
   897cc:	000d883a 	mov	r6,zero
   897d0:	000f883a 	mov	r7,zero
   897d4:	d8c03c15 	stw	r3,240(sp)
   897d8:	da003d15 	stw	r8,244(sp)
   897dc:	009128c0 	call	9128c <__eqdf2>
   897e0:	d8c03c17 	ldw	r3,240(sp)
   897e4:	da003d17 	ldw	r8,244(sp)
   897e8:	1000f71e 	bne	r2,zero,89bc8 <___vfprintf_internal_r+0x12dc>
   897ec:	d8801f17 	ldw	r2,124(sp)
   897f0:	01000274 	movhi	r4,9
   897f4:	21107404 	addi	r4,r4,16848
   897f8:	18c00044 	addi	r3,r3,1
   897fc:	10800044 	addi	r2,r2,1
   89800:	41000015 	stw	r4,0(r8)
   89804:	01000044 	movi	r4,1
   89808:	41000115 	stw	r4,4(r8)
   8980c:	d8c02015 	stw	r3,128(sp)
   89810:	d8801f15 	stw	r2,124(sp)
   89814:	010001c4 	movi	r4,7
   89818:	2082b816 	blt	r4,r2,8a2fc <___vfprintf_internal_r+0x1a10>
   8981c:	42000204 	addi	r8,r8,8
   89820:	d8802617 	ldw	r2,152(sp)
   89824:	d9403317 	ldw	r5,204(sp)
   89828:	11400216 	blt	r2,r5,89834 <___vfprintf_internal_r+0xf48>
   8982c:	9080004c 	andi	r2,r18,1
   89830:	103eb326 	beq	r2,zero,89300 <__alt_data_end+0xfffb3bd0>
   89834:	d8803717 	ldw	r2,220(sp)
   89838:	d9003417 	ldw	r4,208(sp)
   8983c:	d9403717 	ldw	r5,220(sp)
   89840:	1887883a 	add	r3,r3,r2
   89844:	d8801f17 	ldw	r2,124(sp)
   89848:	41000015 	stw	r4,0(r8)
   8984c:	41400115 	stw	r5,4(r8)
   89850:	10800044 	addi	r2,r2,1
   89854:	d8c02015 	stw	r3,128(sp)
   89858:	d8801f15 	stw	r2,124(sp)
   8985c:	010001c4 	movi	r4,7
   89860:	20832916 	blt	r4,r2,8a508 <___vfprintf_internal_r+0x1c1c>
   89864:	42000204 	addi	r8,r8,8
   89868:	d8803317 	ldw	r2,204(sp)
   8986c:	143fffc4 	addi	r16,r2,-1
   89870:	043ea30e 	bge	zero,r16,89300 <__alt_data_end+0xfffb3bd0>
   89874:	04400404 	movi	r17,16
   89878:	d8801f17 	ldw	r2,124(sp)
   8987c:	8c00880e 	bge	r17,r16,89aa0 <___vfprintf_internal_r+0x11b4>
   89880:	01400274 	movhi	r5,9
   89884:	29507484 	addi	r5,r5,16850
   89888:	d9402c15 	stw	r5,176(sp)
   8988c:	058001c4 	movi	r22,7
   89890:	dcc02d17 	ldw	r19,180(sp)
   89894:	00000306 	br	898a4 <___vfprintf_internal_r+0xfb8>
   89898:	42000204 	addi	r8,r8,8
   8989c:	843ffc04 	addi	r16,r16,-16
   898a0:	8c00820e 	bge	r17,r16,89aac <___vfprintf_internal_r+0x11c0>
   898a4:	18c00404 	addi	r3,r3,16
   898a8:	10800044 	addi	r2,r2,1
   898ac:	45000015 	stw	r20,0(r8)
   898b0:	44400115 	stw	r17,4(r8)
   898b4:	d8c02015 	stw	r3,128(sp)
   898b8:	d8801f15 	stw	r2,124(sp)
   898bc:	b0bff60e 	bge	r22,r2,89898 <__alt_data_end+0xfffb4168>
   898c0:	d9801e04 	addi	r6,sp,120
   898c4:	b80b883a 	mov	r5,r23
   898c8:	9809883a 	mov	r4,r19
   898cc:	008eaac0 	call	8eaac <__sprint_r>
   898d0:	103d0a1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   898d4:	d8c02017 	ldw	r3,128(sp)
   898d8:	d8801f17 	ldw	r2,124(sp)
   898dc:	da000404 	addi	r8,sp,16
   898e0:	003fee06 	br	8989c <__alt_data_end+0xfffb416c>
   898e4:	d9403117 	ldw	r5,196(sp)
   898e8:	d8802917 	ldw	r2,164(sp)
   898ec:	28adc83a 	sub	r22,r5,r2
   898f0:	05be410e 	bge	zero,r22,891f8 <__alt_data_end+0xfffb3ac8>
   898f4:	07000404 	movi	fp,16
   898f8:	d8801f17 	ldw	r2,124(sp)
   898fc:	e5838f0e 	bge	fp,r22,8a73c <___vfprintf_internal_r+0x1e50>
   89900:	01400274 	movhi	r5,9
   89904:	29507484 	addi	r5,r5,16850
   89908:	dc403015 	stw	r17,192(sp)
   8990c:	d9402c15 	stw	r5,176(sp)
   89910:	b023883a 	mov	r17,r22
   89914:	04c001c4 	movi	r19,7
   89918:	a82d883a 	mov	r22,r21
   8991c:	902b883a 	mov	r21,r18
   89920:	8025883a 	mov	r18,r16
   89924:	dc002d17 	ldw	r16,180(sp)
   89928:	00000306 	br	89938 <___vfprintf_internal_r+0x104c>
   8992c:	8c7ffc04 	addi	r17,r17,-16
   89930:	42000204 	addi	r8,r8,8
   89934:	e440110e 	bge	fp,r17,8997c <___vfprintf_internal_r+0x1090>
   89938:	18c00404 	addi	r3,r3,16
   8993c:	10800044 	addi	r2,r2,1
   89940:	45000015 	stw	r20,0(r8)
   89944:	47000115 	stw	fp,4(r8)
   89948:	d8c02015 	stw	r3,128(sp)
   8994c:	d8801f15 	stw	r2,124(sp)
   89950:	98bff60e 	bge	r19,r2,8992c <__alt_data_end+0xfffb41fc>
   89954:	d9801e04 	addi	r6,sp,120
   89958:	b80b883a 	mov	r5,r23
   8995c:	8009883a 	mov	r4,r16
   89960:	008eaac0 	call	8eaac <__sprint_r>
   89964:	103ce51e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89968:	8c7ffc04 	addi	r17,r17,-16
   8996c:	d8c02017 	ldw	r3,128(sp)
   89970:	d8801f17 	ldw	r2,124(sp)
   89974:	da000404 	addi	r8,sp,16
   89978:	e47fef16 	blt	fp,r17,89938 <__alt_data_end+0xfffb4208>
   8997c:	9021883a 	mov	r16,r18
   89980:	a825883a 	mov	r18,r21
   89984:	b02b883a 	mov	r21,r22
   89988:	882d883a 	mov	r22,r17
   8998c:	dc403017 	ldw	r17,192(sp)
   89990:	d9002c17 	ldw	r4,176(sp)
   89994:	1d87883a 	add	r3,r3,r22
   89998:	10800044 	addi	r2,r2,1
   8999c:	41000015 	stw	r4,0(r8)
   899a0:	45800115 	stw	r22,4(r8)
   899a4:	d8c02015 	stw	r3,128(sp)
   899a8:	d8801f15 	stw	r2,124(sp)
   899ac:	010001c4 	movi	r4,7
   899b0:	20818e16 	blt	r4,r2,89fec <___vfprintf_internal_r+0x1700>
   899b4:	42000204 	addi	r8,r8,8
   899b8:	003e0f06 	br	891f8 <__alt_data_end+0xfffb3ac8>
   899bc:	d9403317 	ldw	r5,204(sp)
   899c0:	00800044 	movi	r2,1
   899c4:	18c00044 	addi	r3,r3,1
   899c8:	1141530e 	bge	r2,r5,89f18 <___vfprintf_internal_r+0x162c>
   899cc:	dc401f17 	ldw	r17,124(sp)
   899d0:	00800044 	movi	r2,1
   899d4:	40800115 	stw	r2,4(r8)
   899d8:	8c400044 	addi	r17,r17,1
   899dc:	44000015 	stw	r16,0(r8)
   899e0:	d8c02015 	stw	r3,128(sp)
   899e4:	dc401f15 	stw	r17,124(sp)
   899e8:	008001c4 	movi	r2,7
   899ec:	14416b16 	blt	r2,r17,89f9c <___vfprintf_internal_r+0x16b0>
   899f0:	42000204 	addi	r8,r8,8
   899f4:	d8803717 	ldw	r2,220(sp)
   899f8:	d9003417 	ldw	r4,208(sp)
   899fc:	8c400044 	addi	r17,r17,1
   89a00:	10c7883a 	add	r3,r2,r3
   89a04:	40800115 	stw	r2,4(r8)
   89a08:	41000015 	stw	r4,0(r8)
   89a0c:	d8c02015 	stw	r3,128(sp)
   89a10:	dc401f15 	stw	r17,124(sp)
   89a14:	008001c4 	movi	r2,7
   89a18:	14416916 	blt	r2,r17,89fc0 <___vfprintf_internal_r+0x16d4>
   89a1c:	45800204 	addi	r22,r8,8
   89a20:	d9003617 	ldw	r4,216(sp)
   89a24:	d9403817 	ldw	r5,224(sp)
   89a28:	000d883a 	mov	r6,zero
   89a2c:	000f883a 	mov	r7,zero
   89a30:	d8c03c15 	stw	r3,240(sp)
   89a34:	009128c0 	call	9128c <__eqdf2>
   89a38:	d8c03c17 	ldw	r3,240(sp)
   89a3c:	1000bc26 	beq	r2,zero,89d30 <___vfprintf_internal_r+0x1444>
   89a40:	d9403317 	ldw	r5,204(sp)
   89a44:	84000044 	addi	r16,r16,1
   89a48:	8c400044 	addi	r17,r17,1
   89a4c:	28bfffc4 	addi	r2,r5,-1
   89a50:	1887883a 	add	r3,r3,r2
   89a54:	b0800115 	stw	r2,4(r22)
   89a58:	b4000015 	stw	r16,0(r22)
   89a5c:	d8c02015 	stw	r3,128(sp)
   89a60:	dc401f15 	stw	r17,124(sp)
   89a64:	008001c4 	movi	r2,7
   89a68:	14414316 	blt	r2,r17,89f78 <___vfprintf_internal_r+0x168c>
   89a6c:	b5800204 	addi	r22,r22,8
   89a70:	d9003a17 	ldw	r4,232(sp)
   89a74:	df0022c4 	addi	fp,sp,139
   89a78:	8c400044 	addi	r17,r17,1
   89a7c:	20c7883a 	add	r3,r4,r3
   89a80:	b7000015 	stw	fp,0(r22)
   89a84:	b1000115 	stw	r4,4(r22)
   89a88:	d8c02015 	stw	r3,128(sp)
   89a8c:	dc401f15 	stw	r17,124(sp)
   89a90:	008001c4 	movi	r2,7
   89a94:	14400e16 	blt	r2,r17,89ad0 <___vfprintf_internal_r+0x11e4>
   89a98:	b2000204 	addi	r8,r22,8
   89a9c:	003e1806 	br	89300 <__alt_data_end+0xfffb3bd0>
   89aa0:	01000274 	movhi	r4,9
   89aa4:	21107484 	addi	r4,r4,16850
   89aa8:	d9002c15 	stw	r4,176(sp)
   89aac:	d9002c17 	ldw	r4,176(sp)
   89ab0:	1c07883a 	add	r3,r3,r16
   89ab4:	44000115 	stw	r16,4(r8)
   89ab8:	41000015 	stw	r4,0(r8)
   89abc:	10800044 	addi	r2,r2,1
   89ac0:	d8c02015 	stw	r3,128(sp)
   89ac4:	d8801f15 	stw	r2,124(sp)
   89ac8:	010001c4 	movi	r4,7
   89acc:	20be0b0e 	bge	r4,r2,892fc <__alt_data_end+0xfffb3bcc>
   89ad0:	d9002d17 	ldw	r4,180(sp)
   89ad4:	d9801e04 	addi	r6,sp,120
   89ad8:	b80b883a 	mov	r5,r23
   89adc:	008eaac0 	call	8eaac <__sprint_r>
   89ae0:	103c861e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89ae4:	d8c02017 	ldw	r3,128(sp)
   89ae8:	da000404 	addi	r8,sp,16
   89aec:	003e0406 	br	89300 <__alt_data_end+0xfffb3bd0>
   89af0:	d9002d17 	ldw	r4,180(sp)
   89af4:	d9801e04 	addi	r6,sp,120
   89af8:	b80b883a 	mov	r5,r23
   89afc:	008eaac0 	call	8eaac <__sprint_r>
   89b00:	103e3b26 	beq	r2,zero,893f0 <__alt_data_end+0xfffb3cc0>
   89b04:	003c7d06 	br	88cfc <__alt_data_end+0xfffb35cc>
   89b08:	d9002d17 	ldw	r4,180(sp)
   89b0c:	d9801e04 	addi	r6,sp,120
   89b10:	b80b883a 	mov	r5,r23
   89b14:	008eaac0 	call	8eaac <__sprint_r>
   89b18:	103c781e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89b1c:	d8c02017 	ldw	r3,128(sp)
   89b20:	da000404 	addi	r8,sp,16
   89b24:	003de906 	br	892cc <__alt_data_end+0xfffb3b9c>
   89b28:	d9002d17 	ldw	r4,180(sp)
   89b2c:	d9801e04 	addi	r6,sp,120
   89b30:	b80b883a 	mov	r5,r23
   89b34:	008eaac0 	call	8eaac <__sprint_r>
   89b38:	103c701e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89b3c:	d8c02017 	ldw	r3,128(sp)
   89b40:	da000404 	addi	r8,sp,16
   89b44:	003d9b06 	br	891b4 <__alt_data_end+0xfffb3a84>
   89b48:	d9002d17 	ldw	r4,180(sp)
   89b4c:	d9801e04 	addi	r6,sp,120
   89b50:	b80b883a 	mov	r5,r23
   89b54:	008eaac0 	call	8eaac <__sprint_r>
   89b58:	103c681e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89b5c:	d8c02017 	ldw	r3,128(sp)
   89b60:	da000404 	addi	r8,sp,16
   89b64:	003da106 	br	891ec <__alt_data_end+0xfffb3abc>
   89b68:	d9402a17 	ldw	r5,168(sp)
   89b6c:	d8002785 	stb	zero,158(sp)
   89b70:	283f0616 	blt	r5,zero,8978c <__alt_data_end+0xfffb405c>
   89b74:	00ffdfc4 	movi	r3,-129
   89b78:	9d84b03a 	or	r2,r19,r22
   89b7c:	90e4703a 	and	r18,r18,r3
   89b80:	103c3b26 	beq	r2,zero,88c70 <__alt_data_end+0xfffb3540>
   89b84:	0039883a 	mov	fp,zero
   89b88:	003e5806 	br	894ec <__alt_data_end+0xfffb3dbc>
   89b8c:	9080040c 	andi	r2,r18,16
   89b90:	1001b326 	beq	r2,zero,8a260 <___vfprintf_internal_r+0x1974>
   89b94:	d8c02e17 	ldw	r3,184(sp)
   89b98:	d9002a17 	ldw	r4,168(sp)
   89b9c:	d8002785 	stb	zero,158(sp)
   89ba0:	18800104 	addi	r2,r3,4
   89ba4:	1cc00017 	ldw	r19,0(r3)
   89ba8:	002d883a 	mov	r22,zero
   89bac:	2001b516 	blt	r4,zero,8a284 <___vfprintf_internal_r+0x1998>
   89bb0:	00ffdfc4 	movi	r3,-129
   89bb4:	d8802e15 	stw	r2,184(sp)
   89bb8:	90e4703a 	and	r18,r18,r3
   89bbc:	983d0526 	beq	r19,zero,88fd4 <__alt_data_end+0xfffb38a4>
   89bc0:	0039883a 	mov	fp,zero
   89bc4:	003d0806 	br	88fe8 <__alt_data_end+0xfffb38b8>
   89bc8:	dc402617 	ldw	r17,152(sp)
   89bcc:	0441d30e 	bge	zero,r17,8a31c <___vfprintf_internal_r+0x1a30>
   89bd0:	dc403217 	ldw	r17,200(sp)
   89bd4:	d8803317 	ldw	r2,204(sp)
   89bd8:	1440010e 	bge	r2,r17,89be0 <___vfprintf_internal_r+0x12f4>
   89bdc:	1023883a 	mov	r17,r2
   89be0:	04400a0e 	bge	zero,r17,89c0c <___vfprintf_internal_r+0x1320>
   89be4:	d8801f17 	ldw	r2,124(sp)
   89be8:	1c47883a 	add	r3,r3,r17
   89bec:	44000015 	stw	r16,0(r8)
   89bf0:	10800044 	addi	r2,r2,1
   89bf4:	44400115 	stw	r17,4(r8)
   89bf8:	d8c02015 	stw	r3,128(sp)
   89bfc:	d8801f15 	stw	r2,124(sp)
   89c00:	010001c4 	movi	r4,7
   89c04:	20826516 	blt	r4,r2,8a59c <___vfprintf_internal_r+0x1cb0>
   89c08:	42000204 	addi	r8,r8,8
   89c0c:	88026116 	blt	r17,zero,8a594 <___vfprintf_internal_r+0x1ca8>
   89c10:	d9003217 	ldw	r4,200(sp)
   89c14:	2463c83a 	sub	r17,r4,r17
   89c18:	04407b0e 	bge	zero,r17,89e08 <___vfprintf_internal_r+0x151c>
   89c1c:	05800404 	movi	r22,16
   89c20:	d8801f17 	ldw	r2,124(sp)
   89c24:	b4419d0e 	bge	r22,r17,8a29c <___vfprintf_internal_r+0x19b0>
   89c28:	01000274 	movhi	r4,9
   89c2c:	21107484 	addi	r4,r4,16850
   89c30:	d9002c15 	stw	r4,176(sp)
   89c34:	070001c4 	movi	fp,7
   89c38:	dcc02d17 	ldw	r19,180(sp)
   89c3c:	00000306 	br	89c4c <___vfprintf_internal_r+0x1360>
   89c40:	42000204 	addi	r8,r8,8
   89c44:	8c7ffc04 	addi	r17,r17,-16
   89c48:	b441970e 	bge	r22,r17,8a2a8 <___vfprintf_internal_r+0x19bc>
   89c4c:	18c00404 	addi	r3,r3,16
   89c50:	10800044 	addi	r2,r2,1
   89c54:	45000015 	stw	r20,0(r8)
   89c58:	45800115 	stw	r22,4(r8)
   89c5c:	d8c02015 	stw	r3,128(sp)
   89c60:	d8801f15 	stw	r2,124(sp)
   89c64:	e0bff60e 	bge	fp,r2,89c40 <__alt_data_end+0xfffb4510>
   89c68:	d9801e04 	addi	r6,sp,120
   89c6c:	b80b883a 	mov	r5,r23
   89c70:	9809883a 	mov	r4,r19
   89c74:	008eaac0 	call	8eaac <__sprint_r>
   89c78:	103c201e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89c7c:	d8c02017 	ldw	r3,128(sp)
   89c80:	d8801f17 	ldw	r2,124(sp)
   89c84:	da000404 	addi	r8,sp,16
   89c88:	003fee06 	br	89c44 <__alt_data_end+0xfffb4514>
   89c8c:	d9002d17 	ldw	r4,180(sp)
   89c90:	d9801e04 	addi	r6,sp,120
   89c94:	b80b883a 	mov	r5,r23
   89c98:	008eaac0 	call	8eaac <__sprint_r>
   89c9c:	103c171e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89ca0:	d8c02017 	ldw	r3,128(sp)
   89ca4:	df002787 	ldb	fp,158(sp)
   89ca8:	da000404 	addi	r8,sp,16
   89cac:	003d3406 	br	89180 <__alt_data_end+0xfffb3a50>
   89cb0:	9080040c 	andi	r2,r18,16
   89cb4:	10016126 	beq	r2,zero,8a23c <___vfprintf_internal_r+0x1950>
   89cb8:	d9402e17 	ldw	r5,184(sp)
   89cbc:	2cc00017 	ldw	r19,0(r5)
   89cc0:	29400104 	addi	r5,r5,4
   89cc4:	d9402e15 	stw	r5,184(sp)
   89cc8:	982dd7fa 	srai	r22,r19,31
   89ccc:	b005883a 	mov	r2,r22
   89cd0:	003c5a06 	br	88e3c <__alt_data_end+0xfffb370c>
   89cd4:	9080040c 	andi	r2,r18,16
   89cd8:	10003526 	beq	r2,zero,89db0 <___vfprintf_internal_r+0x14c4>
   89cdc:	d8c02e17 	ldw	r3,184(sp)
   89ce0:	d9002a17 	ldw	r4,168(sp)
   89ce4:	d8002785 	stb	zero,158(sp)
   89ce8:	18800104 	addi	r2,r3,4
   89cec:	1cc00017 	ldw	r19,0(r3)
   89cf0:	002d883a 	mov	r22,zero
   89cf4:	20003716 	blt	r4,zero,89dd4 <___vfprintf_internal_r+0x14e8>
   89cf8:	00ffdfc4 	movi	r3,-129
   89cfc:	d8802e15 	stw	r2,184(sp)
   89d00:	90e4703a 	and	r18,r18,r3
   89d04:	0039883a 	mov	fp,zero
   89d08:	983dd426 	beq	r19,zero,8945c <__alt_data_end+0xfffb3d2c>
   89d0c:	00800244 	movi	r2,9
   89d10:	14fc5336 	bltu	r2,r19,88e60 <__alt_data_end+0xfffb3730>
   89d14:	d8c02817 	ldw	r3,160(sp)
   89d18:	dc001dc4 	addi	r16,sp,119
   89d1c:	9cc00c04 	addi	r19,r19,48
   89d20:	1c07c83a 	sub	r3,r3,r16
   89d24:	dcc01dc5 	stb	r19,119(sp)
   89d28:	d8c02b15 	stw	r3,172(sp)
   89d2c:	003cc606 	br	89048 <__alt_data_end+0xfffb3918>
   89d30:	d8803317 	ldw	r2,204(sp)
   89d34:	143fffc4 	addi	r16,r2,-1
   89d38:	043f4d0e 	bge	zero,r16,89a70 <__alt_data_end+0xfffb4340>
   89d3c:	07000404 	movi	fp,16
   89d40:	e400810e 	bge	fp,r16,89f48 <___vfprintf_internal_r+0x165c>
   89d44:	01400274 	movhi	r5,9
   89d48:	29507484 	addi	r5,r5,16850
   89d4c:	d9402c15 	stw	r5,176(sp)
   89d50:	01c001c4 	movi	r7,7
   89d54:	dcc02d17 	ldw	r19,180(sp)
   89d58:	00000306 	br	89d68 <___vfprintf_internal_r+0x147c>
   89d5c:	b5800204 	addi	r22,r22,8
   89d60:	843ffc04 	addi	r16,r16,-16
   89d64:	e4007b0e 	bge	fp,r16,89f54 <___vfprintf_internal_r+0x1668>
   89d68:	18c00404 	addi	r3,r3,16
   89d6c:	8c400044 	addi	r17,r17,1
   89d70:	b5000015 	stw	r20,0(r22)
   89d74:	b7000115 	stw	fp,4(r22)
   89d78:	d8c02015 	stw	r3,128(sp)
   89d7c:	dc401f15 	stw	r17,124(sp)
   89d80:	3c7ff60e 	bge	r7,r17,89d5c <__alt_data_end+0xfffb462c>
   89d84:	d9801e04 	addi	r6,sp,120
   89d88:	b80b883a 	mov	r5,r23
   89d8c:	9809883a 	mov	r4,r19
   89d90:	d9c03c15 	stw	r7,240(sp)
   89d94:	008eaac0 	call	8eaac <__sprint_r>
   89d98:	d9c03c17 	ldw	r7,240(sp)
   89d9c:	103bd71e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89da0:	d8c02017 	ldw	r3,128(sp)
   89da4:	dc401f17 	ldw	r17,124(sp)
   89da8:	dd800404 	addi	r22,sp,16
   89dac:	003fec06 	br	89d60 <__alt_data_end+0xfffb4630>
   89db0:	9080100c 	andi	r2,r18,64
   89db4:	d8002785 	stb	zero,158(sp)
   89db8:	10010e26 	beq	r2,zero,8a1f4 <___vfprintf_internal_r+0x1908>
   89dbc:	d9402e17 	ldw	r5,184(sp)
   89dc0:	d8c02a17 	ldw	r3,168(sp)
   89dc4:	002d883a 	mov	r22,zero
   89dc8:	28800104 	addi	r2,r5,4
   89dcc:	2cc0000b 	ldhu	r19,0(r5)
   89dd0:	183fc90e 	bge	r3,zero,89cf8 <__alt_data_end+0xfffb45c8>
   89dd4:	d8802e15 	stw	r2,184(sp)
   89dd8:	0039883a 	mov	fp,zero
   89ddc:	9d84b03a 	or	r2,r19,r22
   89de0:	103c1e1e 	bne	r2,zero,88e5c <__alt_data_end+0xfffb372c>
   89de4:	00800044 	movi	r2,1
   89de8:	003e6c06 	br	8979c <__alt_data_end+0xfffb406c>
   89dec:	d9002d17 	ldw	r4,180(sp)
   89df0:	d9801e04 	addi	r6,sp,120
   89df4:	b80b883a 	mov	r5,r23
   89df8:	008eaac0 	call	8eaac <__sprint_r>
   89dfc:	103bbf1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89e00:	d8c02017 	ldw	r3,128(sp)
   89e04:	da000404 	addi	r8,sp,16
   89e08:	d9003217 	ldw	r4,200(sp)
   89e0c:	d8802617 	ldw	r2,152(sp)
   89e10:	d9403317 	ldw	r5,204(sp)
   89e14:	8123883a 	add	r17,r16,r4
   89e18:	11400216 	blt	r2,r5,89e24 <___vfprintf_internal_r+0x1538>
   89e1c:	9100004c 	andi	r4,r18,1
   89e20:	20000d26 	beq	r4,zero,89e58 <___vfprintf_internal_r+0x156c>
   89e24:	d9003717 	ldw	r4,220(sp)
   89e28:	d9403417 	ldw	r5,208(sp)
   89e2c:	1907883a 	add	r3,r3,r4
   89e30:	d9001f17 	ldw	r4,124(sp)
   89e34:	41400015 	stw	r5,0(r8)
   89e38:	d9403717 	ldw	r5,220(sp)
   89e3c:	21000044 	addi	r4,r4,1
   89e40:	d8c02015 	stw	r3,128(sp)
   89e44:	41400115 	stw	r5,4(r8)
   89e48:	d9001f15 	stw	r4,124(sp)
   89e4c:	014001c4 	movi	r5,7
   89e50:	2901e816 	blt	r5,r4,8a5f4 <___vfprintf_internal_r+0x1d08>
   89e54:	42000204 	addi	r8,r8,8
   89e58:	d9003317 	ldw	r4,204(sp)
   89e5c:	8121883a 	add	r16,r16,r4
   89e60:	2085c83a 	sub	r2,r4,r2
   89e64:	8461c83a 	sub	r16,r16,r17
   89e68:	1400010e 	bge	r2,r16,89e70 <___vfprintf_internal_r+0x1584>
   89e6c:	1021883a 	mov	r16,r2
   89e70:	04000a0e 	bge	zero,r16,89e9c <___vfprintf_internal_r+0x15b0>
   89e74:	d9001f17 	ldw	r4,124(sp)
   89e78:	1c07883a 	add	r3,r3,r16
   89e7c:	44400015 	stw	r17,0(r8)
   89e80:	21000044 	addi	r4,r4,1
   89e84:	44000115 	stw	r16,4(r8)
   89e88:	d8c02015 	stw	r3,128(sp)
   89e8c:	d9001f15 	stw	r4,124(sp)
   89e90:	014001c4 	movi	r5,7
   89e94:	2901fb16 	blt	r5,r4,8a684 <___vfprintf_internal_r+0x1d98>
   89e98:	42000204 	addi	r8,r8,8
   89e9c:	8001f716 	blt	r16,zero,8a67c <___vfprintf_internal_r+0x1d90>
   89ea0:	1421c83a 	sub	r16,r2,r16
   89ea4:	043d160e 	bge	zero,r16,89300 <__alt_data_end+0xfffb3bd0>
   89ea8:	04400404 	movi	r17,16
   89eac:	d8801f17 	ldw	r2,124(sp)
   89eb0:	8c3efb0e 	bge	r17,r16,89aa0 <__alt_data_end+0xfffb4370>
   89eb4:	01400274 	movhi	r5,9
   89eb8:	29507484 	addi	r5,r5,16850
   89ebc:	d9402c15 	stw	r5,176(sp)
   89ec0:	058001c4 	movi	r22,7
   89ec4:	dcc02d17 	ldw	r19,180(sp)
   89ec8:	00000306 	br	89ed8 <___vfprintf_internal_r+0x15ec>
   89ecc:	42000204 	addi	r8,r8,8
   89ed0:	843ffc04 	addi	r16,r16,-16
   89ed4:	8c3ef50e 	bge	r17,r16,89aac <__alt_data_end+0xfffb437c>
   89ed8:	18c00404 	addi	r3,r3,16
   89edc:	10800044 	addi	r2,r2,1
   89ee0:	45000015 	stw	r20,0(r8)
   89ee4:	44400115 	stw	r17,4(r8)
   89ee8:	d8c02015 	stw	r3,128(sp)
   89eec:	d8801f15 	stw	r2,124(sp)
   89ef0:	b0bff60e 	bge	r22,r2,89ecc <__alt_data_end+0xfffb479c>
   89ef4:	d9801e04 	addi	r6,sp,120
   89ef8:	b80b883a 	mov	r5,r23
   89efc:	9809883a 	mov	r4,r19
   89f00:	008eaac0 	call	8eaac <__sprint_r>
   89f04:	103b7d1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89f08:	d8c02017 	ldw	r3,128(sp)
   89f0c:	d8801f17 	ldw	r2,124(sp)
   89f10:	da000404 	addi	r8,sp,16
   89f14:	003fee06 	br	89ed0 <__alt_data_end+0xfffb47a0>
   89f18:	9088703a 	and	r4,r18,r2
   89f1c:	203eab1e 	bne	r4,zero,899cc <__alt_data_end+0xfffb429c>
   89f20:	dc401f17 	ldw	r17,124(sp)
   89f24:	40800115 	stw	r2,4(r8)
   89f28:	44000015 	stw	r16,0(r8)
   89f2c:	8c400044 	addi	r17,r17,1
   89f30:	d8c02015 	stw	r3,128(sp)
   89f34:	dc401f15 	stw	r17,124(sp)
   89f38:	008001c4 	movi	r2,7
   89f3c:	14400e16 	blt	r2,r17,89f78 <___vfprintf_internal_r+0x168c>
   89f40:	45800204 	addi	r22,r8,8
   89f44:	003eca06 	br	89a70 <__alt_data_end+0xfffb4340>
   89f48:	01000274 	movhi	r4,9
   89f4c:	21107484 	addi	r4,r4,16850
   89f50:	d9002c15 	stw	r4,176(sp)
   89f54:	d8802c17 	ldw	r2,176(sp)
   89f58:	1c07883a 	add	r3,r3,r16
   89f5c:	8c400044 	addi	r17,r17,1
   89f60:	b0800015 	stw	r2,0(r22)
   89f64:	b4000115 	stw	r16,4(r22)
   89f68:	d8c02015 	stw	r3,128(sp)
   89f6c:	dc401f15 	stw	r17,124(sp)
   89f70:	008001c4 	movi	r2,7
   89f74:	147ebd0e 	bge	r2,r17,89a6c <__alt_data_end+0xfffb433c>
   89f78:	d9002d17 	ldw	r4,180(sp)
   89f7c:	d9801e04 	addi	r6,sp,120
   89f80:	b80b883a 	mov	r5,r23
   89f84:	008eaac0 	call	8eaac <__sprint_r>
   89f88:	103b5c1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89f8c:	d8c02017 	ldw	r3,128(sp)
   89f90:	dc401f17 	ldw	r17,124(sp)
   89f94:	dd800404 	addi	r22,sp,16
   89f98:	003eb506 	br	89a70 <__alt_data_end+0xfffb4340>
   89f9c:	d9002d17 	ldw	r4,180(sp)
   89fa0:	d9801e04 	addi	r6,sp,120
   89fa4:	b80b883a 	mov	r5,r23
   89fa8:	008eaac0 	call	8eaac <__sprint_r>
   89fac:	103b531e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89fb0:	d8c02017 	ldw	r3,128(sp)
   89fb4:	dc401f17 	ldw	r17,124(sp)
   89fb8:	da000404 	addi	r8,sp,16
   89fbc:	003e8d06 	br	899f4 <__alt_data_end+0xfffb42c4>
   89fc0:	d9002d17 	ldw	r4,180(sp)
   89fc4:	d9801e04 	addi	r6,sp,120
   89fc8:	b80b883a 	mov	r5,r23
   89fcc:	008eaac0 	call	8eaac <__sprint_r>
   89fd0:	103b4a1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   89fd4:	d8c02017 	ldw	r3,128(sp)
   89fd8:	dc401f17 	ldw	r17,124(sp)
   89fdc:	dd800404 	addi	r22,sp,16
   89fe0:	003e8f06 	br	89a20 <__alt_data_end+0xfffb42f0>
   89fe4:	0027883a 	mov	r19,zero
   89fe8:	003f4a06 	br	89d14 <__alt_data_end+0xfffb45e4>
   89fec:	d9002d17 	ldw	r4,180(sp)
   89ff0:	d9801e04 	addi	r6,sp,120
   89ff4:	b80b883a 	mov	r5,r23
   89ff8:	008eaac0 	call	8eaac <__sprint_r>
   89ffc:	103b3f1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a000:	d8c02017 	ldw	r3,128(sp)
   8a004:	da000404 	addi	r8,sp,16
   8a008:	003c7b06 	br	891f8 <__alt_data_end+0xfffb3ac8>
   8a00c:	d9402a17 	ldw	r5,168(sp)
   8a010:	04e7c83a 	sub	r19,zero,r19
   8a014:	07000b44 	movi	fp,45
   8a018:	9804c03a 	cmpne	r2,r19,zero
   8a01c:	05adc83a 	sub	r22,zero,r22
   8a020:	df002785 	stb	fp,158(sp)
   8a024:	b0adc83a 	sub	r22,r22,r2
   8a028:	28017b16 	blt	r5,zero,8a618 <___vfprintf_internal_r+0x1d2c>
   8a02c:	00bfdfc4 	movi	r2,-129
   8a030:	90a4703a 	and	r18,r18,r2
   8a034:	003b8906 	br	88e5c <__alt_data_end+0xfffb372c>
   8a038:	d9003617 	ldw	r4,216(sp)
   8a03c:	d9403817 	ldw	r5,224(sp)
   8a040:	da003d15 	stw	r8,244(sp)
   8a044:	008e8600 	call	8e860 <__fpclassifyd>
   8a048:	da003d17 	ldw	r8,244(sp)
   8a04c:	1000f026 	beq	r2,zero,8a410 <___vfprintf_internal_r+0x1b24>
   8a050:	d9002a17 	ldw	r4,168(sp)
   8a054:	05bff7c4 	movi	r22,-33
   8a058:	00bfffc4 	movi	r2,-1
   8a05c:	8dac703a 	and	r22,r17,r22
   8a060:	20820026 	beq	r4,r2,8a864 <___vfprintf_internal_r+0x1f78>
   8a064:	008011c4 	movi	r2,71
   8a068:	b081f726 	beq	r22,r2,8a848 <___vfprintf_internal_r+0x1f5c>
   8a06c:	d9003817 	ldw	r4,224(sp)
   8a070:	90c04014 	ori	r3,r18,256
   8a074:	d8c02c15 	stw	r3,176(sp)
   8a078:	20021516 	blt	r4,zero,8a8d0 <___vfprintf_internal_r+0x1fe4>
   8a07c:	dcc03817 	ldw	r19,224(sp)
   8a080:	d8002905 	stb	zero,164(sp)
   8a084:	00801984 	movi	r2,102
   8a088:	8881f926 	beq	r17,r2,8a870 <___vfprintf_internal_r+0x1f84>
   8a08c:	00801184 	movi	r2,70
   8a090:	88821c26 	beq	r17,r2,8a904 <___vfprintf_internal_r+0x2018>
   8a094:	00801144 	movi	r2,69
   8a098:	b081ef26 	beq	r22,r2,8a858 <___vfprintf_internal_r+0x1f6c>
   8a09c:	d8c02a17 	ldw	r3,168(sp)
   8a0a0:	d8802104 	addi	r2,sp,132
   8a0a4:	d8800315 	stw	r2,12(sp)
   8a0a8:	d9403617 	ldw	r5,216(sp)
   8a0ac:	d8802504 	addi	r2,sp,148
   8a0b0:	d9002d17 	ldw	r4,180(sp)
   8a0b4:	d8800215 	stw	r2,8(sp)
   8a0b8:	d8802604 	addi	r2,sp,152
   8a0bc:	d8c00015 	stw	r3,0(sp)
   8a0c0:	d8800115 	stw	r2,4(sp)
   8a0c4:	01c00084 	movi	r7,2
   8a0c8:	980d883a 	mov	r6,r19
   8a0cc:	d8c03c15 	stw	r3,240(sp)
   8a0d0:	da003d15 	stw	r8,244(sp)
   8a0d4:	008b0d00 	call	8b0d0 <_dtoa_r>
   8a0d8:	1021883a 	mov	r16,r2
   8a0dc:	008019c4 	movi	r2,103
   8a0e0:	d8c03c17 	ldw	r3,240(sp)
   8a0e4:	da003d17 	ldw	r8,244(sp)
   8a0e8:	88817126 	beq	r17,r2,8a6b0 <___vfprintf_internal_r+0x1dc4>
   8a0ec:	008011c4 	movi	r2,71
   8a0f0:	88829126 	beq	r17,r2,8ab38 <___vfprintf_internal_r+0x224c>
   8a0f4:	80f9883a 	add	fp,r16,r3
   8a0f8:	d9003617 	ldw	r4,216(sp)
   8a0fc:	000d883a 	mov	r6,zero
   8a100:	000f883a 	mov	r7,zero
   8a104:	980b883a 	mov	r5,r19
   8a108:	da003d15 	stw	r8,244(sp)
   8a10c:	009128c0 	call	9128c <__eqdf2>
   8a110:	da003d17 	ldw	r8,244(sp)
   8a114:	10018d26 	beq	r2,zero,8a74c <___vfprintf_internal_r+0x1e60>
   8a118:	d8802117 	ldw	r2,132(sp)
   8a11c:	1700062e 	bgeu	r2,fp,8a138 <___vfprintf_internal_r+0x184c>
   8a120:	01000c04 	movi	r4,48
   8a124:	10c00044 	addi	r3,r2,1
   8a128:	d8c02115 	stw	r3,132(sp)
   8a12c:	11000005 	stb	r4,0(r2)
   8a130:	d8802117 	ldw	r2,132(sp)
   8a134:	173ffb36 	bltu	r2,fp,8a124 <__alt_data_end+0xfffb49f4>
   8a138:	1405c83a 	sub	r2,r2,r16
   8a13c:	d8803315 	stw	r2,204(sp)
   8a140:	008011c4 	movi	r2,71
   8a144:	b0817626 	beq	r22,r2,8a720 <___vfprintf_internal_r+0x1e34>
   8a148:	00801944 	movi	r2,101
   8a14c:	1442800e 	bge	r2,r17,8ab50 <___vfprintf_internal_r+0x2264>
   8a150:	d8c02617 	ldw	r3,152(sp)
   8a154:	00801984 	movi	r2,102
   8a158:	d8c03215 	stw	r3,200(sp)
   8a15c:	8881fe26 	beq	r17,r2,8a958 <___vfprintf_internal_r+0x206c>
   8a160:	d8c03217 	ldw	r3,200(sp)
   8a164:	d9003317 	ldw	r4,204(sp)
   8a168:	1901dd16 	blt	r3,r4,8a8e0 <___vfprintf_internal_r+0x1ff4>
   8a16c:	9480004c 	andi	r18,r18,1
   8a170:	90022b1e 	bne	r18,zero,8aa20 <___vfprintf_internal_r+0x2134>
   8a174:	1805883a 	mov	r2,r3
   8a178:	18028316 	blt	r3,zero,8ab88 <___vfprintf_internal_r+0x229c>
   8a17c:	d8c03217 	ldw	r3,200(sp)
   8a180:	044019c4 	movi	r17,103
   8a184:	d8c02b15 	stw	r3,172(sp)
   8a188:	df002907 	ldb	fp,164(sp)
   8a18c:	e001531e 	bne	fp,zero,8a6dc <___vfprintf_internal_r+0x1df0>
   8a190:	df002783 	ldbu	fp,158(sp)
   8a194:	d8802915 	stw	r2,164(sp)
   8a198:	dc802c17 	ldw	r18,176(sp)
   8a19c:	d8002a15 	stw	zero,168(sp)
   8a1a0:	003baf06 	br	89060 <__alt_data_end+0xfffb3930>
   8a1a4:	d8c02e17 	ldw	r3,184(sp)
   8a1a8:	d9002e17 	ldw	r4,184(sp)
   8a1ac:	d9402e17 	ldw	r5,184(sp)
   8a1b0:	18c00017 	ldw	r3,0(r3)
   8a1b4:	21000117 	ldw	r4,4(r4)
   8a1b8:	29400204 	addi	r5,r5,8
   8a1bc:	d8c03615 	stw	r3,216(sp)
   8a1c0:	d9003815 	stw	r4,224(sp)
   8a1c4:	d9402e15 	stw	r5,184(sp)
   8a1c8:	003b5006 	br	88f0c <__alt_data_end+0xfffb37dc>
   8a1cc:	ac400007 	ldb	r17,0(r21)
   8a1d0:	003a2806 	br	88a74 <__alt_data_end+0xfffb3344>
   8a1d4:	9080100c 	andi	r2,r18,64
   8a1d8:	1000a826 	beq	r2,zero,8a47c <___vfprintf_internal_r+0x1b90>
   8a1dc:	d8c02e17 	ldw	r3,184(sp)
   8a1e0:	002d883a 	mov	r22,zero
   8a1e4:	1cc0000b 	ldhu	r19,0(r3)
   8a1e8:	18c00104 	addi	r3,r3,4
   8a1ec:	d8c02e15 	stw	r3,184(sp)
   8a1f0:	003caf06 	br	894b0 <__alt_data_end+0xfffb3d80>
   8a1f4:	d9002e17 	ldw	r4,184(sp)
   8a1f8:	d9402a17 	ldw	r5,168(sp)
   8a1fc:	002d883a 	mov	r22,zero
   8a200:	20800104 	addi	r2,r4,4
   8a204:	24c00017 	ldw	r19,0(r4)
   8a208:	283ebb0e 	bge	r5,zero,89cf8 <__alt_data_end+0xfffb45c8>
   8a20c:	003ef106 	br	89dd4 <__alt_data_end+0xfffb46a4>
   8a210:	9080040c 	andi	r2,r18,16
   8a214:	1000921e 	bne	r2,zero,8a460 <___vfprintf_internal_r+0x1b74>
   8a218:	9480100c 	andi	r18,r18,64
   8a21c:	90013926 	beq	r18,zero,8a704 <___vfprintf_internal_r+0x1e18>
   8a220:	d9402e17 	ldw	r5,184(sp)
   8a224:	d8c02f17 	ldw	r3,188(sp)
   8a228:	28800017 	ldw	r2,0(r5)
   8a22c:	29400104 	addi	r5,r5,4
   8a230:	d9402e15 	stw	r5,184(sp)
   8a234:	10c0000d 	sth	r3,0(r2)
   8a238:	0039e406 	br	889cc <__alt_data_end+0xfffb329c>
   8a23c:	9080100c 	andi	r2,r18,64
   8a240:	10008026 	beq	r2,zero,8a444 <___vfprintf_internal_r+0x1b58>
   8a244:	d8802e17 	ldw	r2,184(sp)
   8a248:	14c0000f 	ldh	r19,0(r2)
   8a24c:	10800104 	addi	r2,r2,4
   8a250:	d8802e15 	stw	r2,184(sp)
   8a254:	982dd7fa 	srai	r22,r19,31
   8a258:	b005883a 	mov	r2,r22
   8a25c:	003af706 	br	88e3c <__alt_data_end+0xfffb370c>
   8a260:	9080100c 	andi	r2,r18,64
   8a264:	d8002785 	stb	zero,158(sp)
   8a268:	10008a1e 	bne	r2,zero,8a494 <___vfprintf_internal_r+0x1ba8>
   8a26c:	d9002e17 	ldw	r4,184(sp)
   8a270:	d9402a17 	ldw	r5,168(sp)
   8a274:	002d883a 	mov	r22,zero
   8a278:	20800104 	addi	r2,r4,4
   8a27c:	24c00017 	ldw	r19,0(r4)
   8a280:	283e4b0e 	bge	r5,zero,89bb0 <__alt_data_end+0xfffb4480>
   8a284:	9d86b03a 	or	r3,r19,r22
   8a288:	d8802e15 	stw	r2,184(sp)
   8a28c:	183e4c1e 	bne	r3,zero,89bc0 <__alt_data_end+0xfffb4490>
   8a290:	0039883a 	mov	fp,zero
   8a294:	0005883a 	mov	r2,zero
   8a298:	003d4006 	br	8979c <__alt_data_end+0xfffb406c>
   8a29c:	01400274 	movhi	r5,9
   8a2a0:	29507484 	addi	r5,r5,16850
   8a2a4:	d9402c15 	stw	r5,176(sp)
   8a2a8:	d9402c17 	ldw	r5,176(sp)
   8a2ac:	1c47883a 	add	r3,r3,r17
   8a2b0:	10800044 	addi	r2,r2,1
   8a2b4:	41400015 	stw	r5,0(r8)
   8a2b8:	44400115 	stw	r17,4(r8)
   8a2bc:	d8c02015 	stw	r3,128(sp)
   8a2c0:	d8801f15 	stw	r2,124(sp)
   8a2c4:	010001c4 	movi	r4,7
   8a2c8:	20bec816 	blt	r4,r2,89dec <__alt_data_end+0xfffb46bc>
   8a2cc:	42000204 	addi	r8,r8,8
   8a2d0:	003ecd06 	br	89e08 <__alt_data_end+0xfffb46d8>
   8a2d4:	d9002a17 	ldw	r4,168(sp)
   8a2d8:	d8002785 	stb	zero,158(sp)
   8a2dc:	203d2d16 	blt	r4,zero,89794 <__alt_data_end+0xfffb4064>
   8a2e0:	00bfdfc4 	movi	r2,-129
   8a2e4:	90a4703a 	and	r18,r18,r2
   8a2e8:	003a6106 	br	88c70 <__alt_data_end+0xfffb3540>
   8a2ec:	01000274 	movhi	r4,9
   8a2f0:	21107484 	addi	r4,r4,16850
   8a2f4:	d9002c15 	stw	r4,176(sp)
   8a2f8:	003bea06 	br	892a4 <__alt_data_end+0xfffb3b74>
   8a2fc:	d9002d17 	ldw	r4,180(sp)
   8a300:	d9801e04 	addi	r6,sp,120
   8a304:	b80b883a 	mov	r5,r23
   8a308:	008eaac0 	call	8eaac <__sprint_r>
   8a30c:	103a7b1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a310:	d8c02017 	ldw	r3,128(sp)
   8a314:	da000404 	addi	r8,sp,16
   8a318:	003d4106 	br	89820 <__alt_data_end+0xfffb40f0>
   8a31c:	d8801f17 	ldw	r2,124(sp)
   8a320:	01400274 	movhi	r5,9
   8a324:	01000044 	movi	r4,1
   8a328:	18c00044 	addi	r3,r3,1
   8a32c:	10800044 	addi	r2,r2,1
   8a330:	29507404 	addi	r5,r5,16848
   8a334:	41000115 	stw	r4,4(r8)
   8a338:	41400015 	stw	r5,0(r8)
   8a33c:	d8c02015 	stw	r3,128(sp)
   8a340:	d8801f15 	stw	r2,124(sp)
   8a344:	010001c4 	movi	r4,7
   8a348:	20805c16 	blt	r4,r2,8a4bc <___vfprintf_internal_r+0x1bd0>
   8a34c:	42000204 	addi	r8,r8,8
   8a350:	8800041e 	bne	r17,zero,8a364 <___vfprintf_internal_r+0x1a78>
   8a354:	d8803317 	ldw	r2,204(sp)
   8a358:	1000021e 	bne	r2,zero,8a364 <___vfprintf_internal_r+0x1a78>
   8a35c:	9080004c 	andi	r2,r18,1
   8a360:	103be726 	beq	r2,zero,89300 <__alt_data_end+0xfffb3bd0>
   8a364:	d9003717 	ldw	r4,220(sp)
   8a368:	d8801f17 	ldw	r2,124(sp)
   8a36c:	d9403417 	ldw	r5,208(sp)
   8a370:	20c7883a 	add	r3,r4,r3
   8a374:	10800044 	addi	r2,r2,1
   8a378:	41000115 	stw	r4,4(r8)
   8a37c:	41400015 	stw	r5,0(r8)
   8a380:	d8c02015 	stw	r3,128(sp)
   8a384:	d8801f15 	stw	r2,124(sp)
   8a388:	010001c4 	movi	r4,7
   8a38c:	20812116 	blt	r4,r2,8a814 <___vfprintf_internal_r+0x1f28>
   8a390:	42000204 	addi	r8,r8,8
   8a394:	0463c83a 	sub	r17,zero,r17
   8a398:	0440730e 	bge	zero,r17,8a568 <___vfprintf_internal_r+0x1c7c>
   8a39c:	05800404 	movi	r22,16
   8a3a0:	b440860e 	bge	r22,r17,8a5bc <___vfprintf_internal_r+0x1cd0>
   8a3a4:	01400274 	movhi	r5,9
   8a3a8:	29507484 	addi	r5,r5,16850
   8a3ac:	d9402c15 	stw	r5,176(sp)
   8a3b0:	070001c4 	movi	fp,7
   8a3b4:	dcc02d17 	ldw	r19,180(sp)
   8a3b8:	00000306 	br	8a3c8 <___vfprintf_internal_r+0x1adc>
   8a3bc:	42000204 	addi	r8,r8,8
   8a3c0:	8c7ffc04 	addi	r17,r17,-16
   8a3c4:	b440800e 	bge	r22,r17,8a5c8 <___vfprintf_internal_r+0x1cdc>
   8a3c8:	18c00404 	addi	r3,r3,16
   8a3cc:	10800044 	addi	r2,r2,1
   8a3d0:	45000015 	stw	r20,0(r8)
   8a3d4:	45800115 	stw	r22,4(r8)
   8a3d8:	d8c02015 	stw	r3,128(sp)
   8a3dc:	d8801f15 	stw	r2,124(sp)
   8a3e0:	e0bff60e 	bge	fp,r2,8a3bc <__alt_data_end+0xfffb4c8c>
   8a3e4:	d9801e04 	addi	r6,sp,120
   8a3e8:	b80b883a 	mov	r5,r23
   8a3ec:	9809883a 	mov	r4,r19
   8a3f0:	008eaac0 	call	8eaac <__sprint_r>
   8a3f4:	103a411e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a3f8:	d8c02017 	ldw	r3,128(sp)
   8a3fc:	d8801f17 	ldw	r2,124(sp)
   8a400:	da000404 	addi	r8,sp,16
   8a404:	003fee06 	br	8a3c0 <__alt_data_end+0xfffb4c90>
   8a408:	00bfffc4 	movi	r2,-1
   8a40c:	003a3f06 	br	88d0c <__alt_data_end+0xfffb35dc>
   8a410:	008011c4 	movi	r2,71
   8a414:	1440b816 	blt	r2,r17,8a6f8 <___vfprintf_internal_r+0x1e0c>
   8a418:	04000274 	movhi	r16,9
   8a41c:	84106604 	addi	r16,r16,16792
   8a420:	00c000c4 	movi	r3,3
   8a424:	00bfdfc4 	movi	r2,-129
   8a428:	d8c02915 	stw	r3,164(sp)
   8a42c:	90a4703a 	and	r18,r18,r2
   8a430:	df002783 	ldbu	fp,158(sp)
   8a434:	d8c02b15 	stw	r3,172(sp)
   8a438:	d8002a15 	stw	zero,168(sp)
   8a43c:	d8003215 	stw	zero,200(sp)
   8a440:	003b0706 	br	89060 <__alt_data_end+0xfffb3930>
   8a444:	d8c02e17 	ldw	r3,184(sp)
   8a448:	1cc00017 	ldw	r19,0(r3)
   8a44c:	18c00104 	addi	r3,r3,4
   8a450:	d8c02e15 	stw	r3,184(sp)
   8a454:	982dd7fa 	srai	r22,r19,31
   8a458:	b005883a 	mov	r2,r22
   8a45c:	003a7706 	br	88e3c <__alt_data_end+0xfffb370c>
   8a460:	d8c02e17 	ldw	r3,184(sp)
   8a464:	d9002f17 	ldw	r4,188(sp)
   8a468:	18800017 	ldw	r2,0(r3)
   8a46c:	18c00104 	addi	r3,r3,4
   8a470:	d8c02e15 	stw	r3,184(sp)
   8a474:	11000015 	stw	r4,0(r2)
   8a478:	00395406 	br	889cc <__alt_data_end+0xfffb329c>
   8a47c:	d9002e17 	ldw	r4,184(sp)
   8a480:	002d883a 	mov	r22,zero
   8a484:	24c00017 	ldw	r19,0(r4)
   8a488:	21000104 	addi	r4,r4,4
   8a48c:	d9002e15 	stw	r4,184(sp)
   8a490:	003c0706 	br	894b0 <__alt_data_end+0xfffb3d80>
   8a494:	d9402e17 	ldw	r5,184(sp)
   8a498:	d8c02a17 	ldw	r3,168(sp)
   8a49c:	002d883a 	mov	r22,zero
   8a4a0:	28800104 	addi	r2,r5,4
   8a4a4:	2cc0000b 	ldhu	r19,0(r5)
   8a4a8:	183dc10e 	bge	r3,zero,89bb0 <__alt_data_end+0xfffb4480>
   8a4ac:	003f7506 	br	8a284 <__alt_data_end+0xfffb4b54>
   8a4b0:	04000274 	movhi	r16,9
   8a4b4:	84106404 	addi	r16,r16,16784
   8a4b8:	003aa706 	br	88f58 <__alt_data_end+0xfffb3828>
   8a4bc:	d9002d17 	ldw	r4,180(sp)
   8a4c0:	d9801e04 	addi	r6,sp,120
   8a4c4:	b80b883a 	mov	r5,r23
   8a4c8:	008eaac0 	call	8eaac <__sprint_r>
   8a4cc:	103a0b1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a4d0:	dc402617 	ldw	r17,152(sp)
   8a4d4:	d8c02017 	ldw	r3,128(sp)
   8a4d8:	da000404 	addi	r8,sp,16
   8a4dc:	003f9c06 	br	8a350 <__alt_data_end+0xfffb4c20>
   8a4e0:	ac400043 	ldbu	r17,1(r21)
   8a4e4:	84000814 	ori	r16,r16,32
   8a4e8:	ad400044 	addi	r21,r21,1
   8a4ec:	8c403fcc 	andi	r17,r17,255
   8a4f0:	8c40201c 	xori	r17,r17,128
   8a4f4:	8c7fe004 	addi	r17,r17,-128
   8a4f8:	00395e06 	br	88a74 <__alt_data_end+0xfffb3344>
   8a4fc:	d8c02e15 	stw	r3,184(sp)
   8a500:	0039883a 	mov	fp,zero
   8a504:	003e3506 	br	89ddc <__alt_data_end+0xfffb46ac>
   8a508:	d9002d17 	ldw	r4,180(sp)
   8a50c:	d9801e04 	addi	r6,sp,120
   8a510:	b80b883a 	mov	r5,r23
   8a514:	008eaac0 	call	8eaac <__sprint_r>
   8a518:	1039f81e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a51c:	d8c02017 	ldw	r3,128(sp)
   8a520:	da000404 	addi	r8,sp,16
   8a524:	003cd006 	br	89868 <__alt_data_end+0xfffb4138>
   8a528:	8009883a 	mov	r4,r16
   8a52c:	df003d15 	stw	fp,244(sp)
   8a530:	00888540 	call	88854 <strlen>
   8a534:	d8802b15 	stw	r2,172(sp)
   8a538:	da003d17 	ldw	r8,244(sp)
   8a53c:	103c200e 	bge	r2,zero,895c0 <__alt_data_end+0xfffb3e90>
   8a540:	0005883a 	mov	r2,zero
   8a544:	003c1e06 	br	895c0 <__alt_data_end+0xfffb3e90>
   8a548:	d9002d17 	ldw	r4,180(sp)
   8a54c:	d9801e04 	addi	r6,sp,120
   8a550:	b80b883a 	mov	r5,r23
   8a554:	008eaac0 	call	8eaac <__sprint_r>
   8a558:	1039e81e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a55c:	d8c02017 	ldw	r3,128(sp)
   8a560:	d8801f17 	ldw	r2,124(sp)
   8a564:	da000404 	addi	r8,sp,16
   8a568:	d9403317 	ldw	r5,204(sp)
   8a56c:	10800044 	addi	r2,r2,1
   8a570:	44000015 	stw	r16,0(r8)
   8a574:	28c7883a 	add	r3,r5,r3
   8a578:	003b5b06 	br	892e8 <__alt_data_end+0xfffb3bb8>
   8a57c:	01000274 	movhi	r4,9
   8a580:	21107884 	addi	r4,r4,16866
   8a584:	d9003515 	stw	r4,212(sp)
   8a588:	003af206 	br	89154 <__alt_data_end+0xfffb3a24>
   8a58c:	013fffc4 	movi	r4,-1
   8a590:	003a0806 	br	88db4 <__alt_data_end+0xfffb3684>
   8a594:	0023883a 	mov	r17,zero
   8a598:	003d9d06 	br	89c10 <__alt_data_end+0xfffb44e0>
   8a59c:	d9002d17 	ldw	r4,180(sp)
   8a5a0:	d9801e04 	addi	r6,sp,120
   8a5a4:	b80b883a 	mov	r5,r23
   8a5a8:	008eaac0 	call	8eaac <__sprint_r>
   8a5ac:	1039d31e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a5b0:	d8c02017 	ldw	r3,128(sp)
   8a5b4:	da000404 	addi	r8,sp,16
   8a5b8:	003d9406 	br	89c0c <__alt_data_end+0xfffb44dc>
   8a5bc:	01000274 	movhi	r4,9
   8a5c0:	21107484 	addi	r4,r4,16850
   8a5c4:	d9002c15 	stw	r4,176(sp)
   8a5c8:	d9002c17 	ldw	r4,176(sp)
   8a5cc:	1c47883a 	add	r3,r3,r17
   8a5d0:	10800044 	addi	r2,r2,1
   8a5d4:	41000015 	stw	r4,0(r8)
   8a5d8:	44400115 	stw	r17,4(r8)
   8a5dc:	d8c02015 	stw	r3,128(sp)
   8a5e0:	d8801f15 	stw	r2,124(sp)
   8a5e4:	010001c4 	movi	r4,7
   8a5e8:	20bfd716 	blt	r4,r2,8a548 <__alt_data_end+0xfffb4e18>
   8a5ec:	42000204 	addi	r8,r8,8
   8a5f0:	003fdd06 	br	8a568 <__alt_data_end+0xfffb4e38>
   8a5f4:	d9002d17 	ldw	r4,180(sp)
   8a5f8:	d9801e04 	addi	r6,sp,120
   8a5fc:	b80b883a 	mov	r5,r23
   8a600:	008eaac0 	call	8eaac <__sprint_r>
   8a604:	1039bd1e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a608:	d8802617 	ldw	r2,152(sp)
   8a60c:	d8c02017 	ldw	r3,128(sp)
   8a610:	da000404 	addi	r8,sp,16
   8a614:	003e1006 	br	89e58 <__alt_data_end+0xfffb4728>
   8a618:	00800044 	movi	r2,1
   8a61c:	10803fcc 	andi	r2,r2,255
   8a620:	00c00044 	movi	r3,1
   8a624:	10fa0d26 	beq	r2,r3,88e5c <__alt_data_end+0xfffb372c>
   8a628:	00c00084 	movi	r3,2
   8a62c:	10fbaf26 	beq	r2,r3,894ec <__alt_data_end+0xfffb3dbc>
   8a630:	003a6d06 	br	88fe8 <__alt_data_end+0xfffb38b8>
   8a634:	01000274 	movhi	r4,9
   8a638:	21107884 	addi	r4,r4,16866
   8a63c:	d9003515 	stw	r4,212(sp)
   8a640:	003b5406 	br	89394 <__alt_data_end+0xfffb3c64>
   8a644:	d8802a17 	ldw	r2,168(sp)
   8a648:	00c00184 	movi	r3,6
   8a64c:	1880012e 	bgeu	r3,r2,8a654 <___vfprintf_internal_r+0x1d68>
   8a650:	1805883a 	mov	r2,r3
   8a654:	d8802b15 	stw	r2,172(sp)
   8a658:	1000ef16 	blt	r2,zero,8aa18 <___vfprintf_internal_r+0x212c>
   8a65c:	04000274 	movhi	r16,9
   8a660:	d8802915 	stw	r2,164(sp)
   8a664:	dcc02e15 	stw	r19,184(sp)
   8a668:	d8002a15 	stw	zero,168(sp)
   8a66c:	d8003215 	stw	zero,200(sp)
   8a670:	84107204 	addi	r16,r16,16840
   8a674:	0039883a 	mov	fp,zero
   8a678:	003a8006 	br	8907c <__alt_data_end+0xfffb394c>
   8a67c:	0021883a 	mov	r16,zero
   8a680:	003e0706 	br	89ea0 <__alt_data_end+0xfffb4770>
   8a684:	d9002d17 	ldw	r4,180(sp)
   8a688:	d9801e04 	addi	r6,sp,120
   8a68c:	b80b883a 	mov	r5,r23
   8a690:	008eaac0 	call	8eaac <__sprint_r>
   8a694:	1039991e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a698:	d8802617 	ldw	r2,152(sp)
   8a69c:	d9403317 	ldw	r5,204(sp)
   8a6a0:	d8c02017 	ldw	r3,128(sp)
   8a6a4:	da000404 	addi	r8,sp,16
   8a6a8:	2885c83a 	sub	r2,r5,r2
   8a6ac:	003dfb06 	br	89e9c <__alt_data_end+0xfffb476c>
   8a6b0:	9080004c 	andi	r2,r18,1
   8a6b4:	103e8f1e 	bne	r2,zero,8a0f4 <__alt_data_end+0xfffb49c4>
   8a6b8:	d8802117 	ldw	r2,132(sp)
   8a6bc:	003e9e06 	br	8a138 <__alt_data_end+0xfffb4a08>
   8a6c0:	1025883a 	mov	r18,r2
   8a6c4:	0039883a 	mov	fp,zero
   8a6c8:	00800084 	movi	r2,2
   8a6cc:	003fd306 	br	8a61c <__alt_data_end+0xfffb4eec>
   8a6d0:	07000b44 	movi	fp,45
   8a6d4:	df002785 	stb	fp,158(sp)
   8a6d8:	003a1b06 	br	88f48 <__alt_data_end+0xfffb3818>
   8a6dc:	00c00b44 	movi	r3,45
   8a6e0:	d8c02785 	stb	r3,158(sp)
   8a6e4:	d8802915 	stw	r2,164(sp)
   8a6e8:	dc802c17 	ldw	r18,176(sp)
   8a6ec:	d8002a15 	stw	zero,168(sp)
   8a6f0:	07000b44 	movi	fp,45
   8a6f4:	003a5e06 	br	89070 <__alt_data_end+0xfffb3940>
   8a6f8:	04000274 	movhi	r16,9
   8a6fc:	84106704 	addi	r16,r16,16796
   8a700:	003f4706 	br	8a420 <__alt_data_end+0xfffb4cf0>
   8a704:	d9002e17 	ldw	r4,184(sp)
   8a708:	d9402f17 	ldw	r5,188(sp)
   8a70c:	20800017 	ldw	r2,0(r4)
   8a710:	21000104 	addi	r4,r4,4
   8a714:	d9002e15 	stw	r4,184(sp)
   8a718:	11400015 	stw	r5,0(r2)
   8a71c:	0038ab06 	br	889cc <__alt_data_end+0xfffb329c>
   8a720:	dd802617 	ldw	r22,152(sp)
   8a724:	00bfff44 	movi	r2,-3
   8a728:	b0801c16 	blt	r22,r2,8a79c <___vfprintf_internal_r+0x1eb0>
   8a72c:	d9402a17 	ldw	r5,168(sp)
   8a730:	2d801a16 	blt	r5,r22,8a79c <___vfprintf_internal_r+0x1eb0>
   8a734:	dd803215 	stw	r22,200(sp)
   8a738:	003e8906 	br	8a160 <__alt_data_end+0xfffb4a30>
   8a73c:	01000274 	movhi	r4,9
   8a740:	21107484 	addi	r4,r4,16850
   8a744:	d9002c15 	stw	r4,176(sp)
   8a748:	003c9106 	br	89990 <__alt_data_end+0xfffb4260>
   8a74c:	e005883a 	mov	r2,fp
   8a750:	003e7906 	br	8a138 <__alt_data_end+0xfffb4a08>
   8a754:	d9002a17 	ldw	r4,168(sp)
   8a758:	df002783 	ldbu	fp,158(sp)
   8a75c:	dcc02e15 	stw	r19,184(sp)
   8a760:	d9002915 	stw	r4,164(sp)
   8a764:	d9002b15 	stw	r4,172(sp)
   8a768:	d8002a15 	stw	zero,168(sp)
   8a76c:	d8003215 	stw	zero,200(sp)
   8a770:	003a3b06 	br	89060 <__alt_data_end+0xfffb3930>
   8a774:	9080004c 	andi	r2,r18,1
   8a778:	0039883a 	mov	fp,zero
   8a77c:	10000426 	beq	r2,zero,8a790 <___vfprintf_internal_r+0x1ea4>
   8a780:	00800c04 	movi	r2,48
   8a784:	dc001dc4 	addi	r16,sp,119
   8a788:	d8801dc5 	stb	r2,119(sp)
   8a78c:	003b6406 	br	89520 <__alt_data_end+0xfffb3df0>
   8a790:	d8002b15 	stw	zero,172(sp)
   8a794:	dc001e04 	addi	r16,sp,120
   8a798:	003a2b06 	br	89048 <__alt_data_end+0xfffb3918>
   8a79c:	8c7fff84 	addi	r17,r17,-2
   8a7a0:	b5bfffc4 	addi	r22,r22,-1
   8a7a4:	dd802615 	stw	r22,152(sp)
   8a7a8:	dc4022c5 	stb	r17,139(sp)
   8a7ac:	b000bf16 	blt	r22,zero,8aaac <___vfprintf_internal_r+0x21c0>
   8a7b0:	00800ac4 	movi	r2,43
   8a7b4:	d8802305 	stb	r2,140(sp)
   8a7b8:	00800244 	movi	r2,9
   8a7bc:	15807016 	blt	r2,r22,8a980 <___vfprintf_internal_r+0x2094>
   8a7c0:	00800c04 	movi	r2,48
   8a7c4:	b5800c04 	addi	r22,r22,48
   8a7c8:	d8802345 	stb	r2,141(sp)
   8a7cc:	dd802385 	stb	r22,142(sp)
   8a7d0:	d88023c4 	addi	r2,sp,143
   8a7d4:	df0022c4 	addi	fp,sp,139
   8a7d8:	d8c03317 	ldw	r3,204(sp)
   8a7dc:	1739c83a 	sub	fp,r2,fp
   8a7e0:	d9003317 	ldw	r4,204(sp)
   8a7e4:	e0c7883a 	add	r3,fp,r3
   8a7e8:	df003a15 	stw	fp,232(sp)
   8a7ec:	d8c02b15 	stw	r3,172(sp)
   8a7f0:	00800044 	movi	r2,1
   8a7f4:	1100b30e 	bge	r2,r4,8aac4 <___vfprintf_internal_r+0x21d8>
   8a7f8:	d8c02b17 	ldw	r3,172(sp)
   8a7fc:	18c00044 	addi	r3,r3,1
   8a800:	d8c02b15 	stw	r3,172(sp)
   8a804:	1805883a 	mov	r2,r3
   8a808:	1800ac16 	blt	r3,zero,8aabc <___vfprintf_internal_r+0x21d0>
   8a80c:	d8003215 	stw	zero,200(sp)
   8a810:	003e5d06 	br	8a188 <__alt_data_end+0xfffb4a58>
   8a814:	d9002d17 	ldw	r4,180(sp)
   8a818:	d9801e04 	addi	r6,sp,120
   8a81c:	b80b883a 	mov	r5,r23
   8a820:	008eaac0 	call	8eaac <__sprint_r>
   8a824:	1039351e 	bne	r2,zero,88cfc <__alt_data_end+0xfffb35cc>
   8a828:	dc402617 	ldw	r17,152(sp)
   8a82c:	d8c02017 	ldw	r3,128(sp)
   8a830:	d8801f17 	ldw	r2,124(sp)
   8a834:	da000404 	addi	r8,sp,16
   8a838:	003ed606 	br	8a394 <__alt_data_end+0xfffb4c64>
   8a83c:	182b883a 	mov	r21,r3
   8a840:	d8002a15 	stw	zero,168(sp)
   8a844:	00388c06 	br	88a78 <__alt_data_end+0xfffb3348>
   8a848:	d8802a17 	ldw	r2,168(sp)
   8a84c:	103e071e 	bne	r2,zero,8a06c <__alt_data_end+0xfffb493c>
   8a850:	dc002a15 	stw	r16,168(sp)
   8a854:	003e0506 	br	8a06c <__alt_data_end+0xfffb493c>
   8a858:	d9002a17 	ldw	r4,168(sp)
   8a85c:	20c00044 	addi	r3,r4,1
   8a860:	003e0f06 	br	8a0a0 <__alt_data_end+0xfffb4970>
   8a864:	01400184 	movi	r5,6
   8a868:	d9402a15 	stw	r5,168(sp)
   8a86c:	003dff06 	br	8a06c <__alt_data_end+0xfffb493c>
   8a870:	d8802104 	addi	r2,sp,132
   8a874:	d8800315 	stw	r2,12(sp)
   8a878:	d8802504 	addi	r2,sp,148
   8a87c:	d8800215 	stw	r2,8(sp)
   8a880:	d8802604 	addi	r2,sp,152
   8a884:	d8800115 	stw	r2,4(sp)
   8a888:	d8802a17 	ldw	r2,168(sp)
   8a88c:	d9403617 	ldw	r5,216(sp)
   8a890:	d9002d17 	ldw	r4,180(sp)
   8a894:	d8800015 	stw	r2,0(sp)
   8a898:	01c000c4 	movi	r7,3
   8a89c:	980d883a 	mov	r6,r19
   8a8a0:	da003d15 	stw	r8,244(sp)
   8a8a4:	008b0d00 	call	8b0d0 <_dtoa_r>
   8a8a8:	d8c02a17 	ldw	r3,168(sp)
   8a8ac:	da003d17 	ldw	r8,244(sp)
   8a8b0:	1021883a 	mov	r16,r2
   8a8b4:	10f9883a 	add	fp,r2,r3
   8a8b8:	81000007 	ldb	r4,0(r16)
   8a8bc:	00800c04 	movi	r2,48
   8a8c0:	20805e26 	beq	r4,r2,8aa3c <___vfprintf_internal_r+0x2150>
   8a8c4:	d8c02617 	ldw	r3,152(sp)
   8a8c8:	e0f9883a 	add	fp,fp,r3
   8a8cc:	003e0a06 	br	8a0f8 <__alt_data_end+0xfffb49c8>
   8a8d0:	00c00b44 	movi	r3,45
   8a8d4:	24e0003c 	xorhi	r19,r4,32768
   8a8d8:	d8c02905 	stb	r3,164(sp)
   8a8dc:	003de906 	br	8a084 <__alt_data_end+0xfffb4954>
   8a8e0:	d8c03217 	ldw	r3,200(sp)
   8a8e4:	00c07a0e 	bge	zero,r3,8aad0 <___vfprintf_internal_r+0x21e4>
   8a8e8:	00800044 	movi	r2,1
   8a8ec:	d9003317 	ldw	r4,204(sp)
   8a8f0:	1105883a 	add	r2,r2,r4
   8a8f4:	d8802b15 	stw	r2,172(sp)
   8a8f8:	10004e16 	blt	r2,zero,8aa34 <___vfprintf_internal_r+0x2148>
   8a8fc:	044019c4 	movi	r17,103
   8a900:	003e2106 	br	8a188 <__alt_data_end+0xfffb4a58>
   8a904:	d9002a17 	ldw	r4,168(sp)
   8a908:	d8802104 	addi	r2,sp,132
   8a90c:	d8800315 	stw	r2,12(sp)
   8a910:	d9000015 	stw	r4,0(sp)
   8a914:	d8802504 	addi	r2,sp,148
   8a918:	d9403617 	ldw	r5,216(sp)
   8a91c:	d9002d17 	ldw	r4,180(sp)
   8a920:	d8800215 	stw	r2,8(sp)
   8a924:	d8802604 	addi	r2,sp,152
   8a928:	d8800115 	stw	r2,4(sp)
   8a92c:	01c000c4 	movi	r7,3
   8a930:	980d883a 	mov	r6,r19
   8a934:	da003d15 	stw	r8,244(sp)
   8a938:	008b0d00 	call	8b0d0 <_dtoa_r>
   8a93c:	d8c02a17 	ldw	r3,168(sp)
   8a940:	da003d17 	ldw	r8,244(sp)
   8a944:	1021883a 	mov	r16,r2
   8a948:	00801184 	movi	r2,70
   8a94c:	80f9883a 	add	fp,r16,r3
   8a950:	88bfd926 	beq	r17,r2,8a8b8 <__alt_data_end+0xfffb5188>
   8a954:	003de806 	br	8a0f8 <__alt_data_end+0xfffb49c8>
   8a958:	d9002a17 	ldw	r4,168(sp)
   8a95c:	00c04d0e 	bge	zero,r3,8aa94 <___vfprintf_internal_r+0x21a8>
   8a960:	2000441e 	bne	r4,zero,8aa74 <___vfprintf_internal_r+0x2188>
   8a964:	9480004c 	andi	r18,r18,1
   8a968:	9000421e 	bne	r18,zero,8aa74 <___vfprintf_internal_r+0x2188>
   8a96c:	1805883a 	mov	r2,r3
   8a970:	18006f16 	blt	r3,zero,8ab30 <___vfprintf_internal_r+0x2244>
   8a974:	d8c03217 	ldw	r3,200(sp)
   8a978:	d8c02b15 	stw	r3,172(sp)
   8a97c:	003e0206 	br	8a188 <__alt_data_end+0xfffb4a58>
   8a980:	df0022c4 	addi	fp,sp,139
   8a984:	dc002a15 	stw	r16,168(sp)
   8a988:	4027883a 	mov	r19,r8
   8a98c:	e021883a 	mov	r16,fp
   8a990:	b009883a 	mov	r4,r22
   8a994:	01400284 	movi	r5,10
   8a998:	00829180 	call	82918 <__modsi3>
   8a99c:	10800c04 	addi	r2,r2,48
   8a9a0:	843fffc4 	addi	r16,r16,-1
   8a9a4:	b009883a 	mov	r4,r22
   8a9a8:	01400284 	movi	r5,10
   8a9ac:	80800005 	stb	r2,0(r16)
   8a9b0:	00828940 	call	82894 <__divsi3>
   8a9b4:	102d883a 	mov	r22,r2
   8a9b8:	00800244 	movi	r2,9
   8a9bc:	15bff416 	blt	r2,r22,8a990 <__alt_data_end+0xfffb5260>
   8a9c0:	9811883a 	mov	r8,r19
   8a9c4:	b0800c04 	addi	r2,r22,48
   8a9c8:	8027883a 	mov	r19,r16
   8a9cc:	997fffc4 	addi	r5,r19,-1
   8a9d0:	98bfffc5 	stb	r2,-1(r19)
   8a9d4:	dc002a17 	ldw	r16,168(sp)
   8a9d8:	2f006d2e 	bgeu	r5,fp,8ab90 <___vfprintf_internal_r+0x22a4>
   8a9dc:	d9c02384 	addi	r7,sp,142
   8a9e0:	3ccfc83a 	sub	r7,r7,r19
   8a9e4:	d9002344 	addi	r4,sp,141
   8a9e8:	e1cf883a 	add	r7,fp,r7
   8a9ec:	00000106 	br	8a9f4 <___vfprintf_internal_r+0x2108>
   8a9f0:	28800003 	ldbu	r2,0(r5)
   8a9f4:	20800005 	stb	r2,0(r4)
   8a9f8:	21000044 	addi	r4,r4,1
   8a9fc:	29400044 	addi	r5,r5,1
   8aa00:	393ffb1e 	bne	r7,r4,8a9f0 <__alt_data_end+0xfffb52c0>
   8aa04:	d8802304 	addi	r2,sp,140
   8aa08:	14c5c83a 	sub	r2,r2,r19
   8aa0c:	d8c02344 	addi	r3,sp,141
   8aa10:	1885883a 	add	r2,r3,r2
   8aa14:	003f7006 	br	8a7d8 <__alt_data_end+0xfffb50a8>
   8aa18:	0005883a 	mov	r2,zero
   8aa1c:	003f0f06 	br	8a65c <__alt_data_end+0xfffb4f2c>
   8aa20:	d8c03217 	ldw	r3,200(sp)
   8aa24:	18c00044 	addi	r3,r3,1
   8aa28:	d8c02b15 	stw	r3,172(sp)
   8aa2c:	1805883a 	mov	r2,r3
   8aa30:	183fb20e 	bge	r3,zero,8a8fc <__alt_data_end+0xfffb51cc>
   8aa34:	0005883a 	mov	r2,zero
   8aa38:	003fb006 	br	8a8fc <__alt_data_end+0xfffb51cc>
   8aa3c:	d9003617 	ldw	r4,216(sp)
   8aa40:	000d883a 	mov	r6,zero
   8aa44:	000f883a 	mov	r7,zero
   8aa48:	980b883a 	mov	r5,r19
   8aa4c:	d8c03c15 	stw	r3,240(sp)
   8aa50:	da003d15 	stw	r8,244(sp)
   8aa54:	009128c0 	call	9128c <__eqdf2>
   8aa58:	d8c03c17 	ldw	r3,240(sp)
   8aa5c:	da003d17 	ldw	r8,244(sp)
   8aa60:	103f9826 	beq	r2,zero,8a8c4 <__alt_data_end+0xfffb5194>
   8aa64:	00800044 	movi	r2,1
   8aa68:	10c7c83a 	sub	r3,r2,r3
   8aa6c:	d8c02615 	stw	r3,152(sp)
   8aa70:	003f9506 	br	8a8c8 <__alt_data_end+0xfffb5198>
   8aa74:	d9002a17 	ldw	r4,168(sp)
   8aa78:	d8c03217 	ldw	r3,200(sp)
   8aa7c:	20800044 	addi	r2,r4,1
   8aa80:	1885883a 	add	r2,r3,r2
   8aa84:	d8802b15 	stw	r2,172(sp)
   8aa88:	103dbf0e 	bge	r2,zero,8a188 <__alt_data_end+0xfffb4a58>
   8aa8c:	0005883a 	mov	r2,zero
   8aa90:	003dbd06 	br	8a188 <__alt_data_end+0xfffb4a58>
   8aa94:	2000201e 	bne	r4,zero,8ab18 <___vfprintf_internal_r+0x222c>
   8aa98:	9480004c 	andi	r18,r18,1
   8aa9c:	90001e1e 	bne	r18,zero,8ab18 <___vfprintf_internal_r+0x222c>
   8aaa0:	00800044 	movi	r2,1
   8aaa4:	d8802b15 	stw	r2,172(sp)
   8aaa8:	003db706 	br	8a188 <__alt_data_end+0xfffb4a58>
   8aaac:	00800b44 	movi	r2,45
   8aab0:	05adc83a 	sub	r22,zero,r22
   8aab4:	d8802305 	stb	r2,140(sp)
   8aab8:	003f3f06 	br	8a7b8 <__alt_data_end+0xfffb5088>
   8aabc:	0005883a 	mov	r2,zero
   8aac0:	003f5206 	br	8a80c <__alt_data_end+0xfffb50dc>
   8aac4:	90a4703a 	and	r18,r18,r2
   8aac8:	903f4e26 	beq	r18,zero,8a804 <__alt_data_end+0xfffb50d4>
   8aacc:	003f4a06 	br	8a7f8 <__alt_data_end+0xfffb50c8>
   8aad0:	00800084 	movi	r2,2
   8aad4:	10c5c83a 	sub	r2,r2,r3
   8aad8:	003f8406 	br	8a8ec <__alt_data_end+0xfffb51bc>
   8aadc:	d9402e17 	ldw	r5,184(sp)
   8aae0:	d9002e17 	ldw	r4,184(sp)
   8aae4:	ac400043 	ldbu	r17,1(r21)
   8aae8:	29400017 	ldw	r5,0(r5)
   8aaec:	20800104 	addi	r2,r4,4
   8aaf0:	d8802e15 	stw	r2,184(sp)
   8aaf4:	d9402a15 	stw	r5,168(sp)
   8aaf8:	182b883a 	mov	r21,r3
   8aafc:	283e7b0e 	bge	r5,zero,8a4ec <__alt_data_end+0xfffb4dbc>
   8ab00:	8c403fcc 	andi	r17,r17,255
   8ab04:	017fffc4 	movi	r5,-1
   8ab08:	8c40201c 	xori	r17,r17,128
   8ab0c:	d9402a15 	stw	r5,168(sp)
   8ab10:	8c7fe004 	addi	r17,r17,-128
   8ab14:	0037d706 	br	88a74 <__alt_data_end+0xfffb3344>
   8ab18:	d8c02a17 	ldw	r3,168(sp)
   8ab1c:	18c00084 	addi	r3,r3,2
   8ab20:	d8c02b15 	stw	r3,172(sp)
   8ab24:	1805883a 	mov	r2,r3
   8ab28:	183d970e 	bge	r3,zero,8a188 <__alt_data_end+0xfffb4a58>
   8ab2c:	003fd706 	br	8aa8c <__alt_data_end+0xfffb535c>
   8ab30:	0005883a 	mov	r2,zero
   8ab34:	003f8f06 	br	8a974 <__alt_data_end+0xfffb5244>
   8ab38:	9080004c 	andi	r2,r18,1
   8ab3c:	103f821e 	bne	r2,zero,8a948 <__alt_data_end+0xfffb5218>
   8ab40:	d8802117 	ldw	r2,132(sp)
   8ab44:	1405c83a 	sub	r2,r2,r16
   8ab48:	d8803315 	stw	r2,204(sp)
   8ab4c:	b47ef426 	beq	r22,r17,8a720 <__alt_data_end+0xfffb4ff0>
   8ab50:	dd802617 	ldw	r22,152(sp)
   8ab54:	003f1206 	br	8a7a0 <__alt_data_end+0xfffb5070>
   8ab58:	d8c02b03 	ldbu	r3,172(sp)
   8ab5c:	d8c02785 	stb	r3,158(sp)
   8ab60:	0038df06 	br	88ee0 <__alt_data_end+0xfffb37b0>
   8ab64:	d8c02b03 	ldbu	r3,172(sp)
   8ab68:	d8c02785 	stb	r3,158(sp)
   8ab6c:	0038aa06 	br	88e18 <__alt_data_end+0xfffb36e8>
   8ab70:	d8c02b03 	ldbu	r3,172(sp)
   8ab74:	d8c02785 	stb	r3,158(sp)
   8ab78:	003a4306 	br	89488 <__alt_data_end+0xfffb3d58>
   8ab7c:	d8c02b03 	ldbu	r3,172(sp)
   8ab80:	d8c02785 	stb	r3,158(sp)
   8ab84:	003af506 	br	8975c <__alt_data_end+0xfffb402c>
   8ab88:	0005883a 	mov	r2,zero
   8ab8c:	003d7b06 	br	8a17c <__alt_data_end+0xfffb4a4c>
   8ab90:	d8802344 	addi	r2,sp,141
   8ab94:	003f1006 	br	8a7d8 <__alt_data_end+0xfffb50a8>
   8ab98:	d8c02b03 	ldbu	r3,172(sp)
   8ab9c:	d8c02785 	stb	r3,158(sp)
   8aba0:	0038fd06 	br	88f98 <__alt_data_end+0xfffb3868>
   8aba4:	d8c02b03 	ldbu	r3,172(sp)
   8aba8:	d8c02785 	stb	r3,158(sp)
   8abac:	003a9706 	br	8960c <__alt_data_end+0xfffb3edc>
   8abb0:	d8c02b03 	ldbu	r3,172(sp)
   8abb4:	d8c02785 	stb	r3,158(sp)
   8abb8:	003a1806 	br	8941c <__alt_data_end+0xfffb3cec>
   8abbc:	d8c02b03 	ldbu	r3,172(sp)
   8abc0:	d8c02785 	stb	r3,158(sp)
   8abc4:	003abe06 	br	896c0 <__alt_data_end+0xfffb3f90>

0008abc8 <__vfprintf_internal>:
   8abc8:	008002b4 	movhi	r2,10
   8abcc:	10b7b804 	addi	r2,r2,-8480
   8abd0:	300f883a 	mov	r7,r6
   8abd4:	280d883a 	mov	r6,r5
   8abd8:	200b883a 	mov	r5,r4
   8abdc:	11000017 	ldw	r4,0(r2)
   8abe0:	00888ec1 	jmpi	888ec <___vfprintf_internal_r>

0008abe4 <__sbprintf>:
   8abe4:	2880030b 	ldhu	r2,12(r5)
   8abe8:	2ac01917 	ldw	r11,100(r5)
   8abec:	2a80038b 	ldhu	r10,14(r5)
   8abf0:	2a400717 	ldw	r9,28(r5)
   8abf4:	2a000917 	ldw	r8,36(r5)
   8abf8:	defee204 	addi	sp,sp,-1144
   8abfc:	00c10004 	movi	r3,1024
   8ac00:	dc011a15 	stw	r16,1128(sp)
   8ac04:	10bfff4c 	andi	r2,r2,65533
   8ac08:	2821883a 	mov	r16,r5
   8ac0c:	d8cb883a 	add	r5,sp,r3
   8ac10:	dc811c15 	stw	r18,1136(sp)
   8ac14:	dc411b15 	stw	r17,1132(sp)
   8ac18:	dfc11d15 	stw	ra,1140(sp)
   8ac1c:	2025883a 	mov	r18,r4
   8ac20:	d881030d 	sth	r2,1036(sp)
   8ac24:	dac11915 	stw	r11,1124(sp)
   8ac28:	da81038d 	sth	r10,1038(sp)
   8ac2c:	da410715 	stw	r9,1052(sp)
   8ac30:	da010915 	stw	r8,1060(sp)
   8ac34:	dec10015 	stw	sp,1024(sp)
   8ac38:	dec10415 	stw	sp,1040(sp)
   8ac3c:	d8c10215 	stw	r3,1032(sp)
   8ac40:	d8c10515 	stw	r3,1044(sp)
   8ac44:	d8010615 	stw	zero,1048(sp)
   8ac48:	00888ec0 	call	888ec <___vfprintf_internal_r>
   8ac4c:	1023883a 	mov	r17,r2
   8ac50:	10000416 	blt	r2,zero,8ac64 <__sbprintf+0x80>
   8ac54:	d9410004 	addi	r5,sp,1024
   8ac58:	9009883a 	mov	r4,r18
   8ac5c:	00867540 	call	86754 <_fflush_r>
   8ac60:	10000d1e 	bne	r2,zero,8ac98 <__sbprintf+0xb4>
   8ac64:	d881030b 	ldhu	r2,1036(sp)
   8ac68:	1080100c 	andi	r2,r2,64
   8ac6c:	10000326 	beq	r2,zero,8ac7c <__sbprintf+0x98>
   8ac70:	8080030b 	ldhu	r2,12(r16)
   8ac74:	10801014 	ori	r2,r2,64
   8ac78:	8080030d 	sth	r2,12(r16)
   8ac7c:	8805883a 	mov	r2,r17
   8ac80:	dfc11d17 	ldw	ra,1140(sp)
   8ac84:	dc811c17 	ldw	r18,1136(sp)
   8ac88:	dc411b17 	ldw	r17,1132(sp)
   8ac8c:	dc011a17 	ldw	r16,1128(sp)
   8ac90:	dec11e04 	addi	sp,sp,1144
   8ac94:	f800283a 	ret
   8ac98:	047fffc4 	movi	r17,-1
   8ac9c:	003ff106 	br	8ac64 <__alt_data_end+0xfffb5534>

0008aca0 <_write_r>:
   8aca0:	defffd04 	addi	sp,sp,-12
   8aca4:	2805883a 	mov	r2,r5
   8aca8:	dc000015 	stw	r16,0(sp)
   8acac:	040002b4 	movhi	r16,10
   8acb0:	dc400115 	stw	r17,4(sp)
   8acb4:	300b883a 	mov	r5,r6
   8acb8:	841eac04 	addi	r16,r16,31408
   8acbc:	2023883a 	mov	r17,r4
   8acc0:	380d883a 	mov	r6,r7
   8acc4:	1009883a 	mov	r4,r2
   8acc8:	dfc00215 	stw	ra,8(sp)
   8accc:	80000015 	stw	zero,0(r16)
   8acd0:	0091ed40 	call	91ed4 <write>
   8acd4:	00ffffc4 	movi	r3,-1
   8acd8:	10c00526 	beq	r2,r3,8acf0 <_write_r+0x50>
   8acdc:	dfc00217 	ldw	ra,8(sp)
   8ace0:	dc400117 	ldw	r17,4(sp)
   8ace4:	dc000017 	ldw	r16,0(sp)
   8ace8:	dec00304 	addi	sp,sp,12
   8acec:	f800283a 	ret
   8acf0:	80c00017 	ldw	r3,0(r16)
   8acf4:	183ff926 	beq	r3,zero,8acdc <__alt_data_end+0xfffb55ac>
   8acf8:	88c00015 	stw	r3,0(r17)
   8acfc:	003ff706 	br	8acdc <__alt_data_end+0xfffb55ac>

0008ad00 <__swsetup_r>:
   8ad00:	008002b4 	movhi	r2,10
   8ad04:	defffd04 	addi	sp,sp,-12
   8ad08:	10b7b804 	addi	r2,r2,-8480
   8ad0c:	dc400115 	stw	r17,4(sp)
   8ad10:	2023883a 	mov	r17,r4
   8ad14:	11000017 	ldw	r4,0(r2)
   8ad18:	dc000015 	stw	r16,0(sp)
   8ad1c:	dfc00215 	stw	ra,8(sp)
   8ad20:	2821883a 	mov	r16,r5
   8ad24:	20000226 	beq	r4,zero,8ad30 <__swsetup_r+0x30>
   8ad28:	20800e17 	ldw	r2,56(r4)
   8ad2c:	10003126 	beq	r2,zero,8adf4 <__swsetup_r+0xf4>
   8ad30:	8080030b 	ldhu	r2,12(r16)
   8ad34:	10c0020c 	andi	r3,r2,8
   8ad38:	1009883a 	mov	r4,r2
   8ad3c:	18000f26 	beq	r3,zero,8ad7c <__swsetup_r+0x7c>
   8ad40:	80c00417 	ldw	r3,16(r16)
   8ad44:	18001526 	beq	r3,zero,8ad9c <__swsetup_r+0x9c>
   8ad48:	1100004c 	andi	r4,r2,1
   8ad4c:	20001c1e 	bne	r4,zero,8adc0 <__swsetup_r+0xc0>
   8ad50:	1080008c 	andi	r2,r2,2
   8ad54:	1000291e 	bne	r2,zero,8adfc <__swsetup_r+0xfc>
   8ad58:	80800517 	ldw	r2,20(r16)
   8ad5c:	80800215 	stw	r2,8(r16)
   8ad60:	18001c26 	beq	r3,zero,8add4 <__swsetup_r+0xd4>
   8ad64:	0005883a 	mov	r2,zero
   8ad68:	dfc00217 	ldw	ra,8(sp)
   8ad6c:	dc400117 	ldw	r17,4(sp)
   8ad70:	dc000017 	ldw	r16,0(sp)
   8ad74:	dec00304 	addi	sp,sp,12
   8ad78:	f800283a 	ret
   8ad7c:	2080040c 	andi	r2,r4,16
   8ad80:	10002e26 	beq	r2,zero,8ae3c <__swsetup_r+0x13c>
   8ad84:	2080010c 	andi	r2,r4,4
   8ad88:	10001e1e 	bne	r2,zero,8ae04 <__swsetup_r+0x104>
   8ad8c:	80c00417 	ldw	r3,16(r16)
   8ad90:	20800214 	ori	r2,r4,8
   8ad94:	8080030d 	sth	r2,12(r16)
   8ad98:	183feb1e 	bne	r3,zero,8ad48 <__alt_data_end+0xfffb5618>
   8ad9c:	1100a00c 	andi	r4,r2,640
   8ada0:	01408004 	movi	r5,512
   8ada4:	217fe826 	beq	r4,r5,8ad48 <__alt_data_end+0xfffb5618>
   8ada8:	800b883a 	mov	r5,r16
   8adac:	8809883a 	mov	r4,r17
   8adb0:	00878440 	call	87844 <__smakebuf_r>
   8adb4:	8080030b 	ldhu	r2,12(r16)
   8adb8:	80c00417 	ldw	r3,16(r16)
   8adbc:	003fe206 	br	8ad48 <__alt_data_end+0xfffb5618>
   8adc0:	80800517 	ldw	r2,20(r16)
   8adc4:	80000215 	stw	zero,8(r16)
   8adc8:	0085c83a 	sub	r2,zero,r2
   8adcc:	80800615 	stw	r2,24(r16)
   8add0:	183fe41e 	bne	r3,zero,8ad64 <__alt_data_end+0xfffb5634>
   8add4:	80c0030b 	ldhu	r3,12(r16)
   8add8:	0005883a 	mov	r2,zero
   8addc:	1900200c 	andi	r4,r3,128
   8ade0:	203fe126 	beq	r4,zero,8ad68 <__alt_data_end+0xfffb5638>
   8ade4:	18c01014 	ori	r3,r3,64
   8ade8:	80c0030d 	sth	r3,12(r16)
   8adec:	00bfffc4 	movi	r2,-1
   8adf0:	003fdd06 	br	8ad68 <__alt_data_end+0xfffb5638>
   8adf4:	0086b400 	call	86b40 <__sinit>
   8adf8:	003fcd06 	br	8ad30 <__alt_data_end+0xfffb5600>
   8adfc:	0005883a 	mov	r2,zero
   8ae00:	003fd606 	br	8ad5c <__alt_data_end+0xfffb562c>
   8ae04:	81400c17 	ldw	r5,48(r16)
   8ae08:	28000626 	beq	r5,zero,8ae24 <__swsetup_r+0x124>
   8ae0c:	80801004 	addi	r2,r16,64
   8ae10:	28800326 	beq	r5,r2,8ae20 <__swsetup_r+0x120>
   8ae14:	8809883a 	mov	r4,r17
   8ae18:	0086dc00 	call	86dc0 <_free_r>
   8ae1c:	8100030b 	ldhu	r4,12(r16)
   8ae20:	80000c15 	stw	zero,48(r16)
   8ae24:	80c00417 	ldw	r3,16(r16)
   8ae28:	00bff6c4 	movi	r2,-37
   8ae2c:	1108703a 	and	r4,r2,r4
   8ae30:	80000115 	stw	zero,4(r16)
   8ae34:	80c00015 	stw	r3,0(r16)
   8ae38:	003fd506 	br	8ad90 <__alt_data_end+0xfffb5660>
   8ae3c:	00800244 	movi	r2,9
   8ae40:	88800015 	stw	r2,0(r17)
   8ae44:	20801014 	ori	r2,r4,64
   8ae48:	8080030d 	sth	r2,12(r16)
   8ae4c:	00bfffc4 	movi	r2,-1
   8ae50:	003fc506 	br	8ad68 <__alt_data_end+0xfffb5638>

0008ae54 <_close_r>:
   8ae54:	defffd04 	addi	sp,sp,-12
   8ae58:	dc000015 	stw	r16,0(sp)
   8ae5c:	040002b4 	movhi	r16,10
   8ae60:	dc400115 	stw	r17,4(sp)
   8ae64:	841eac04 	addi	r16,r16,31408
   8ae68:	2023883a 	mov	r17,r4
   8ae6c:	2809883a 	mov	r4,r5
   8ae70:	dfc00215 	stw	ra,8(sp)
   8ae74:	80000015 	stw	zero,0(r16)
   8ae78:	00913f80 	call	913f8 <close>
   8ae7c:	00ffffc4 	movi	r3,-1
   8ae80:	10c00526 	beq	r2,r3,8ae98 <_close_r+0x44>
   8ae84:	dfc00217 	ldw	ra,8(sp)
   8ae88:	dc400117 	ldw	r17,4(sp)
   8ae8c:	dc000017 	ldw	r16,0(sp)
   8ae90:	dec00304 	addi	sp,sp,12
   8ae94:	f800283a 	ret
   8ae98:	80c00017 	ldw	r3,0(r16)
   8ae9c:	183ff926 	beq	r3,zero,8ae84 <__alt_data_end+0xfffb5754>
   8aea0:	88c00015 	stw	r3,0(r17)
   8aea4:	003ff706 	br	8ae84 <__alt_data_end+0xfffb5754>

0008aea8 <quorem>:
   8aea8:	defff204 	addi	sp,sp,-56
   8aeac:	ddc00b15 	stw	r23,44(sp)
   8aeb0:	20800417 	ldw	r2,16(r4)
   8aeb4:	2dc00417 	ldw	r23,16(r5)
   8aeb8:	dfc00d15 	stw	ra,52(sp)
   8aebc:	df000c15 	stw	fp,48(sp)
   8aec0:	dd800a15 	stw	r22,40(sp)
   8aec4:	dd400915 	stw	r21,36(sp)
   8aec8:	dd000815 	stw	r20,32(sp)
   8aecc:	dcc00715 	stw	r19,28(sp)
   8aed0:	dc800615 	stw	r18,24(sp)
   8aed4:	dc400515 	stw	r17,20(sp)
   8aed8:	dc000415 	stw	r16,16(sp)
   8aedc:	15c07a16 	blt	r2,r23,8b0c8 <quorem+0x220>
   8aee0:	bdffffc4 	addi	r23,r23,-1
   8aee4:	bde9883a 	add	r20,r23,r23
   8aee8:	28c00504 	addi	r3,r5,20
   8aeec:	a529883a 	add	r20,r20,r20
   8aef0:	1d39883a 	add	fp,r3,r20
   8aef4:	24c00504 	addi	r19,r4,20
   8aef8:	d9400215 	stw	r5,8(sp)
   8aefc:	9d29883a 	add	r20,r19,r20
   8af00:	e1400017 	ldw	r5,0(fp)
   8af04:	d9000015 	stw	r4,0(sp)
   8af08:	a1000017 	ldw	r4,0(r20)
   8af0c:	29400044 	addi	r5,r5,1
   8af10:	d8c00115 	stw	r3,4(sp)
   8af14:	dd000315 	stw	r20,12(sp)
   8af18:	008298c0 	call	8298c <__udivsi3>
   8af1c:	1025883a 	mov	r18,r2
   8af20:	10003026 	beq	r2,zero,8afe4 <quorem+0x13c>
   8af24:	dc400117 	ldw	r17,4(sp)
   8af28:	9829883a 	mov	r20,r19
   8af2c:	002d883a 	mov	r22,zero
   8af30:	0021883a 	mov	r16,zero
   8af34:	8d400017 	ldw	r21,0(r17)
   8af38:	900b883a 	mov	r5,r18
   8af3c:	8c400104 	addi	r17,r17,4
   8af40:	a93fffcc 	andi	r4,r21,65535
   8af44:	0082a480 	call	82a48 <__mulsi3>
   8af48:	a808d43a 	srli	r4,r21,16
   8af4c:	900b883a 	mov	r5,r18
   8af50:	15ad883a 	add	r22,r2,r22
   8af54:	0082a480 	call	82a48 <__mulsi3>
   8af58:	a1000017 	ldw	r4,0(r20)
   8af5c:	b00cd43a 	srli	r6,r22,16
   8af60:	b0ffffcc 	andi	r3,r22,65535
   8af64:	217fffcc 	andi	r5,r4,65535
   8af68:	2c21883a 	add	r16,r5,r16
   8af6c:	80c7c83a 	sub	r3,r16,r3
   8af70:	2008d43a 	srli	r4,r4,16
   8af74:	1185883a 	add	r2,r2,r6
   8af78:	1821d43a 	srai	r16,r3,16
   8af7c:	117fffcc 	andi	r5,r2,65535
   8af80:	2149c83a 	sub	r4,r4,r5
   8af84:	2421883a 	add	r16,r4,r16
   8af88:	8008943a 	slli	r4,r16,16
   8af8c:	18ffffcc 	andi	r3,r3,65535
   8af90:	102cd43a 	srli	r22,r2,16
   8af94:	20c8b03a 	or	r4,r4,r3
   8af98:	a1000015 	stw	r4,0(r20)
   8af9c:	8021d43a 	srai	r16,r16,16
   8afa0:	a5000104 	addi	r20,r20,4
   8afa4:	e47fe32e 	bgeu	fp,r17,8af34 <__alt_data_end+0xfffb5804>
   8afa8:	d8c00317 	ldw	r3,12(sp)
   8afac:	18800017 	ldw	r2,0(r3)
   8afb0:	10000c1e 	bne	r2,zero,8afe4 <quorem+0x13c>
   8afb4:	18bfff04 	addi	r2,r3,-4
   8afb8:	9880082e 	bgeu	r19,r2,8afdc <quorem+0x134>
   8afbc:	18ffff17 	ldw	r3,-4(r3)
   8afc0:	18000326 	beq	r3,zero,8afd0 <quorem+0x128>
   8afc4:	00000506 	br	8afdc <quorem+0x134>
   8afc8:	10c00017 	ldw	r3,0(r2)
   8afcc:	1800031e 	bne	r3,zero,8afdc <quorem+0x134>
   8afd0:	10bfff04 	addi	r2,r2,-4
   8afd4:	bdffffc4 	addi	r23,r23,-1
   8afd8:	98bffb36 	bltu	r19,r2,8afc8 <__alt_data_end+0xfffb5898>
   8afdc:	d8c00017 	ldw	r3,0(sp)
   8afe0:	1dc00415 	stw	r23,16(r3)
   8afe4:	d9400217 	ldw	r5,8(sp)
   8afe8:	d9000017 	ldw	r4,0(sp)
   8afec:	008db680 	call	8db68 <__mcmp>
   8aff0:	10002816 	blt	r2,zero,8b094 <quorem+0x1ec>
   8aff4:	dc400117 	ldw	r17,4(sp)
   8aff8:	94800044 	addi	r18,r18,1
   8affc:	980d883a 	mov	r6,r19
   8b000:	0007883a 	mov	r3,zero
   8b004:	31000017 	ldw	r4,0(r6)
   8b008:	89400017 	ldw	r5,0(r17)
   8b00c:	31800104 	addi	r6,r6,4
   8b010:	20bfffcc 	andi	r2,r4,65535
   8b014:	10c7883a 	add	r3,r2,r3
   8b018:	28bfffcc 	andi	r2,r5,65535
   8b01c:	1885c83a 	sub	r2,r3,r2
   8b020:	280ad43a 	srli	r5,r5,16
   8b024:	2008d43a 	srli	r4,r4,16
   8b028:	1007d43a 	srai	r3,r2,16
   8b02c:	10bfffcc 	andi	r2,r2,65535
   8b030:	2149c83a 	sub	r4,r4,r5
   8b034:	20c9883a 	add	r4,r4,r3
   8b038:	200a943a 	slli	r5,r4,16
   8b03c:	8c400104 	addi	r17,r17,4
   8b040:	2007d43a 	srai	r3,r4,16
   8b044:	2884b03a 	or	r2,r5,r2
   8b048:	30bfff15 	stw	r2,-4(r6)
   8b04c:	e47fed2e 	bgeu	fp,r17,8b004 <__alt_data_end+0xfffb58d4>
   8b050:	bdc5883a 	add	r2,r23,r23
   8b054:	1085883a 	add	r2,r2,r2
   8b058:	9887883a 	add	r3,r19,r2
   8b05c:	18800017 	ldw	r2,0(r3)
   8b060:	10000c1e 	bne	r2,zero,8b094 <quorem+0x1ec>
   8b064:	18bfff04 	addi	r2,r3,-4
   8b068:	9880082e 	bgeu	r19,r2,8b08c <quorem+0x1e4>
   8b06c:	18ffff17 	ldw	r3,-4(r3)
   8b070:	18000326 	beq	r3,zero,8b080 <quorem+0x1d8>
   8b074:	00000506 	br	8b08c <quorem+0x1e4>
   8b078:	10c00017 	ldw	r3,0(r2)
   8b07c:	1800031e 	bne	r3,zero,8b08c <quorem+0x1e4>
   8b080:	10bfff04 	addi	r2,r2,-4
   8b084:	bdffffc4 	addi	r23,r23,-1
   8b088:	98bffb36 	bltu	r19,r2,8b078 <__alt_data_end+0xfffb5948>
   8b08c:	d8c00017 	ldw	r3,0(sp)
   8b090:	1dc00415 	stw	r23,16(r3)
   8b094:	9005883a 	mov	r2,r18
   8b098:	dfc00d17 	ldw	ra,52(sp)
   8b09c:	df000c17 	ldw	fp,48(sp)
   8b0a0:	ddc00b17 	ldw	r23,44(sp)
   8b0a4:	dd800a17 	ldw	r22,40(sp)
   8b0a8:	dd400917 	ldw	r21,36(sp)
   8b0ac:	dd000817 	ldw	r20,32(sp)
   8b0b0:	dcc00717 	ldw	r19,28(sp)
   8b0b4:	dc800617 	ldw	r18,24(sp)
   8b0b8:	dc400517 	ldw	r17,20(sp)
   8b0bc:	dc000417 	ldw	r16,16(sp)
   8b0c0:	dec00e04 	addi	sp,sp,56
   8b0c4:	f800283a 	ret
   8b0c8:	0005883a 	mov	r2,zero
   8b0cc:	003ff206 	br	8b098 <__alt_data_end+0xfffb5968>

0008b0d0 <_dtoa_r>:
   8b0d0:	20801017 	ldw	r2,64(r4)
   8b0d4:	deffde04 	addi	sp,sp,-136
   8b0d8:	df002015 	stw	fp,128(sp)
   8b0dc:	dcc01b15 	stw	r19,108(sp)
   8b0e0:	dc801a15 	stw	r18,104(sp)
   8b0e4:	dc401915 	stw	r17,100(sp)
   8b0e8:	dc001815 	stw	r16,96(sp)
   8b0ec:	dfc02115 	stw	ra,132(sp)
   8b0f0:	ddc01f15 	stw	r23,124(sp)
   8b0f4:	dd801e15 	stw	r22,120(sp)
   8b0f8:	dd401d15 	stw	r21,116(sp)
   8b0fc:	dd001c15 	stw	r20,112(sp)
   8b100:	d9c00315 	stw	r7,12(sp)
   8b104:	2039883a 	mov	fp,r4
   8b108:	3023883a 	mov	r17,r6
   8b10c:	2825883a 	mov	r18,r5
   8b110:	dc002417 	ldw	r16,144(sp)
   8b114:	3027883a 	mov	r19,r6
   8b118:	10000826 	beq	r2,zero,8b13c <_dtoa_r+0x6c>
   8b11c:	21801117 	ldw	r6,68(r4)
   8b120:	00c00044 	movi	r3,1
   8b124:	100b883a 	mov	r5,r2
   8b128:	1986983a 	sll	r3,r3,r6
   8b12c:	11800115 	stw	r6,4(r2)
   8b130:	10c00215 	stw	r3,8(r2)
   8b134:	008d28c0 	call	8d28c <_Bfree>
   8b138:	e0001015 	stw	zero,64(fp)
   8b13c:	88002e16 	blt	r17,zero,8b1f8 <_dtoa_r+0x128>
   8b140:	80000015 	stw	zero,0(r16)
   8b144:	889ffc2c 	andhi	r2,r17,32752
   8b148:	00dffc34 	movhi	r3,32752
   8b14c:	10c01c26 	beq	r2,r3,8b1c0 <_dtoa_r+0xf0>
   8b150:	000d883a 	mov	r6,zero
   8b154:	000f883a 	mov	r7,zero
   8b158:	9009883a 	mov	r4,r18
   8b15c:	980b883a 	mov	r5,r19
   8b160:	009128c0 	call	9128c <__eqdf2>
   8b164:	10002b1e 	bne	r2,zero,8b214 <_dtoa_r+0x144>
   8b168:	d9c02317 	ldw	r7,140(sp)
   8b16c:	00800044 	movi	r2,1
   8b170:	38800015 	stw	r2,0(r7)
   8b174:	d8802517 	ldw	r2,148(sp)
   8b178:	10019e26 	beq	r2,zero,8b7f4 <_dtoa_r+0x724>
   8b17c:	d8c02517 	ldw	r3,148(sp)
   8b180:	00800274 	movhi	r2,9
   8b184:	10907444 	addi	r2,r2,16849
   8b188:	18800015 	stw	r2,0(r3)
   8b18c:	10bfffc4 	addi	r2,r2,-1
   8b190:	dfc02117 	ldw	ra,132(sp)
   8b194:	df002017 	ldw	fp,128(sp)
   8b198:	ddc01f17 	ldw	r23,124(sp)
   8b19c:	dd801e17 	ldw	r22,120(sp)
   8b1a0:	dd401d17 	ldw	r21,116(sp)
   8b1a4:	dd001c17 	ldw	r20,112(sp)
   8b1a8:	dcc01b17 	ldw	r19,108(sp)
   8b1ac:	dc801a17 	ldw	r18,104(sp)
   8b1b0:	dc401917 	ldw	r17,100(sp)
   8b1b4:	dc001817 	ldw	r16,96(sp)
   8b1b8:	dec02204 	addi	sp,sp,136
   8b1bc:	f800283a 	ret
   8b1c0:	d8c02317 	ldw	r3,140(sp)
   8b1c4:	0089c3c4 	movi	r2,9999
   8b1c8:	18800015 	stw	r2,0(r3)
   8b1cc:	90017726 	beq	r18,zero,8b7ac <_dtoa_r+0x6dc>
   8b1d0:	00800274 	movhi	r2,9
   8b1d4:	10908004 	addi	r2,r2,16896
   8b1d8:	d9002517 	ldw	r4,148(sp)
   8b1dc:	203fec26 	beq	r4,zero,8b190 <__alt_data_end+0xfffb5a60>
   8b1e0:	10c000c7 	ldb	r3,3(r2)
   8b1e4:	1801781e 	bne	r3,zero,8b7c8 <_dtoa_r+0x6f8>
   8b1e8:	10c000c4 	addi	r3,r2,3
   8b1ec:	d9802517 	ldw	r6,148(sp)
   8b1f0:	30c00015 	stw	r3,0(r6)
   8b1f4:	003fe606 	br	8b190 <__alt_data_end+0xfffb5a60>
   8b1f8:	04e00034 	movhi	r19,32768
   8b1fc:	9cffffc4 	addi	r19,r19,-1
   8b200:	00800044 	movi	r2,1
   8b204:	8ce6703a 	and	r19,r17,r19
   8b208:	80800015 	stw	r2,0(r16)
   8b20c:	9823883a 	mov	r17,r19
   8b210:	003fcc06 	br	8b144 <__alt_data_end+0xfffb5a14>
   8b214:	d8800204 	addi	r2,sp,8
   8b218:	d8800015 	stw	r2,0(sp)
   8b21c:	d9c00104 	addi	r7,sp,4
   8b220:	900b883a 	mov	r5,r18
   8b224:	980d883a 	mov	r6,r19
   8b228:	e009883a 	mov	r4,fp
   8b22c:	8820d53a 	srli	r16,r17,20
   8b230:	008df340 	call	8df34 <__d2b>
   8b234:	d8800915 	stw	r2,36(sp)
   8b238:	8001651e 	bne	r16,zero,8b7d0 <_dtoa_r+0x700>
   8b23c:	dd800217 	ldw	r22,8(sp)
   8b240:	dc000117 	ldw	r16,4(sp)
   8b244:	00800804 	movi	r2,32
   8b248:	b421883a 	add	r16,r22,r16
   8b24c:	80c10c84 	addi	r3,r16,1074
   8b250:	10c2d10e 	bge	r2,r3,8bd98 <_dtoa_r+0xcc8>
   8b254:	00801004 	movi	r2,64
   8b258:	81010484 	addi	r4,r16,1042
   8b25c:	10c7c83a 	sub	r3,r2,r3
   8b260:	9108d83a 	srl	r4,r18,r4
   8b264:	88e2983a 	sll	r17,r17,r3
   8b268:	2448b03a 	or	r4,r4,r17
   8b26c:	00913140 	call	91314 <__floatunsidf>
   8b270:	017f8434 	movhi	r5,65040
   8b274:	01800044 	movi	r6,1
   8b278:	1009883a 	mov	r4,r2
   8b27c:	194b883a 	add	r5,r3,r5
   8b280:	843fffc4 	addi	r16,r16,-1
   8b284:	d9801115 	stw	r6,68(sp)
   8b288:	000d883a 	mov	r6,zero
   8b28c:	01cffe34 	movhi	r7,16376
   8b290:	00856b00 	call	856b0 <__subdf3>
   8b294:	0198dbf4 	movhi	r6,25455
   8b298:	01cff4f4 	movhi	r7,16339
   8b29c:	3190d844 	addi	r6,r6,17249
   8b2a0:	39e1e9c4 	addi	r7,r7,-30809
   8b2a4:	1009883a 	mov	r4,r2
   8b2a8:	180b883a 	mov	r5,r3
   8b2ac:	0084e440 	call	84e44 <__muldf3>
   8b2b0:	01a2d874 	movhi	r6,35681
   8b2b4:	01cff1f4 	movhi	r7,16327
   8b2b8:	31b22cc4 	addi	r6,r6,-14157
   8b2bc:	39e28a04 	addi	r7,r7,-30168
   8b2c0:	180b883a 	mov	r5,r3
   8b2c4:	1009883a 	mov	r4,r2
   8b2c8:	00839f80 	call	839f8 <__adddf3>
   8b2cc:	8009883a 	mov	r4,r16
   8b2d0:	1029883a 	mov	r20,r2
   8b2d4:	1823883a 	mov	r17,r3
   8b2d8:	008602c0 	call	8602c <__floatsidf>
   8b2dc:	019427f4 	movhi	r6,20639
   8b2e0:	01cff4f4 	movhi	r7,16339
   8b2e4:	319e7ec4 	addi	r6,r6,31227
   8b2e8:	39d104c4 	addi	r7,r7,17427
   8b2ec:	1009883a 	mov	r4,r2
   8b2f0:	180b883a 	mov	r5,r3
   8b2f4:	0084e440 	call	84e44 <__muldf3>
   8b2f8:	100d883a 	mov	r6,r2
   8b2fc:	180f883a 	mov	r7,r3
   8b300:	a009883a 	mov	r4,r20
   8b304:	880b883a 	mov	r5,r17
   8b308:	00839f80 	call	839f8 <__adddf3>
   8b30c:	1009883a 	mov	r4,r2
   8b310:	180b883a 	mov	r5,r3
   8b314:	1029883a 	mov	r20,r2
   8b318:	1823883a 	mov	r17,r3
   8b31c:	0085fac0 	call	85fac <__fixdfsi>
   8b320:	000d883a 	mov	r6,zero
   8b324:	000f883a 	mov	r7,zero
   8b328:	a009883a 	mov	r4,r20
   8b32c:	880b883a 	mov	r5,r17
   8b330:	d8800515 	stw	r2,20(sp)
   8b334:	0084d500 	call	84d50 <__ledf2>
   8b338:	10028716 	blt	r2,zero,8bd58 <_dtoa_r+0xc88>
   8b33c:	d8c00517 	ldw	r3,20(sp)
   8b340:	00800584 	movi	r2,22
   8b344:	10c27536 	bltu	r2,r3,8bd1c <_dtoa_r+0xc4c>
   8b348:	180490fa 	slli	r2,r3,3
   8b34c:	00c00274 	movhi	r3,9
   8b350:	18d09b04 	addi	r3,r3,17004
   8b354:	1885883a 	add	r2,r3,r2
   8b358:	11000017 	ldw	r4,0(r2)
   8b35c:	11400117 	ldw	r5,4(r2)
   8b360:	900d883a 	mov	r6,r18
   8b364:	980f883a 	mov	r7,r19
   8b368:	0084c740 	call	84c74 <__gedf2>
   8b36c:	00828d0e 	bge	zero,r2,8bda4 <_dtoa_r+0xcd4>
   8b370:	d9000517 	ldw	r4,20(sp)
   8b374:	d8000e15 	stw	zero,56(sp)
   8b378:	213fffc4 	addi	r4,r4,-1
   8b37c:	d9000515 	stw	r4,20(sp)
   8b380:	b42dc83a 	sub	r22,r22,r16
   8b384:	b5bfffc4 	addi	r22,r22,-1
   8b388:	b0026f16 	blt	r22,zero,8bd48 <_dtoa_r+0xc78>
   8b38c:	d8000815 	stw	zero,32(sp)
   8b390:	d9c00517 	ldw	r7,20(sp)
   8b394:	38026416 	blt	r7,zero,8bd28 <_dtoa_r+0xc58>
   8b398:	b1ed883a 	add	r22,r22,r7
   8b39c:	d9c00d15 	stw	r7,52(sp)
   8b3a0:	d8000a15 	stw	zero,40(sp)
   8b3a4:	d9800317 	ldw	r6,12(sp)
   8b3a8:	00800244 	movi	r2,9
   8b3ac:	11811436 	bltu	r2,r6,8b800 <_dtoa_r+0x730>
   8b3b0:	00800144 	movi	r2,5
   8b3b4:	1184e10e 	bge	r2,r6,8c73c <_dtoa_r+0x166c>
   8b3b8:	31bfff04 	addi	r6,r6,-4
   8b3bc:	d9800315 	stw	r6,12(sp)
   8b3c0:	0023883a 	mov	r17,zero
   8b3c4:	d9800317 	ldw	r6,12(sp)
   8b3c8:	008000c4 	movi	r2,3
   8b3cc:	30836726 	beq	r6,r2,8c16c <_dtoa_r+0x109c>
   8b3d0:	1183410e 	bge	r2,r6,8c0d8 <_dtoa_r+0x1008>
   8b3d4:	d9c00317 	ldw	r7,12(sp)
   8b3d8:	00800104 	movi	r2,4
   8b3dc:	38827c26 	beq	r7,r2,8bdd0 <_dtoa_r+0xd00>
   8b3e0:	00800144 	movi	r2,5
   8b3e4:	3884c41e 	bne	r7,r2,8c6f8 <_dtoa_r+0x1628>
   8b3e8:	00800044 	movi	r2,1
   8b3ec:	d8800b15 	stw	r2,44(sp)
   8b3f0:	d8c00517 	ldw	r3,20(sp)
   8b3f4:	d9002217 	ldw	r4,136(sp)
   8b3f8:	1907883a 	add	r3,r3,r4
   8b3fc:	19800044 	addi	r6,r3,1
   8b400:	d8c00c15 	stw	r3,48(sp)
   8b404:	d9800615 	stw	r6,24(sp)
   8b408:	0183a40e 	bge	zero,r6,8c29c <_dtoa_r+0x11cc>
   8b40c:	d9800617 	ldw	r6,24(sp)
   8b410:	3021883a 	mov	r16,r6
   8b414:	e0001115 	stw	zero,68(fp)
   8b418:	008005c4 	movi	r2,23
   8b41c:	1184c92e 	bgeu	r2,r6,8c744 <_dtoa_r+0x1674>
   8b420:	00c00044 	movi	r3,1
   8b424:	00800104 	movi	r2,4
   8b428:	1085883a 	add	r2,r2,r2
   8b42c:	11000504 	addi	r4,r2,20
   8b430:	180b883a 	mov	r5,r3
   8b434:	18c00044 	addi	r3,r3,1
   8b438:	313ffb2e 	bgeu	r6,r4,8b428 <__alt_data_end+0xfffb5cf8>
   8b43c:	e1401115 	stw	r5,68(fp)
   8b440:	e009883a 	mov	r4,fp
   8b444:	008d1e40 	call	8d1e4 <_Balloc>
   8b448:	d8800715 	stw	r2,28(sp)
   8b44c:	e0801015 	stw	r2,64(fp)
   8b450:	00800384 	movi	r2,14
   8b454:	1400f736 	bltu	r2,r16,8b834 <_dtoa_r+0x764>
   8b458:	8800f626 	beq	r17,zero,8b834 <_dtoa_r+0x764>
   8b45c:	d9c00517 	ldw	r7,20(sp)
   8b460:	01c39a0e 	bge	zero,r7,8c2cc <_dtoa_r+0x11fc>
   8b464:	388003cc 	andi	r2,r7,15
   8b468:	100490fa 	slli	r2,r2,3
   8b46c:	382bd13a 	srai	r21,r7,4
   8b470:	00c00274 	movhi	r3,9
   8b474:	18d09b04 	addi	r3,r3,17004
   8b478:	1885883a 	add	r2,r3,r2
   8b47c:	a8c0040c 	andi	r3,r21,16
   8b480:	12400017 	ldw	r9,0(r2)
   8b484:	12000117 	ldw	r8,4(r2)
   8b488:	18037926 	beq	r3,zero,8c270 <_dtoa_r+0x11a0>
   8b48c:	00800274 	movhi	r2,9
   8b490:	10909104 	addi	r2,r2,16964
   8b494:	11800817 	ldw	r6,32(r2)
   8b498:	11c00917 	ldw	r7,36(r2)
   8b49c:	9009883a 	mov	r4,r18
   8b4a0:	980b883a 	mov	r5,r19
   8b4a4:	da001715 	stw	r8,92(sp)
   8b4a8:	da401615 	stw	r9,88(sp)
   8b4ac:	00842a40 	call	842a4 <__divdf3>
   8b4b0:	da001717 	ldw	r8,92(sp)
   8b4b4:	da401617 	ldw	r9,88(sp)
   8b4b8:	ad4003cc 	andi	r21,r21,15
   8b4bc:	040000c4 	movi	r16,3
   8b4c0:	1023883a 	mov	r17,r2
   8b4c4:	1829883a 	mov	r20,r3
   8b4c8:	a8001126 	beq	r21,zero,8b510 <_dtoa_r+0x440>
   8b4cc:	05c00274 	movhi	r23,9
   8b4d0:	bdd09104 	addi	r23,r23,16964
   8b4d4:	4805883a 	mov	r2,r9
   8b4d8:	4007883a 	mov	r3,r8
   8b4dc:	a980004c 	andi	r6,r21,1
   8b4e0:	1009883a 	mov	r4,r2
   8b4e4:	a82bd07a 	srai	r21,r21,1
   8b4e8:	180b883a 	mov	r5,r3
   8b4ec:	30000426 	beq	r6,zero,8b500 <_dtoa_r+0x430>
   8b4f0:	b9800017 	ldw	r6,0(r23)
   8b4f4:	b9c00117 	ldw	r7,4(r23)
   8b4f8:	84000044 	addi	r16,r16,1
   8b4fc:	0084e440 	call	84e44 <__muldf3>
   8b500:	bdc00204 	addi	r23,r23,8
   8b504:	a83ff51e 	bne	r21,zero,8b4dc <__alt_data_end+0xfffb5dac>
   8b508:	1013883a 	mov	r9,r2
   8b50c:	1811883a 	mov	r8,r3
   8b510:	480d883a 	mov	r6,r9
   8b514:	400f883a 	mov	r7,r8
   8b518:	8809883a 	mov	r4,r17
   8b51c:	a00b883a 	mov	r5,r20
   8b520:	00842a40 	call	842a4 <__divdf3>
   8b524:	d8800f15 	stw	r2,60(sp)
   8b528:	d8c01015 	stw	r3,64(sp)
   8b52c:	d8c00e17 	ldw	r3,56(sp)
   8b530:	18000626 	beq	r3,zero,8b54c <_dtoa_r+0x47c>
   8b534:	d9000f17 	ldw	r4,60(sp)
   8b538:	d9401017 	ldw	r5,64(sp)
   8b53c:	000d883a 	mov	r6,zero
   8b540:	01cffc34 	movhi	r7,16368
   8b544:	0084d500 	call	84d50 <__ledf2>
   8b548:	10040b16 	blt	r2,zero,8c578 <_dtoa_r+0x14a8>
   8b54c:	8009883a 	mov	r4,r16
   8b550:	008602c0 	call	8602c <__floatsidf>
   8b554:	d9800f17 	ldw	r6,60(sp)
   8b558:	d9c01017 	ldw	r7,64(sp)
   8b55c:	1009883a 	mov	r4,r2
   8b560:	180b883a 	mov	r5,r3
   8b564:	0084e440 	call	84e44 <__muldf3>
   8b568:	000d883a 	mov	r6,zero
   8b56c:	01d00734 	movhi	r7,16412
   8b570:	1009883a 	mov	r4,r2
   8b574:	180b883a 	mov	r5,r3
   8b578:	00839f80 	call	839f8 <__adddf3>
   8b57c:	1021883a 	mov	r16,r2
   8b580:	d8800617 	ldw	r2,24(sp)
   8b584:	047f3034 	movhi	r17,64704
   8b588:	1c63883a 	add	r17,r3,r17
   8b58c:	10031826 	beq	r2,zero,8c1f0 <_dtoa_r+0x1120>
   8b590:	d8c00517 	ldw	r3,20(sp)
   8b594:	db000617 	ldw	r12,24(sp)
   8b598:	d8c01315 	stw	r3,76(sp)
   8b59c:	d9000b17 	ldw	r4,44(sp)
   8b5a0:	20038f26 	beq	r4,zero,8c3e0 <_dtoa_r+0x1310>
   8b5a4:	60bfffc4 	addi	r2,r12,-1
   8b5a8:	100490fa 	slli	r2,r2,3
   8b5ac:	00c00274 	movhi	r3,9
   8b5b0:	18d09b04 	addi	r3,r3,17004
   8b5b4:	1885883a 	add	r2,r3,r2
   8b5b8:	11800017 	ldw	r6,0(r2)
   8b5bc:	11c00117 	ldw	r7,4(r2)
   8b5c0:	d8800717 	ldw	r2,28(sp)
   8b5c4:	0009883a 	mov	r4,zero
   8b5c8:	014ff834 	movhi	r5,16352
   8b5cc:	db001615 	stw	r12,88(sp)
   8b5d0:	15c00044 	addi	r23,r2,1
   8b5d4:	00842a40 	call	842a4 <__divdf3>
   8b5d8:	800d883a 	mov	r6,r16
   8b5dc:	880f883a 	mov	r7,r17
   8b5e0:	1009883a 	mov	r4,r2
   8b5e4:	180b883a 	mov	r5,r3
   8b5e8:	00856b00 	call	856b0 <__subdf3>
   8b5ec:	d9401017 	ldw	r5,64(sp)
   8b5f0:	d9000f17 	ldw	r4,60(sp)
   8b5f4:	102b883a 	mov	r21,r2
   8b5f8:	d8c01215 	stw	r3,72(sp)
   8b5fc:	0085fac0 	call	85fac <__fixdfsi>
   8b600:	1009883a 	mov	r4,r2
   8b604:	1029883a 	mov	r20,r2
   8b608:	008602c0 	call	8602c <__floatsidf>
   8b60c:	d9000f17 	ldw	r4,60(sp)
   8b610:	d9401017 	ldw	r5,64(sp)
   8b614:	100d883a 	mov	r6,r2
   8b618:	180f883a 	mov	r7,r3
   8b61c:	00856b00 	call	856b0 <__subdf3>
   8b620:	1823883a 	mov	r17,r3
   8b624:	d8c00717 	ldw	r3,28(sp)
   8b628:	d9401217 	ldw	r5,72(sp)
   8b62c:	a2000c04 	addi	r8,r20,48
   8b630:	1021883a 	mov	r16,r2
   8b634:	1a000005 	stb	r8,0(r3)
   8b638:	800d883a 	mov	r6,r16
   8b63c:	880f883a 	mov	r7,r17
   8b640:	a809883a 	mov	r4,r21
   8b644:	4029883a 	mov	r20,r8
   8b648:	0084c740 	call	84c74 <__gedf2>
   8b64c:	00841d16 	blt	zero,r2,8c6c4 <_dtoa_r+0x15f4>
   8b650:	800d883a 	mov	r6,r16
   8b654:	880f883a 	mov	r7,r17
   8b658:	0009883a 	mov	r4,zero
   8b65c:	014ffc34 	movhi	r5,16368
   8b660:	00856b00 	call	856b0 <__subdf3>
   8b664:	d9401217 	ldw	r5,72(sp)
   8b668:	100d883a 	mov	r6,r2
   8b66c:	180f883a 	mov	r7,r3
   8b670:	a809883a 	mov	r4,r21
   8b674:	0084c740 	call	84c74 <__gedf2>
   8b678:	db001617 	ldw	r12,88(sp)
   8b67c:	00840e16 	blt	zero,r2,8c6b8 <_dtoa_r+0x15e8>
   8b680:	00800044 	movi	r2,1
   8b684:	13006b0e 	bge	r2,r12,8b834 <_dtoa_r+0x764>
   8b688:	d9000717 	ldw	r4,28(sp)
   8b68c:	dd800f15 	stw	r22,60(sp)
   8b690:	dcc01015 	stw	r19,64(sp)
   8b694:	2319883a 	add	r12,r4,r12
   8b698:	dcc01217 	ldw	r19,72(sp)
   8b69c:	602d883a 	mov	r22,r12
   8b6a0:	dc801215 	stw	r18,72(sp)
   8b6a4:	b825883a 	mov	r18,r23
   8b6a8:	00000906 	br	8b6d0 <_dtoa_r+0x600>
   8b6ac:	00856b00 	call	856b0 <__subdf3>
   8b6b0:	a80d883a 	mov	r6,r21
   8b6b4:	980f883a 	mov	r7,r19
   8b6b8:	1009883a 	mov	r4,r2
   8b6bc:	180b883a 	mov	r5,r3
   8b6c0:	0084d500 	call	84d50 <__ledf2>
   8b6c4:	1003e816 	blt	r2,zero,8c668 <_dtoa_r+0x1598>
   8b6c8:	b825883a 	mov	r18,r23
   8b6cc:	bd83e926 	beq	r23,r22,8c674 <_dtoa_r+0x15a4>
   8b6d0:	a809883a 	mov	r4,r21
   8b6d4:	980b883a 	mov	r5,r19
   8b6d8:	000d883a 	mov	r6,zero
   8b6dc:	01d00934 	movhi	r7,16420
   8b6e0:	0084e440 	call	84e44 <__muldf3>
   8b6e4:	000d883a 	mov	r6,zero
   8b6e8:	01d00934 	movhi	r7,16420
   8b6ec:	8009883a 	mov	r4,r16
   8b6f0:	880b883a 	mov	r5,r17
   8b6f4:	102b883a 	mov	r21,r2
   8b6f8:	1827883a 	mov	r19,r3
   8b6fc:	0084e440 	call	84e44 <__muldf3>
   8b700:	180b883a 	mov	r5,r3
   8b704:	1009883a 	mov	r4,r2
   8b708:	1821883a 	mov	r16,r3
   8b70c:	1023883a 	mov	r17,r2
   8b710:	0085fac0 	call	85fac <__fixdfsi>
   8b714:	1009883a 	mov	r4,r2
   8b718:	1029883a 	mov	r20,r2
   8b71c:	008602c0 	call	8602c <__floatsidf>
   8b720:	8809883a 	mov	r4,r17
   8b724:	800b883a 	mov	r5,r16
   8b728:	100d883a 	mov	r6,r2
   8b72c:	180f883a 	mov	r7,r3
   8b730:	00856b00 	call	856b0 <__subdf3>
   8b734:	a5000c04 	addi	r20,r20,48
   8b738:	a80d883a 	mov	r6,r21
   8b73c:	980f883a 	mov	r7,r19
   8b740:	1009883a 	mov	r4,r2
   8b744:	180b883a 	mov	r5,r3
   8b748:	95000005 	stb	r20,0(r18)
   8b74c:	1021883a 	mov	r16,r2
   8b750:	1823883a 	mov	r17,r3
   8b754:	0084d500 	call	84d50 <__ledf2>
   8b758:	bdc00044 	addi	r23,r23,1
   8b75c:	800d883a 	mov	r6,r16
   8b760:	880f883a 	mov	r7,r17
   8b764:	0009883a 	mov	r4,zero
   8b768:	014ffc34 	movhi	r5,16368
   8b76c:	103fcf0e 	bge	r2,zero,8b6ac <__alt_data_end+0xfffb5f7c>
   8b770:	d8c01317 	ldw	r3,76(sp)
   8b774:	d8c00515 	stw	r3,20(sp)
   8b778:	d9400917 	ldw	r5,36(sp)
   8b77c:	e009883a 	mov	r4,fp
   8b780:	008d28c0 	call	8d28c <_Bfree>
   8b784:	d9000517 	ldw	r4,20(sp)
   8b788:	d9802317 	ldw	r6,140(sp)
   8b78c:	d9c02517 	ldw	r7,148(sp)
   8b790:	b8000005 	stb	zero,0(r23)
   8b794:	20800044 	addi	r2,r4,1
   8b798:	30800015 	stw	r2,0(r6)
   8b79c:	3802aa26 	beq	r7,zero,8c248 <_dtoa_r+0x1178>
   8b7a0:	3dc00015 	stw	r23,0(r7)
   8b7a4:	d8800717 	ldw	r2,28(sp)
   8b7a8:	003e7906 	br	8b190 <__alt_data_end+0xfffb5a60>
   8b7ac:	00800434 	movhi	r2,16
   8b7b0:	10bfffc4 	addi	r2,r2,-1
   8b7b4:	88a2703a 	and	r17,r17,r2
   8b7b8:	883e851e 	bne	r17,zero,8b1d0 <__alt_data_end+0xfffb5aa0>
   8b7bc:	00800274 	movhi	r2,9
   8b7c0:	10907d04 	addi	r2,r2,16884
   8b7c4:	003e8406 	br	8b1d8 <__alt_data_end+0xfffb5aa8>
   8b7c8:	10c00204 	addi	r3,r2,8
   8b7cc:	003e8706 	br	8b1ec <__alt_data_end+0xfffb5abc>
   8b7d0:	01400434 	movhi	r5,16
   8b7d4:	297fffc4 	addi	r5,r5,-1
   8b7d8:	994a703a 	and	r5,r19,r5
   8b7dc:	9009883a 	mov	r4,r18
   8b7e0:	843f0044 	addi	r16,r16,-1023
   8b7e4:	294ffc34 	orhi	r5,r5,16368
   8b7e8:	dd800217 	ldw	r22,8(sp)
   8b7ec:	d8001115 	stw	zero,68(sp)
   8b7f0:	003ea506 	br	8b288 <__alt_data_end+0xfffb5b58>
   8b7f4:	00800274 	movhi	r2,9
   8b7f8:	10907404 	addi	r2,r2,16848
   8b7fc:	003e6406 	br	8b190 <__alt_data_end+0xfffb5a60>
   8b800:	e0001115 	stw	zero,68(fp)
   8b804:	000b883a 	mov	r5,zero
   8b808:	e009883a 	mov	r4,fp
   8b80c:	008d1e40 	call	8d1e4 <_Balloc>
   8b810:	01bfffc4 	movi	r6,-1
   8b814:	01c00044 	movi	r7,1
   8b818:	d8800715 	stw	r2,28(sp)
   8b81c:	d9800c15 	stw	r6,48(sp)
   8b820:	e0801015 	stw	r2,64(fp)
   8b824:	d8000315 	stw	zero,12(sp)
   8b828:	d9c00b15 	stw	r7,44(sp)
   8b82c:	d9800615 	stw	r6,24(sp)
   8b830:	d8002215 	stw	zero,136(sp)
   8b834:	d8800117 	ldw	r2,4(sp)
   8b838:	10008916 	blt	r2,zero,8ba60 <_dtoa_r+0x990>
   8b83c:	d9000517 	ldw	r4,20(sp)
   8b840:	00c00384 	movi	r3,14
   8b844:	19008616 	blt	r3,r4,8ba60 <_dtoa_r+0x990>
   8b848:	200490fa 	slli	r2,r4,3
   8b84c:	00c00274 	movhi	r3,9
   8b850:	d9802217 	ldw	r6,136(sp)
   8b854:	18d09b04 	addi	r3,r3,17004
   8b858:	1885883a 	add	r2,r3,r2
   8b85c:	14000017 	ldw	r16,0(r2)
   8b860:	14400117 	ldw	r17,4(r2)
   8b864:	30016316 	blt	r6,zero,8bdf4 <_dtoa_r+0xd24>
   8b868:	800d883a 	mov	r6,r16
   8b86c:	880f883a 	mov	r7,r17
   8b870:	9009883a 	mov	r4,r18
   8b874:	980b883a 	mov	r5,r19
   8b878:	00842a40 	call	842a4 <__divdf3>
   8b87c:	180b883a 	mov	r5,r3
   8b880:	1009883a 	mov	r4,r2
   8b884:	0085fac0 	call	85fac <__fixdfsi>
   8b888:	1009883a 	mov	r4,r2
   8b88c:	102b883a 	mov	r21,r2
   8b890:	008602c0 	call	8602c <__floatsidf>
   8b894:	800d883a 	mov	r6,r16
   8b898:	880f883a 	mov	r7,r17
   8b89c:	1009883a 	mov	r4,r2
   8b8a0:	180b883a 	mov	r5,r3
   8b8a4:	0084e440 	call	84e44 <__muldf3>
   8b8a8:	100d883a 	mov	r6,r2
   8b8ac:	180f883a 	mov	r7,r3
   8b8b0:	9009883a 	mov	r4,r18
   8b8b4:	980b883a 	mov	r5,r19
   8b8b8:	00856b00 	call	856b0 <__subdf3>
   8b8bc:	d9c00717 	ldw	r7,28(sp)
   8b8c0:	1009883a 	mov	r4,r2
   8b8c4:	a8800c04 	addi	r2,r21,48
   8b8c8:	38800005 	stb	r2,0(r7)
   8b8cc:	3dc00044 	addi	r23,r7,1
   8b8d0:	d9c00617 	ldw	r7,24(sp)
   8b8d4:	01800044 	movi	r6,1
   8b8d8:	180b883a 	mov	r5,r3
   8b8dc:	2005883a 	mov	r2,r4
   8b8e0:	39803826 	beq	r7,r6,8b9c4 <_dtoa_r+0x8f4>
   8b8e4:	000d883a 	mov	r6,zero
   8b8e8:	01d00934 	movhi	r7,16420
   8b8ec:	0084e440 	call	84e44 <__muldf3>
   8b8f0:	000d883a 	mov	r6,zero
   8b8f4:	000f883a 	mov	r7,zero
   8b8f8:	1009883a 	mov	r4,r2
   8b8fc:	180b883a 	mov	r5,r3
   8b900:	1025883a 	mov	r18,r2
   8b904:	1827883a 	mov	r19,r3
   8b908:	009128c0 	call	9128c <__eqdf2>
   8b90c:	103f9a26 	beq	r2,zero,8b778 <__alt_data_end+0xfffb6048>
   8b910:	d9c00617 	ldw	r7,24(sp)
   8b914:	d8c00717 	ldw	r3,28(sp)
   8b918:	b829883a 	mov	r20,r23
   8b91c:	38bfffc4 	addi	r2,r7,-1
   8b920:	18ad883a 	add	r22,r3,r2
   8b924:	00000a06 	br	8b950 <_dtoa_r+0x880>
   8b928:	0084e440 	call	84e44 <__muldf3>
   8b92c:	000d883a 	mov	r6,zero
   8b930:	000f883a 	mov	r7,zero
   8b934:	1009883a 	mov	r4,r2
   8b938:	180b883a 	mov	r5,r3
   8b93c:	1025883a 	mov	r18,r2
   8b940:	1827883a 	mov	r19,r3
   8b944:	b829883a 	mov	r20,r23
   8b948:	009128c0 	call	9128c <__eqdf2>
   8b94c:	103f8a26 	beq	r2,zero,8b778 <__alt_data_end+0xfffb6048>
   8b950:	800d883a 	mov	r6,r16
   8b954:	880f883a 	mov	r7,r17
   8b958:	9009883a 	mov	r4,r18
   8b95c:	980b883a 	mov	r5,r19
   8b960:	00842a40 	call	842a4 <__divdf3>
   8b964:	180b883a 	mov	r5,r3
   8b968:	1009883a 	mov	r4,r2
   8b96c:	0085fac0 	call	85fac <__fixdfsi>
   8b970:	1009883a 	mov	r4,r2
   8b974:	102b883a 	mov	r21,r2
   8b978:	008602c0 	call	8602c <__floatsidf>
   8b97c:	800d883a 	mov	r6,r16
   8b980:	880f883a 	mov	r7,r17
   8b984:	1009883a 	mov	r4,r2
   8b988:	180b883a 	mov	r5,r3
   8b98c:	0084e440 	call	84e44 <__muldf3>
   8b990:	100d883a 	mov	r6,r2
   8b994:	180f883a 	mov	r7,r3
   8b998:	9009883a 	mov	r4,r18
   8b99c:	980b883a 	mov	r5,r19
   8b9a0:	00856b00 	call	856b0 <__subdf3>
   8b9a4:	aa000c04 	addi	r8,r21,48
   8b9a8:	a2000005 	stb	r8,0(r20)
   8b9ac:	000d883a 	mov	r6,zero
   8b9b0:	01d00934 	movhi	r7,16420
   8b9b4:	1009883a 	mov	r4,r2
   8b9b8:	180b883a 	mov	r5,r3
   8b9bc:	a5c00044 	addi	r23,r20,1
   8b9c0:	b53fd91e 	bne	r22,r20,8b928 <__alt_data_end+0xfffb61f8>
   8b9c4:	100d883a 	mov	r6,r2
   8b9c8:	180f883a 	mov	r7,r3
   8b9cc:	1009883a 	mov	r4,r2
   8b9d0:	180b883a 	mov	r5,r3
   8b9d4:	00839f80 	call	839f8 <__adddf3>
   8b9d8:	100d883a 	mov	r6,r2
   8b9dc:	180f883a 	mov	r7,r3
   8b9e0:	8009883a 	mov	r4,r16
   8b9e4:	880b883a 	mov	r5,r17
   8b9e8:	1027883a 	mov	r19,r2
   8b9ec:	1825883a 	mov	r18,r3
   8b9f0:	0084d500 	call	84d50 <__ledf2>
   8b9f4:	10000816 	blt	r2,zero,8ba18 <_dtoa_r+0x948>
   8b9f8:	980d883a 	mov	r6,r19
   8b9fc:	900f883a 	mov	r7,r18
   8ba00:	8009883a 	mov	r4,r16
   8ba04:	880b883a 	mov	r5,r17
   8ba08:	009128c0 	call	9128c <__eqdf2>
   8ba0c:	103f5a1e 	bne	r2,zero,8b778 <__alt_data_end+0xfffb6048>
   8ba10:	ad40004c 	andi	r21,r21,1
   8ba14:	a83f5826 	beq	r21,zero,8b778 <__alt_data_end+0xfffb6048>
   8ba18:	bd3fffc3 	ldbu	r20,-1(r23)
   8ba1c:	b8bfffc4 	addi	r2,r23,-1
   8ba20:	1007883a 	mov	r3,r2
   8ba24:	01400e44 	movi	r5,57
   8ba28:	d9800717 	ldw	r6,28(sp)
   8ba2c:	00000506 	br	8ba44 <_dtoa_r+0x974>
   8ba30:	18ffffc4 	addi	r3,r3,-1
   8ba34:	11824726 	beq	r2,r6,8c354 <_dtoa_r+0x1284>
   8ba38:	1d000003 	ldbu	r20,0(r3)
   8ba3c:	102f883a 	mov	r23,r2
   8ba40:	10bfffc4 	addi	r2,r2,-1
   8ba44:	a1003fcc 	andi	r4,r20,255
   8ba48:	2100201c 	xori	r4,r4,128
   8ba4c:	213fe004 	addi	r4,r4,-128
   8ba50:	217ff726 	beq	r4,r5,8ba30 <__alt_data_end+0xfffb6300>
   8ba54:	a2000044 	addi	r8,r20,1
   8ba58:	12000005 	stb	r8,0(r2)
   8ba5c:	003f4606 	br	8b778 <__alt_data_end+0xfffb6048>
   8ba60:	d9000b17 	ldw	r4,44(sp)
   8ba64:	2000c826 	beq	r4,zero,8bd88 <_dtoa_r+0xcb8>
   8ba68:	d9800317 	ldw	r6,12(sp)
   8ba6c:	00c00044 	movi	r3,1
   8ba70:	1980f90e 	bge	r3,r6,8be58 <_dtoa_r+0xd88>
   8ba74:	d8800617 	ldw	r2,24(sp)
   8ba78:	d8c00a17 	ldw	r3,40(sp)
   8ba7c:	157fffc4 	addi	r21,r2,-1
   8ba80:	1d41f316 	blt	r3,r21,8c250 <_dtoa_r+0x1180>
   8ba84:	1d6bc83a 	sub	r21,r3,r21
   8ba88:	d9c00617 	ldw	r7,24(sp)
   8ba8c:	3802aa16 	blt	r7,zero,8c538 <_dtoa_r+0x1468>
   8ba90:	dd000817 	ldw	r20,32(sp)
   8ba94:	d8800617 	ldw	r2,24(sp)
   8ba98:	d8c00817 	ldw	r3,32(sp)
   8ba9c:	01400044 	movi	r5,1
   8baa0:	e009883a 	mov	r4,fp
   8baa4:	1887883a 	add	r3,r3,r2
   8baa8:	d8c00815 	stw	r3,32(sp)
   8baac:	b0ad883a 	add	r22,r22,r2
   8bab0:	008d6180 	call	8d618 <__i2b>
   8bab4:	1023883a 	mov	r17,r2
   8bab8:	a0000826 	beq	r20,zero,8badc <_dtoa_r+0xa0c>
   8babc:	0580070e 	bge	zero,r22,8badc <_dtoa_r+0xa0c>
   8bac0:	a005883a 	mov	r2,r20
   8bac4:	b500b916 	blt	r22,r20,8bdac <_dtoa_r+0xcdc>
   8bac8:	d9000817 	ldw	r4,32(sp)
   8bacc:	a0a9c83a 	sub	r20,r20,r2
   8bad0:	b0adc83a 	sub	r22,r22,r2
   8bad4:	2089c83a 	sub	r4,r4,r2
   8bad8:	d9000815 	stw	r4,32(sp)
   8badc:	d9800a17 	ldw	r6,40(sp)
   8bae0:	0181810e 	bge	zero,r6,8c0e8 <_dtoa_r+0x1018>
   8bae4:	d9c00b17 	ldw	r7,44(sp)
   8bae8:	3800b326 	beq	r7,zero,8bdb8 <_dtoa_r+0xce8>
   8baec:	a800b226 	beq	r21,zero,8bdb8 <_dtoa_r+0xce8>
   8baf0:	880b883a 	mov	r5,r17
   8baf4:	a80d883a 	mov	r6,r21
   8baf8:	e009883a 	mov	r4,fp
   8bafc:	008d8e00 	call	8d8e0 <__pow5mult>
   8bb00:	d9800917 	ldw	r6,36(sp)
   8bb04:	100b883a 	mov	r5,r2
   8bb08:	e009883a 	mov	r4,fp
   8bb0c:	1023883a 	mov	r17,r2
   8bb10:	008d6540 	call	8d654 <__multiply>
   8bb14:	1021883a 	mov	r16,r2
   8bb18:	d8800a17 	ldw	r2,40(sp)
   8bb1c:	d9400917 	ldw	r5,36(sp)
   8bb20:	e009883a 	mov	r4,fp
   8bb24:	1545c83a 	sub	r2,r2,r21
   8bb28:	d8800a15 	stw	r2,40(sp)
   8bb2c:	008d28c0 	call	8d28c <_Bfree>
   8bb30:	d8c00a17 	ldw	r3,40(sp)
   8bb34:	18009f1e 	bne	r3,zero,8bdb4 <_dtoa_r+0xce4>
   8bb38:	05c00044 	movi	r23,1
   8bb3c:	e009883a 	mov	r4,fp
   8bb40:	b80b883a 	mov	r5,r23
   8bb44:	008d6180 	call	8d618 <__i2b>
   8bb48:	d9000d17 	ldw	r4,52(sp)
   8bb4c:	102b883a 	mov	r21,r2
   8bb50:	2000ce26 	beq	r4,zero,8be8c <_dtoa_r+0xdbc>
   8bb54:	200d883a 	mov	r6,r4
   8bb58:	100b883a 	mov	r5,r2
   8bb5c:	e009883a 	mov	r4,fp
   8bb60:	008d8e00 	call	8d8e0 <__pow5mult>
   8bb64:	d9800317 	ldw	r6,12(sp)
   8bb68:	102b883a 	mov	r21,r2
   8bb6c:	b981810e 	bge	r23,r6,8c174 <_dtoa_r+0x10a4>
   8bb70:	0027883a 	mov	r19,zero
   8bb74:	a8800417 	ldw	r2,16(r21)
   8bb78:	05c00804 	movi	r23,32
   8bb7c:	10800104 	addi	r2,r2,4
   8bb80:	1085883a 	add	r2,r2,r2
   8bb84:	1085883a 	add	r2,r2,r2
   8bb88:	a885883a 	add	r2,r21,r2
   8bb8c:	11000017 	ldw	r4,0(r2)
   8bb90:	008d5000 	call	8d500 <__hi0bits>
   8bb94:	b885c83a 	sub	r2,r23,r2
   8bb98:	1585883a 	add	r2,r2,r22
   8bb9c:	108007cc 	andi	r2,r2,31
   8bba0:	1000b326 	beq	r2,zero,8be70 <_dtoa_r+0xda0>
   8bba4:	00c00804 	movi	r3,32
   8bba8:	1887c83a 	sub	r3,r3,r2
   8bbac:	01000104 	movi	r4,4
   8bbb0:	20c2cd0e 	bge	r4,r3,8c6e8 <_dtoa_r+0x1618>
   8bbb4:	00c00704 	movi	r3,28
   8bbb8:	1885c83a 	sub	r2,r3,r2
   8bbbc:	d8c00817 	ldw	r3,32(sp)
   8bbc0:	a0a9883a 	add	r20,r20,r2
   8bbc4:	b0ad883a 	add	r22,r22,r2
   8bbc8:	1887883a 	add	r3,r3,r2
   8bbcc:	d8c00815 	stw	r3,32(sp)
   8bbd0:	d9800817 	ldw	r6,32(sp)
   8bbd4:	0180040e 	bge	zero,r6,8bbe8 <_dtoa_r+0xb18>
   8bbd8:	800b883a 	mov	r5,r16
   8bbdc:	e009883a 	mov	r4,fp
   8bbe0:	008da200 	call	8da20 <__lshift>
   8bbe4:	1021883a 	mov	r16,r2
   8bbe8:	0580050e 	bge	zero,r22,8bc00 <_dtoa_r+0xb30>
   8bbec:	a80b883a 	mov	r5,r21
   8bbf0:	b00d883a 	mov	r6,r22
   8bbf4:	e009883a 	mov	r4,fp
   8bbf8:	008da200 	call	8da20 <__lshift>
   8bbfc:	102b883a 	mov	r21,r2
   8bc00:	d9c00e17 	ldw	r7,56(sp)
   8bc04:	3801211e 	bne	r7,zero,8c08c <_dtoa_r+0xfbc>
   8bc08:	d9800617 	ldw	r6,24(sp)
   8bc0c:	0181380e 	bge	zero,r6,8c0f0 <_dtoa_r+0x1020>
   8bc10:	d8c00b17 	ldw	r3,44(sp)
   8bc14:	1800ab1e 	bne	r3,zero,8bec4 <_dtoa_r+0xdf4>
   8bc18:	dc800717 	ldw	r18,28(sp)
   8bc1c:	dcc00617 	ldw	r19,24(sp)
   8bc20:	9029883a 	mov	r20,r18
   8bc24:	00000206 	br	8bc30 <_dtoa_r+0xb60>
   8bc28:	008d2b40 	call	8d2b4 <__multadd>
   8bc2c:	1021883a 	mov	r16,r2
   8bc30:	a80b883a 	mov	r5,r21
   8bc34:	8009883a 	mov	r4,r16
   8bc38:	008aea80 	call	8aea8 <quorem>
   8bc3c:	10800c04 	addi	r2,r2,48
   8bc40:	90800005 	stb	r2,0(r18)
   8bc44:	94800044 	addi	r18,r18,1
   8bc48:	9507c83a 	sub	r3,r18,r20
   8bc4c:	000f883a 	mov	r7,zero
   8bc50:	01800284 	movi	r6,10
   8bc54:	800b883a 	mov	r5,r16
   8bc58:	e009883a 	mov	r4,fp
   8bc5c:	1cfff216 	blt	r3,r19,8bc28 <__alt_data_end+0xfffb64f8>
   8bc60:	1011883a 	mov	r8,r2
   8bc64:	d8800617 	ldw	r2,24(sp)
   8bc68:	0082370e 	bge	zero,r2,8c548 <_dtoa_r+0x1478>
   8bc6c:	d9000717 	ldw	r4,28(sp)
   8bc70:	0025883a 	mov	r18,zero
   8bc74:	20af883a 	add	r23,r4,r2
   8bc78:	01800044 	movi	r6,1
   8bc7c:	800b883a 	mov	r5,r16
   8bc80:	e009883a 	mov	r4,fp
   8bc84:	da001715 	stw	r8,92(sp)
   8bc88:	008da200 	call	8da20 <__lshift>
   8bc8c:	a80b883a 	mov	r5,r21
   8bc90:	1009883a 	mov	r4,r2
   8bc94:	d8800915 	stw	r2,36(sp)
   8bc98:	008db680 	call	8db68 <__mcmp>
   8bc9c:	da001717 	ldw	r8,92(sp)
   8bca0:	0081800e 	bge	zero,r2,8c2a4 <_dtoa_r+0x11d4>
   8bca4:	b93fffc3 	ldbu	r4,-1(r23)
   8bca8:	b8bfffc4 	addi	r2,r23,-1
   8bcac:	1007883a 	mov	r3,r2
   8bcb0:	01800e44 	movi	r6,57
   8bcb4:	d9c00717 	ldw	r7,28(sp)
   8bcb8:	00000506 	br	8bcd0 <_dtoa_r+0xc00>
   8bcbc:	18ffffc4 	addi	r3,r3,-1
   8bcc0:	11c12326 	beq	r2,r7,8c150 <_dtoa_r+0x1080>
   8bcc4:	19000003 	ldbu	r4,0(r3)
   8bcc8:	102f883a 	mov	r23,r2
   8bccc:	10bfffc4 	addi	r2,r2,-1
   8bcd0:	21403fcc 	andi	r5,r4,255
   8bcd4:	2940201c 	xori	r5,r5,128
   8bcd8:	297fe004 	addi	r5,r5,-128
   8bcdc:	29bff726 	beq	r5,r6,8bcbc <__alt_data_end+0xfffb658c>
   8bce0:	21000044 	addi	r4,r4,1
   8bce4:	11000005 	stb	r4,0(r2)
   8bce8:	a80b883a 	mov	r5,r21
   8bcec:	e009883a 	mov	r4,fp
   8bcf0:	008d28c0 	call	8d28c <_Bfree>
   8bcf4:	883ea026 	beq	r17,zero,8b778 <__alt_data_end+0xfffb6048>
   8bcf8:	90000426 	beq	r18,zero,8bd0c <_dtoa_r+0xc3c>
   8bcfc:	94400326 	beq	r18,r17,8bd0c <_dtoa_r+0xc3c>
   8bd00:	900b883a 	mov	r5,r18
   8bd04:	e009883a 	mov	r4,fp
   8bd08:	008d28c0 	call	8d28c <_Bfree>
   8bd0c:	880b883a 	mov	r5,r17
   8bd10:	e009883a 	mov	r4,fp
   8bd14:	008d28c0 	call	8d28c <_Bfree>
   8bd18:	003e9706 	br	8b778 <__alt_data_end+0xfffb6048>
   8bd1c:	01800044 	movi	r6,1
   8bd20:	d9800e15 	stw	r6,56(sp)
   8bd24:	003d9606 	br	8b380 <__alt_data_end+0xfffb5c50>
   8bd28:	d8800817 	ldw	r2,32(sp)
   8bd2c:	d8c00517 	ldw	r3,20(sp)
   8bd30:	d8000d15 	stw	zero,52(sp)
   8bd34:	10c5c83a 	sub	r2,r2,r3
   8bd38:	00c9c83a 	sub	r4,zero,r3
   8bd3c:	d8800815 	stw	r2,32(sp)
   8bd40:	d9000a15 	stw	r4,40(sp)
   8bd44:	003d9706 	br	8b3a4 <__alt_data_end+0xfffb5c74>
   8bd48:	05adc83a 	sub	r22,zero,r22
   8bd4c:	dd800815 	stw	r22,32(sp)
   8bd50:	002d883a 	mov	r22,zero
   8bd54:	003d8e06 	br	8b390 <__alt_data_end+0xfffb5c60>
   8bd58:	d9000517 	ldw	r4,20(sp)
   8bd5c:	008602c0 	call	8602c <__floatsidf>
   8bd60:	100d883a 	mov	r6,r2
   8bd64:	180f883a 	mov	r7,r3
   8bd68:	a009883a 	mov	r4,r20
   8bd6c:	880b883a 	mov	r5,r17
   8bd70:	009128c0 	call	9128c <__eqdf2>
   8bd74:	103d7126 	beq	r2,zero,8b33c <__alt_data_end+0xfffb5c0c>
   8bd78:	d9c00517 	ldw	r7,20(sp)
   8bd7c:	39ffffc4 	addi	r7,r7,-1
   8bd80:	d9c00515 	stw	r7,20(sp)
   8bd84:	003d6d06 	br	8b33c <__alt_data_end+0xfffb5c0c>
   8bd88:	dd400a17 	ldw	r21,40(sp)
   8bd8c:	dd000817 	ldw	r20,32(sp)
   8bd90:	0023883a 	mov	r17,zero
   8bd94:	003f4806 	br	8bab8 <__alt_data_end+0xfffb6388>
   8bd98:	10e3c83a 	sub	r17,r2,r3
   8bd9c:	9448983a 	sll	r4,r18,r17
   8bda0:	003d3206 	br	8b26c <__alt_data_end+0xfffb5b3c>
   8bda4:	d8000e15 	stw	zero,56(sp)
   8bda8:	003d7506 	br	8b380 <__alt_data_end+0xfffb5c50>
   8bdac:	b005883a 	mov	r2,r22
   8bdb0:	003f4506 	br	8bac8 <__alt_data_end+0xfffb6398>
   8bdb4:	dc000915 	stw	r16,36(sp)
   8bdb8:	d9800a17 	ldw	r6,40(sp)
   8bdbc:	d9400917 	ldw	r5,36(sp)
   8bdc0:	e009883a 	mov	r4,fp
   8bdc4:	008d8e00 	call	8d8e0 <__pow5mult>
   8bdc8:	1021883a 	mov	r16,r2
   8bdcc:	003f5a06 	br	8bb38 <__alt_data_end+0xfffb6408>
   8bdd0:	01c00044 	movi	r7,1
   8bdd4:	d9c00b15 	stw	r7,44(sp)
   8bdd8:	d8802217 	ldw	r2,136(sp)
   8bddc:	0081280e 	bge	zero,r2,8c280 <_dtoa_r+0x11b0>
   8bde0:	100d883a 	mov	r6,r2
   8bde4:	1021883a 	mov	r16,r2
   8bde8:	d8800c15 	stw	r2,48(sp)
   8bdec:	d8800615 	stw	r2,24(sp)
   8bdf0:	003d8806 	br	8b414 <__alt_data_end+0xfffb5ce4>
   8bdf4:	d8800617 	ldw	r2,24(sp)
   8bdf8:	00be9b16 	blt	zero,r2,8b868 <__alt_data_end+0xfffb6138>
   8bdfc:	10010f1e 	bne	r2,zero,8c23c <_dtoa_r+0x116c>
   8be00:	880b883a 	mov	r5,r17
   8be04:	000d883a 	mov	r6,zero
   8be08:	01d00534 	movhi	r7,16404
   8be0c:	8009883a 	mov	r4,r16
   8be10:	0084e440 	call	84e44 <__muldf3>
   8be14:	900d883a 	mov	r6,r18
   8be18:	980f883a 	mov	r7,r19
   8be1c:	1009883a 	mov	r4,r2
   8be20:	180b883a 	mov	r5,r3
   8be24:	0084c740 	call	84c74 <__gedf2>
   8be28:	002b883a 	mov	r21,zero
   8be2c:	0023883a 	mov	r17,zero
   8be30:	1000bf16 	blt	r2,zero,8c130 <_dtoa_r+0x1060>
   8be34:	d9802217 	ldw	r6,136(sp)
   8be38:	ddc00717 	ldw	r23,28(sp)
   8be3c:	018c303a 	nor	r6,zero,r6
   8be40:	d9800515 	stw	r6,20(sp)
   8be44:	a80b883a 	mov	r5,r21
   8be48:	e009883a 	mov	r4,fp
   8be4c:	008d28c0 	call	8d28c <_Bfree>
   8be50:	883e4926 	beq	r17,zero,8b778 <__alt_data_end+0xfffb6048>
   8be54:	003fad06 	br	8bd0c <__alt_data_end+0xfffb65dc>
   8be58:	d9c01117 	ldw	r7,68(sp)
   8be5c:	3801bc26 	beq	r7,zero,8c550 <_dtoa_r+0x1480>
   8be60:	10810cc4 	addi	r2,r2,1075
   8be64:	dd400a17 	ldw	r21,40(sp)
   8be68:	dd000817 	ldw	r20,32(sp)
   8be6c:	003f0a06 	br	8ba98 <__alt_data_end+0xfffb6368>
   8be70:	00800704 	movi	r2,28
   8be74:	d9000817 	ldw	r4,32(sp)
   8be78:	a0a9883a 	add	r20,r20,r2
   8be7c:	b0ad883a 	add	r22,r22,r2
   8be80:	2089883a 	add	r4,r4,r2
   8be84:	d9000815 	stw	r4,32(sp)
   8be88:	003f5106 	br	8bbd0 <__alt_data_end+0xfffb64a0>
   8be8c:	d8c00317 	ldw	r3,12(sp)
   8be90:	b8c1fc0e 	bge	r23,r3,8c684 <_dtoa_r+0x15b4>
   8be94:	0027883a 	mov	r19,zero
   8be98:	b805883a 	mov	r2,r23
   8be9c:	003f3e06 	br	8bb98 <__alt_data_end+0xfffb6468>
   8bea0:	880b883a 	mov	r5,r17
   8bea4:	e009883a 	mov	r4,fp
   8bea8:	000f883a 	mov	r7,zero
   8beac:	01800284 	movi	r6,10
   8beb0:	008d2b40 	call	8d2b4 <__multadd>
   8beb4:	d9000c17 	ldw	r4,48(sp)
   8beb8:	1023883a 	mov	r17,r2
   8bebc:	0102040e 	bge	zero,r4,8c6d0 <_dtoa_r+0x1600>
   8bec0:	d9000615 	stw	r4,24(sp)
   8bec4:	0500050e 	bge	zero,r20,8bedc <_dtoa_r+0xe0c>
   8bec8:	880b883a 	mov	r5,r17
   8becc:	a00d883a 	mov	r6,r20
   8bed0:	e009883a 	mov	r4,fp
   8bed4:	008da200 	call	8da20 <__lshift>
   8bed8:	1023883a 	mov	r17,r2
   8bedc:	9801241e 	bne	r19,zero,8c370 <_dtoa_r+0x12a0>
   8bee0:	8829883a 	mov	r20,r17
   8bee4:	d9000617 	ldw	r4,24(sp)
   8bee8:	dcc00717 	ldw	r19,28(sp)
   8beec:	9480004c 	andi	r18,r18,1
   8bef0:	20bfffc4 	addi	r2,r4,-1
   8bef4:	9885883a 	add	r2,r19,r2
   8bef8:	d8800415 	stw	r2,16(sp)
   8befc:	dc800615 	stw	r18,24(sp)
   8bf00:	a80b883a 	mov	r5,r21
   8bf04:	8009883a 	mov	r4,r16
   8bf08:	008aea80 	call	8aea8 <quorem>
   8bf0c:	880b883a 	mov	r5,r17
   8bf10:	8009883a 	mov	r4,r16
   8bf14:	102f883a 	mov	r23,r2
   8bf18:	008db680 	call	8db68 <__mcmp>
   8bf1c:	a80b883a 	mov	r5,r21
   8bf20:	a00d883a 	mov	r6,r20
   8bf24:	e009883a 	mov	r4,fp
   8bf28:	102d883a 	mov	r22,r2
   8bf2c:	008dbc80 	call	8dbc8 <__mdiff>
   8bf30:	1007883a 	mov	r3,r2
   8bf34:	10800317 	ldw	r2,12(r2)
   8bf38:	bc800c04 	addi	r18,r23,48
   8bf3c:	180b883a 	mov	r5,r3
   8bf40:	10004e1e 	bne	r2,zero,8c07c <_dtoa_r+0xfac>
   8bf44:	8009883a 	mov	r4,r16
   8bf48:	d8c01615 	stw	r3,88(sp)
   8bf4c:	008db680 	call	8db68 <__mcmp>
   8bf50:	d8c01617 	ldw	r3,88(sp)
   8bf54:	e009883a 	mov	r4,fp
   8bf58:	d8801615 	stw	r2,88(sp)
   8bf5c:	180b883a 	mov	r5,r3
   8bf60:	008d28c0 	call	8d28c <_Bfree>
   8bf64:	d8801617 	ldw	r2,88(sp)
   8bf68:	1000041e 	bne	r2,zero,8bf7c <_dtoa_r+0xeac>
   8bf6c:	d9800317 	ldw	r6,12(sp)
   8bf70:	3000021e 	bne	r6,zero,8bf7c <_dtoa_r+0xeac>
   8bf74:	d8c00617 	ldw	r3,24(sp)
   8bf78:	18003726 	beq	r3,zero,8c058 <_dtoa_r+0xf88>
   8bf7c:	b0002016 	blt	r22,zero,8c000 <_dtoa_r+0xf30>
   8bf80:	b000041e 	bne	r22,zero,8bf94 <_dtoa_r+0xec4>
   8bf84:	d9000317 	ldw	r4,12(sp)
   8bf88:	2000021e 	bne	r4,zero,8bf94 <_dtoa_r+0xec4>
   8bf8c:	d8c00617 	ldw	r3,24(sp)
   8bf90:	18001b26 	beq	r3,zero,8c000 <_dtoa_r+0xf30>
   8bf94:	00810716 	blt	zero,r2,8c3b4 <_dtoa_r+0x12e4>
   8bf98:	d8c00417 	ldw	r3,16(sp)
   8bf9c:	9d800044 	addi	r22,r19,1
   8bfa0:	9c800005 	stb	r18,0(r19)
   8bfa4:	b02f883a 	mov	r23,r22
   8bfa8:	98c10626 	beq	r19,r3,8c3c4 <_dtoa_r+0x12f4>
   8bfac:	800b883a 	mov	r5,r16
   8bfb0:	000f883a 	mov	r7,zero
   8bfb4:	01800284 	movi	r6,10
   8bfb8:	e009883a 	mov	r4,fp
   8bfbc:	008d2b40 	call	8d2b4 <__multadd>
   8bfc0:	1021883a 	mov	r16,r2
   8bfc4:	000f883a 	mov	r7,zero
   8bfc8:	01800284 	movi	r6,10
   8bfcc:	880b883a 	mov	r5,r17
   8bfd0:	e009883a 	mov	r4,fp
   8bfd4:	8d002526 	beq	r17,r20,8c06c <_dtoa_r+0xf9c>
   8bfd8:	008d2b40 	call	8d2b4 <__multadd>
   8bfdc:	a00b883a 	mov	r5,r20
   8bfe0:	000f883a 	mov	r7,zero
   8bfe4:	01800284 	movi	r6,10
   8bfe8:	e009883a 	mov	r4,fp
   8bfec:	1023883a 	mov	r17,r2
   8bff0:	008d2b40 	call	8d2b4 <__multadd>
   8bff4:	1029883a 	mov	r20,r2
   8bff8:	b027883a 	mov	r19,r22
   8bffc:	003fc006 	br	8bf00 <__alt_data_end+0xfffb67d0>
   8c000:	9011883a 	mov	r8,r18
   8c004:	00800e0e 	bge	zero,r2,8c040 <_dtoa_r+0xf70>
   8c008:	800b883a 	mov	r5,r16
   8c00c:	01800044 	movi	r6,1
   8c010:	e009883a 	mov	r4,fp
   8c014:	da001715 	stw	r8,92(sp)
   8c018:	008da200 	call	8da20 <__lshift>
   8c01c:	a80b883a 	mov	r5,r21
   8c020:	1009883a 	mov	r4,r2
   8c024:	1021883a 	mov	r16,r2
   8c028:	008db680 	call	8db68 <__mcmp>
   8c02c:	da001717 	ldw	r8,92(sp)
   8c030:	0081960e 	bge	zero,r2,8c68c <_dtoa_r+0x15bc>
   8c034:	00800e44 	movi	r2,57
   8c038:	40817026 	beq	r8,r2,8c5fc <_dtoa_r+0x152c>
   8c03c:	ba000c44 	addi	r8,r23,49
   8c040:	8825883a 	mov	r18,r17
   8c044:	9dc00044 	addi	r23,r19,1
   8c048:	9a000005 	stb	r8,0(r19)
   8c04c:	a023883a 	mov	r17,r20
   8c050:	dc000915 	stw	r16,36(sp)
   8c054:	003f2406 	br	8bce8 <__alt_data_end+0xfffb65b8>
   8c058:	00800e44 	movi	r2,57
   8c05c:	9011883a 	mov	r8,r18
   8c060:	90816626 	beq	r18,r2,8c5fc <_dtoa_r+0x152c>
   8c064:	05bff516 	blt	zero,r22,8c03c <__alt_data_end+0xfffb690c>
   8c068:	003ff506 	br	8c040 <__alt_data_end+0xfffb6910>
   8c06c:	008d2b40 	call	8d2b4 <__multadd>
   8c070:	1023883a 	mov	r17,r2
   8c074:	1029883a 	mov	r20,r2
   8c078:	003fdf06 	br	8bff8 <__alt_data_end+0xfffb68c8>
   8c07c:	e009883a 	mov	r4,fp
   8c080:	008d28c0 	call	8d28c <_Bfree>
   8c084:	00800044 	movi	r2,1
   8c088:	003fbc06 	br	8bf7c <__alt_data_end+0xfffb684c>
   8c08c:	a80b883a 	mov	r5,r21
   8c090:	8009883a 	mov	r4,r16
   8c094:	008db680 	call	8db68 <__mcmp>
   8c098:	103edb0e 	bge	r2,zero,8bc08 <__alt_data_end+0xfffb64d8>
   8c09c:	800b883a 	mov	r5,r16
   8c0a0:	000f883a 	mov	r7,zero
   8c0a4:	01800284 	movi	r6,10
   8c0a8:	e009883a 	mov	r4,fp
   8c0ac:	008d2b40 	call	8d2b4 <__multadd>
   8c0b0:	1021883a 	mov	r16,r2
   8c0b4:	d8800517 	ldw	r2,20(sp)
   8c0b8:	d8c00b17 	ldw	r3,44(sp)
   8c0bc:	10bfffc4 	addi	r2,r2,-1
   8c0c0:	d8800515 	stw	r2,20(sp)
   8c0c4:	183f761e 	bne	r3,zero,8bea0 <__alt_data_end+0xfffb6770>
   8c0c8:	d9000c17 	ldw	r4,48(sp)
   8c0cc:	0101730e 	bge	zero,r4,8c69c <_dtoa_r+0x15cc>
   8c0d0:	d9000615 	stw	r4,24(sp)
   8c0d4:	003ed006 	br	8bc18 <__alt_data_end+0xfffb64e8>
   8c0d8:	00800084 	movi	r2,2
   8c0dc:	3081861e 	bne	r6,r2,8c6f8 <_dtoa_r+0x1628>
   8c0e0:	d8000b15 	stw	zero,44(sp)
   8c0e4:	003f3c06 	br	8bdd8 <__alt_data_end+0xfffb66a8>
   8c0e8:	dc000917 	ldw	r16,36(sp)
   8c0ec:	003e9206 	br	8bb38 <__alt_data_end+0xfffb6408>
   8c0f0:	d9c00317 	ldw	r7,12(sp)
   8c0f4:	00800084 	movi	r2,2
   8c0f8:	11fec50e 	bge	r2,r7,8bc10 <__alt_data_end+0xfffb64e0>
   8c0fc:	d9000617 	ldw	r4,24(sp)
   8c100:	20013c1e 	bne	r4,zero,8c5f4 <_dtoa_r+0x1524>
   8c104:	a80b883a 	mov	r5,r21
   8c108:	000f883a 	mov	r7,zero
   8c10c:	01800144 	movi	r6,5
   8c110:	e009883a 	mov	r4,fp
   8c114:	008d2b40 	call	8d2b4 <__multadd>
   8c118:	100b883a 	mov	r5,r2
   8c11c:	8009883a 	mov	r4,r16
   8c120:	102b883a 	mov	r21,r2
   8c124:	008db680 	call	8db68 <__mcmp>
   8c128:	dc000915 	stw	r16,36(sp)
   8c12c:	00bf410e 	bge	zero,r2,8be34 <__alt_data_end+0xfffb6704>
   8c130:	d9c00717 	ldw	r7,28(sp)
   8c134:	00800c44 	movi	r2,49
   8c138:	38800005 	stb	r2,0(r7)
   8c13c:	d8800517 	ldw	r2,20(sp)
   8c140:	3dc00044 	addi	r23,r7,1
   8c144:	10800044 	addi	r2,r2,1
   8c148:	d8800515 	stw	r2,20(sp)
   8c14c:	003f3d06 	br	8be44 <__alt_data_end+0xfffb6714>
   8c150:	d9800517 	ldw	r6,20(sp)
   8c154:	d9c00717 	ldw	r7,28(sp)
   8c158:	00800c44 	movi	r2,49
   8c15c:	31800044 	addi	r6,r6,1
   8c160:	d9800515 	stw	r6,20(sp)
   8c164:	38800005 	stb	r2,0(r7)
   8c168:	003edf06 	br	8bce8 <__alt_data_end+0xfffb65b8>
   8c16c:	d8000b15 	stw	zero,44(sp)
   8c170:	003c9f06 	br	8b3f0 <__alt_data_end+0xfffb5cc0>
   8c174:	903e7e1e 	bne	r18,zero,8bb70 <__alt_data_end+0xfffb6440>
   8c178:	00800434 	movhi	r2,16
   8c17c:	10bfffc4 	addi	r2,r2,-1
   8c180:	9884703a 	and	r2,r19,r2
   8c184:	1000ea1e 	bne	r2,zero,8c530 <_dtoa_r+0x1460>
   8c188:	9cdffc2c 	andhi	r19,r19,32752
   8c18c:	9800e826 	beq	r19,zero,8c530 <_dtoa_r+0x1460>
   8c190:	d9c00817 	ldw	r7,32(sp)
   8c194:	b5800044 	addi	r22,r22,1
   8c198:	04c00044 	movi	r19,1
   8c19c:	39c00044 	addi	r7,r7,1
   8c1a0:	d9c00815 	stw	r7,32(sp)
   8c1a4:	d8800d17 	ldw	r2,52(sp)
   8c1a8:	103e721e 	bne	r2,zero,8bb74 <__alt_data_end+0xfffb6444>
   8c1ac:	00800044 	movi	r2,1
   8c1b0:	003e7906 	br	8bb98 <__alt_data_end+0xfffb6468>
   8c1b4:	8009883a 	mov	r4,r16
   8c1b8:	008602c0 	call	8602c <__floatsidf>
   8c1bc:	d9800f17 	ldw	r6,60(sp)
   8c1c0:	d9c01017 	ldw	r7,64(sp)
   8c1c4:	1009883a 	mov	r4,r2
   8c1c8:	180b883a 	mov	r5,r3
   8c1cc:	0084e440 	call	84e44 <__muldf3>
   8c1d0:	000d883a 	mov	r6,zero
   8c1d4:	01d00734 	movhi	r7,16412
   8c1d8:	1009883a 	mov	r4,r2
   8c1dc:	180b883a 	mov	r5,r3
   8c1e0:	00839f80 	call	839f8 <__adddf3>
   8c1e4:	047f3034 	movhi	r17,64704
   8c1e8:	1021883a 	mov	r16,r2
   8c1ec:	1c63883a 	add	r17,r3,r17
   8c1f0:	d9000f17 	ldw	r4,60(sp)
   8c1f4:	d9401017 	ldw	r5,64(sp)
   8c1f8:	000d883a 	mov	r6,zero
   8c1fc:	01d00534 	movhi	r7,16404
   8c200:	00856b00 	call	856b0 <__subdf3>
   8c204:	800d883a 	mov	r6,r16
   8c208:	880f883a 	mov	r7,r17
   8c20c:	1009883a 	mov	r4,r2
   8c210:	180b883a 	mov	r5,r3
   8c214:	102b883a 	mov	r21,r2
   8c218:	1829883a 	mov	r20,r3
   8c21c:	0084c740 	call	84c74 <__gedf2>
   8c220:	00806c16 	blt	zero,r2,8c3d4 <_dtoa_r+0x1304>
   8c224:	89e0003c 	xorhi	r7,r17,32768
   8c228:	800d883a 	mov	r6,r16
   8c22c:	a809883a 	mov	r4,r21
   8c230:	a00b883a 	mov	r5,r20
   8c234:	0084d500 	call	84d50 <__ledf2>
   8c238:	103d7e0e 	bge	r2,zero,8b834 <__alt_data_end+0xfffb6104>
   8c23c:	002b883a 	mov	r21,zero
   8c240:	0023883a 	mov	r17,zero
   8c244:	003efb06 	br	8be34 <__alt_data_end+0xfffb6704>
   8c248:	d8800717 	ldw	r2,28(sp)
   8c24c:	003bd006 	br	8b190 <__alt_data_end+0xfffb5a60>
   8c250:	d9000a17 	ldw	r4,40(sp)
   8c254:	d9800d17 	ldw	r6,52(sp)
   8c258:	dd400a15 	stw	r21,40(sp)
   8c25c:	a905c83a 	sub	r2,r21,r4
   8c260:	308d883a 	add	r6,r6,r2
   8c264:	d9800d15 	stw	r6,52(sp)
   8c268:	002b883a 	mov	r21,zero
   8c26c:	003e0606 	br	8ba88 <__alt_data_end+0xfffb6358>
   8c270:	9023883a 	mov	r17,r18
   8c274:	9829883a 	mov	r20,r19
   8c278:	04000084 	movi	r16,2
   8c27c:	003c9206 	br	8b4c8 <__alt_data_end+0xfffb5d98>
   8c280:	04000044 	movi	r16,1
   8c284:	dc000c15 	stw	r16,48(sp)
   8c288:	dc000615 	stw	r16,24(sp)
   8c28c:	dc002215 	stw	r16,136(sp)
   8c290:	e0001115 	stw	zero,68(fp)
   8c294:	000b883a 	mov	r5,zero
   8c298:	003c6906 	br	8b440 <__alt_data_end+0xfffb5d10>
   8c29c:	3021883a 	mov	r16,r6
   8c2a0:	003ffb06 	br	8c290 <__alt_data_end+0xfffb6b60>
   8c2a4:	1000021e 	bne	r2,zero,8c2b0 <_dtoa_r+0x11e0>
   8c2a8:	4200004c 	andi	r8,r8,1
   8c2ac:	403e7d1e 	bne	r8,zero,8bca4 <__alt_data_end+0xfffb6574>
   8c2b0:	01000c04 	movi	r4,48
   8c2b4:	00000106 	br	8c2bc <_dtoa_r+0x11ec>
   8c2b8:	102f883a 	mov	r23,r2
   8c2bc:	b8bfffc4 	addi	r2,r23,-1
   8c2c0:	10c00007 	ldb	r3,0(r2)
   8c2c4:	193ffc26 	beq	r3,r4,8c2b8 <__alt_data_end+0xfffb6b88>
   8c2c8:	003e8706 	br	8bce8 <__alt_data_end+0xfffb65b8>
   8c2cc:	d8800517 	ldw	r2,20(sp)
   8c2d0:	00a3c83a 	sub	r17,zero,r2
   8c2d4:	8800a426 	beq	r17,zero,8c568 <_dtoa_r+0x1498>
   8c2d8:	888003cc 	andi	r2,r17,15
   8c2dc:	100490fa 	slli	r2,r2,3
   8c2e0:	00c00274 	movhi	r3,9
   8c2e4:	18d09b04 	addi	r3,r3,17004
   8c2e8:	1885883a 	add	r2,r3,r2
   8c2ec:	11800017 	ldw	r6,0(r2)
   8c2f0:	11c00117 	ldw	r7,4(r2)
   8c2f4:	9009883a 	mov	r4,r18
   8c2f8:	980b883a 	mov	r5,r19
   8c2fc:	8823d13a 	srai	r17,r17,4
   8c300:	0084e440 	call	84e44 <__muldf3>
   8c304:	d8800f15 	stw	r2,60(sp)
   8c308:	d8c01015 	stw	r3,64(sp)
   8c30c:	8800e826 	beq	r17,zero,8c6b0 <_dtoa_r+0x15e0>
   8c310:	05000274 	movhi	r20,9
   8c314:	a5109104 	addi	r20,r20,16964
   8c318:	04000084 	movi	r16,2
   8c31c:	8980004c 	andi	r6,r17,1
   8c320:	1009883a 	mov	r4,r2
   8c324:	8823d07a 	srai	r17,r17,1
   8c328:	180b883a 	mov	r5,r3
   8c32c:	30000426 	beq	r6,zero,8c340 <_dtoa_r+0x1270>
   8c330:	a1800017 	ldw	r6,0(r20)
   8c334:	a1c00117 	ldw	r7,4(r20)
   8c338:	84000044 	addi	r16,r16,1
   8c33c:	0084e440 	call	84e44 <__muldf3>
   8c340:	a5000204 	addi	r20,r20,8
   8c344:	883ff51e 	bne	r17,zero,8c31c <__alt_data_end+0xfffb6bec>
   8c348:	d8800f15 	stw	r2,60(sp)
   8c34c:	d8c01015 	stw	r3,64(sp)
   8c350:	003c7606 	br	8b52c <__alt_data_end+0xfffb5dfc>
   8c354:	00c00c04 	movi	r3,48
   8c358:	10c00005 	stb	r3,0(r2)
   8c35c:	d8c00517 	ldw	r3,20(sp)
   8c360:	bd3fffc3 	ldbu	r20,-1(r23)
   8c364:	18c00044 	addi	r3,r3,1
   8c368:	d8c00515 	stw	r3,20(sp)
   8c36c:	003db906 	br	8ba54 <__alt_data_end+0xfffb6324>
   8c370:	89400117 	ldw	r5,4(r17)
   8c374:	e009883a 	mov	r4,fp
   8c378:	008d1e40 	call	8d1e4 <_Balloc>
   8c37c:	89800417 	ldw	r6,16(r17)
   8c380:	89400304 	addi	r5,r17,12
   8c384:	11000304 	addi	r4,r2,12
   8c388:	31800084 	addi	r6,r6,2
   8c38c:	318d883a 	add	r6,r6,r6
   8c390:	318d883a 	add	r6,r6,r6
   8c394:	1027883a 	mov	r19,r2
   8c398:	008cf400 	call	8cf40 <memcpy>
   8c39c:	01800044 	movi	r6,1
   8c3a0:	980b883a 	mov	r5,r19
   8c3a4:	e009883a 	mov	r4,fp
   8c3a8:	008da200 	call	8da20 <__lshift>
   8c3ac:	1029883a 	mov	r20,r2
   8c3b0:	003ecc06 	br	8bee4 <__alt_data_end+0xfffb67b4>
   8c3b4:	00800e44 	movi	r2,57
   8c3b8:	90809026 	beq	r18,r2,8c5fc <_dtoa_r+0x152c>
   8c3bc:	92000044 	addi	r8,r18,1
   8c3c0:	003f1f06 	br	8c040 <__alt_data_end+0xfffb6910>
   8c3c4:	9011883a 	mov	r8,r18
   8c3c8:	8825883a 	mov	r18,r17
   8c3cc:	a023883a 	mov	r17,r20
   8c3d0:	003e2906 	br	8bc78 <__alt_data_end+0xfffb6548>
   8c3d4:	002b883a 	mov	r21,zero
   8c3d8:	0023883a 	mov	r17,zero
   8c3dc:	003f5406 	br	8c130 <__alt_data_end+0xfffb6a00>
   8c3e0:	61bfffc4 	addi	r6,r12,-1
   8c3e4:	300490fa 	slli	r2,r6,3
   8c3e8:	00c00274 	movhi	r3,9
   8c3ec:	18d09b04 	addi	r3,r3,17004
   8c3f0:	1885883a 	add	r2,r3,r2
   8c3f4:	11000017 	ldw	r4,0(r2)
   8c3f8:	11400117 	ldw	r5,4(r2)
   8c3fc:	d8800717 	ldw	r2,28(sp)
   8c400:	880f883a 	mov	r7,r17
   8c404:	d9801215 	stw	r6,72(sp)
   8c408:	800d883a 	mov	r6,r16
   8c40c:	db001615 	stw	r12,88(sp)
   8c410:	15c00044 	addi	r23,r2,1
   8c414:	0084e440 	call	84e44 <__muldf3>
   8c418:	d9401017 	ldw	r5,64(sp)
   8c41c:	d9000f17 	ldw	r4,60(sp)
   8c420:	d8c01515 	stw	r3,84(sp)
   8c424:	d8801415 	stw	r2,80(sp)
   8c428:	0085fac0 	call	85fac <__fixdfsi>
   8c42c:	1009883a 	mov	r4,r2
   8c430:	1021883a 	mov	r16,r2
   8c434:	008602c0 	call	8602c <__floatsidf>
   8c438:	d9000f17 	ldw	r4,60(sp)
   8c43c:	d9401017 	ldw	r5,64(sp)
   8c440:	100d883a 	mov	r6,r2
   8c444:	180f883a 	mov	r7,r3
   8c448:	00856b00 	call	856b0 <__subdf3>
   8c44c:	1829883a 	mov	r20,r3
   8c450:	d8c00717 	ldw	r3,28(sp)
   8c454:	84000c04 	addi	r16,r16,48
   8c458:	1023883a 	mov	r17,r2
   8c45c:	1c000005 	stb	r16,0(r3)
   8c460:	db001617 	ldw	r12,88(sp)
   8c464:	00800044 	movi	r2,1
   8c468:	60802226 	beq	r12,r2,8c4f4 <_dtoa_r+0x1424>
   8c46c:	d9c00717 	ldw	r7,28(sp)
   8c470:	8805883a 	mov	r2,r17
   8c474:	b82b883a 	mov	r21,r23
   8c478:	3b19883a 	add	r12,r7,r12
   8c47c:	6023883a 	mov	r17,r12
   8c480:	a007883a 	mov	r3,r20
   8c484:	dc800f15 	stw	r18,60(sp)
   8c488:	000d883a 	mov	r6,zero
   8c48c:	01d00934 	movhi	r7,16420
   8c490:	1009883a 	mov	r4,r2
   8c494:	180b883a 	mov	r5,r3
   8c498:	0084e440 	call	84e44 <__muldf3>
   8c49c:	180b883a 	mov	r5,r3
   8c4a0:	1009883a 	mov	r4,r2
   8c4a4:	1829883a 	mov	r20,r3
   8c4a8:	1025883a 	mov	r18,r2
   8c4ac:	0085fac0 	call	85fac <__fixdfsi>
   8c4b0:	1009883a 	mov	r4,r2
   8c4b4:	1021883a 	mov	r16,r2
   8c4b8:	008602c0 	call	8602c <__floatsidf>
   8c4bc:	100d883a 	mov	r6,r2
   8c4c0:	180f883a 	mov	r7,r3
   8c4c4:	9009883a 	mov	r4,r18
   8c4c8:	a00b883a 	mov	r5,r20
   8c4cc:	84000c04 	addi	r16,r16,48
   8c4d0:	00856b00 	call	856b0 <__subdf3>
   8c4d4:	ad400044 	addi	r21,r21,1
   8c4d8:	ac3fffc5 	stb	r16,-1(r21)
   8c4dc:	ac7fea1e 	bne	r21,r17,8c488 <__alt_data_end+0xfffb6d58>
   8c4e0:	1023883a 	mov	r17,r2
   8c4e4:	d8801217 	ldw	r2,72(sp)
   8c4e8:	dc800f17 	ldw	r18,60(sp)
   8c4ec:	1829883a 	mov	r20,r3
   8c4f0:	b8af883a 	add	r23,r23,r2
   8c4f4:	d9001417 	ldw	r4,80(sp)
   8c4f8:	d9401517 	ldw	r5,84(sp)
   8c4fc:	000d883a 	mov	r6,zero
   8c500:	01cff834 	movhi	r7,16352
   8c504:	00839f80 	call	839f8 <__adddf3>
   8c508:	880d883a 	mov	r6,r17
   8c50c:	a00f883a 	mov	r7,r20
   8c510:	1009883a 	mov	r4,r2
   8c514:	180b883a 	mov	r5,r3
   8c518:	0084d500 	call	84d50 <__ledf2>
   8c51c:	10003e0e 	bge	r2,zero,8c618 <_dtoa_r+0x1548>
   8c520:	d9001317 	ldw	r4,76(sp)
   8c524:	bd3fffc3 	ldbu	r20,-1(r23)
   8c528:	d9000515 	stw	r4,20(sp)
   8c52c:	003d3b06 	br	8ba1c <__alt_data_end+0xfffb62ec>
   8c530:	0027883a 	mov	r19,zero
   8c534:	003f1b06 	br	8c1a4 <__alt_data_end+0xfffb6a74>
   8c538:	d8800817 	ldw	r2,32(sp)
   8c53c:	11e9c83a 	sub	r20,r2,r7
   8c540:	0005883a 	mov	r2,zero
   8c544:	003d5406 	br	8ba98 <__alt_data_end+0xfffb6368>
   8c548:	00800044 	movi	r2,1
   8c54c:	003dc706 	br	8bc6c <__alt_data_end+0xfffb653c>
   8c550:	d8c00217 	ldw	r3,8(sp)
   8c554:	00800d84 	movi	r2,54
   8c558:	dd400a17 	ldw	r21,40(sp)
   8c55c:	10c5c83a 	sub	r2,r2,r3
   8c560:	dd000817 	ldw	r20,32(sp)
   8c564:	003d4c06 	br	8ba98 <__alt_data_end+0xfffb6368>
   8c568:	dc800f15 	stw	r18,60(sp)
   8c56c:	dcc01015 	stw	r19,64(sp)
   8c570:	04000084 	movi	r16,2
   8c574:	003bed06 	br	8b52c <__alt_data_end+0xfffb5dfc>
   8c578:	d9000617 	ldw	r4,24(sp)
   8c57c:	203f0d26 	beq	r4,zero,8c1b4 <__alt_data_end+0xfffb6a84>
   8c580:	d9800c17 	ldw	r6,48(sp)
   8c584:	01bcab0e 	bge	zero,r6,8b834 <__alt_data_end+0xfffb6104>
   8c588:	d9401017 	ldw	r5,64(sp)
   8c58c:	d9000f17 	ldw	r4,60(sp)
   8c590:	000d883a 	mov	r6,zero
   8c594:	01d00934 	movhi	r7,16420
   8c598:	0084e440 	call	84e44 <__muldf3>
   8c59c:	81000044 	addi	r4,r16,1
   8c5a0:	d8800f15 	stw	r2,60(sp)
   8c5a4:	d8c01015 	stw	r3,64(sp)
   8c5a8:	008602c0 	call	8602c <__floatsidf>
   8c5ac:	d9800f17 	ldw	r6,60(sp)
   8c5b0:	d9c01017 	ldw	r7,64(sp)
   8c5b4:	1009883a 	mov	r4,r2
   8c5b8:	180b883a 	mov	r5,r3
   8c5bc:	0084e440 	call	84e44 <__muldf3>
   8c5c0:	01d00734 	movhi	r7,16412
   8c5c4:	000d883a 	mov	r6,zero
   8c5c8:	1009883a 	mov	r4,r2
   8c5cc:	180b883a 	mov	r5,r3
   8c5d0:	00839f80 	call	839f8 <__adddf3>
   8c5d4:	d9c00517 	ldw	r7,20(sp)
   8c5d8:	047f3034 	movhi	r17,64704
   8c5dc:	1021883a 	mov	r16,r2
   8c5e0:	39ffffc4 	addi	r7,r7,-1
   8c5e4:	d9c01315 	stw	r7,76(sp)
   8c5e8:	1c63883a 	add	r17,r3,r17
   8c5ec:	db000c17 	ldw	r12,48(sp)
   8c5f0:	003bea06 	br	8b59c <__alt_data_end+0xfffb5e6c>
   8c5f4:	dc000915 	stw	r16,36(sp)
   8c5f8:	003e0e06 	br	8be34 <__alt_data_end+0xfffb6704>
   8c5fc:	01000e44 	movi	r4,57
   8c600:	8825883a 	mov	r18,r17
   8c604:	9dc00044 	addi	r23,r19,1
   8c608:	99000005 	stb	r4,0(r19)
   8c60c:	a023883a 	mov	r17,r20
   8c610:	dc000915 	stw	r16,36(sp)
   8c614:	003da406 	br	8bca8 <__alt_data_end+0xfffb6578>
   8c618:	d9801417 	ldw	r6,80(sp)
   8c61c:	d9c01517 	ldw	r7,84(sp)
   8c620:	0009883a 	mov	r4,zero
   8c624:	014ff834 	movhi	r5,16352
   8c628:	00856b00 	call	856b0 <__subdf3>
   8c62c:	880d883a 	mov	r6,r17
   8c630:	a00f883a 	mov	r7,r20
   8c634:	1009883a 	mov	r4,r2
   8c638:	180b883a 	mov	r5,r3
   8c63c:	0084c740 	call	84c74 <__gedf2>
   8c640:	00bc7c0e 	bge	zero,r2,8b834 <__alt_data_end+0xfffb6104>
   8c644:	01000c04 	movi	r4,48
   8c648:	00000106 	br	8c650 <_dtoa_r+0x1580>
   8c64c:	102f883a 	mov	r23,r2
   8c650:	b8bfffc4 	addi	r2,r23,-1
   8c654:	10c00007 	ldb	r3,0(r2)
   8c658:	193ffc26 	beq	r3,r4,8c64c <__alt_data_end+0xfffb6f1c>
   8c65c:	d9801317 	ldw	r6,76(sp)
   8c660:	d9800515 	stw	r6,20(sp)
   8c664:	003c4406 	br	8b778 <__alt_data_end+0xfffb6048>
   8c668:	d9801317 	ldw	r6,76(sp)
   8c66c:	d9800515 	stw	r6,20(sp)
   8c670:	003cea06 	br	8ba1c <__alt_data_end+0xfffb62ec>
   8c674:	dd800f17 	ldw	r22,60(sp)
   8c678:	dcc01017 	ldw	r19,64(sp)
   8c67c:	dc801217 	ldw	r18,72(sp)
   8c680:	003c6c06 	br	8b834 <__alt_data_end+0xfffb6104>
   8c684:	903e031e 	bne	r18,zero,8be94 <__alt_data_end+0xfffb6764>
   8c688:	003ebb06 	br	8c178 <__alt_data_end+0xfffb6a48>
   8c68c:	103e6c1e 	bne	r2,zero,8c040 <__alt_data_end+0xfffb6910>
   8c690:	4080004c 	andi	r2,r8,1
   8c694:	103e6a26 	beq	r2,zero,8c040 <__alt_data_end+0xfffb6910>
   8c698:	003e6606 	br	8c034 <__alt_data_end+0xfffb6904>
   8c69c:	d8c00317 	ldw	r3,12(sp)
   8c6a0:	00800084 	movi	r2,2
   8c6a4:	10c02916 	blt	r2,r3,8c74c <_dtoa_r+0x167c>
   8c6a8:	d9000c17 	ldw	r4,48(sp)
   8c6ac:	003e8806 	br	8c0d0 <__alt_data_end+0xfffb69a0>
   8c6b0:	04000084 	movi	r16,2
   8c6b4:	003b9d06 	br	8b52c <__alt_data_end+0xfffb5dfc>
   8c6b8:	d9001317 	ldw	r4,76(sp)
   8c6bc:	d9000515 	stw	r4,20(sp)
   8c6c0:	003cd606 	br	8ba1c <__alt_data_end+0xfffb62ec>
   8c6c4:	d8801317 	ldw	r2,76(sp)
   8c6c8:	d8800515 	stw	r2,20(sp)
   8c6cc:	003c2a06 	br	8b778 <__alt_data_end+0xfffb6048>
   8c6d0:	d9800317 	ldw	r6,12(sp)
   8c6d4:	00800084 	movi	r2,2
   8c6d8:	11801516 	blt	r2,r6,8c730 <_dtoa_r+0x1660>
   8c6dc:	d9c00c17 	ldw	r7,48(sp)
   8c6e0:	d9c00615 	stw	r7,24(sp)
   8c6e4:	003df706 	br	8bec4 <__alt_data_end+0xfffb6794>
   8c6e8:	193d3926 	beq	r3,r4,8bbd0 <__alt_data_end+0xfffb64a0>
   8c6ec:	00c00f04 	movi	r3,60
   8c6f0:	1885c83a 	sub	r2,r3,r2
   8c6f4:	003ddf06 	br	8be74 <__alt_data_end+0xfffb6744>
   8c6f8:	e009883a 	mov	r4,fp
   8c6fc:	e0001115 	stw	zero,68(fp)
   8c700:	000b883a 	mov	r5,zero
   8c704:	008d1e40 	call	8d1e4 <_Balloc>
   8c708:	d8800715 	stw	r2,28(sp)
   8c70c:	d8c00717 	ldw	r3,28(sp)
   8c710:	00bfffc4 	movi	r2,-1
   8c714:	01000044 	movi	r4,1
   8c718:	d8800c15 	stw	r2,48(sp)
   8c71c:	e0c01015 	stw	r3,64(fp)
   8c720:	d9000b15 	stw	r4,44(sp)
   8c724:	d8800615 	stw	r2,24(sp)
   8c728:	d8002215 	stw	zero,136(sp)
   8c72c:	003c4106 	br	8b834 <__alt_data_end+0xfffb6104>
   8c730:	d8c00c17 	ldw	r3,48(sp)
   8c734:	d8c00615 	stw	r3,24(sp)
   8c738:	003e7006 	br	8c0fc <__alt_data_end+0xfffb69cc>
   8c73c:	04400044 	movi	r17,1
   8c740:	003b2006 	br	8b3c4 <__alt_data_end+0xfffb5c94>
   8c744:	000b883a 	mov	r5,zero
   8c748:	003b3d06 	br	8b440 <__alt_data_end+0xfffb5d10>
   8c74c:	d8800c17 	ldw	r2,48(sp)
   8c750:	d8800615 	stw	r2,24(sp)
   8c754:	003e6906 	br	8c0fc <__alt_data_end+0xfffb69cc>

0008c758 <__sflags>:
   8c758:	28800007 	ldb	r2,0(r5)
   8c75c:	00c01c84 	movi	r3,114
   8c760:	10c02426 	beq	r2,r3,8c7f4 <__sflags+0x9c>
   8c764:	00c01dc4 	movi	r3,119
   8c768:	10c01e26 	beq	r2,r3,8c7e4 <__sflags+0x8c>
   8c76c:	00c01844 	movi	r3,97
   8c770:	10c00426 	beq	r2,r3,8c784 <__sflags+0x2c>
   8c774:	00800584 	movi	r2,22
   8c778:	20800015 	stw	r2,0(r4)
   8c77c:	0005883a 	mov	r2,zero
   8c780:	f800283a 	ret
   8c784:	02c08204 	movi	r11,520
   8c788:	01000044 	movi	r4,1
   8c78c:	00804204 	movi	r2,264
   8c790:	01c00ac4 	movi	r7,43
   8c794:	02bff8c4 	movi	r10,-29
   8c798:	027fff04 	movi	r9,-4
   8c79c:	02001e04 	movi	r8,120
   8c7a0:	29400044 	addi	r5,r5,1
   8c7a4:	28c00007 	ldb	r3,0(r5)
   8c7a8:	18000626 	beq	r3,zero,8c7c4 <__sflags+0x6c>
   8c7ac:	19c00826 	beq	r3,r7,8c7d0 <__sflags+0x78>
   8c7b0:	1a3ffb1e 	bne	r3,r8,8c7a0 <__alt_data_end+0xfffb7070>
   8c7b4:	29400044 	addi	r5,r5,1
   8c7b8:	28c00007 	ldb	r3,0(r5)
   8c7bc:	21020014 	ori	r4,r4,2048
   8c7c0:	183ffa1e 	bne	r3,zero,8c7ac <__alt_data_end+0xfffb707c>
   8c7c4:	22c8b03a 	or	r4,r4,r11
   8c7c8:	31000015 	stw	r4,0(r6)
   8c7cc:	f800283a 	ret
   8c7d0:	1284703a 	and	r2,r2,r10
   8c7d4:	2248703a 	and	r4,r4,r9
   8c7d8:	10800414 	ori	r2,r2,16
   8c7dc:	21000094 	ori	r4,r4,2
   8c7e0:	003fef06 	br	8c7a0 <__alt_data_end+0xfffb7070>
   8c7e4:	02c18004 	movi	r11,1536
   8c7e8:	01000044 	movi	r4,1
   8c7ec:	00800204 	movi	r2,8
   8c7f0:	003fe706 	br	8c790 <__alt_data_end+0xfffb7060>
   8c7f4:	0017883a 	mov	r11,zero
   8c7f8:	0009883a 	mov	r4,zero
   8c7fc:	00800104 	movi	r2,4
   8c800:	003fe306 	br	8c790 <__alt_data_end+0xfffb7060>

0008c804 <__sfvwrite_r>:
   8c804:	30800217 	ldw	r2,8(r6)
   8c808:	10006726 	beq	r2,zero,8c9a8 <__sfvwrite_r+0x1a4>
   8c80c:	28c0030b 	ldhu	r3,12(r5)
   8c810:	defff404 	addi	sp,sp,-48
   8c814:	dd400715 	stw	r21,28(sp)
   8c818:	dd000615 	stw	r20,24(sp)
   8c81c:	dc000215 	stw	r16,8(sp)
   8c820:	dfc00b15 	stw	ra,44(sp)
   8c824:	df000a15 	stw	fp,40(sp)
   8c828:	ddc00915 	stw	r23,36(sp)
   8c82c:	dd800815 	stw	r22,32(sp)
   8c830:	dcc00515 	stw	r19,20(sp)
   8c834:	dc800415 	stw	r18,16(sp)
   8c838:	dc400315 	stw	r17,12(sp)
   8c83c:	1880020c 	andi	r2,r3,8
   8c840:	2821883a 	mov	r16,r5
   8c844:	202b883a 	mov	r21,r4
   8c848:	3029883a 	mov	r20,r6
   8c84c:	10002726 	beq	r2,zero,8c8ec <__sfvwrite_r+0xe8>
   8c850:	28800417 	ldw	r2,16(r5)
   8c854:	10002526 	beq	r2,zero,8c8ec <__sfvwrite_r+0xe8>
   8c858:	1880008c 	andi	r2,r3,2
   8c85c:	a4400017 	ldw	r17,0(r20)
   8c860:	10002a26 	beq	r2,zero,8c90c <__sfvwrite_r+0x108>
   8c864:	05a00034 	movhi	r22,32768
   8c868:	0027883a 	mov	r19,zero
   8c86c:	0025883a 	mov	r18,zero
   8c870:	b5bf0004 	addi	r22,r22,-1024
   8c874:	980d883a 	mov	r6,r19
   8c878:	a809883a 	mov	r4,r21
   8c87c:	90004626 	beq	r18,zero,8c998 <__sfvwrite_r+0x194>
   8c880:	900f883a 	mov	r7,r18
   8c884:	b480022e 	bgeu	r22,r18,8c890 <__sfvwrite_r+0x8c>
   8c888:	01e00034 	movhi	r7,32768
   8c88c:	39ff0004 	addi	r7,r7,-1024
   8c890:	80800917 	ldw	r2,36(r16)
   8c894:	81400717 	ldw	r5,28(r16)
   8c898:	103ee83a 	callr	r2
   8c89c:	00805a0e 	bge	zero,r2,8ca08 <__sfvwrite_r+0x204>
   8c8a0:	a0c00217 	ldw	r3,8(r20)
   8c8a4:	98a7883a 	add	r19,r19,r2
   8c8a8:	90a5c83a 	sub	r18,r18,r2
   8c8ac:	1885c83a 	sub	r2,r3,r2
   8c8b0:	a0800215 	stw	r2,8(r20)
   8c8b4:	103fef1e 	bne	r2,zero,8c874 <__alt_data_end+0xfffb7144>
   8c8b8:	0005883a 	mov	r2,zero
   8c8bc:	dfc00b17 	ldw	ra,44(sp)
   8c8c0:	df000a17 	ldw	fp,40(sp)
   8c8c4:	ddc00917 	ldw	r23,36(sp)
   8c8c8:	dd800817 	ldw	r22,32(sp)
   8c8cc:	dd400717 	ldw	r21,28(sp)
   8c8d0:	dd000617 	ldw	r20,24(sp)
   8c8d4:	dcc00517 	ldw	r19,20(sp)
   8c8d8:	dc800417 	ldw	r18,16(sp)
   8c8dc:	dc400317 	ldw	r17,12(sp)
   8c8e0:	dc000217 	ldw	r16,8(sp)
   8c8e4:	dec00c04 	addi	sp,sp,48
   8c8e8:	f800283a 	ret
   8c8ec:	800b883a 	mov	r5,r16
   8c8f0:	a809883a 	mov	r4,r21
   8c8f4:	008ad000 	call	8ad00 <__swsetup_r>
   8c8f8:	1000ee1e 	bne	r2,zero,8ccb4 <__sfvwrite_r+0x4b0>
   8c8fc:	80c0030b 	ldhu	r3,12(r16)
   8c900:	a4400017 	ldw	r17,0(r20)
   8c904:	1880008c 	andi	r2,r3,2
   8c908:	103fd61e 	bne	r2,zero,8c864 <__alt_data_end+0xfffb7134>
   8c90c:	1880004c 	andi	r2,r3,1
   8c910:	1000421e 	bne	r2,zero,8ca1c <__sfvwrite_r+0x218>
   8c914:	0039883a 	mov	fp,zero
   8c918:	0025883a 	mov	r18,zero
   8c91c:	90001a26 	beq	r18,zero,8c988 <__sfvwrite_r+0x184>
   8c920:	1880800c 	andi	r2,r3,512
   8c924:	84c00217 	ldw	r19,8(r16)
   8c928:	10002126 	beq	r2,zero,8c9b0 <__sfvwrite_r+0x1ac>
   8c92c:	982f883a 	mov	r23,r19
   8c930:	94c09636 	bltu	r18,r19,8cb8c <__sfvwrite_r+0x388>
   8c934:	1881200c 	andi	r2,r3,1152
   8c938:	1000a11e 	bne	r2,zero,8cbc0 <__sfvwrite_r+0x3bc>
   8c93c:	81000017 	ldw	r4,0(r16)
   8c940:	b80d883a 	mov	r6,r23
   8c944:	e00b883a 	mov	r5,fp
   8c948:	008d0880 	call	8d088 <memmove>
   8c94c:	80c00217 	ldw	r3,8(r16)
   8c950:	81000017 	ldw	r4,0(r16)
   8c954:	9005883a 	mov	r2,r18
   8c958:	1ce7c83a 	sub	r19,r3,r19
   8c95c:	25cf883a 	add	r7,r4,r23
   8c960:	84c00215 	stw	r19,8(r16)
   8c964:	81c00015 	stw	r7,0(r16)
   8c968:	a0c00217 	ldw	r3,8(r20)
   8c96c:	e0b9883a 	add	fp,fp,r2
   8c970:	90a5c83a 	sub	r18,r18,r2
   8c974:	18a7c83a 	sub	r19,r3,r2
   8c978:	a4c00215 	stw	r19,8(r20)
   8c97c:	983fce26 	beq	r19,zero,8c8b8 <__alt_data_end+0xfffb7188>
   8c980:	80c0030b 	ldhu	r3,12(r16)
   8c984:	903fe61e 	bne	r18,zero,8c920 <__alt_data_end+0xfffb71f0>
   8c988:	8f000017 	ldw	fp,0(r17)
   8c98c:	8c800117 	ldw	r18,4(r17)
   8c990:	8c400204 	addi	r17,r17,8
   8c994:	003fe106 	br	8c91c <__alt_data_end+0xfffb71ec>
   8c998:	8cc00017 	ldw	r19,0(r17)
   8c99c:	8c800117 	ldw	r18,4(r17)
   8c9a0:	8c400204 	addi	r17,r17,8
   8c9a4:	003fb306 	br	8c874 <__alt_data_end+0xfffb7144>
   8c9a8:	0005883a 	mov	r2,zero
   8c9ac:	f800283a 	ret
   8c9b0:	81000017 	ldw	r4,0(r16)
   8c9b4:	80800417 	ldw	r2,16(r16)
   8c9b8:	11005a36 	bltu	r2,r4,8cb24 <__sfvwrite_r+0x320>
   8c9bc:	85c00517 	ldw	r23,20(r16)
   8c9c0:	95c05836 	bltu	r18,r23,8cb24 <__sfvwrite_r+0x320>
   8c9c4:	00a00034 	movhi	r2,32768
   8c9c8:	10bfffc4 	addi	r2,r2,-1
   8c9cc:	9009883a 	mov	r4,r18
   8c9d0:	1480012e 	bgeu	r2,r18,8c9d8 <__sfvwrite_r+0x1d4>
   8c9d4:	1009883a 	mov	r4,r2
   8c9d8:	b80b883a 	mov	r5,r23
   8c9dc:	00828940 	call	82894 <__divsi3>
   8c9e0:	b80b883a 	mov	r5,r23
   8c9e4:	1009883a 	mov	r4,r2
   8c9e8:	0082a480 	call	82a48 <__mulsi3>
   8c9ec:	81400717 	ldw	r5,28(r16)
   8c9f0:	80c00917 	ldw	r3,36(r16)
   8c9f4:	100f883a 	mov	r7,r2
   8c9f8:	e00d883a 	mov	r6,fp
   8c9fc:	a809883a 	mov	r4,r21
   8ca00:	183ee83a 	callr	r3
   8ca04:	00bfd816 	blt	zero,r2,8c968 <__alt_data_end+0xfffb7238>
   8ca08:	8080030b 	ldhu	r2,12(r16)
   8ca0c:	10801014 	ori	r2,r2,64
   8ca10:	8080030d 	sth	r2,12(r16)
   8ca14:	00bfffc4 	movi	r2,-1
   8ca18:	003fa806 	br	8c8bc <__alt_data_end+0xfffb718c>
   8ca1c:	0027883a 	mov	r19,zero
   8ca20:	0011883a 	mov	r8,zero
   8ca24:	0039883a 	mov	fp,zero
   8ca28:	0025883a 	mov	r18,zero
   8ca2c:	90001f26 	beq	r18,zero,8caac <__sfvwrite_r+0x2a8>
   8ca30:	40005a26 	beq	r8,zero,8cb9c <__sfvwrite_r+0x398>
   8ca34:	982d883a 	mov	r22,r19
   8ca38:	94c0012e 	bgeu	r18,r19,8ca40 <__sfvwrite_r+0x23c>
   8ca3c:	902d883a 	mov	r22,r18
   8ca40:	81000017 	ldw	r4,0(r16)
   8ca44:	80800417 	ldw	r2,16(r16)
   8ca48:	b02f883a 	mov	r23,r22
   8ca4c:	81c00517 	ldw	r7,20(r16)
   8ca50:	1100032e 	bgeu	r2,r4,8ca60 <__sfvwrite_r+0x25c>
   8ca54:	80c00217 	ldw	r3,8(r16)
   8ca58:	38c7883a 	add	r3,r7,r3
   8ca5c:	1d801816 	blt	r3,r22,8cac0 <__sfvwrite_r+0x2bc>
   8ca60:	b1c03e16 	blt	r22,r7,8cb5c <__sfvwrite_r+0x358>
   8ca64:	80800917 	ldw	r2,36(r16)
   8ca68:	81400717 	ldw	r5,28(r16)
   8ca6c:	e00d883a 	mov	r6,fp
   8ca70:	da000115 	stw	r8,4(sp)
   8ca74:	a809883a 	mov	r4,r21
   8ca78:	103ee83a 	callr	r2
   8ca7c:	102f883a 	mov	r23,r2
   8ca80:	da000117 	ldw	r8,4(sp)
   8ca84:	00bfe00e 	bge	zero,r2,8ca08 <__alt_data_end+0xfffb72d8>
   8ca88:	9de7c83a 	sub	r19,r19,r23
   8ca8c:	98001f26 	beq	r19,zero,8cb0c <__sfvwrite_r+0x308>
   8ca90:	a0800217 	ldw	r2,8(r20)
   8ca94:	e5f9883a 	add	fp,fp,r23
   8ca98:	95e5c83a 	sub	r18,r18,r23
   8ca9c:	15efc83a 	sub	r23,r2,r23
   8caa0:	a5c00215 	stw	r23,8(r20)
   8caa4:	b83f8426 	beq	r23,zero,8c8b8 <__alt_data_end+0xfffb7188>
   8caa8:	903fe11e 	bne	r18,zero,8ca30 <__alt_data_end+0xfffb7300>
   8caac:	8f000017 	ldw	fp,0(r17)
   8cab0:	8c800117 	ldw	r18,4(r17)
   8cab4:	0011883a 	mov	r8,zero
   8cab8:	8c400204 	addi	r17,r17,8
   8cabc:	003fdb06 	br	8ca2c <__alt_data_end+0xfffb72fc>
   8cac0:	180d883a 	mov	r6,r3
   8cac4:	e00b883a 	mov	r5,fp
   8cac8:	da000115 	stw	r8,4(sp)
   8cacc:	d8c00015 	stw	r3,0(sp)
   8cad0:	008d0880 	call	8d088 <memmove>
   8cad4:	d8c00017 	ldw	r3,0(sp)
   8cad8:	80800017 	ldw	r2,0(r16)
   8cadc:	800b883a 	mov	r5,r16
   8cae0:	a809883a 	mov	r4,r21
   8cae4:	10c5883a 	add	r2,r2,r3
   8cae8:	80800015 	stw	r2,0(r16)
   8caec:	d8c00015 	stw	r3,0(sp)
   8caf0:	00867540 	call	86754 <_fflush_r>
   8caf4:	d8c00017 	ldw	r3,0(sp)
   8caf8:	da000117 	ldw	r8,4(sp)
   8cafc:	103fc21e 	bne	r2,zero,8ca08 <__alt_data_end+0xfffb72d8>
   8cb00:	182f883a 	mov	r23,r3
   8cb04:	9de7c83a 	sub	r19,r19,r23
   8cb08:	983fe11e 	bne	r19,zero,8ca90 <__alt_data_end+0xfffb7360>
   8cb0c:	800b883a 	mov	r5,r16
   8cb10:	a809883a 	mov	r4,r21
   8cb14:	00867540 	call	86754 <_fflush_r>
   8cb18:	103fbb1e 	bne	r2,zero,8ca08 <__alt_data_end+0xfffb72d8>
   8cb1c:	0011883a 	mov	r8,zero
   8cb20:	003fdb06 	br	8ca90 <__alt_data_end+0xfffb7360>
   8cb24:	94c0012e 	bgeu	r18,r19,8cb2c <__sfvwrite_r+0x328>
   8cb28:	9027883a 	mov	r19,r18
   8cb2c:	980d883a 	mov	r6,r19
   8cb30:	e00b883a 	mov	r5,fp
   8cb34:	008d0880 	call	8d088 <memmove>
   8cb38:	80800217 	ldw	r2,8(r16)
   8cb3c:	80c00017 	ldw	r3,0(r16)
   8cb40:	14c5c83a 	sub	r2,r2,r19
   8cb44:	1cc7883a 	add	r3,r3,r19
   8cb48:	80800215 	stw	r2,8(r16)
   8cb4c:	80c00015 	stw	r3,0(r16)
   8cb50:	10004326 	beq	r2,zero,8cc60 <__sfvwrite_r+0x45c>
   8cb54:	9805883a 	mov	r2,r19
   8cb58:	003f8306 	br	8c968 <__alt_data_end+0xfffb7238>
   8cb5c:	b00d883a 	mov	r6,r22
   8cb60:	e00b883a 	mov	r5,fp
   8cb64:	da000115 	stw	r8,4(sp)
   8cb68:	008d0880 	call	8d088 <memmove>
   8cb6c:	80800217 	ldw	r2,8(r16)
   8cb70:	80c00017 	ldw	r3,0(r16)
   8cb74:	da000117 	ldw	r8,4(sp)
   8cb78:	1585c83a 	sub	r2,r2,r22
   8cb7c:	1dad883a 	add	r22,r3,r22
   8cb80:	80800215 	stw	r2,8(r16)
   8cb84:	85800015 	stw	r22,0(r16)
   8cb88:	003fbf06 	br	8ca88 <__alt_data_end+0xfffb7358>
   8cb8c:	81000017 	ldw	r4,0(r16)
   8cb90:	9027883a 	mov	r19,r18
   8cb94:	902f883a 	mov	r23,r18
   8cb98:	003f6906 	br	8c940 <__alt_data_end+0xfffb7210>
   8cb9c:	900d883a 	mov	r6,r18
   8cba0:	01400284 	movi	r5,10
   8cba4:	e009883a 	mov	r4,fp
   8cba8:	008ce5c0 	call	8ce5c <memchr>
   8cbac:	10003e26 	beq	r2,zero,8cca8 <__sfvwrite_r+0x4a4>
   8cbb0:	10800044 	addi	r2,r2,1
   8cbb4:	1727c83a 	sub	r19,r2,fp
   8cbb8:	02000044 	movi	r8,1
   8cbbc:	003f9d06 	br	8ca34 <__alt_data_end+0xfffb7304>
   8cbc0:	80800517 	ldw	r2,20(r16)
   8cbc4:	81400417 	ldw	r5,16(r16)
   8cbc8:	81c00017 	ldw	r7,0(r16)
   8cbcc:	10a7883a 	add	r19,r2,r2
   8cbd0:	9885883a 	add	r2,r19,r2
   8cbd4:	1026d7fa 	srli	r19,r2,31
   8cbd8:	396dc83a 	sub	r22,r7,r5
   8cbdc:	b1000044 	addi	r4,r22,1
   8cbe0:	9885883a 	add	r2,r19,r2
   8cbe4:	1027d07a 	srai	r19,r2,1
   8cbe8:	2485883a 	add	r2,r4,r18
   8cbec:	980d883a 	mov	r6,r19
   8cbf0:	9880022e 	bgeu	r19,r2,8cbfc <__sfvwrite_r+0x3f8>
   8cbf4:	1027883a 	mov	r19,r2
   8cbf8:	100d883a 	mov	r6,r2
   8cbfc:	18c1000c 	andi	r3,r3,1024
   8cc00:	18001c26 	beq	r3,zero,8cc74 <__sfvwrite_r+0x470>
   8cc04:	300b883a 	mov	r5,r6
   8cc08:	a809883a 	mov	r4,r21
   8cc0c:	0087a000 	call	87a00 <_malloc_r>
   8cc10:	102f883a 	mov	r23,r2
   8cc14:	10002926 	beq	r2,zero,8ccbc <__sfvwrite_r+0x4b8>
   8cc18:	81400417 	ldw	r5,16(r16)
   8cc1c:	b00d883a 	mov	r6,r22
   8cc20:	1009883a 	mov	r4,r2
   8cc24:	008cf400 	call	8cf40 <memcpy>
   8cc28:	8080030b 	ldhu	r2,12(r16)
   8cc2c:	00fedfc4 	movi	r3,-1153
   8cc30:	10c4703a 	and	r2,r2,r3
   8cc34:	10802014 	ori	r2,r2,128
   8cc38:	8080030d 	sth	r2,12(r16)
   8cc3c:	bd89883a 	add	r4,r23,r22
   8cc40:	9d8fc83a 	sub	r7,r19,r22
   8cc44:	85c00415 	stw	r23,16(r16)
   8cc48:	84c00515 	stw	r19,20(r16)
   8cc4c:	81000015 	stw	r4,0(r16)
   8cc50:	9027883a 	mov	r19,r18
   8cc54:	81c00215 	stw	r7,8(r16)
   8cc58:	902f883a 	mov	r23,r18
   8cc5c:	003f3806 	br	8c940 <__alt_data_end+0xfffb7210>
   8cc60:	800b883a 	mov	r5,r16
   8cc64:	a809883a 	mov	r4,r21
   8cc68:	00867540 	call	86754 <_fflush_r>
   8cc6c:	103fb926 	beq	r2,zero,8cb54 <__alt_data_end+0xfffb7424>
   8cc70:	003f6506 	br	8ca08 <__alt_data_end+0xfffb72d8>
   8cc74:	a809883a 	mov	r4,r21
   8cc78:	008e2fc0 	call	8e2fc <_realloc_r>
   8cc7c:	102f883a 	mov	r23,r2
   8cc80:	103fee1e 	bne	r2,zero,8cc3c <__alt_data_end+0xfffb750c>
   8cc84:	81400417 	ldw	r5,16(r16)
   8cc88:	a809883a 	mov	r4,r21
   8cc8c:	0086dc00 	call	86dc0 <_free_r>
   8cc90:	8080030b 	ldhu	r2,12(r16)
   8cc94:	00ffdfc4 	movi	r3,-129
   8cc98:	1884703a 	and	r2,r3,r2
   8cc9c:	00c00304 	movi	r3,12
   8cca0:	a8c00015 	stw	r3,0(r21)
   8cca4:	003f5906 	br	8ca0c <__alt_data_end+0xfffb72dc>
   8cca8:	94c00044 	addi	r19,r18,1
   8ccac:	02000044 	movi	r8,1
   8ccb0:	003f6006 	br	8ca34 <__alt_data_end+0xfffb7304>
   8ccb4:	00bfffc4 	movi	r2,-1
   8ccb8:	003f0006 	br	8c8bc <__alt_data_end+0xfffb718c>
   8ccbc:	00800304 	movi	r2,12
   8ccc0:	a8800015 	stw	r2,0(r21)
   8ccc4:	8080030b 	ldhu	r2,12(r16)
   8ccc8:	003f5006 	br	8ca0c <__alt_data_end+0xfffb72dc>

0008cccc <_isatty_r>:
   8cccc:	defffd04 	addi	sp,sp,-12
   8ccd0:	dc000015 	stw	r16,0(sp)
   8ccd4:	040002b4 	movhi	r16,10
   8ccd8:	dc400115 	stw	r17,4(sp)
   8ccdc:	841eac04 	addi	r16,r16,31408
   8cce0:	2023883a 	mov	r17,r4
   8cce4:	2809883a 	mov	r4,r5
   8cce8:	dfc00215 	stw	ra,8(sp)
   8ccec:	80000015 	stw	zero,0(r16)
   8ccf0:	009162c0 	call	9162c <isatty>
   8ccf4:	00ffffc4 	movi	r3,-1
   8ccf8:	10c00526 	beq	r2,r3,8cd10 <_isatty_r+0x44>
   8ccfc:	dfc00217 	ldw	ra,8(sp)
   8cd00:	dc400117 	ldw	r17,4(sp)
   8cd04:	dc000017 	ldw	r16,0(sp)
   8cd08:	dec00304 	addi	sp,sp,12
   8cd0c:	f800283a 	ret
   8cd10:	80c00017 	ldw	r3,0(r16)
   8cd14:	183ff926 	beq	r3,zero,8ccfc <__alt_data_end+0xfffb75cc>
   8cd18:	88c00015 	stw	r3,0(r17)
   8cd1c:	003ff706 	br	8ccfc <__alt_data_end+0xfffb75cc>

0008cd20 <_setlocale_r>:
   8cd20:	30001b26 	beq	r6,zero,8cd90 <_setlocale_r+0x70>
   8cd24:	01400274 	movhi	r5,9
   8cd28:	defffe04 	addi	sp,sp,-8
   8cd2c:	29508104 	addi	r5,r5,16900
   8cd30:	3009883a 	mov	r4,r6
   8cd34:	dc000015 	stw	r16,0(sp)
   8cd38:	dfc00115 	stw	ra,4(sp)
   8cd3c:	3021883a 	mov	r16,r6
   8cd40:	008e8d40 	call	8e8d4 <strcmp>
   8cd44:	1000061e 	bne	r2,zero,8cd60 <_setlocale_r+0x40>
   8cd48:	00800274 	movhi	r2,9
   8cd4c:	10906204 	addi	r2,r2,16776
   8cd50:	dfc00117 	ldw	ra,4(sp)
   8cd54:	dc000017 	ldw	r16,0(sp)
   8cd58:	dec00204 	addi	sp,sp,8
   8cd5c:	f800283a 	ret
   8cd60:	01400274 	movhi	r5,9
   8cd64:	29506204 	addi	r5,r5,16776
   8cd68:	8009883a 	mov	r4,r16
   8cd6c:	008e8d40 	call	8e8d4 <strcmp>
   8cd70:	103ff526 	beq	r2,zero,8cd48 <__alt_data_end+0xfffb7618>
   8cd74:	01400274 	movhi	r5,9
   8cd78:	29506c04 	addi	r5,r5,16816
   8cd7c:	8009883a 	mov	r4,r16
   8cd80:	008e8d40 	call	8e8d4 <strcmp>
   8cd84:	103ff026 	beq	r2,zero,8cd48 <__alt_data_end+0xfffb7618>
   8cd88:	0005883a 	mov	r2,zero
   8cd8c:	003ff006 	br	8cd50 <__alt_data_end+0xfffb7620>
   8cd90:	00800274 	movhi	r2,9
   8cd94:	10906204 	addi	r2,r2,16776
   8cd98:	f800283a 	ret

0008cd9c <__locale_charset>:
   8cd9c:	008002b4 	movhi	r2,10
   8cda0:	10b31204 	addi	r2,r2,-13240
   8cda4:	f800283a 	ret

0008cda8 <__locale_mb_cur_max>:
   8cda8:	008002b4 	movhi	r2,10
   8cdac:	10b7bb04 	addi	r2,r2,-8468
   8cdb0:	10800017 	ldw	r2,0(r2)
   8cdb4:	f800283a 	ret

0008cdb8 <__locale_msgcharset>:
   8cdb8:	008002b4 	movhi	r2,10
   8cdbc:	10b30a04 	addi	r2,r2,-13272
   8cdc0:	f800283a 	ret

0008cdc4 <__locale_cjk_lang>:
   8cdc4:	0005883a 	mov	r2,zero
   8cdc8:	f800283a 	ret

0008cdcc <_localeconv_r>:
   8cdcc:	008002b4 	movhi	r2,10
   8cdd0:	10b31a04 	addi	r2,r2,-13208
   8cdd4:	f800283a 	ret

0008cdd8 <setlocale>:
   8cdd8:	008002b4 	movhi	r2,10
   8cddc:	10b7b804 	addi	r2,r2,-8480
   8cde0:	280d883a 	mov	r6,r5
   8cde4:	200b883a 	mov	r5,r4
   8cde8:	11000017 	ldw	r4,0(r2)
   8cdec:	008cd201 	jmpi	8cd20 <_setlocale_r>

0008cdf0 <localeconv>:
   8cdf0:	008002b4 	movhi	r2,10
   8cdf4:	10b31a04 	addi	r2,r2,-13208
   8cdf8:	f800283a 	ret

0008cdfc <_lseek_r>:
   8cdfc:	defffd04 	addi	sp,sp,-12
   8ce00:	2805883a 	mov	r2,r5
   8ce04:	dc000015 	stw	r16,0(sp)
   8ce08:	040002b4 	movhi	r16,10
   8ce0c:	dc400115 	stw	r17,4(sp)
   8ce10:	300b883a 	mov	r5,r6
   8ce14:	841eac04 	addi	r16,r16,31408
   8ce18:	2023883a 	mov	r17,r4
   8ce1c:	380d883a 	mov	r6,r7
   8ce20:	1009883a 	mov	r4,r2
   8ce24:	dfc00215 	stw	ra,8(sp)
   8ce28:	80000015 	stw	zero,0(r16)
   8ce2c:	00918000 	call	91800 <lseek>
   8ce30:	00ffffc4 	movi	r3,-1
   8ce34:	10c00526 	beq	r2,r3,8ce4c <_lseek_r+0x50>
   8ce38:	dfc00217 	ldw	ra,8(sp)
   8ce3c:	dc400117 	ldw	r17,4(sp)
   8ce40:	dc000017 	ldw	r16,0(sp)
   8ce44:	dec00304 	addi	sp,sp,12
   8ce48:	f800283a 	ret
   8ce4c:	80c00017 	ldw	r3,0(r16)
   8ce50:	183ff926 	beq	r3,zero,8ce38 <__alt_data_end+0xfffb7708>
   8ce54:	88c00015 	stw	r3,0(r17)
   8ce58:	003ff706 	br	8ce38 <__alt_data_end+0xfffb7708>

0008ce5c <memchr>:
   8ce5c:	208000cc 	andi	r2,r4,3
   8ce60:	280f883a 	mov	r7,r5
   8ce64:	10003426 	beq	r2,zero,8cf38 <memchr+0xdc>
   8ce68:	30bfffc4 	addi	r2,r6,-1
   8ce6c:	30001a26 	beq	r6,zero,8ced8 <memchr+0x7c>
   8ce70:	20c00003 	ldbu	r3,0(r4)
   8ce74:	29803fcc 	andi	r6,r5,255
   8ce78:	30c0051e 	bne	r6,r3,8ce90 <memchr+0x34>
   8ce7c:	00001806 	br	8cee0 <memchr+0x84>
   8ce80:	10001526 	beq	r2,zero,8ced8 <memchr+0x7c>
   8ce84:	20c00003 	ldbu	r3,0(r4)
   8ce88:	10bfffc4 	addi	r2,r2,-1
   8ce8c:	30c01426 	beq	r6,r3,8cee0 <memchr+0x84>
   8ce90:	21000044 	addi	r4,r4,1
   8ce94:	20c000cc 	andi	r3,r4,3
   8ce98:	183ff91e 	bne	r3,zero,8ce80 <__alt_data_end+0xfffb7750>
   8ce9c:	020000c4 	movi	r8,3
   8cea0:	40801136 	bltu	r8,r2,8cee8 <memchr+0x8c>
   8cea4:	10000c26 	beq	r2,zero,8ced8 <memchr+0x7c>
   8cea8:	20c00003 	ldbu	r3,0(r4)
   8ceac:	29403fcc 	andi	r5,r5,255
   8ceb0:	28c00b26 	beq	r5,r3,8cee0 <memchr+0x84>
   8ceb4:	20c00044 	addi	r3,r4,1
   8ceb8:	39803fcc 	andi	r6,r7,255
   8cebc:	2089883a 	add	r4,r4,r2
   8cec0:	00000306 	br	8ced0 <memchr+0x74>
   8cec4:	18c00044 	addi	r3,r3,1
   8cec8:	197fffc3 	ldbu	r5,-1(r3)
   8cecc:	31400526 	beq	r6,r5,8cee4 <memchr+0x88>
   8ced0:	1805883a 	mov	r2,r3
   8ced4:	20fffb1e 	bne	r4,r3,8cec4 <__alt_data_end+0xfffb7794>
   8ced8:	0005883a 	mov	r2,zero
   8cedc:	f800283a 	ret
   8cee0:	2005883a 	mov	r2,r4
   8cee4:	f800283a 	ret
   8cee8:	28c03fcc 	andi	r3,r5,255
   8ceec:	1812923a 	slli	r9,r3,8
   8cef0:	02ffbff4 	movhi	r11,65279
   8cef4:	02a02074 	movhi	r10,32897
   8cef8:	48d2b03a 	or	r9,r9,r3
   8cefc:	4806943a 	slli	r3,r9,16
   8cf00:	5affbfc4 	addi	r11,r11,-257
   8cf04:	52a02004 	addi	r10,r10,-32640
   8cf08:	48d2b03a 	or	r9,r9,r3
   8cf0c:	20c00017 	ldw	r3,0(r4)
   8cf10:	48c6f03a 	xor	r3,r9,r3
   8cf14:	1acd883a 	add	r6,r3,r11
   8cf18:	00c6303a 	nor	r3,zero,r3
   8cf1c:	30c6703a 	and	r3,r6,r3
   8cf20:	1a86703a 	and	r3,r3,r10
   8cf24:	183fe01e 	bne	r3,zero,8cea8 <__alt_data_end+0xfffb7778>
   8cf28:	10bfff04 	addi	r2,r2,-4
   8cf2c:	21000104 	addi	r4,r4,4
   8cf30:	40bff636 	bltu	r8,r2,8cf0c <__alt_data_end+0xfffb77dc>
   8cf34:	003fdb06 	br	8cea4 <__alt_data_end+0xfffb7774>
   8cf38:	3005883a 	mov	r2,r6
   8cf3c:	003fd706 	br	8ce9c <__alt_data_end+0xfffb776c>

0008cf40 <memcpy>:
   8cf40:	defffd04 	addi	sp,sp,-12
   8cf44:	dfc00215 	stw	ra,8(sp)
   8cf48:	dc400115 	stw	r17,4(sp)
   8cf4c:	dc000015 	stw	r16,0(sp)
   8cf50:	00c003c4 	movi	r3,15
   8cf54:	2005883a 	mov	r2,r4
   8cf58:	1980452e 	bgeu	r3,r6,8d070 <memcpy+0x130>
   8cf5c:	2906b03a 	or	r3,r5,r4
   8cf60:	18c000cc 	andi	r3,r3,3
   8cf64:	1800441e 	bne	r3,zero,8d078 <memcpy+0x138>
   8cf68:	347ffc04 	addi	r17,r6,-16
   8cf6c:	8822d13a 	srli	r17,r17,4
   8cf70:	28c00104 	addi	r3,r5,4
   8cf74:	23400104 	addi	r13,r4,4
   8cf78:	8820913a 	slli	r16,r17,4
   8cf7c:	2b000204 	addi	r12,r5,8
   8cf80:	22c00204 	addi	r11,r4,8
   8cf84:	84000504 	addi	r16,r16,20
   8cf88:	2a800304 	addi	r10,r5,12
   8cf8c:	22400304 	addi	r9,r4,12
   8cf90:	2c21883a 	add	r16,r5,r16
   8cf94:	2811883a 	mov	r8,r5
   8cf98:	200f883a 	mov	r7,r4
   8cf9c:	41000017 	ldw	r4,0(r8)
   8cfa0:	1fc00017 	ldw	ra,0(r3)
   8cfa4:	63c00017 	ldw	r15,0(r12)
   8cfa8:	39000015 	stw	r4,0(r7)
   8cfac:	53800017 	ldw	r14,0(r10)
   8cfb0:	6fc00015 	stw	ra,0(r13)
   8cfb4:	5bc00015 	stw	r15,0(r11)
   8cfb8:	4b800015 	stw	r14,0(r9)
   8cfbc:	18c00404 	addi	r3,r3,16
   8cfc0:	39c00404 	addi	r7,r7,16
   8cfc4:	42000404 	addi	r8,r8,16
   8cfc8:	6b400404 	addi	r13,r13,16
   8cfcc:	63000404 	addi	r12,r12,16
   8cfd0:	5ac00404 	addi	r11,r11,16
   8cfd4:	52800404 	addi	r10,r10,16
   8cfd8:	4a400404 	addi	r9,r9,16
   8cfdc:	1c3fef1e 	bne	r3,r16,8cf9c <__alt_data_end+0xfffb786c>
   8cfe0:	89c00044 	addi	r7,r17,1
   8cfe4:	380e913a 	slli	r7,r7,4
   8cfe8:	310003cc 	andi	r4,r6,15
   8cfec:	02c000c4 	movi	r11,3
   8cff0:	11c7883a 	add	r3,r2,r7
   8cff4:	29cb883a 	add	r5,r5,r7
   8cff8:	5900212e 	bgeu	r11,r4,8d080 <memcpy+0x140>
   8cffc:	1813883a 	mov	r9,r3
   8d000:	2811883a 	mov	r8,r5
   8d004:	200f883a 	mov	r7,r4
   8d008:	42800017 	ldw	r10,0(r8)
   8d00c:	4a400104 	addi	r9,r9,4
   8d010:	39ffff04 	addi	r7,r7,-4
   8d014:	4abfff15 	stw	r10,-4(r9)
   8d018:	42000104 	addi	r8,r8,4
   8d01c:	59fffa36 	bltu	r11,r7,8d008 <__alt_data_end+0xfffb78d8>
   8d020:	213fff04 	addi	r4,r4,-4
   8d024:	2008d0ba 	srli	r4,r4,2
   8d028:	318000cc 	andi	r6,r6,3
   8d02c:	21000044 	addi	r4,r4,1
   8d030:	2109883a 	add	r4,r4,r4
   8d034:	2109883a 	add	r4,r4,r4
   8d038:	1907883a 	add	r3,r3,r4
   8d03c:	290b883a 	add	r5,r5,r4
   8d040:	30000626 	beq	r6,zero,8d05c <memcpy+0x11c>
   8d044:	198d883a 	add	r6,r3,r6
   8d048:	29c00003 	ldbu	r7,0(r5)
   8d04c:	18c00044 	addi	r3,r3,1
   8d050:	29400044 	addi	r5,r5,1
   8d054:	19ffffc5 	stb	r7,-1(r3)
   8d058:	19bffb1e 	bne	r3,r6,8d048 <__alt_data_end+0xfffb7918>
   8d05c:	dfc00217 	ldw	ra,8(sp)
   8d060:	dc400117 	ldw	r17,4(sp)
   8d064:	dc000017 	ldw	r16,0(sp)
   8d068:	dec00304 	addi	sp,sp,12
   8d06c:	f800283a 	ret
   8d070:	2007883a 	mov	r3,r4
   8d074:	003ff206 	br	8d040 <__alt_data_end+0xfffb7910>
   8d078:	2007883a 	mov	r3,r4
   8d07c:	003ff106 	br	8d044 <__alt_data_end+0xfffb7914>
   8d080:	200d883a 	mov	r6,r4
   8d084:	003fee06 	br	8d040 <__alt_data_end+0xfffb7910>

0008d088 <memmove>:
   8d088:	2005883a 	mov	r2,r4
   8d08c:	29000b2e 	bgeu	r5,r4,8d0bc <memmove+0x34>
   8d090:	298f883a 	add	r7,r5,r6
   8d094:	21c0092e 	bgeu	r4,r7,8d0bc <memmove+0x34>
   8d098:	2187883a 	add	r3,r4,r6
   8d09c:	198bc83a 	sub	r5,r3,r6
   8d0a0:	30004826 	beq	r6,zero,8d1c4 <memmove+0x13c>
   8d0a4:	39ffffc4 	addi	r7,r7,-1
   8d0a8:	39000003 	ldbu	r4,0(r7)
   8d0ac:	18ffffc4 	addi	r3,r3,-1
   8d0b0:	19000005 	stb	r4,0(r3)
   8d0b4:	28fffb1e 	bne	r5,r3,8d0a4 <__alt_data_end+0xfffb7974>
   8d0b8:	f800283a 	ret
   8d0bc:	00c003c4 	movi	r3,15
   8d0c0:	1980412e 	bgeu	r3,r6,8d1c8 <memmove+0x140>
   8d0c4:	2886b03a 	or	r3,r5,r2
   8d0c8:	18c000cc 	andi	r3,r3,3
   8d0cc:	1800401e 	bne	r3,zero,8d1d0 <memmove+0x148>
   8d0d0:	33fffc04 	addi	r15,r6,-16
   8d0d4:	781ed13a 	srli	r15,r15,4
   8d0d8:	28c00104 	addi	r3,r5,4
   8d0dc:	13400104 	addi	r13,r2,4
   8d0e0:	781c913a 	slli	r14,r15,4
   8d0e4:	2b000204 	addi	r12,r5,8
   8d0e8:	12c00204 	addi	r11,r2,8
   8d0ec:	73800504 	addi	r14,r14,20
   8d0f0:	2a800304 	addi	r10,r5,12
   8d0f4:	12400304 	addi	r9,r2,12
   8d0f8:	2b9d883a 	add	r14,r5,r14
   8d0fc:	2811883a 	mov	r8,r5
   8d100:	100f883a 	mov	r7,r2
   8d104:	41000017 	ldw	r4,0(r8)
   8d108:	39c00404 	addi	r7,r7,16
   8d10c:	18c00404 	addi	r3,r3,16
   8d110:	393ffc15 	stw	r4,-16(r7)
   8d114:	193ffc17 	ldw	r4,-16(r3)
   8d118:	6b400404 	addi	r13,r13,16
   8d11c:	5ac00404 	addi	r11,r11,16
   8d120:	693ffc15 	stw	r4,-16(r13)
   8d124:	61000017 	ldw	r4,0(r12)
   8d128:	4a400404 	addi	r9,r9,16
   8d12c:	42000404 	addi	r8,r8,16
   8d130:	593ffc15 	stw	r4,-16(r11)
   8d134:	51000017 	ldw	r4,0(r10)
   8d138:	63000404 	addi	r12,r12,16
   8d13c:	52800404 	addi	r10,r10,16
   8d140:	493ffc15 	stw	r4,-16(r9)
   8d144:	1bbfef1e 	bne	r3,r14,8d104 <__alt_data_end+0xfffb79d4>
   8d148:	79000044 	addi	r4,r15,1
   8d14c:	2008913a 	slli	r4,r4,4
   8d150:	328003cc 	andi	r10,r6,15
   8d154:	02c000c4 	movi	r11,3
   8d158:	1107883a 	add	r3,r2,r4
   8d15c:	290b883a 	add	r5,r5,r4
   8d160:	5a801e2e 	bgeu	r11,r10,8d1dc <memmove+0x154>
   8d164:	1813883a 	mov	r9,r3
   8d168:	2811883a 	mov	r8,r5
   8d16c:	500f883a 	mov	r7,r10
   8d170:	41000017 	ldw	r4,0(r8)
   8d174:	4a400104 	addi	r9,r9,4
   8d178:	39ffff04 	addi	r7,r7,-4
   8d17c:	493fff15 	stw	r4,-4(r9)
   8d180:	42000104 	addi	r8,r8,4
   8d184:	59fffa36 	bltu	r11,r7,8d170 <__alt_data_end+0xfffb7a40>
   8d188:	513fff04 	addi	r4,r10,-4
   8d18c:	2008d0ba 	srli	r4,r4,2
   8d190:	318000cc 	andi	r6,r6,3
   8d194:	21000044 	addi	r4,r4,1
   8d198:	2109883a 	add	r4,r4,r4
   8d19c:	2109883a 	add	r4,r4,r4
   8d1a0:	1907883a 	add	r3,r3,r4
   8d1a4:	290b883a 	add	r5,r5,r4
   8d1a8:	30000b26 	beq	r6,zero,8d1d8 <memmove+0x150>
   8d1ac:	198d883a 	add	r6,r3,r6
   8d1b0:	29c00003 	ldbu	r7,0(r5)
   8d1b4:	18c00044 	addi	r3,r3,1
   8d1b8:	29400044 	addi	r5,r5,1
   8d1bc:	19ffffc5 	stb	r7,-1(r3)
   8d1c0:	19bffb1e 	bne	r3,r6,8d1b0 <__alt_data_end+0xfffb7a80>
   8d1c4:	f800283a 	ret
   8d1c8:	1007883a 	mov	r3,r2
   8d1cc:	003ff606 	br	8d1a8 <__alt_data_end+0xfffb7a78>
   8d1d0:	1007883a 	mov	r3,r2
   8d1d4:	003ff506 	br	8d1ac <__alt_data_end+0xfffb7a7c>
   8d1d8:	f800283a 	ret
   8d1dc:	500d883a 	mov	r6,r10
   8d1e0:	003ff106 	br	8d1a8 <__alt_data_end+0xfffb7a78>

0008d1e4 <_Balloc>:
   8d1e4:	20801317 	ldw	r2,76(r4)
   8d1e8:	defffc04 	addi	sp,sp,-16
   8d1ec:	dc400115 	stw	r17,4(sp)
   8d1f0:	dc000015 	stw	r16,0(sp)
   8d1f4:	dfc00315 	stw	ra,12(sp)
   8d1f8:	dc800215 	stw	r18,8(sp)
   8d1fc:	2023883a 	mov	r17,r4
   8d200:	2821883a 	mov	r16,r5
   8d204:	10000f26 	beq	r2,zero,8d244 <_Balloc+0x60>
   8d208:	8407883a 	add	r3,r16,r16
   8d20c:	18c7883a 	add	r3,r3,r3
   8d210:	10c7883a 	add	r3,r2,r3
   8d214:	18800017 	ldw	r2,0(r3)
   8d218:	10001126 	beq	r2,zero,8d260 <_Balloc+0x7c>
   8d21c:	11000017 	ldw	r4,0(r2)
   8d220:	19000015 	stw	r4,0(r3)
   8d224:	10000415 	stw	zero,16(r2)
   8d228:	10000315 	stw	zero,12(r2)
   8d22c:	dfc00317 	ldw	ra,12(sp)
   8d230:	dc800217 	ldw	r18,8(sp)
   8d234:	dc400117 	ldw	r17,4(sp)
   8d238:	dc000017 	ldw	r16,0(sp)
   8d23c:	dec00404 	addi	sp,sp,16
   8d240:	f800283a 	ret
   8d244:	01800844 	movi	r6,33
   8d248:	01400104 	movi	r5,4
   8d24c:	00900a80 	call	900a8 <_calloc_r>
   8d250:	88801315 	stw	r2,76(r17)
   8d254:	103fec1e 	bne	r2,zero,8d208 <__alt_data_end+0xfffb7ad8>
   8d258:	0005883a 	mov	r2,zero
   8d25c:	003ff306 	br	8d22c <__alt_data_end+0xfffb7afc>
   8d260:	01400044 	movi	r5,1
   8d264:	2c24983a 	sll	r18,r5,r16
   8d268:	8809883a 	mov	r4,r17
   8d26c:	91800144 	addi	r6,r18,5
   8d270:	318d883a 	add	r6,r6,r6
   8d274:	318d883a 	add	r6,r6,r6
   8d278:	00900a80 	call	900a8 <_calloc_r>
   8d27c:	103ff626 	beq	r2,zero,8d258 <__alt_data_end+0xfffb7b28>
   8d280:	14000115 	stw	r16,4(r2)
   8d284:	14800215 	stw	r18,8(r2)
   8d288:	003fe606 	br	8d224 <__alt_data_end+0xfffb7af4>

0008d28c <_Bfree>:
   8d28c:	28000826 	beq	r5,zero,8d2b0 <_Bfree+0x24>
   8d290:	28c00117 	ldw	r3,4(r5)
   8d294:	20801317 	ldw	r2,76(r4)
   8d298:	18c7883a 	add	r3,r3,r3
   8d29c:	18c7883a 	add	r3,r3,r3
   8d2a0:	10c5883a 	add	r2,r2,r3
   8d2a4:	10c00017 	ldw	r3,0(r2)
   8d2a8:	28c00015 	stw	r3,0(r5)
   8d2ac:	11400015 	stw	r5,0(r2)
   8d2b0:	f800283a 	ret

0008d2b4 <__multadd>:
   8d2b4:	defff704 	addi	sp,sp,-36
   8d2b8:	dc800215 	stw	r18,8(sp)
   8d2bc:	2c800417 	ldw	r18,16(r5)
   8d2c0:	dd800615 	stw	r22,24(sp)
   8d2c4:	dd400515 	stw	r21,20(sp)
   8d2c8:	dd000415 	stw	r20,16(sp)
   8d2cc:	dcc00315 	stw	r19,12(sp)
   8d2d0:	dc400115 	stw	r17,4(sp)
   8d2d4:	dc000015 	stw	r16,0(sp)
   8d2d8:	dfc00815 	stw	ra,32(sp)
   8d2dc:	ddc00715 	stw	r23,28(sp)
   8d2e0:	2827883a 	mov	r19,r5
   8d2e4:	2029883a 	mov	r20,r4
   8d2e8:	3023883a 	mov	r17,r6
   8d2ec:	3821883a 	mov	r16,r7
   8d2f0:	2d400504 	addi	r21,r5,20
   8d2f4:	002d883a 	mov	r22,zero
   8d2f8:	adc00017 	ldw	r23,0(r21)
   8d2fc:	880b883a 	mov	r5,r17
   8d300:	ad400104 	addi	r21,r21,4
   8d304:	b93fffcc 	andi	r4,r23,65535
   8d308:	0082a480 	call	82a48 <__mulsi3>
   8d30c:	b808d43a 	srli	r4,r23,16
   8d310:	880b883a 	mov	r5,r17
   8d314:	1421883a 	add	r16,r2,r16
   8d318:	0082a480 	call	82a48 <__mulsi3>
   8d31c:	800ed43a 	srli	r7,r16,16
   8d320:	80ffffcc 	andi	r3,r16,65535
   8d324:	b5800044 	addi	r22,r22,1
   8d328:	11c5883a 	add	r2,r2,r7
   8d32c:	100e943a 	slli	r7,r2,16
   8d330:	1020d43a 	srli	r16,r2,16
   8d334:	38c7883a 	add	r3,r7,r3
   8d338:	a8ffff15 	stw	r3,-4(r21)
   8d33c:	b4bfee16 	blt	r22,r18,8d2f8 <__alt_data_end+0xfffb7bc8>
   8d340:	80000926 	beq	r16,zero,8d368 <__multadd+0xb4>
   8d344:	98800217 	ldw	r2,8(r19)
   8d348:	9080130e 	bge	r18,r2,8d398 <__multadd+0xe4>
   8d34c:	90800144 	addi	r2,r18,5
   8d350:	1085883a 	add	r2,r2,r2
   8d354:	1085883a 	add	r2,r2,r2
   8d358:	9885883a 	add	r2,r19,r2
   8d35c:	14000015 	stw	r16,0(r2)
   8d360:	94800044 	addi	r18,r18,1
   8d364:	9c800415 	stw	r18,16(r19)
   8d368:	9805883a 	mov	r2,r19
   8d36c:	dfc00817 	ldw	ra,32(sp)
   8d370:	ddc00717 	ldw	r23,28(sp)
   8d374:	dd800617 	ldw	r22,24(sp)
   8d378:	dd400517 	ldw	r21,20(sp)
   8d37c:	dd000417 	ldw	r20,16(sp)
   8d380:	dcc00317 	ldw	r19,12(sp)
   8d384:	dc800217 	ldw	r18,8(sp)
   8d388:	dc400117 	ldw	r17,4(sp)
   8d38c:	dc000017 	ldw	r16,0(sp)
   8d390:	dec00904 	addi	sp,sp,36
   8d394:	f800283a 	ret
   8d398:	99400117 	ldw	r5,4(r19)
   8d39c:	a009883a 	mov	r4,r20
   8d3a0:	29400044 	addi	r5,r5,1
   8d3a4:	008d1e40 	call	8d1e4 <_Balloc>
   8d3a8:	99800417 	ldw	r6,16(r19)
   8d3ac:	99400304 	addi	r5,r19,12
   8d3b0:	11000304 	addi	r4,r2,12
   8d3b4:	31800084 	addi	r6,r6,2
   8d3b8:	318d883a 	add	r6,r6,r6
   8d3bc:	318d883a 	add	r6,r6,r6
   8d3c0:	1023883a 	mov	r17,r2
   8d3c4:	008cf400 	call	8cf40 <memcpy>
   8d3c8:	98000a26 	beq	r19,zero,8d3f4 <__multadd+0x140>
   8d3cc:	98c00117 	ldw	r3,4(r19)
   8d3d0:	a0801317 	ldw	r2,76(r20)
   8d3d4:	18c7883a 	add	r3,r3,r3
   8d3d8:	18c7883a 	add	r3,r3,r3
   8d3dc:	10c5883a 	add	r2,r2,r3
   8d3e0:	10c00017 	ldw	r3,0(r2)
   8d3e4:	98c00015 	stw	r3,0(r19)
   8d3e8:	14c00015 	stw	r19,0(r2)
   8d3ec:	8827883a 	mov	r19,r17
   8d3f0:	003fd606 	br	8d34c <__alt_data_end+0xfffb7c1c>
   8d3f4:	8827883a 	mov	r19,r17
   8d3f8:	003fd406 	br	8d34c <__alt_data_end+0xfffb7c1c>

0008d3fc <__s2b>:
   8d3fc:	defff904 	addi	sp,sp,-28
   8d400:	dc400115 	stw	r17,4(sp)
   8d404:	dc000015 	stw	r16,0(sp)
   8d408:	2023883a 	mov	r17,r4
   8d40c:	2821883a 	mov	r16,r5
   8d410:	39000204 	addi	r4,r7,8
   8d414:	01400244 	movi	r5,9
   8d418:	dcc00315 	stw	r19,12(sp)
   8d41c:	dc800215 	stw	r18,8(sp)
   8d420:	dfc00615 	stw	ra,24(sp)
   8d424:	dd400515 	stw	r21,20(sp)
   8d428:	dd000415 	stw	r20,16(sp)
   8d42c:	3825883a 	mov	r18,r7
   8d430:	3027883a 	mov	r19,r6
   8d434:	00828940 	call	82894 <__divsi3>
   8d438:	00c00044 	movi	r3,1
   8d43c:	000b883a 	mov	r5,zero
   8d440:	1880030e 	bge	r3,r2,8d450 <__s2b+0x54>
   8d444:	18c7883a 	add	r3,r3,r3
   8d448:	29400044 	addi	r5,r5,1
   8d44c:	18bffd16 	blt	r3,r2,8d444 <__alt_data_end+0xfffb7d14>
   8d450:	8809883a 	mov	r4,r17
   8d454:	008d1e40 	call	8d1e4 <_Balloc>
   8d458:	d8c00717 	ldw	r3,28(sp)
   8d45c:	10c00515 	stw	r3,20(r2)
   8d460:	00c00044 	movi	r3,1
   8d464:	10c00415 	stw	r3,16(r2)
   8d468:	00c00244 	movi	r3,9
   8d46c:	1cc0210e 	bge	r3,r19,8d4f4 <__s2b+0xf8>
   8d470:	80eb883a 	add	r21,r16,r3
   8d474:	a829883a 	mov	r20,r21
   8d478:	84e1883a 	add	r16,r16,r19
   8d47c:	a1c00007 	ldb	r7,0(r20)
   8d480:	01800284 	movi	r6,10
   8d484:	a5000044 	addi	r20,r20,1
   8d488:	100b883a 	mov	r5,r2
   8d48c:	39fff404 	addi	r7,r7,-48
   8d490:	8809883a 	mov	r4,r17
   8d494:	008d2b40 	call	8d2b4 <__multadd>
   8d498:	a43ff81e 	bne	r20,r16,8d47c <__alt_data_end+0xfffb7d4c>
   8d49c:	ace1883a 	add	r16,r21,r19
   8d4a0:	843ffe04 	addi	r16,r16,-8
   8d4a4:	9c800a0e 	bge	r19,r18,8d4d0 <__s2b+0xd4>
   8d4a8:	94e5c83a 	sub	r18,r18,r19
   8d4ac:	84a5883a 	add	r18,r16,r18
   8d4b0:	81c00007 	ldb	r7,0(r16)
   8d4b4:	01800284 	movi	r6,10
   8d4b8:	84000044 	addi	r16,r16,1
   8d4bc:	100b883a 	mov	r5,r2
   8d4c0:	39fff404 	addi	r7,r7,-48
   8d4c4:	8809883a 	mov	r4,r17
   8d4c8:	008d2b40 	call	8d2b4 <__multadd>
   8d4cc:	84bff81e 	bne	r16,r18,8d4b0 <__alt_data_end+0xfffb7d80>
   8d4d0:	dfc00617 	ldw	ra,24(sp)
   8d4d4:	dd400517 	ldw	r21,20(sp)
   8d4d8:	dd000417 	ldw	r20,16(sp)
   8d4dc:	dcc00317 	ldw	r19,12(sp)
   8d4e0:	dc800217 	ldw	r18,8(sp)
   8d4e4:	dc400117 	ldw	r17,4(sp)
   8d4e8:	dc000017 	ldw	r16,0(sp)
   8d4ec:	dec00704 	addi	sp,sp,28
   8d4f0:	f800283a 	ret
   8d4f4:	84000284 	addi	r16,r16,10
   8d4f8:	1827883a 	mov	r19,r3
   8d4fc:	003fe906 	br	8d4a4 <__alt_data_end+0xfffb7d74>

0008d500 <__hi0bits>:
   8d500:	20bfffec 	andhi	r2,r4,65535
   8d504:	1000141e 	bne	r2,zero,8d558 <__hi0bits+0x58>
   8d508:	2008943a 	slli	r4,r4,16
   8d50c:	00800404 	movi	r2,16
   8d510:	20ffc02c 	andhi	r3,r4,65280
   8d514:	1800021e 	bne	r3,zero,8d520 <__hi0bits+0x20>
   8d518:	2008923a 	slli	r4,r4,8
   8d51c:	10800204 	addi	r2,r2,8
   8d520:	20fc002c 	andhi	r3,r4,61440
   8d524:	1800021e 	bne	r3,zero,8d530 <__hi0bits+0x30>
   8d528:	2008913a 	slli	r4,r4,4
   8d52c:	10800104 	addi	r2,r2,4
   8d530:	20f0002c 	andhi	r3,r4,49152
   8d534:	1800031e 	bne	r3,zero,8d544 <__hi0bits+0x44>
   8d538:	2109883a 	add	r4,r4,r4
   8d53c:	10800084 	addi	r2,r2,2
   8d540:	2109883a 	add	r4,r4,r4
   8d544:	20000316 	blt	r4,zero,8d554 <__hi0bits+0x54>
   8d548:	2110002c 	andhi	r4,r4,16384
   8d54c:	2000041e 	bne	r4,zero,8d560 <__hi0bits+0x60>
   8d550:	00800804 	movi	r2,32
   8d554:	f800283a 	ret
   8d558:	0005883a 	mov	r2,zero
   8d55c:	003fec06 	br	8d510 <__alt_data_end+0xfffb7de0>
   8d560:	10800044 	addi	r2,r2,1
   8d564:	f800283a 	ret

0008d568 <__lo0bits>:
   8d568:	20c00017 	ldw	r3,0(r4)
   8d56c:	188001cc 	andi	r2,r3,7
   8d570:	10000826 	beq	r2,zero,8d594 <__lo0bits+0x2c>
   8d574:	1880004c 	andi	r2,r3,1
   8d578:	1000211e 	bne	r2,zero,8d600 <__lo0bits+0x98>
   8d57c:	1880008c 	andi	r2,r3,2
   8d580:	1000211e 	bne	r2,zero,8d608 <__lo0bits+0xa0>
   8d584:	1806d0ba 	srli	r3,r3,2
   8d588:	00800084 	movi	r2,2
   8d58c:	20c00015 	stw	r3,0(r4)
   8d590:	f800283a 	ret
   8d594:	18bfffcc 	andi	r2,r3,65535
   8d598:	10001326 	beq	r2,zero,8d5e8 <__lo0bits+0x80>
   8d59c:	0005883a 	mov	r2,zero
   8d5a0:	19403fcc 	andi	r5,r3,255
   8d5a4:	2800021e 	bne	r5,zero,8d5b0 <__lo0bits+0x48>
   8d5a8:	1806d23a 	srli	r3,r3,8
   8d5ac:	10800204 	addi	r2,r2,8
   8d5b0:	194003cc 	andi	r5,r3,15
   8d5b4:	2800021e 	bne	r5,zero,8d5c0 <__lo0bits+0x58>
   8d5b8:	1806d13a 	srli	r3,r3,4
   8d5bc:	10800104 	addi	r2,r2,4
   8d5c0:	194000cc 	andi	r5,r3,3
   8d5c4:	2800021e 	bne	r5,zero,8d5d0 <__lo0bits+0x68>
   8d5c8:	1806d0ba 	srli	r3,r3,2
   8d5cc:	10800084 	addi	r2,r2,2
   8d5d0:	1940004c 	andi	r5,r3,1
   8d5d4:	2800081e 	bne	r5,zero,8d5f8 <__lo0bits+0x90>
   8d5d8:	1806d07a 	srli	r3,r3,1
   8d5dc:	1800051e 	bne	r3,zero,8d5f4 <__lo0bits+0x8c>
   8d5e0:	00800804 	movi	r2,32
   8d5e4:	f800283a 	ret
   8d5e8:	1806d43a 	srli	r3,r3,16
   8d5ec:	00800404 	movi	r2,16
   8d5f0:	003feb06 	br	8d5a0 <__alt_data_end+0xfffb7e70>
   8d5f4:	10800044 	addi	r2,r2,1
   8d5f8:	20c00015 	stw	r3,0(r4)
   8d5fc:	f800283a 	ret
   8d600:	0005883a 	mov	r2,zero
   8d604:	f800283a 	ret
   8d608:	1806d07a 	srli	r3,r3,1
   8d60c:	00800044 	movi	r2,1
   8d610:	20c00015 	stw	r3,0(r4)
   8d614:	f800283a 	ret

0008d618 <__i2b>:
   8d618:	defffd04 	addi	sp,sp,-12
   8d61c:	dc000015 	stw	r16,0(sp)
   8d620:	04000044 	movi	r16,1
   8d624:	dc400115 	stw	r17,4(sp)
   8d628:	2823883a 	mov	r17,r5
   8d62c:	800b883a 	mov	r5,r16
   8d630:	dfc00215 	stw	ra,8(sp)
   8d634:	008d1e40 	call	8d1e4 <_Balloc>
   8d638:	14400515 	stw	r17,20(r2)
   8d63c:	14000415 	stw	r16,16(r2)
   8d640:	dfc00217 	ldw	ra,8(sp)
   8d644:	dc400117 	ldw	r17,4(sp)
   8d648:	dc000017 	ldw	r16,0(sp)
   8d64c:	dec00304 	addi	sp,sp,12
   8d650:	f800283a 	ret

0008d654 <__multiply>:
   8d654:	deffef04 	addi	sp,sp,-68
   8d658:	dc400815 	stw	r17,32(sp)
   8d65c:	dc000715 	stw	r16,28(sp)
   8d660:	34400417 	ldw	r17,16(r6)
   8d664:	2c000417 	ldw	r16,16(r5)
   8d668:	dd800d15 	stw	r22,52(sp)
   8d66c:	dc800915 	stw	r18,36(sp)
   8d670:	dfc01015 	stw	ra,64(sp)
   8d674:	df000f15 	stw	fp,60(sp)
   8d678:	ddc00e15 	stw	r23,56(sp)
   8d67c:	dd400c15 	stw	r21,48(sp)
   8d680:	dd000b15 	stw	r20,44(sp)
   8d684:	dcc00a15 	stw	r19,40(sp)
   8d688:	2825883a 	mov	r18,r5
   8d68c:	302d883a 	mov	r22,r6
   8d690:	8440050e 	bge	r16,r17,8d6a8 <__multiply+0x54>
   8d694:	8007883a 	mov	r3,r16
   8d698:	3025883a 	mov	r18,r6
   8d69c:	8821883a 	mov	r16,r17
   8d6a0:	282d883a 	mov	r22,r5
   8d6a4:	1823883a 	mov	r17,r3
   8d6a8:	90800217 	ldw	r2,8(r18)
   8d6ac:	8447883a 	add	r3,r16,r17
   8d6b0:	d8c00215 	stw	r3,8(sp)
   8d6b4:	91400117 	ldw	r5,4(r18)
   8d6b8:	10c0010e 	bge	r2,r3,8d6c0 <__multiply+0x6c>
   8d6bc:	29400044 	addi	r5,r5,1
   8d6c0:	008d1e40 	call	8d1e4 <_Balloc>
   8d6c4:	d8c00217 	ldw	r3,8(sp)
   8d6c8:	d8800615 	stw	r2,24(sp)
   8d6cc:	18eb883a 	add	r21,r3,r3
   8d6d0:	ad6b883a 	add	r21,r21,r21
   8d6d4:	10c00504 	addi	r3,r2,20
   8d6d8:	1d6b883a 	add	r21,r3,r21
   8d6dc:	d8c00115 	stw	r3,4(sp)
   8d6e0:	dd400315 	stw	r21,12(sp)
   8d6e4:	1805883a 	mov	r2,r3
   8d6e8:	1d40042e 	bgeu	r3,r21,8d6fc <__multiply+0xa8>
   8d6ec:	d8c00317 	ldw	r3,12(sp)
   8d6f0:	10000015 	stw	zero,0(r2)
   8d6f4:	10800104 	addi	r2,r2,4
   8d6f8:	10fffc36 	bltu	r2,r3,8d6ec <__alt_data_end+0xfffb7fbc>
   8d6fc:	8c63883a 	add	r17,r17,r17
   8d700:	b5800504 	addi	r22,r22,20
   8d704:	8c63883a 	add	r17,r17,r17
   8d708:	94800504 	addi	r18,r18,20
   8d70c:	8421883a 	add	r16,r16,r16
   8d710:	b463883a 	add	r17,r22,r17
   8d714:	8421883a 	add	r16,r16,r16
   8d718:	dd800015 	stw	r22,0(sp)
   8d71c:	dc800415 	stw	r18,16(sp)
   8d720:	dc400515 	stw	r17,20(sp)
   8d724:	9429883a 	add	r20,r18,r16
   8d728:	b4404f2e 	bgeu	r22,r17,8d868 <__multiply+0x214>
   8d72c:	d8c00017 	ldw	r3,0(sp)
   8d730:	1c800017 	ldw	r18,0(r3)
   8d734:	947fffcc 	andi	r17,r18,65535
   8d738:	88001e26 	beq	r17,zero,8d7b4 <__multiply+0x160>
   8d73c:	dd800117 	ldw	r22,4(sp)
   8d740:	dd400417 	ldw	r21,16(sp)
   8d744:	0027883a 	mov	r19,zero
   8d748:	ac800017 	ldw	r18,0(r21)
   8d74c:	b4000017 	ldw	r16,0(r22)
   8d750:	880b883a 	mov	r5,r17
   8d754:	913fffcc 	andi	r4,r18,65535
   8d758:	0082a480 	call	82a48 <__mulsi3>
   8d75c:	9008d43a 	srli	r4,r18,16
   8d760:	84bfffcc 	andi	r18,r16,65535
   8d764:	1485883a 	add	r2,r2,r18
   8d768:	14e5883a 	add	r18,r2,r19
   8d76c:	8020d43a 	srli	r16,r16,16
   8d770:	9026d43a 	srli	r19,r18,16
   8d774:	880b883a 	mov	r5,r17
   8d778:	0082a480 	call	82a48 <__mulsi3>
   8d77c:	1405883a 	add	r2,r2,r16
   8d780:	14e1883a 	add	r16,r2,r19
   8d784:	90ffffcc 	andi	r3,r18,65535
   8d788:	8024943a 	slli	r18,r16,16
   8d78c:	ad400104 	addi	r21,r21,4
   8d790:	b005883a 	mov	r2,r22
   8d794:	90c6b03a 	or	r3,r18,r3
   8d798:	b0c00015 	stw	r3,0(r22)
   8d79c:	8026d43a 	srli	r19,r16,16
   8d7a0:	b5800104 	addi	r22,r22,4
   8d7a4:	ad3fe836 	bltu	r21,r20,8d748 <__alt_data_end+0xfffb8018>
   8d7a8:	d8c00017 	ldw	r3,0(sp)
   8d7ac:	14c00115 	stw	r19,4(r2)
   8d7b0:	1c800017 	ldw	r18,0(r3)
   8d7b4:	9024d43a 	srli	r18,r18,16
   8d7b8:	90002226 	beq	r18,zero,8d844 <__multiply+0x1f0>
   8d7bc:	d8c00117 	ldw	r3,4(sp)
   8d7c0:	dd800417 	ldw	r22,16(sp)
   8d7c4:	002f883a 	mov	r23,zero
   8d7c8:	1f000017 	ldw	fp,0(r3)
   8d7cc:	1823883a 	mov	r17,r3
   8d7d0:	182b883a 	mov	r21,r3
   8d7d4:	e021883a 	mov	r16,fp
   8d7d8:	00000106 	br	8d7e0 <__multiply+0x18c>
   8d7dc:	982b883a 	mov	r21,r19
   8d7e0:	b100000b 	ldhu	r4,0(r22)
   8d7e4:	8020d43a 	srli	r16,r16,16
   8d7e8:	900b883a 	mov	r5,r18
   8d7ec:	0082a480 	call	82a48 <__mulsi3>
   8d7f0:	1405883a 	add	r2,r2,r16
   8d7f4:	15ef883a 	add	r23,r2,r23
   8d7f8:	b804943a 	slli	r2,r23,16
   8d7fc:	e0ffffcc 	andi	r3,fp,65535
   8d800:	8c400104 	addi	r17,r17,4
   8d804:	10c6b03a 	or	r3,r2,r3
   8d808:	88ffff15 	stw	r3,-4(r17)
   8d80c:	b5800104 	addi	r22,r22,4
   8d810:	b13fff17 	ldw	r4,-4(r22)
   8d814:	acc00104 	addi	r19,r21,4
   8d818:	900b883a 	mov	r5,r18
   8d81c:	2008d43a 	srli	r4,r4,16
   8d820:	9c000017 	ldw	r16,0(r19)
   8d824:	0082a480 	call	82a48 <__mulsi3>
   8d828:	b806d43a 	srli	r3,r23,16
   8d82c:	813fffcc 	andi	r4,r16,65535
   8d830:	1105883a 	add	r2,r2,r4
   8d834:	10f9883a 	add	fp,r2,r3
   8d838:	e02ed43a 	srli	r23,fp,16
   8d83c:	b53fe736 	bltu	r22,r20,8d7dc <__alt_data_end+0xfffb80ac>
   8d840:	af000115 	stw	fp,4(r21)
   8d844:	d8c00017 	ldw	r3,0(sp)
   8d848:	d9000517 	ldw	r4,20(sp)
   8d84c:	18c00104 	addi	r3,r3,4
   8d850:	d8c00015 	stw	r3,0(sp)
   8d854:	d8c00117 	ldw	r3,4(sp)
   8d858:	18c00104 	addi	r3,r3,4
   8d85c:	d8c00115 	stw	r3,4(sp)
   8d860:	d8c00017 	ldw	r3,0(sp)
   8d864:	193fb136 	bltu	r3,r4,8d72c <__alt_data_end+0xfffb7ffc>
   8d868:	d8c00217 	ldw	r3,8(sp)
   8d86c:	00c00c0e 	bge	zero,r3,8d8a0 <__multiply+0x24c>
   8d870:	d8c00317 	ldw	r3,12(sp)
   8d874:	18bfff17 	ldw	r2,-4(r3)
   8d878:	1d7fff04 	addi	r21,r3,-4
   8d87c:	10000326 	beq	r2,zero,8d88c <__multiply+0x238>
   8d880:	00000706 	br	8d8a0 <__multiply+0x24c>
   8d884:	a8800017 	ldw	r2,0(r21)
   8d888:	1000051e 	bne	r2,zero,8d8a0 <__multiply+0x24c>
   8d88c:	d8c00217 	ldw	r3,8(sp)
   8d890:	ad7fff04 	addi	r21,r21,-4
   8d894:	18ffffc4 	addi	r3,r3,-1
   8d898:	d8c00215 	stw	r3,8(sp)
   8d89c:	183ff91e 	bne	r3,zero,8d884 <__alt_data_end+0xfffb8154>
   8d8a0:	d8c00617 	ldw	r3,24(sp)
   8d8a4:	d9000217 	ldw	r4,8(sp)
   8d8a8:	1805883a 	mov	r2,r3
   8d8ac:	19000415 	stw	r4,16(r3)
   8d8b0:	dfc01017 	ldw	ra,64(sp)
   8d8b4:	df000f17 	ldw	fp,60(sp)
   8d8b8:	ddc00e17 	ldw	r23,56(sp)
   8d8bc:	dd800d17 	ldw	r22,52(sp)
   8d8c0:	dd400c17 	ldw	r21,48(sp)
   8d8c4:	dd000b17 	ldw	r20,44(sp)
   8d8c8:	dcc00a17 	ldw	r19,40(sp)
   8d8cc:	dc800917 	ldw	r18,36(sp)
   8d8d0:	dc400817 	ldw	r17,32(sp)
   8d8d4:	dc000717 	ldw	r16,28(sp)
   8d8d8:	dec01104 	addi	sp,sp,68
   8d8dc:	f800283a 	ret

0008d8e0 <__pow5mult>:
   8d8e0:	defffa04 	addi	sp,sp,-24
   8d8e4:	dcc00315 	stw	r19,12(sp)
   8d8e8:	dc000015 	stw	r16,0(sp)
   8d8ec:	dfc00515 	stw	ra,20(sp)
   8d8f0:	dd000415 	stw	r20,16(sp)
   8d8f4:	dc800215 	stw	r18,8(sp)
   8d8f8:	dc400115 	stw	r17,4(sp)
   8d8fc:	308000cc 	andi	r2,r6,3
   8d900:	3021883a 	mov	r16,r6
   8d904:	2027883a 	mov	r19,r4
   8d908:	10002f1e 	bne	r2,zero,8d9c8 <__pow5mult+0xe8>
   8d90c:	2825883a 	mov	r18,r5
   8d910:	8021d0ba 	srai	r16,r16,2
   8d914:	80001a26 	beq	r16,zero,8d980 <__pow5mult+0xa0>
   8d918:	9c401217 	ldw	r17,72(r19)
   8d91c:	8800061e 	bne	r17,zero,8d938 <__pow5mult+0x58>
   8d920:	00003406 	br	8d9f4 <__pow5mult+0x114>
   8d924:	8021d07a 	srai	r16,r16,1
   8d928:	80001526 	beq	r16,zero,8d980 <__pow5mult+0xa0>
   8d92c:	88800017 	ldw	r2,0(r17)
   8d930:	10001c26 	beq	r2,zero,8d9a4 <__pow5mult+0xc4>
   8d934:	1023883a 	mov	r17,r2
   8d938:	8080004c 	andi	r2,r16,1
   8d93c:	103ff926 	beq	r2,zero,8d924 <__alt_data_end+0xfffb81f4>
   8d940:	880d883a 	mov	r6,r17
   8d944:	900b883a 	mov	r5,r18
   8d948:	9809883a 	mov	r4,r19
   8d94c:	008d6540 	call	8d654 <__multiply>
   8d950:	90001b26 	beq	r18,zero,8d9c0 <__pow5mult+0xe0>
   8d954:	91000117 	ldw	r4,4(r18)
   8d958:	98c01317 	ldw	r3,76(r19)
   8d95c:	8021d07a 	srai	r16,r16,1
   8d960:	2109883a 	add	r4,r4,r4
   8d964:	2109883a 	add	r4,r4,r4
   8d968:	1907883a 	add	r3,r3,r4
   8d96c:	19000017 	ldw	r4,0(r3)
   8d970:	91000015 	stw	r4,0(r18)
   8d974:	1c800015 	stw	r18,0(r3)
   8d978:	1025883a 	mov	r18,r2
   8d97c:	803feb1e 	bne	r16,zero,8d92c <__alt_data_end+0xfffb81fc>
   8d980:	9005883a 	mov	r2,r18
   8d984:	dfc00517 	ldw	ra,20(sp)
   8d988:	dd000417 	ldw	r20,16(sp)
   8d98c:	dcc00317 	ldw	r19,12(sp)
   8d990:	dc800217 	ldw	r18,8(sp)
   8d994:	dc400117 	ldw	r17,4(sp)
   8d998:	dc000017 	ldw	r16,0(sp)
   8d99c:	dec00604 	addi	sp,sp,24
   8d9a0:	f800283a 	ret
   8d9a4:	880d883a 	mov	r6,r17
   8d9a8:	880b883a 	mov	r5,r17
   8d9ac:	9809883a 	mov	r4,r19
   8d9b0:	008d6540 	call	8d654 <__multiply>
   8d9b4:	88800015 	stw	r2,0(r17)
   8d9b8:	10000015 	stw	zero,0(r2)
   8d9bc:	003fdd06 	br	8d934 <__alt_data_end+0xfffb8204>
   8d9c0:	1025883a 	mov	r18,r2
   8d9c4:	003fd706 	br	8d924 <__alt_data_end+0xfffb81f4>
   8d9c8:	10bfffc4 	addi	r2,r2,-1
   8d9cc:	1085883a 	add	r2,r2,r2
   8d9d0:	00c00274 	movhi	r3,9
   8d9d4:	18d08404 	addi	r3,r3,16912
   8d9d8:	1085883a 	add	r2,r2,r2
   8d9dc:	1885883a 	add	r2,r3,r2
   8d9e0:	11800017 	ldw	r6,0(r2)
   8d9e4:	000f883a 	mov	r7,zero
   8d9e8:	008d2b40 	call	8d2b4 <__multadd>
   8d9ec:	1025883a 	mov	r18,r2
   8d9f0:	003fc706 	br	8d910 <__alt_data_end+0xfffb81e0>
   8d9f4:	05000044 	movi	r20,1
   8d9f8:	a00b883a 	mov	r5,r20
   8d9fc:	9809883a 	mov	r4,r19
   8da00:	008d1e40 	call	8d1e4 <_Balloc>
   8da04:	1023883a 	mov	r17,r2
   8da08:	00809c44 	movi	r2,625
   8da0c:	88800515 	stw	r2,20(r17)
   8da10:	8d000415 	stw	r20,16(r17)
   8da14:	9c401215 	stw	r17,72(r19)
   8da18:	88000015 	stw	zero,0(r17)
   8da1c:	003fc606 	br	8d938 <__alt_data_end+0xfffb8208>

0008da20 <__lshift>:
   8da20:	defff904 	addi	sp,sp,-28
   8da24:	dd400515 	stw	r21,20(sp)
   8da28:	dcc00315 	stw	r19,12(sp)
   8da2c:	302bd17a 	srai	r21,r6,5
   8da30:	2cc00417 	ldw	r19,16(r5)
   8da34:	28800217 	ldw	r2,8(r5)
   8da38:	dd000415 	stw	r20,16(sp)
   8da3c:	ace7883a 	add	r19,r21,r19
   8da40:	dc800215 	stw	r18,8(sp)
   8da44:	dc400115 	stw	r17,4(sp)
   8da48:	dc000015 	stw	r16,0(sp)
   8da4c:	dfc00615 	stw	ra,24(sp)
   8da50:	9c000044 	addi	r16,r19,1
   8da54:	2823883a 	mov	r17,r5
   8da58:	3029883a 	mov	r20,r6
   8da5c:	2025883a 	mov	r18,r4
   8da60:	29400117 	ldw	r5,4(r5)
   8da64:	1400030e 	bge	r2,r16,8da74 <__lshift+0x54>
   8da68:	1085883a 	add	r2,r2,r2
   8da6c:	29400044 	addi	r5,r5,1
   8da70:	143ffd16 	blt	r2,r16,8da68 <__alt_data_end+0xfffb8338>
   8da74:	9009883a 	mov	r4,r18
   8da78:	008d1e40 	call	8d1e4 <_Balloc>
   8da7c:	10c00504 	addi	r3,r2,20
   8da80:	0540070e 	bge	zero,r21,8daa0 <__lshift+0x80>
   8da84:	ad6b883a 	add	r21,r21,r21
   8da88:	ad6b883a 	add	r21,r21,r21
   8da8c:	1809883a 	mov	r4,r3
   8da90:	1d47883a 	add	r3,r3,r21
   8da94:	20000015 	stw	zero,0(r4)
   8da98:	21000104 	addi	r4,r4,4
   8da9c:	193ffd1e 	bne	r3,r4,8da94 <__alt_data_end+0xfffb8364>
   8daa0:	8a000417 	ldw	r8,16(r17)
   8daa4:	89000504 	addi	r4,r17,20
   8daa8:	a18007cc 	andi	r6,r20,31
   8daac:	4211883a 	add	r8,r8,r8
   8dab0:	4211883a 	add	r8,r8,r8
   8dab4:	2211883a 	add	r8,r4,r8
   8dab8:	30002326 	beq	r6,zero,8db48 <__lshift+0x128>
   8dabc:	02400804 	movi	r9,32
   8dac0:	4993c83a 	sub	r9,r9,r6
   8dac4:	000b883a 	mov	r5,zero
   8dac8:	21c00017 	ldw	r7,0(r4)
   8dacc:	1815883a 	mov	r10,r3
   8dad0:	18c00104 	addi	r3,r3,4
   8dad4:	398e983a 	sll	r7,r7,r6
   8dad8:	21000104 	addi	r4,r4,4
   8dadc:	394ab03a 	or	r5,r7,r5
   8dae0:	197fff15 	stw	r5,-4(r3)
   8dae4:	217fff17 	ldw	r5,-4(r4)
   8dae8:	2a4ad83a 	srl	r5,r5,r9
   8daec:	223ff636 	bltu	r4,r8,8dac8 <__alt_data_end+0xfffb8398>
   8daf0:	51400115 	stw	r5,4(r10)
   8daf4:	28001a1e 	bne	r5,zero,8db60 <__lshift+0x140>
   8daf8:	843fffc4 	addi	r16,r16,-1
   8dafc:	14000415 	stw	r16,16(r2)
   8db00:	88000826 	beq	r17,zero,8db24 <__lshift+0x104>
   8db04:	89000117 	ldw	r4,4(r17)
   8db08:	90c01317 	ldw	r3,76(r18)
   8db0c:	2109883a 	add	r4,r4,r4
   8db10:	2109883a 	add	r4,r4,r4
   8db14:	1907883a 	add	r3,r3,r4
   8db18:	19000017 	ldw	r4,0(r3)
   8db1c:	89000015 	stw	r4,0(r17)
   8db20:	1c400015 	stw	r17,0(r3)
   8db24:	dfc00617 	ldw	ra,24(sp)
   8db28:	dd400517 	ldw	r21,20(sp)
   8db2c:	dd000417 	ldw	r20,16(sp)
   8db30:	dcc00317 	ldw	r19,12(sp)
   8db34:	dc800217 	ldw	r18,8(sp)
   8db38:	dc400117 	ldw	r17,4(sp)
   8db3c:	dc000017 	ldw	r16,0(sp)
   8db40:	dec00704 	addi	sp,sp,28
   8db44:	f800283a 	ret
   8db48:	21400017 	ldw	r5,0(r4)
   8db4c:	18c00104 	addi	r3,r3,4
   8db50:	21000104 	addi	r4,r4,4
   8db54:	197fff15 	stw	r5,-4(r3)
   8db58:	223ffb36 	bltu	r4,r8,8db48 <__alt_data_end+0xfffb8418>
   8db5c:	003fe606 	br	8daf8 <__alt_data_end+0xfffb83c8>
   8db60:	9c000084 	addi	r16,r19,2
   8db64:	003fe406 	br	8daf8 <__alt_data_end+0xfffb83c8>

0008db68 <__mcmp>:
   8db68:	20800417 	ldw	r2,16(r4)
   8db6c:	28c00417 	ldw	r3,16(r5)
   8db70:	10c5c83a 	sub	r2,r2,r3
   8db74:	1000111e 	bne	r2,zero,8dbbc <__mcmp+0x54>
   8db78:	18c7883a 	add	r3,r3,r3
   8db7c:	18c7883a 	add	r3,r3,r3
   8db80:	21000504 	addi	r4,r4,20
   8db84:	29400504 	addi	r5,r5,20
   8db88:	20c5883a 	add	r2,r4,r3
   8db8c:	28cb883a 	add	r5,r5,r3
   8db90:	00000106 	br	8db98 <__mcmp+0x30>
   8db94:	20800a2e 	bgeu	r4,r2,8dbc0 <__mcmp+0x58>
   8db98:	10bfff04 	addi	r2,r2,-4
   8db9c:	297fff04 	addi	r5,r5,-4
   8dba0:	11800017 	ldw	r6,0(r2)
   8dba4:	28c00017 	ldw	r3,0(r5)
   8dba8:	30fffa26 	beq	r6,r3,8db94 <__alt_data_end+0xfffb8464>
   8dbac:	30c00236 	bltu	r6,r3,8dbb8 <__mcmp+0x50>
   8dbb0:	00800044 	movi	r2,1
   8dbb4:	f800283a 	ret
   8dbb8:	00bfffc4 	movi	r2,-1
   8dbbc:	f800283a 	ret
   8dbc0:	0005883a 	mov	r2,zero
   8dbc4:	f800283a 	ret

0008dbc8 <__mdiff>:
   8dbc8:	28c00417 	ldw	r3,16(r5)
   8dbcc:	30800417 	ldw	r2,16(r6)
   8dbd0:	defffa04 	addi	sp,sp,-24
   8dbd4:	dcc00315 	stw	r19,12(sp)
   8dbd8:	dc800215 	stw	r18,8(sp)
   8dbdc:	dfc00515 	stw	ra,20(sp)
   8dbe0:	dd000415 	stw	r20,16(sp)
   8dbe4:	dc400115 	stw	r17,4(sp)
   8dbe8:	dc000015 	stw	r16,0(sp)
   8dbec:	1887c83a 	sub	r3,r3,r2
   8dbf0:	2825883a 	mov	r18,r5
   8dbf4:	3027883a 	mov	r19,r6
   8dbf8:	1800141e 	bne	r3,zero,8dc4c <__mdiff+0x84>
   8dbfc:	1085883a 	add	r2,r2,r2
   8dc00:	1085883a 	add	r2,r2,r2
   8dc04:	2a000504 	addi	r8,r5,20
   8dc08:	34000504 	addi	r16,r6,20
   8dc0c:	4087883a 	add	r3,r8,r2
   8dc10:	8085883a 	add	r2,r16,r2
   8dc14:	00000106 	br	8dc1c <__mdiff+0x54>
   8dc18:	40c0592e 	bgeu	r8,r3,8dd80 <__mdiff+0x1b8>
   8dc1c:	18ffff04 	addi	r3,r3,-4
   8dc20:	10bfff04 	addi	r2,r2,-4
   8dc24:	19c00017 	ldw	r7,0(r3)
   8dc28:	11400017 	ldw	r5,0(r2)
   8dc2c:	397ffa26 	beq	r7,r5,8dc18 <__alt_data_end+0xfffb84e8>
   8dc30:	3940592e 	bgeu	r7,r5,8dd98 <__mdiff+0x1d0>
   8dc34:	9005883a 	mov	r2,r18
   8dc38:	4023883a 	mov	r17,r8
   8dc3c:	9825883a 	mov	r18,r19
   8dc40:	05000044 	movi	r20,1
   8dc44:	1027883a 	mov	r19,r2
   8dc48:	00000406 	br	8dc5c <__mdiff+0x94>
   8dc4c:	18005616 	blt	r3,zero,8dda8 <__mdiff+0x1e0>
   8dc50:	34400504 	addi	r17,r6,20
   8dc54:	2c000504 	addi	r16,r5,20
   8dc58:	0029883a 	mov	r20,zero
   8dc5c:	91400117 	ldw	r5,4(r18)
   8dc60:	008d1e40 	call	8d1e4 <_Balloc>
   8dc64:	92400417 	ldw	r9,16(r18)
   8dc68:	9b000417 	ldw	r12,16(r19)
   8dc6c:	12c00504 	addi	r11,r2,20
   8dc70:	4a51883a 	add	r8,r9,r9
   8dc74:	6319883a 	add	r12,r12,r12
   8dc78:	4211883a 	add	r8,r8,r8
   8dc7c:	6319883a 	add	r12,r12,r12
   8dc80:	15000315 	stw	r20,12(r2)
   8dc84:	8211883a 	add	r8,r16,r8
   8dc88:	8b19883a 	add	r12,r17,r12
   8dc8c:	0007883a 	mov	r3,zero
   8dc90:	81400017 	ldw	r5,0(r16)
   8dc94:	89c00017 	ldw	r7,0(r17)
   8dc98:	59800104 	addi	r6,r11,4
   8dc9c:	293fffcc 	andi	r4,r5,65535
   8dca0:	20c7883a 	add	r3,r4,r3
   8dca4:	393fffcc 	andi	r4,r7,65535
   8dca8:	1909c83a 	sub	r4,r3,r4
   8dcac:	280ad43a 	srli	r5,r5,16
   8dcb0:	380ed43a 	srli	r7,r7,16
   8dcb4:	2007d43a 	srai	r3,r4,16
   8dcb8:	213fffcc 	andi	r4,r4,65535
   8dcbc:	29cbc83a 	sub	r5,r5,r7
   8dcc0:	28c7883a 	add	r3,r5,r3
   8dcc4:	180a943a 	slli	r5,r3,16
   8dcc8:	8c400104 	addi	r17,r17,4
   8dccc:	84000104 	addi	r16,r16,4
   8dcd0:	2908b03a 	or	r4,r5,r4
   8dcd4:	59000015 	stw	r4,0(r11)
   8dcd8:	1807d43a 	srai	r3,r3,16
   8dcdc:	3015883a 	mov	r10,r6
   8dce0:	3017883a 	mov	r11,r6
   8dce4:	8b3fea36 	bltu	r17,r12,8dc90 <__alt_data_end+0xfffb8560>
   8dce8:	8200162e 	bgeu	r16,r8,8dd44 <__mdiff+0x17c>
   8dcec:	8017883a 	mov	r11,r16
   8dcf0:	59400017 	ldw	r5,0(r11)
   8dcf4:	31800104 	addi	r6,r6,4
   8dcf8:	5ac00104 	addi	r11,r11,4
   8dcfc:	293fffcc 	andi	r4,r5,65535
   8dd00:	20c7883a 	add	r3,r4,r3
   8dd04:	280ed43a 	srli	r7,r5,16
   8dd08:	180bd43a 	srai	r5,r3,16
   8dd0c:	193fffcc 	andi	r4,r3,65535
   8dd10:	3947883a 	add	r3,r7,r5
   8dd14:	180a943a 	slli	r5,r3,16
   8dd18:	1807d43a 	srai	r3,r3,16
   8dd1c:	2908b03a 	or	r4,r5,r4
   8dd20:	313fff15 	stw	r4,-4(r6)
   8dd24:	5a3ff236 	bltu	r11,r8,8dcf0 <__alt_data_end+0xfffb85c0>
   8dd28:	0406303a 	nor	r3,zero,r16
   8dd2c:	1a07883a 	add	r3,r3,r8
   8dd30:	1806d0ba 	srli	r3,r3,2
   8dd34:	18c00044 	addi	r3,r3,1
   8dd38:	18c7883a 	add	r3,r3,r3
   8dd3c:	18c7883a 	add	r3,r3,r3
   8dd40:	50d5883a 	add	r10,r10,r3
   8dd44:	50ffff04 	addi	r3,r10,-4
   8dd48:	2000041e 	bne	r4,zero,8dd5c <__mdiff+0x194>
   8dd4c:	18ffff04 	addi	r3,r3,-4
   8dd50:	19000017 	ldw	r4,0(r3)
   8dd54:	4a7fffc4 	addi	r9,r9,-1
   8dd58:	203ffc26 	beq	r4,zero,8dd4c <__alt_data_end+0xfffb861c>
   8dd5c:	12400415 	stw	r9,16(r2)
   8dd60:	dfc00517 	ldw	ra,20(sp)
   8dd64:	dd000417 	ldw	r20,16(sp)
   8dd68:	dcc00317 	ldw	r19,12(sp)
   8dd6c:	dc800217 	ldw	r18,8(sp)
   8dd70:	dc400117 	ldw	r17,4(sp)
   8dd74:	dc000017 	ldw	r16,0(sp)
   8dd78:	dec00604 	addi	sp,sp,24
   8dd7c:	f800283a 	ret
   8dd80:	000b883a 	mov	r5,zero
   8dd84:	008d1e40 	call	8d1e4 <_Balloc>
   8dd88:	00c00044 	movi	r3,1
   8dd8c:	10c00415 	stw	r3,16(r2)
   8dd90:	10000515 	stw	zero,20(r2)
   8dd94:	003ff206 	br	8dd60 <__alt_data_end+0xfffb8630>
   8dd98:	8023883a 	mov	r17,r16
   8dd9c:	0029883a 	mov	r20,zero
   8dda0:	4021883a 	mov	r16,r8
   8dda4:	003fad06 	br	8dc5c <__alt_data_end+0xfffb852c>
   8dda8:	9005883a 	mov	r2,r18
   8ddac:	94400504 	addi	r17,r18,20
   8ddb0:	9c000504 	addi	r16,r19,20
   8ddb4:	9825883a 	mov	r18,r19
   8ddb8:	05000044 	movi	r20,1
   8ddbc:	1027883a 	mov	r19,r2
   8ddc0:	003fa606 	br	8dc5c <__alt_data_end+0xfffb852c>

0008ddc4 <__ulp>:
   8ddc4:	295ffc2c 	andhi	r5,r5,32752
   8ddc8:	00bf3034 	movhi	r2,64704
   8ddcc:	2887883a 	add	r3,r5,r2
   8ddd0:	00c0020e 	bge	zero,r3,8dddc <__ulp+0x18>
   8ddd4:	0005883a 	mov	r2,zero
   8ddd8:	f800283a 	ret
   8dddc:	00c7c83a 	sub	r3,zero,r3
   8dde0:	1807d53a 	srai	r3,r3,20
   8dde4:	008004c4 	movi	r2,19
   8dde8:	10c00b0e 	bge	r2,r3,8de18 <__ulp+0x54>
   8ddec:	18bffb04 	addi	r2,r3,-20
   8ddf0:	01000784 	movi	r4,30
   8ddf4:	0007883a 	mov	r3,zero
   8ddf8:	20800516 	blt	r4,r2,8de10 <__ulp+0x4c>
   8ddfc:	010007c4 	movi	r4,31
   8de00:	2089c83a 	sub	r4,r4,r2
   8de04:	00800044 	movi	r2,1
   8de08:	1104983a 	sll	r2,r2,r4
   8de0c:	f800283a 	ret
   8de10:	00800044 	movi	r2,1
   8de14:	f800283a 	ret
   8de18:	01400234 	movhi	r5,8
   8de1c:	28c7d83a 	sra	r3,r5,r3
   8de20:	0005883a 	mov	r2,zero
   8de24:	f800283a 	ret

0008de28 <__b2d>:
   8de28:	defffa04 	addi	sp,sp,-24
   8de2c:	dc000015 	stw	r16,0(sp)
   8de30:	24000417 	ldw	r16,16(r4)
   8de34:	dc400115 	stw	r17,4(sp)
   8de38:	24400504 	addi	r17,r4,20
   8de3c:	8421883a 	add	r16,r16,r16
   8de40:	8421883a 	add	r16,r16,r16
   8de44:	8c21883a 	add	r16,r17,r16
   8de48:	dc800215 	stw	r18,8(sp)
   8de4c:	84bfff17 	ldw	r18,-4(r16)
   8de50:	dd000415 	stw	r20,16(sp)
   8de54:	dcc00315 	stw	r19,12(sp)
   8de58:	9009883a 	mov	r4,r18
   8de5c:	2829883a 	mov	r20,r5
   8de60:	dfc00515 	stw	ra,20(sp)
   8de64:	008d5000 	call	8d500 <__hi0bits>
   8de68:	00c00804 	movi	r3,32
   8de6c:	1889c83a 	sub	r4,r3,r2
   8de70:	a1000015 	stw	r4,0(r20)
   8de74:	01000284 	movi	r4,10
   8de78:	84ffff04 	addi	r19,r16,-4
   8de7c:	20801216 	blt	r4,r2,8dec8 <__b2d+0xa0>
   8de80:	018002c4 	movi	r6,11
   8de84:	308dc83a 	sub	r6,r6,r2
   8de88:	9186d83a 	srl	r3,r18,r6
   8de8c:	18cffc34 	orhi	r3,r3,16368
   8de90:	8cc0212e 	bgeu	r17,r19,8df18 <__b2d+0xf0>
   8de94:	813ffe17 	ldw	r4,-8(r16)
   8de98:	218cd83a 	srl	r6,r4,r6
   8de9c:	10800544 	addi	r2,r2,21
   8dea0:	9084983a 	sll	r2,r18,r2
   8dea4:	1184b03a 	or	r2,r2,r6
   8dea8:	dfc00517 	ldw	ra,20(sp)
   8deac:	dd000417 	ldw	r20,16(sp)
   8deb0:	dcc00317 	ldw	r19,12(sp)
   8deb4:	dc800217 	ldw	r18,8(sp)
   8deb8:	dc400117 	ldw	r17,4(sp)
   8debc:	dc000017 	ldw	r16,0(sp)
   8dec0:	dec00604 	addi	sp,sp,24
   8dec4:	f800283a 	ret
   8dec8:	8cc00f2e 	bgeu	r17,r19,8df08 <__b2d+0xe0>
   8decc:	117ffd44 	addi	r5,r2,-11
   8ded0:	80bffe17 	ldw	r2,-8(r16)
   8ded4:	28000e26 	beq	r5,zero,8df10 <__b2d+0xe8>
   8ded8:	1949c83a 	sub	r4,r3,r5
   8dedc:	9164983a 	sll	r18,r18,r5
   8dee0:	1106d83a 	srl	r3,r2,r4
   8dee4:	81bffe04 	addi	r6,r16,-8
   8dee8:	948ffc34 	orhi	r18,r18,16368
   8deec:	90c6b03a 	or	r3,r18,r3
   8def0:	89800e2e 	bgeu	r17,r6,8df2c <__b2d+0x104>
   8def4:	81bffd17 	ldw	r6,-12(r16)
   8def8:	1144983a 	sll	r2,r2,r5
   8defc:	310ad83a 	srl	r5,r6,r4
   8df00:	2884b03a 	or	r2,r5,r2
   8df04:	003fe806 	br	8dea8 <__alt_data_end+0xfffb8778>
   8df08:	10bffd44 	addi	r2,r2,-11
   8df0c:	1000041e 	bne	r2,zero,8df20 <__b2d+0xf8>
   8df10:	90cffc34 	orhi	r3,r18,16368
   8df14:	003fe406 	br	8dea8 <__alt_data_end+0xfffb8778>
   8df18:	000d883a 	mov	r6,zero
   8df1c:	003fdf06 	br	8de9c <__alt_data_end+0xfffb876c>
   8df20:	90a4983a 	sll	r18,r18,r2
   8df24:	0005883a 	mov	r2,zero
   8df28:	003ff906 	br	8df10 <__alt_data_end+0xfffb87e0>
   8df2c:	1144983a 	sll	r2,r2,r5
   8df30:	003fdd06 	br	8dea8 <__alt_data_end+0xfffb8778>

0008df34 <__d2b>:
   8df34:	defff804 	addi	sp,sp,-32
   8df38:	dc000215 	stw	r16,8(sp)
   8df3c:	3021883a 	mov	r16,r6
   8df40:	dc400315 	stw	r17,12(sp)
   8df44:	8022907a 	slli	r17,r16,1
   8df48:	dd000615 	stw	r20,24(sp)
   8df4c:	2829883a 	mov	r20,r5
   8df50:	01400044 	movi	r5,1
   8df54:	dcc00515 	stw	r19,20(sp)
   8df58:	dc800415 	stw	r18,16(sp)
   8df5c:	dfc00715 	stw	ra,28(sp)
   8df60:	3825883a 	mov	r18,r7
   8df64:	8822d57a 	srli	r17,r17,21
   8df68:	008d1e40 	call	8d1e4 <_Balloc>
   8df6c:	1027883a 	mov	r19,r2
   8df70:	00800434 	movhi	r2,16
   8df74:	10bfffc4 	addi	r2,r2,-1
   8df78:	808c703a 	and	r6,r16,r2
   8df7c:	88000126 	beq	r17,zero,8df84 <__d2b+0x50>
   8df80:	31800434 	orhi	r6,r6,16
   8df84:	d9800015 	stw	r6,0(sp)
   8df88:	a0002426 	beq	r20,zero,8e01c <__d2b+0xe8>
   8df8c:	d9000104 	addi	r4,sp,4
   8df90:	dd000115 	stw	r20,4(sp)
   8df94:	008d5680 	call	8d568 <__lo0bits>
   8df98:	d8c00017 	ldw	r3,0(sp)
   8df9c:	10002f1e 	bne	r2,zero,8e05c <__d2b+0x128>
   8dfa0:	d9000117 	ldw	r4,4(sp)
   8dfa4:	99000515 	stw	r4,20(r19)
   8dfa8:	1821003a 	cmpeq	r16,r3,zero
   8dfac:	01000084 	movi	r4,2
   8dfb0:	2421c83a 	sub	r16,r4,r16
   8dfb4:	98c00615 	stw	r3,24(r19)
   8dfb8:	9c000415 	stw	r16,16(r19)
   8dfbc:	88001f1e 	bne	r17,zero,8e03c <__d2b+0x108>
   8dfc0:	10bef384 	addi	r2,r2,-1074
   8dfc4:	90800015 	stw	r2,0(r18)
   8dfc8:	00900034 	movhi	r2,16384
   8dfcc:	10bfffc4 	addi	r2,r2,-1
   8dfd0:	8085883a 	add	r2,r16,r2
   8dfd4:	1085883a 	add	r2,r2,r2
   8dfd8:	1085883a 	add	r2,r2,r2
   8dfdc:	9885883a 	add	r2,r19,r2
   8dfe0:	11000517 	ldw	r4,20(r2)
   8dfe4:	8020917a 	slli	r16,r16,5
   8dfe8:	008d5000 	call	8d500 <__hi0bits>
   8dfec:	d8c00817 	ldw	r3,32(sp)
   8dff0:	8085c83a 	sub	r2,r16,r2
   8dff4:	18800015 	stw	r2,0(r3)
   8dff8:	9805883a 	mov	r2,r19
   8dffc:	dfc00717 	ldw	ra,28(sp)
   8e000:	dd000617 	ldw	r20,24(sp)
   8e004:	dcc00517 	ldw	r19,20(sp)
   8e008:	dc800417 	ldw	r18,16(sp)
   8e00c:	dc400317 	ldw	r17,12(sp)
   8e010:	dc000217 	ldw	r16,8(sp)
   8e014:	dec00804 	addi	sp,sp,32
   8e018:	f800283a 	ret
   8e01c:	d809883a 	mov	r4,sp
   8e020:	008d5680 	call	8d568 <__lo0bits>
   8e024:	d8c00017 	ldw	r3,0(sp)
   8e028:	04000044 	movi	r16,1
   8e02c:	9c000415 	stw	r16,16(r19)
   8e030:	98c00515 	stw	r3,20(r19)
   8e034:	10800804 	addi	r2,r2,32
   8e038:	883fe126 	beq	r17,zero,8dfc0 <__alt_data_end+0xfffb8890>
   8e03c:	00c00d44 	movi	r3,53
   8e040:	8c7ef344 	addi	r17,r17,-1075
   8e044:	88a3883a 	add	r17,r17,r2
   8e048:	1885c83a 	sub	r2,r3,r2
   8e04c:	d8c00817 	ldw	r3,32(sp)
   8e050:	94400015 	stw	r17,0(r18)
   8e054:	18800015 	stw	r2,0(r3)
   8e058:	003fe706 	br	8dff8 <__alt_data_end+0xfffb88c8>
   8e05c:	01000804 	movi	r4,32
   8e060:	2089c83a 	sub	r4,r4,r2
   8e064:	1908983a 	sll	r4,r3,r4
   8e068:	d9400117 	ldw	r5,4(sp)
   8e06c:	1886d83a 	srl	r3,r3,r2
   8e070:	2148b03a 	or	r4,r4,r5
   8e074:	99000515 	stw	r4,20(r19)
   8e078:	d8c00015 	stw	r3,0(sp)
   8e07c:	003fca06 	br	8dfa8 <__alt_data_end+0xfffb8878>

0008e080 <__ratio>:
   8e080:	defff904 	addi	sp,sp,-28
   8e084:	dc400315 	stw	r17,12(sp)
   8e088:	2823883a 	mov	r17,r5
   8e08c:	d9400104 	addi	r5,sp,4
   8e090:	dfc00615 	stw	ra,24(sp)
   8e094:	dcc00515 	stw	r19,20(sp)
   8e098:	dc800415 	stw	r18,16(sp)
   8e09c:	2027883a 	mov	r19,r4
   8e0a0:	dc000215 	stw	r16,8(sp)
   8e0a4:	008de280 	call	8de28 <__b2d>
   8e0a8:	d80b883a 	mov	r5,sp
   8e0ac:	8809883a 	mov	r4,r17
   8e0b0:	1025883a 	mov	r18,r2
   8e0b4:	1821883a 	mov	r16,r3
   8e0b8:	008de280 	call	8de28 <__b2d>
   8e0bc:	8a000417 	ldw	r8,16(r17)
   8e0c0:	99000417 	ldw	r4,16(r19)
   8e0c4:	d9400117 	ldw	r5,4(sp)
   8e0c8:	2209c83a 	sub	r4,r4,r8
   8e0cc:	2010917a 	slli	r8,r4,5
   8e0d0:	d9000017 	ldw	r4,0(sp)
   8e0d4:	2909c83a 	sub	r4,r5,r4
   8e0d8:	4109883a 	add	r4,r8,r4
   8e0dc:	01000e0e 	bge	zero,r4,8e118 <__ratio+0x98>
   8e0e0:	2008953a 	slli	r4,r4,20
   8e0e4:	2421883a 	add	r16,r4,r16
   8e0e8:	100d883a 	mov	r6,r2
   8e0ec:	180f883a 	mov	r7,r3
   8e0f0:	9009883a 	mov	r4,r18
   8e0f4:	800b883a 	mov	r5,r16
   8e0f8:	00842a40 	call	842a4 <__divdf3>
   8e0fc:	dfc00617 	ldw	ra,24(sp)
   8e100:	dcc00517 	ldw	r19,20(sp)
   8e104:	dc800417 	ldw	r18,16(sp)
   8e108:	dc400317 	ldw	r17,12(sp)
   8e10c:	dc000217 	ldw	r16,8(sp)
   8e110:	dec00704 	addi	sp,sp,28
   8e114:	f800283a 	ret
   8e118:	2008953a 	slli	r4,r4,20
   8e11c:	1907c83a 	sub	r3,r3,r4
   8e120:	003ff106 	br	8e0e8 <__alt_data_end+0xfffb89b8>

0008e124 <_mprec_log10>:
   8e124:	defffe04 	addi	sp,sp,-8
   8e128:	dc000015 	stw	r16,0(sp)
   8e12c:	dfc00115 	stw	ra,4(sp)
   8e130:	008005c4 	movi	r2,23
   8e134:	2021883a 	mov	r16,r4
   8e138:	11000d0e 	bge	r2,r4,8e170 <_mprec_log10+0x4c>
   8e13c:	0005883a 	mov	r2,zero
   8e140:	00cffc34 	movhi	r3,16368
   8e144:	843fffc4 	addi	r16,r16,-1
   8e148:	000d883a 	mov	r6,zero
   8e14c:	01d00934 	movhi	r7,16420
   8e150:	1009883a 	mov	r4,r2
   8e154:	180b883a 	mov	r5,r3
   8e158:	0084e440 	call	84e44 <__muldf3>
   8e15c:	803ff91e 	bne	r16,zero,8e144 <__alt_data_end+0xfffb8a14>
   8e160:	dfc00117 	ldw	ra,4(sp)
   8e164:	dc000017 	ldw	r16,0(sp)
   8e168:	dec00204 	addi	sp,sp,8
   8e16c:	f800283a 	ret
   8e170:	202090fa 	slli	r16,r4,3
   8e174:	00800274 	movhi	r2,9
   8e178:	10909b04 	addi	r2,r2,17004
   8e17c:	1421883a 	add	r16,r2,r16
   8e180:	80800017 	ldw	r2,0(r16)
   8e184:	80c00117 	ldw	r3,4(r16)
   8e188:	dfc00117 	ldw	ra,4(sp)
   8e18c:	dc000017 	ldw	r16,0(sp)
   8e190:	dec00204 	addi	sp,sp,8
   8e194:	f800283a 	ret

0008e198 <__copybits>:
   8e198:	297fffc4 	addi	r5,r5,-1
   8e19c:	280fd17a 	srai	r7,r5,5
   8e1a0:	30c00417 	ldw	r3,16(r6)
   8e1a4:	30800504 	addi	r2,r6,20
   8e1a8:	39c00044 	addi	r7,r7,1
   8e1ac:	18c7883a 	add	r3,r3,r3
   8e1b0:	39cf883a 	add	r7,r7,r7
   8e1b4:	18c7883a 	add	r3,r3,r3
   8e1b8:	39cf883a 	add	r7,r7,r7
   8e1bc:	10c7883a 	add	r3,r2,r3
   8e1c0:	21cf883a 	add	r7,r4,r7
   8e1c4:	10c00d2e 	bgeu	r2,r3,8e1fc <__copybits+0x64>
   8e1c8:	200b883a 	mov	r5,r4
   8e1cc:	12000017 	ldw	r8,0(r2)
   8e1d0:	29400104 	addi	r5,r5,4
   8e1d4:	10800104 	addi	r2,r2,4
   8e1d8:	2a3fff15 	stw	r8,-4(r5)
   8e1dc:	10fffb36 	bltu	r2,r3,8e1cc <__alt_data_end+0xfffb8a9c>
   8e1e0:	1985c83a 	sub	r2,r3,r6
   8e1e4:	10bffac4 	addi	r2,r2,-21
   8e1e8:	1004d0ba 	srli	r2,r2,2
   8e1ec:	10800044 	addi	r2,r2,1
   8e1f0:	1085883a 	add	r2,r2,r2
   8e1f4:	1085883a 	add	r2,r2,r2
   8e1f8:	2089883a 	add	r4,r4,r2
   8e1fc:	21c0032e 	bgeu	r4,r7,8e20c <__copybits+0x74>
   8e200:	20000015 	stw	zero,0(r4)
   8e204:	21000104 	addi	r4,r4,4
   8e208:	21fffd36 	bltu	r4,r7,8e200 <__alt_data_end+0xfffb8ad0>
   8e20c:	f800283a 	ret

0008e210 <__any_on>:
   8e210:	20c00417 	ldw	r3,16(r4)
   8e214:	2805d17a 	srai	r2,r5,5
   8e218:	21000504 	addi	r4,r4,20
   8e21c:	18800d0e 	bge	r3,r2,8e254 <__any_on+0x44>
   8e220:	18c7883a 	add	r3,r3,r3
   8e224:	18c7883a 	add	r3,r3,r3
   8e228:	20c7883a 	add	r3,r4,r3
   8e22c:	20c0192e 	bgeu	r4,r3,8e294 <__any_on+0x84>
   8e230:	18bfff17 	ldw	r2,-4(r3)
   8e234:	18ffff04 	addi	r3,r3,-4
   8e238:	1000041e 	bne	r2,zero,8e24c <__any_on+0x3c>
   8e23c:	20c0142e 	bgeu	r4,r3,8e290 <__any_on+0x80>
   8e240:	18ffff04 	addi	r3,r3,-4
   8e244:	19400017 	ldw	r5,0(r3)
   8e248:	283ffc26 	beq	r5,zero,8e23c <__alt_data_end+0xfffb8b0c>
   8e24c:	00800044 	movi	r2,1
   8e250:	f800283a 	ret
   8e254:	10c00a0e 	bge	r2,r3,8e280 <__any_on+0x70>
   8e258:	1085883a 	add	r2,r2,r2
   8e25c:	1085883a 	add	r2,r2,r2
   8e260:	294007cc 	andi	r5,r5,31
   8e264:	2087883a 	add	r3,r4,r2
   8e268:	283ff026 	beq	r5,zero,8e22c <__alt_data_end+0xfffb8afc>
   8e26c:	19800017 	ldw	r6,0(r3)
   8e270:	3144d83a 	srl	r2,r6,r5
   8e274:	114a983a 	sll	r5,r2,r5
   8e278:	317ff41e 	bne	r6,r5,8e24c <__alt_data_end+0xfffb8b1c>
   8e27c:	003feb06 	br	8e22c <__alt_data_end+0xfffb8afc>
   8e280:	1085883a 	add	r2,r2,r2
   8e284:	1085883a 	add	r2,r2,r2
   8e288:	2087883a 	add	r3,r4,r2
   8e28c:	003fe706 	br	8e22c <__alt_data_end+0xfffb8afc>
   8e290:	f800283a 	ret
   8e294:	0005883a 	mov	r2,zero
   8e298:	f800283a 	ret

0008e29c <_read_r>:
   8e29c:	defffd04 	addi	sp,sp,-12
   8e2a0:	2805883a 	mov	r2,r5
   8e2a4:	dc000015 	stw	r16,0(sp)
   8e2a8:	040002b4 	movhi	r16,10
   8e2ac:	dc400115 	stw	r17,4(sp)
   8e2b0:	300b883a 	mov	r5,r6
   8e2b4:	841eac04 	addi	r16,r16,31408
   8e2b8:	2023883a 	mov	r17,r4
   8e2bc:	380d883a 	mov	r6,r7
   8e2c0:	1009883a 	mov	r4,r2
   8e2c4:	dfc00215 	stw	ra,8(sp)
   8e2c8:	80000015 	stw	zero,0(r16)
   8e2cc:	0091c600 	call	91c60 <read>
   8e2d0:	00ffffc4 	movi	r3,-1
   8e2d4:	10c00526 	beq	r2,r3,8e2ec <_read_r+0x50>
   8e2d8:	dfc00217 	ldw	ra,8(sp)
   8e2dc:	dc400117 	ldw	r17,4(sp)
   8e2e0:	dc000017 	ldw	r16,0(sp)
   8e2e4:	dec00304 	addi	sp,sp,12
   8e2e8:	f800283a 	ret
   8e2ec:	80c00017 	ldw	r3,0(r16)
   8e2f0:	183ff926 	beq	r3,zero,8e2d8 <__alt_data_end+0xfffb8ba8>
   8e2f4:	88c00015 	stw	r3,0(r17)
   8e2f8:	003ff706 	br	8e2d8 <__alt_data_end+0xfffb8ba8>

0008e2fc <_realloc_r>:
   8e2fc:	defff604 	addi	sp,sp,-40
   8e300:	dc800215 	stw	r18,8(sp)
   8e304:	dfc00915 	stw	ra,36(sp)
   8e308:	df000815 	stw	fp,32(sp)
   8e30c:	ddc00715 	stw	r23,28(sp)
   8e310:	dd800615 	stw	r22,24(sp)
   8e314:	dd400515 	stw	r21,20(sp)
   8e318:	dd000415 	stw	r20,16(sp)
   8e31c:	dcc00315 	stw	r19,12(sp)
   8e320:	dc400115 	stw	r17,4(sp)
   8e324:	dc000015 	stw	r16,0(sp)
   8e328:	3025883a 	mov	r18,r6
   8e32c:	2800b726 	beq	r5,zero,8e60c <_realloc_r+0x310>
   8e330:	282b883a 	mov	r21,r5
   8e334:	2029883a 	mov	r20,r4
   8e338:	00919580 	call	91958 <__malloc_lock>
   8e33c:	a8bfff17 	ldw	r2,-4(r21)
   8e340:	043fff04 	movi	r16,-4
   8e344:	90c002c4 	addi	r3,r18,11
   8e348:	01000584 	movi	r4,22
   8e34c:	acfffe04 	addi	r19,r21,-8
   8e350:	1420703a 	and	r16,r2,r16
   8e354:	20c0332e 	bgeu	r4,r3,8e424 <_realloc_r+0x128>
   8e358:	047ffe04 	movi	r17,-8
   8e35c:	1c62703a 	and	r17,r3,r17
   8e360:	8807883a 	mov	r3,r17
   8e364:	88005816 	blt	r17,zero,8e4c8 <_realloc_r+0x1cc>
   8e368:	8c805736 	bltu	r17,r18,8e4c8 <_realloc_r+0x1cc>
   8e36c:	80c0300e 	bge	r16,r3,8e430 <_realloc_r+0x134>
   8e370:	070002b4 	movhi	fp,10
   8e374:	e7320804 	addi	fp,fp,-14304
   8e378:	e1c00217 	ldw	r7,8(fp)
   8e37c:	9c09883a 	add	r4,r19,r16
   8e380:	22000117 	ldw	r8,4(r4)
   8e384:	21c06326 	beq	r4,r7,8e514 <_realloc_r+0x218>
   8e388:	017fff84 	movi	r5,-2
   8e38c:	414a703a 	and	r5,r8,r5
   8e390:	214b883a 	add	r5,r4,r5
   8e394:	29800117 	ldw	r6,4(r5)
   8e398:	3180004c 	andi	r6,r6,1
   8e39c:	30003f26 	beq	r6,zero,8e49c <_realloc_r+0x1a0>
   8e3a0:	1080004c 	andi	r2,r2,1
   8e3a4:	10008326 	beq	r2,zero,8e5b4 <_realloc_r+0x2b8>
   8e3a8:	900b883a 	mov	r5,r18
   8e3ac:	a009883a 	mov	r4,r20
   8e3b0:	0087a000 	call	87a00 <_malloc_r>
   8e3b4:	1025883a 	mov	r18,r2
   8e3b8:	10011e26 	beq	r2,zero,8e834 <_realloc_r+0x538>
   8e3bc:	a93fff17 	ldw	r4,-4(r21)
   8e3c0:	10fffe04 	addi	r3,r2,-8
   8e3c4:	00bfff84 	movi	r2,-2
   8e3c8:	2084703a 	and	r2,r4,r2
   8e3cc:	9885883a 	add	r2,r19,r2
   8e3d0:	1880ee26 	beq	r3,r2,8e78c <_realloc_r+0x490>
   8e3d4:	81bfff04 	addi	r6,r16,-4
   8e3d8:	00800904 	movi	r2,36
   8e3dc:	1180b836 	bltu	r2,r6,8e6c0 <_realloc_r+0x3c4>
   8e3e0:	00c004c4 	movi	r3,19
   8e3e4:	19809636 	bltu	r3,r6,8e640 <_realloc_r+0x344>
   8e3e8:	9005883a 	mov	r2,r18
   8e3ec:	a807883a 	mov	r3,r21
   8e3f0:	19000017 	ldw	r4,0(r3)
   8e3f4:	11000015 	stw	r4,0(r2)
   8e3f8:	19000117 	ldw	r4,4(r3)
   8e3fc:	11000115 	stw	r4,4(r2)
   8e400:	18c00217 	ldw	r3,8(r3)
   8e404:	10c00215 	stw	r3,8(r2)
   8e408:	a80b883a 	mov	r5,r21
   8e40c:	a009883a 	mov	r4,r20
   8e410:	0086dc00 	call	86dc0 <_free_r>
   8e414:	a009883a 	mov	r4,r20
   8e418:	009197c0 	call	9197c <__malloc_unlock>
   8e41c:	9005883a 	mov	r2,r18
   8e420:	00001206 	br	8e46c <_realloc_r+0x170>
   8e424:	00c00404 	movi	r3,16
   8e428:	1823883a 	mov	r17,r3
   8e42c:	003fce06 	br	8e368 <__alt_data_end+0xfffb8c38>
   8e430:	a825883a 	mov	r18,r21
   8e434:	8445c83a 	sub	r2,r16,r17
   8e438:	00c003c4 	movi	r3,15
   8e43c:	18802636 	bltu	r3,r2,8e4d8 <_realloc_r+0x1dc>
   8e440:	99800117 	ldw	r6,4(r19)
   8e444:	9c07883a 	add	r3,r19,r16
   8e448:	3180004c 	andi	r6,r6,1
   8e44c:	3420b03a 	or	r16,r6,r16
   8e450:	9c000115 	stw	r16,4(r19)
   8e454:	18800117 	ldw	r2,4(r3)
   8e458:	10800054 	ori	r2,r2,1
   8e45c:	18800115 	stw	r2,4(r3)
   8e460:	a009883a 	mov	r4,r20
   8e464:	009197c0 	call	9197c <__malloc_unlock>
   8e468:	9005883a 	mov	r2,r18
   8e46c:	dfc00917 	ldw	ra,36(sp)
   8e470:	df000817 	ldw	fp,32(sp)
   8e474:	ddc00717 	ldw	r23,28(sp)
   8e478:	dd800617 	ldw	r22,24(sp)
   8e47c:	dd400517 	ldw	r21,20(sp)
   8e480:	dd000417 	ldw	r20,16(sp)
   8e484:	dcc00317 	ldw	r19,12(sp)
   8e488:	dc800217 	ldw	r18,8(sp)
   8e48c:	dc400117 	ldw	r17,4(sp)
   8e490:	dc000017 	ldw	r16,0(sp)
   8e494:	dec00a04 	addi	sp,sp,40
   8e498:	f800283a 	ret
   8e49c:	017fff04 	movi	r5,-4
   8e4a0:	414a703a 	and	r5,r8,r5
   8e4a4:	814d883a 	add	r6,r16,r5
   8e4a8:	30c01f16 	blt	r6,r3,8e528 <_realloc_r+0x22c>
   8e4ac:	20800317 	ldw	r2,12(r4)
   8e4b0:	20c00217 	ldw	r3,8(r4)
   8e4b4:	a825883a 	mov	r18,r21
   8e4b8:	3021883a 	mov	r16,r6
   8e4bc:	18800315 	stw	r2,12(r3)
   8e4c0:	10c00215 	stw	r3,8(r2)
   8e4c4:	003fdb06 	br	8e434 <__alt_data_end+0xfffb8d04>
   8e4c8:	00800304 	movi	r2,12
   8e4cc:	a0800015 	stw	r2,0(r20)
   8e4d0:	0005883a 	mov	r2,zero
   8e4d4:	003fe506 	br	8e46c <__alt_data_end+0xfffb8d3c>
   8e4d8:	98c00117 	ldw	r3,4(r19)
   8e4dc:	9c4b883a 	add	r5,r19,r17
   8e4e0:	11000054 	ori	r4,r2,1
   8e4e4:	18c0004c 	andi	r3,r3,1
   8e4e8:	1c62b03a 	or	r17,r3,r17
   8e4ec:	9c400115 	stw	r17,4(r19)
   8e4f0:	29000115 	stw	r4,4(r5)
   8e4f4:	2885883a 	add	r2,r5,r2
   8e4f8:	10c00117 	ldw	r3,4(r2)
   8e4fc:	29400204 	addi	r5,r5,8
   8e500:	a009883a 	mov	r4,r20
   8e504:	18c00054 	ori	r3,r3,1
   8e508:	10c00115 	stw	r3,4(r2)
   8e50c:	0086dc00 	call	86dc0 <_free_r>
   8e510:	003fd306 	br	8e460 <__alt_data_end+0xfffb8d30>
   8e514:	017fff04 	movi	r5,-4
   8e518:	414a703a 	and	r5,r8,r5
   8e51c:	89800404 	addi	r6,r17,16
   8e520:	8151883a 	add	r8,r16,r5
   8e524:	4180590e 	bge	r8,r6,8e68c <_realloc_r+0x390>
   8e528:	1080004c 	andi	r2,r2,1
   8e52c:	103f9e1e 	bne	r2,zero,8e3a8 <__alt_data_end+0xfffb8c78>
   8e530:	adbffe17 	ldw	r22,-8(r21)
   8e534:	00bfff04 	movi	r2,-4
   8e538:	9dadc83a 	sub	r22,r19,r22
   8e53c:	b1800117 	ldw	r6,4(r22)
   8e540:	3084703a 	and	r2,r6,r2
   8e544:	20002026 	beq	r4,zero,8e5c8 <_realloc_r+0x2cc>
   8e548:	80af883a 	add	r23,r16,r2
   8e54c:	b96f883a 	add	r23,r23,r5
   8e550:	21c05f26 	beq	r4,r7,8e6d0 <_realloc_r+0x3d4>
   8e554:	b8c01c16 	blt	r23,r3,8e5c8 <_realloc_r+0x2cc>
   8e558:	20800317 	ldw	r2,12(r4)
   8e55c:	20c00217 	ldw	r3,8(r4)
   8e560:	81bfff04 	addi	r6,r16,-4
   8e564:	01000904 	movi	r4,36
   8e568:	18800315 	stw	r2,12(r3)
   8e56c:	10c00215 	stw	r3,8(r2)
   8e570:	b0c00217 	ldw	r3,8(r22)
   8e574:	b0800317 	ldw	r2,12(r22)
   8e578:	b4800204 	addi	r18,r22,8
   8e57c:	18800315 	stw	r2,12(r3)
   8e580:	10c00215 	stw	r3,8(r2)
   8e584:	21801b36 	bltu	r4,r6,8e5f4 <_realloc_r+0x2f8>
   8e588:	008004c4 	movi	r2,19
   8e58c:	1180352e 	bgeu	r2,r6,8e664 <_realloc_r+0x368>
   8e590:	a8800017 	ldw	r2,0(r21)
   8e594:	b0800215 	stw	r2,8(r22)
   8e598:	a8800117 	ldw	r2,4(r21)
   8e59c:	b0800315 	stw	r2,12(r22)
   8e5a0:	008006c4 	movi	r2,27
   8e5a4:	11807f36 	bltu	r2,r6,8e7a4 <_realloc_r+0x4a8>
   8e5a8:	b0800404 	addi	r2,r22,16
   8e5ac:	ad400204 	addi	r21,r21,8
   8e5b0:	00002d06 	br	8e668 <_realloc_r+0x36c>
   8e5b4:	adbffe17 	ldw	r22,-8(r21)
   8e5b8:	00bfff04 	movi	r2,-4
   8e5bc:	9dadc83a 	sub	r22,r19,r22
   8e5c0:	b1000117 	ldw	r4,4(r22)
   8e5c4:	2084703a 	and	r2,r4,r2
   8e5c8:	b03f7726 	beq	r22,zero,8e3a8 <__alt_data_end+0xfffb8c78>
   8e5cc:	80af883a 	add	r23,r16,r2
   8e5d0:	b8ff7516 	blt	r23,r3,8e3a8 <__alt_data_end+0xfffb8c78>
   8e5d4:	b0800317 	ldw	r2,12(r22)
   8e5d8:	b0c00217 	ldw	r3,8(r22)
   8e5dc:	81bfff04 	addi	r6,r16,-4
   8e5e0:	01000904 	movi	r4,36
   8e5e4:	18800315 	stw	r2,12(r3)
   8e5e8:	10c00215 	stw	r3,8(r2)
   8e5ec:	b4800204 	addi	r18,r22,8
   8e5f0:	21bfe52e 	bgeu	r4,r6,8e588 <__alt_data_end+0xfffb8e58>
   8e5f4:	a80b883a 	mov	r5,r21
   8e5f8:	9009883a 	mov	r4,r18
   8e5fc:	008d0880 	call	8d088 <memmove>
   8e600:	b821883a 	mov	r16,r23
   8e604:	b027883a 	mov	r19,r22
   8e608:	003f8a06 	br	8e434 <__alt_data_end+0xfffb8d04>
   8e60c:	300b883a 	mov	r5,r6
   8e610:	dfc00917 	ldw	ra,36(sp)
   8e614:	df000817 	ldw	fp,32(sp)
   8e618:	ddc00717 	ldw	r23,28(sp)
   8e61c:	dd800617 	ldw	r22,24(sp)
   8e620:	dd400517 	ldw	r21,20(sp)
   8e624:	dd000417 	ldw	r20,16(sp)
   8e628:	dcc00317 	ldw	r19,12(sp)
   8e62c:	dc800217 	ldw	r18,8(sp)
   8e630:	dc400117 	ldw	r17,4(sp)
   8e634:	dc000017 	ldw	r16,0(sp)
   8e638:	dec00a04 	addi	sp,sp,40
   8e63c:	0087a001 	jmpi	87a00 <_malloc_r>
   8e640:	a8c00017 	ldw	r3,0(r21)
   8e644:	90c00015 	stw	r3,0(r18)
   8e648:	a8c00117 	ldw	r3,4(r21)
   8e64c:	90c00115 	stw	r3,4(r18)
   8e650:	00c006c4 	movi	r3,27
   8e654:	19804536 	bltu	r3,r6,8e76c <_realloc_r+0x470>
   8e658:	90800204 	addi	r2,r18,8
   8e65c:	a8c00204 	addi	r3,r21,8
   8e660:	003f6306 	br	8e3f0 <__alt_data_end+0xfffb8cc0>
   8e664:	9005883a 	mov	r2,r18
   8e668:	a8c00017 	ldw	r3,0(r21)
   8e66c:	b821883a 	mov	r16,r23
   8e670:	b027883a 	mov	r19,r22
   8e674:	10c00015 	stw	r3,0(r2)
   8e678:	a8c00117 	ldw	r3,4(r21)
   8e67c:	10c00115 	stw	r3,4(r2)
   8e680:	a8c00217 	ldw	r3,8(r21)
   8e684:	10c00215 	stw	r3,8(r2)
   8e688:	003f6a06 	br	8e434 <__alt_data_end+0xfffb8d04>
   8e68c:	9c67883a 	add	r19,r19,r17
   8e690:	4445c83a 	sub	r2,r8,r17
   8e694:	e4c00215 	stw	r19,8(fp)
   8e698:	10800054 	ori	r2,r2,1
   8e69c:	98800115 	stw	r2,4(r19)
   8e6a0:	a8bfff17 	ldw	r2,-4(r21)
   8e6a4:	a009883a 	mov	r4,r20
   8e6a8:	1080004c 	andi	r2,r2,1
   8e6ac:	1462b03a 	or	r17,r2,r17
   8e6b0:	ac7fff15 	stw	r17,-4(r21)
   8e6b4:	009197c0 	call	9197c <__malloc_unlock>
   8e6b8:	a805883a 	mov	r2,r21
   8e6bc:	003f6b06 	br	8e46c <__alt_data_end+0xfffb8d3c>
   8e6c0:	a80b883a 	mov	r5,r21
   8e6c4:	9009883a 	mov	r4,r18
   8e6c8:	008d0880 	call	8d088 <memmove>
   8e6cc:	003f4e06 	br	8e408 <__alt_data_end+0xfffb8cd8>
   8e6d0:	89000404 	addi	r4,r17,16
   8e6d4:	b93fbc16 	blt	r23,r4,8e5c8 <__alt_data_end+0xfffb8e98>
   8e6d8:	b0800317 	ldw	r2,12(r22)
   8e6dc:	b0c00217 	ldw	r3,8(r22)
   8e6e0:	81bfff04 	addi	r6,r16,-4
   8e6e4:	01000904 	movi	r4,36
   8e6e8:	18800315 	stw	r2,12(r3)
   8e6ec:	10c00215 	stw	r3,8(r2)
   8e6f0:	b4800204 	addi	r18,r22,8
   8e6f4:	21804336 	bltu	r4,r6,8e804 <_realloc_r+0x508>
   8e6f8:	008004c4 	movi	r2,19
   8e6fc:	11803f2e 	bgeu	r2,r6,8e7fc <_realloc_r+0x500>
   8e700:	a8800017 	ldw	r2,0(r21)
   8e704:	b0800215 	stw	r2,8(r22)
   8e708:	a8800117 	ldw	r2,4(r21)
   8e70c:	b0800315 	stw	r2,12(r22)
   8e710:	008006c4 	movi	r2,27
   8e714:	11803f36 	bltu	r2,r6,8e814 <_realloc_r+0x518>
   8e718:	b0800404 	addi	r2,r22,16
   8e71c:	ad400204 	addi	r21,r21,8
   8e720:	a8c00017 	ldw	r3,0(r21)
   8e724:	10c00015 	stw	r3,0(r2)
   8e728:	a8c00117 	ldw	r3,4(r21)
   8e72c:	10c00115 	stw	r3,4(r2)
   8e730:	a8c00217 	ldw	r3,8(r21)
   8e734:	10c00215 	stw	r3,8(r2)
   8e738:	b447883a 	add	r3,r22,r17
   8e73c:	bc45c83a 	sub	r2,r23,r17
   8e740:	e0c00215 	stw	r3,8(fp)
   8e744:	10800054 	ori	r2,r2,1
   8e748:	18800115 	stw	r2,4(r3)
   8e74c:	b0800117 	ldw	r2,4(r22)
   8e750:	a009883a 	mov	r4,r20
   8e754:	1080004c 	andi	r2,r2,1
   8e758:	1462b03a 	or	r17,r2,r17
   8e75c:	b4400115 	stw	r17,4(r22)
   8e760:	009197c0 	call	9197c <__malloc_unlock>
   8e764:	9005883a 	mov	r2,r18
   8e768:	003f4006 	br	8e46c <__alt_data_end+0xfffb8d3c>
   8e76c:	a8c00217 	ldw	r3,8(r21)
   8e770:	90c00215 	stw	r3,8(r18)
   8e774:	a8c00317 	ldw	r3,12(r21)
   8e778:	90c00315 	stw	r3,12(r18)
   8e77c:	30801126 	beq	r6,r2,8e7c4 <_realloc_r+0x4c8>
   8e780:	90800404 	addi	r2,r18,16
   8e784:	a8c00404 	addi	r3,r21,16
   8e788:	003f1906 	br	8e3f0 <__alt_data_end+0xfffb8cc0>
   8e78c:	90ffff17 	ldw	r3,-4(r18)
   8e790:	00bfff04 	movi	r2,-4
   8e794:	a825883a 	mov	r18,r21
   8e798:	1884703a 	and	r2,r3,r2
   8e79c:	80a1883a 	add	r16,r16,r2
   8e7a0:	003f2406 	br	8e434 <__alt_data_end+0xfffb8d04>
   8e7a4:	a8800217 	ldw	r2,8(r21)
   8e7a8:	b0800415 	stw	r2,16(r22)
   8e7ac:	a8800317 	ldw	r2,12(r21)
   8e7b0:	b0800515 	stw	r2,20(r22)
   8e7b4:	31000a26 	beq	r6,r4,8e7e0 <_realloc_r+0x4e4>
   8e7b8:	b0800604 	addi	r2,r22,24
   8e7bc:	ad400404 	addi	r21,r21,16
   8e7c0:	003fa906 	br	8e668 <__alt_data_end+0xfffb8f38>
   8e7c4:	a9000417 	ldw	r4,16(r21)
   8e7c8:	90800604 	addi	r2,r18,24
   8e7cc:	a8c00604 	addi	r3,r21,24
   8e7d0:	91000415 	stw	r4,16(r18)
   8e7d4:	a9000517 	ldw	r4,20(r21)
   8e7d8:	91000515 	stw	r4,20(r18)
   8e7dc:	003f0406 	br	8e3f0 <__alt_data_end+0xfffb8cc0>
   8e7e0:	a8c00417 	ldw	r3,16(r21)
   8e7e4:	ad400604 	addi	r21,r21,24
   8e7e8:	b0800804 	addi	r2,r22,32
   8e7ec:	b0c00615 	stw	r3,24(r22)
   8e7f0:	a8ffff17 	ldw	r3,-4(r21)
   8e7f4:	b0c00715 	stw	r3,28(r22)
   8e7f8:	003f9b06 	br	8e668 <__alt_data_end+0xfffb8f38>
   8e7fc:	9005883a 	mov	r2,r18
   8e800:	003fc706 	br	8e720 <__alt_data_end+0xfffb8ff0>
   8e804:	a80b883a 	mov	r5,r21
   8e808:	9009883a 	mov	r4,r18
   8e80c:	008d0880 	call	8d088 <memmove>
   8e810:	003fc906 	br	8e738 <__alt_data_end+0xfffb9008>
   8e814:	a8800217 	ldw	r2,8(r21)
   8e818:	b0800415 	stw	r2,16(r22)
   8e81c:	a8800317 	ldw	r2,12(r21)
   8e820:	b0800515 	stw	r2,20(r22)
   8e824:	31000726 	beq	r6,r4,8e844 <_realloc_r+0x548>
   8e828:	b0800604 	addi	r2,r22,24
   8e82c:	ad400404 	addi	r21,r21,16
   8e830:	003fbb06 	br	8e720 <__alt_data_end+0xfffb8ff0>
   8e834:	a009883a 	mov	r4,r20
   8e838:	009197c0 	call	9197c <__malloc_unlock>
   8e83c:	0005883a 	mov	r2,zero
   8e840:	003f0a06 	br	8e46c <__alt_data_end+0xfffb8d3c>
   8e844:	a8c00417 	ldw	r3,16(r21)
   8e848:	ad400604 	addi	r21,r21,24
   8e84c:	b0800804 	addi	r2,r22,32
   8e850:	b0c00615 	stw	r3,24(r22)
   8e854:	a8ffff17 	ldw	r3,-4(r21)
   8e858:	b0c00715 	stw	r3,28(r22)
   8e85c:	003fb006 	br	8e720 <__alt_data_end+0xfffb8ff0>

0008e860 <__fpclassifyd>:
   8e860:	00a00034 	movhi	r2,32768
   8e864:	10bfffc4 	addi	r2,r2,-1
   8e868:	2884703a 	and	r2,r5,r2
   8e86c:	10000726 	beq	r2,zero,8e88c <__fpclassifyd+0x2c>
   8e870:	00fffc34 	movhi	r3,65520
   8e874:	019ff834 	movhi	r6,32736
   8e878:	28c7883a 	add	r3,r5,r3
   8e87c:	31bfffc4 	addi	r6,r6,-1
   8e880:	30c00536 	bltu	r6,r3,8e898 <__fpclassifyd+0x38>
   8e884:	00800104 	movi	r2,4
   8e888:	f800283a 	ret
   8e88c:	2000021e 	bne	r4,zero,8e898 <__fpclassifyd+0x38>
   8e890:	00800084 	movi	r2,2
   8e894:	f800283a 	ret
   8e898:	00dffc34 	movhi	r3,32752
   8e89c:	019ff834 	movhi	r6,32736
   8e8a0:	28cb883a 	add	r5,r5,r3
   8e8a4:	31bfffc4 	addi	r6,r6,-1
   8e8a8:	317ff62e 	bgeu	r6,r5,8e884 <__alt_data_end+0xfffb9154>
   8e8ac:	01400434 	movhi	r5,16
   8e8b0:	297fffc4 	addi	r5,r5,-1
   8e8b4:	28800236 	bltu	r5,r2,8e8c0 <__fpclassifyd+0x60>
   8e8b8:	008000c4 	movi	r2,3
   8e8bc:	f800283a 	ret
   8e8c0:	10c00226 	beq	r2,r3,8e8cc <__fpclassifyd+0x6c>
   8e8c4:	0005883a 	mov	r2,zero
   8e8c8:	f800283a 	ret
   8e8cc:	2005003a 	cmpeq	r2,r4,zero
   8e8d0:	f800283a 	ret

0008e8d4 <strcmp>:
   8e8d4:	2144b03a 	or	r2,r4,r5
   8e8d8:	108000cc 	andi	r2,r2,3
   8e8dc:	1000171e 	bne	r2,zero,8e93c <strcmp+0x68>
   8e8e0:	20800017 	ldw	r2,0(r4)
   8e8e4:	28c00017 	ldw	r3,0(r5)
   8e8e8:	10c0141e 	bne	r2,r3,8e93c <strcmp+0x68>
   8e8ec:	027fbff4 	movhi	r9,65279
   8e8f0:	4a7fbfc4 	addi	r9,r9,-257
   8e8f4:	0086303a 	nor	r3,zero,r2
   8e8f8:	02202074 	movhi	r8,32897
   8e8fc:	1245883a 	add	r2,r2,r9
   8e900:	42202004 	addi	r8,r8,-32640
   8e904:	10c4703a 	and	r2,r2,r3
   8e908:	1204703a 	and	r2,r2,r8
   8e90c:	10000226 	beq	r2,zero,8e918 <strcmp+0x44>
   8e910:	00002306 	br	8e9a0 <strcmp+0xcc>
   8e914:	1000221e 	bne	r2,zero,8e9a0 <strcmp+0xcc>
   8e918:	21000104 	addi	r4,r4,4
   8e91c:	20c00017 	ldw	r3,0(r4)
   8e920:	29400104 	addi	r5,r5,4
   8e924:	29800017 	ldw	r6,0(r5)
   8e928:	1a4f883a 	add	r7,r3,r9
   8e92c:	00c4303a 	nor	r2,zero,r3
   8e930:	3884703a 	and	r2,r7,r2
   8e934:	1204703a 	and	r2,r2,r8
   8e938:	19bff626 	beq	r3,r6,8e914 <__alt_data_end+0xfffb91e4>
   8e93c:	20800003 	ldbu	r2,0(r4)
   8e940:	10c03fcc 	andi	r3,r2,255
   8e944:	18c0201c 	xori	r3,r3,128
   8e948:	18ffe004 	addi	r3,r3,-128
   8e94c:	18000c26 	beq	r3,zero,8e980 <strcmp+0xac>
   8e950:	29800007 	ldb	r6,0(r5)
   8e954:	19800326 	beq	r3,r6,8e964 <strcmp+0x90>
   8e958:	00001306 	br	8e9a8 <strcmp+0xd4>
   8e95c:	29800007 	ldb	r6,0(r5)
   8e960:	11800b1e 	bne	r2,r6,8e990 <strcmp+0xbc>
   8e964:	21000044 	addi	r4,r4,1
   8e968:	20c00003 	ldbu	r3,0(r4)
   8e96c:	29400044 	addi	r5,r5,1
   8e970:	18803fcc 	andi	r2,r3,255
   8e974:	1080201c 	xori	r2,r2,128
   8e978:	10bfe004 	addi	r2,r2,-128
   8e97c:	103ff71e 	bne	r2,zero,8e95c <__alt_data_end+0xfffb922c>
   8e980:	0007883a 	mov	r3,zero
   8e984:	28800003 	ldbu	r2,0(r5)
   8e988:	1885c83a 	sub	r2,r3,r2
   8e98c:	f800283a 	ret
   8e990:	28800003 	ldbu	r2,0(r5)
   8e994:	18c03fcc 	andi	r3,r3,255
   8e998:	1885c83a 	sub	r2,r3,r2
   8e99c:	f800283a 	ret
   8e9a0:	0005883a 	mov	r2,zero
   8e9a4:	f800283a 	ret
   8e9a8:	10c03fcc 	andi	r3,r2,255
   8e9ac:	003ff506 	br	8e984 <__alt_data_end+0xfffb9254>

0008e9b0 <__sprint_r.part.0>:
   8e9b0:	28801917 	ldw	r2,100(r5)
   8e9b4:	defff604 	addi	sp,sp,-40
   8e9b8:	dd400515 	stw	r21,20(sp)
   8e9bc:	dfc00915 	stw	ra,36(sp)
   8e9c0:	df000815 	stw	fp,32(sp)
   8e9c4:	ddc00715 	stw	r23,28(sp)
   8e9c8:	dd800615 	stw	r22,24(sp)
   8e9cc:	dd000415 	stw	r20,16(sp)
   8e9d0:	dcc00315 	stw	r19,12(sp)
   8e9d4:	dc800215 	stw	r18,8(sp)
   8e9d8:	dc400115 	stw	r17,4(sp)
   8e9dc:	dc000015 	stw	r16,0(sp)
   8e9e0:	1088000c 	andi	r2,r2,8192
   8e9e4:	302b883a 	mov	r21,r6
   8e9e8:	10002e26 	beq	r2,zero,8eaa4 <__sprint_r.part.0+0xf4>
   8e9ec:	30800217 	ldw	r2,8(r6)
   8e9f0:	35800017 	ldw	r22,0(r6)
   8e9f4:	10002926 	beq	r2,zero,8ea9c <__sprint_r.part.0+0xec>
   8e9f8:	2827883a 	mov	r19,r5
   8e9fc:	2029883a 	mov	r20,r4
   8ea00:	b5c00104 	addi	r23,r22,4
   8ea04:	04bfffc4 	movi	r18,-1
   8ea08:	bc400017 	ldw	r17,0(r23)
   8ea0c:	b4000017 	ldw	r16,0(r22)
   8ea10:	0039883a 	mov	fp,zero
   8ea14:	8822d0ba 	srli	r17,r17,2
   8ea18:	8800031e 	bne	r17,zero,8ea28 <__sprint_r.part.0+0x78>
   8ea1c:	00001806 	br	8ea80 <__sprint_r.part.0+0xd0>
   8ea20:	84000104 	addi	r16,r16,4
   8ea24:	8f001526 	beq	r17,fp,8ea7c <__sprint_r.part.0+0xcc>
   8ea28:	81400017 	ldw	r5,0(r16)
   8ea2c:	980d883a 	mov	r6,r19
   8ea30:	a009883a 	mov	r4,r20
   8ea34:	00902e80 	call	902e8 <_fputwc_r>
   8ea38:	e7000044 	addi	fp,fp,1
   8ea3c:	14bff81e 	bne	r2,r18,8ea20 <__alt_data_end+0xfffb92f0>
   8ea40:	9005883a 	mov	r2,r18
   8ea44:	a8000215 	stw	zero,8(r21)
   8ea48:	a8000115 	stw	zero,4(r21)
   8ea4c:	dfc00917 	ldw	ra,36(sp)
   8ea50:	df000817 	ldw	fp,32(sp)
   8ea54:	ddc00717 	ldw	r23,28(sp)
   8ea58:	dd800617 	ldw	r22,24(sp)
   8ea5c:	dd400517 	ldw	r21,20(sp)
   8ea60:	dd000417 	ldw	r20,16(sp)
   8ea64:	dcc00317 	ldw	r19,12(sp)
   8ea68:	dc800217 	ldw	r18,8(sp)
   8ea6c:	dc400117 	ldw	r17,4(sp)
   8ea70:	dc000017 	ldw	r16,0(sp)
   8ea74:	dec00a04 	addi	sp,sp,40
   8ea78:	f800283a 	ret
   8ea7c:	a8800217 	ldw	r2,8(r21)
   8ea80:	8c63883a 	add	r17,r17,r17
   8ea84:	8c63883a 	add	r17,r17,r17
   8ea88:	1445c83a 	sub	r2,r2,r17
   8ea8c:	a8800215 	stw	r2,8(r21)
   8ea90:	b5800204 	addi	r22,r22,8
   8ea94:	bdc00204 	addi	r23,r23,8
   8ea98:	103fdb1e 	bne	r2,zero,8ea08 <__alt_data_end+0xfffb92d8>
   8ea9c:	0005883a 	mov	r2,zero
   8eaa0:	003fe806 	br	8ea44 <__alt_data_end+0xfffb9314>
   8eaa4:	008c8040 	call	8c804 <__sfvwrite_r>
   8eaa8:	003fe606 	br	8ea44 <__alt_data_end+0xfffb9314>

0008eaac <__sprint_r>:
   8eaac:	30c00217 	ldw	r3,8(r6)
   8eab0:	18000126 	beq	r3,zero,8eab8 <__sprint_r+0xc>
   8eab4:	008e9b01 	jmpi	8e9b0 <__sprint_r.part.0>
   8eab8:	30000115 	stw	zero,4(r6)
   8eabc:	0005883a 	mov	r2,zero
   8eac0:	f800283a 	ret

0008eac4 <___vfiprintf_internal_r>:
   8eac4:	deffca04 	addi	sp,sp,-216
   8eac8:	dd403115 	stw	r21,196(sp)
   8eacc:	dfc03515 	stw	ra,212(sp)
   8ead0:	df003415 	stw	fp,208(sp)
   8ead4:	ddc03315 	stw	r23,204(sp)
   8ead8:	dd803215 	stw	r22,200(sp)
   8eadc:	dd003015 	stw	r20,192(sp)
   8eae0:	dcc02f15 	stw	r19,188(sp)
   8eae4:	dc802e15 	stw	r18,184(sp)
   8eae8:	dc402d15 	stw	r17,180(sp)
   8eaec:	dc002c15 	stw	r16,176(sp)
   8eaf0:	d9002115 	stw	r4,132(sp)
   8eaf4:	d9402015 	stw	r5,128(sp)
   8eaf8:	d9c02215 	stw	r7,136(sp)
   8eafc:	302b883a 	mov	r21,r6
   8eb00:	20000226 	beq	r4,zero,8eb0c <___vfiprintf_internal_r+0x48>
   8eb04:	20800e17 	ldw	r2,56(r4)
   8eb08:	1000cf26 	beq	r2,zero,8ee48 <___vfiprintf_internal_r+0x384>
   8eb0c:	d8c02017 	ldw	r3,128(sp)
   8eb10:	1880030b 	ldhu	r2,12(r3)
   8eb14:	10c8000c 	andi	r3,r2,8192
   8eb18:	1800071e 	bne	r3,zero,8eb38 <___vfiprintf_internal_r+0x74>
   8eb1c:	d9402017 	ldw	r5,128(sp)
   8eb20:	00f7ffc4 	movi	r3,-8193
   8eb24:	10880014 	ori	r2,r2,8192
   8eb28:	29001917 	ldw	r4,100(r5)
   8eb2c:	2880030d 	sth	r2,12(r5)
   8eb30:	20c6703a 	and	r3,r4,r3
   8eb34:	28c01915 	stw	r3,100(r5)
   8eb38:	10c0020c 	andi	r3,r2,8
   8eb3c:	1800a526 	beq	r3,zero,8edd4 <___vfiprintf_internal_r+0x310>
   8eb40:	d9002017 	ldw	r4,128(sp)
   8eb44:	20c00417 	ldw	r3,16(r4)
   8eb48:	1800a226 	beq	r3,zero,8edd4 <___vfiprintf_internal_r+0x310>
   8eb4c:	1080068c 	andi	r2,r2,26
   8eb50:	00c00284 	movi	r3,10
   8eb54:	10c0a826 	beq	r2,r3,8edf8 <___vfiprintf_internal_r+0x334>
   8eb58:	d9001a04 	addi	r4,sp,104
   8eb5c:	d94019c4 	addi	r5,sp,103
   8eb60:	04800274 	movhi	r18,9
   8eb64:	2145c83a 	sub	r2,r4,r5
   8eb68:	9490cd04 	addi	r18,r18,17204
   8eb6c:	d9001e15 	stw	r4,120(sp)
   8eb70:	d9401f15 	stw	r5,124(sp)
   8eb74:	dec01a15 	stw	sp,104(sp)
   8eb78:	d8001c15 	stw	zero,112(sp)
   8eb7c:	d8001b15 	stw	zero,108(sp)
   8eb80:	d811883a 	mov	r8,sp
   8eb84:	d8002615 	stw	zero,152(sp)
   8eb88:	d8002415 	stw	zero,144(sp)
   8eb8c:	d8802815 	stw	r2,160(sp)
   8eb90:	a82d883a 	mov	r22,r21
   8eb94:	b0800007 	ldb	r2,0(r22)
   8eb98:	10040d26 	beq	r2,zero,8fbd0 <___vfiprintf_internal_r+0x110c>
   8eb9c:	00c00944 	movi	r3,37
   8eba0:	b029883a 	mov	r20,r22
   8eba4:	10c0021e 	bne	r2,r3,8ebb0 <___vfiprintf_internal_r+0xec>
   8eba8:	00001606 	br	8ec04 <___vfiprintf_internal_r+0x140>
   8ebac:	10c00326 	beq	r2,r3,8ebbc <___vfiprintf_internal_r+0xf8>
   8ebb0:	a5000044 	addi	r20,r20,1
   8ebb4:	a0800007 	ldb	r2,0(r20)
   8ebb8:	103ffc1e 	bne	r2,zero,8ebac <__alt_data_end+0xfffb947c>
   8ebbc:	a5a1c83a 	sub	r16,r20,r22
   8ebc0:	80001026 	beq	r16,zero,8ec04 <___vfiprintf_internal_r+0x140>
   8ebc4:	d8c01c17 	ldw	r3,112(sp)
   8ebc8:	d8801b17 	ldw	r2,108(sp)
   8ebcc:	45800015 	stw	r22,0(r8)
   8ebd0:	80c7883a 	add	r3,r16,r3
   8ebd4:	10800044 	addi	r2,r2,1
   8ebd8:	44000115 	stw	r16,4(r8)
   8ebdc:	d8c01c15 	stw	r3,112(sp)
   8ebe0:	d8801b15 	stw	r2,108(sp)
   8ebe4:	010001c4 	movi	r4,7
   8ebe8:	2080750e 	bge	r4,r2,8edc0 <___vfiprintf_internal_r+0x2fc>
   8ebec:	1803951e 	bne	r3,zero,8fa44 <___vfiprintf_internal_r+0xf80>
   8ebf0:	d8c02417 	ldw	r3,144(sp)
   8ebf4:	d8001b15 	stw	zero,108(sp)
   8ebf8:	d811883a 	mov	r8,sp
   8ebfc:	1c07883a 	add	r3,r3,r16
   8ec00:	d8c02415 	stw	r3,144(sp)
   8ec04:	a0800007 	ldb	r2,0(r20)
   8ec08:	1002e026 	beq	r2,zero,8f78c <___vfiprintf_internal_r+0xcc8>
   8ec0c:	a5800044 	addi	r22,r20,1
   8ec10:	a0c00047 	ldb	r3,1(r20)
   8ec14:	d8001d85 	stb	zero,118(sp)
   8ec18:	0027883a 	mov	r19,zero
   8ec1c:	d8002305 	stb	zero,140(sp)
   8ec20:	043fffc4 	movi	r16,-1
   8ec24:	d8002515 	stw	zero,148(sp)
   8ec28:	0023883a 	mov	r17,zero
   8ec2c:	05001604 	movi	r20,88
   8ec30:	05400244 	movi	r21,9
   8ec34:	402f883a 	mov	r23,r8
   8ec38:	b5800044 	addi	r22,r22,1
   8ec3c:	18bff804 	addi	r2,r3,-32
   8ec40:	a0827736 	bltu	r20,r2,8f620 <___vfiprintf_internal_r+0xb5c>
   8ec44:	100490ba 	slli	r2,r2,2
   8ec48:	01000274 	movhi	r4,9
   8ec4c:	213b1704 	addi	r4,r4,-5028
   8ec50:	1105883a 	add	r2,r2,r4
   8ec54:	10800017 	ldw	r2,0(r2)
   8ec58:	1000683a 	jmp	r2
   8ec5c:	0008f320 	cmpeqi	zero,zero,9164
   8ec60:	0008f620 	cmpeqi	zero,zero,9176
   8ec64:	0008f620 	cmpeqi	zero,zero,9176
   8ec68:	0008f33c 	xorhi	zero,zero,9164
   8ec6c:	0008f620 	cmpeqi	zero,zero,9176
   8ec70:	0008f620 	cmpeqi	zero,zero,9176
   8ec74:	0008f620 	cmpeqi	zero,zero,9176
   8ec78:	0008f620 	cmpeqi	zero,zero,9176
   8ec7c:	0008f620 	cmpeqi	zero,zero,9176
   8ec80:	0008f620 	cmpeqi	zero,zero,9176
   8ec84:	0008f544 	movi	zero,9173
   8ec88:	0008f568 	cmpgeui	zero,zero,9173
   8ec8c:	0008f620 	cmpeqi	zero,zero,9176
   8ec90:	0008ee60 	cmpeqi	zero,zero,9145
   8ec94:	0008f57c 	xorhi	zero,zero,9173
   8ec98:	0008f620 	cmpeqi	zero,zero,9176
   8ec9c:	0008f348 	cmpgei	zero,zero,9165
   8eca0:	0008f354 	movui	zero,9165
   8eca4:	0008f354 	movui	zero,9165
   8eca8:	0008f354 	movui	zero,9165
   8ecac:	0008f354 	movui	zero,9165
   8ecb0:	0008f354 	movui	zero,9165
   8ecb4:	0008f354 	movui	zero,9165
   8ecb8:	0008f354 	movui	zero,9165
   8ecbc:	0008f354 	movui	zero,9165
   8ecc0:	0008f354 	movui	zero,9165
   8ecc4:	0008f620 	cmpeqi	zero,zero,9176
   8ecc8:	0008f620 	cmpeqi	zero,zero,9176
   8eccc:	0008f620 	cmpeqi	zero,zero,9176
   8ecd0:	0008f620 	cmpeqi	zero,zero,9176
   8ecd4:	0008f620 	cmpeqi	zero,zero,9176
   8ecd8:	0008f620 	cmpeqi	zero,zero,9176
   8ecdc:	0008f620 	cmpeqi	zero,zero,9176
   8ece0:	0008f620 	cmpeqi	zero,zero,9176
   8ece4:	0008f620 	cmpeqi	zero,zero,9176
   8ece8:	0008f620 	cmpeqi	zero,zero,9176
   8ecec:	0008f394 	movui	zero,9166
   8ecf0:	0008f620 	cmpeqi	zero,zero,9176
   8ecf4:	0008f620 	cmpeqi	zero,zero,9176
   8ecf8:	0008f620 	cmpeqi	zero,zero,9176
   8ecfc:	0008f620 	cmpeqi	zero,zero,9176
   8ed00:	0008f620 	cmpeqi	zero,zero,9176
   8ed04:	0008f620 	cmpeqi	zero,zero,9176
   8ed08:	0008f620 	cmpeqi	zero,zero,9176
   8ed0c:	0008f620 	cmpeqi	zero,zero,9176
   8ed10:	0008f620 	cmpeqi	zero,zero,9176
   8ed14:	0008f620 	cmpeqi	zero,zero,9176
   8ed18:	0008f3d0 	cmplti	zero,zero,9167
   8ed1c:	0008f620 	cmpeqi	zero,zero,9176
   8ed20:	0008f620 	cmpeqi	zero,zero,9176
   8ed24:	0008f620 	cmpeqi	zero,zero,9176
   8ed28:	0008f620 	cmpeqi	zero,zero,9176
   8ed2c:	0008f620 	cmpeqi	zero,zero,9176
   8ed30:	0008f42c 	andhi	zero,zero,9168
   8ed34:	0008f620 	cmpeqi	zero,zero,9176
   8ed38:	0008f620 	cmpeqi	zero,zero,9176
   8ed3c:	0008f4a0 	cmpeqi	zero,zero,9170
   8ed40:	0008f620 	cmpeqi	zero,zero,9176
   8ed44:	0008f620 	cmpeqi	zero,zero,9176
   8ed48:	0008f620 	cmpeqi	zero,zero,9176
   8ed4c:	0008f620 	cmpeqi	zero,zero,9176
   8ed50:	0008f620 	cmpeqi	zero,zero,9176
   8ed54:	0008f620 	cmpeqi	zero,zero,9176
   8ed58:	0008f620 	cmpeqi	zero,zero,9176
   8ed5c:	0008f620 	cmpeqi	zero,zero,9176
   8ed60:	0008f620 	cmpeqi	zero,zero,9176
   8ed64:	0008f620 	cmpeqi	zero,zero,9176
   8ed68:	0008f248 	cmpgei	zero,zero,9161
   8ed6c:	0008f278 	rdprs	zero,zero,9161
   8ed70:	0008f620 	cmpeqi	zero,zero,9176
   8ed74:	0008f620 	cmpeqi	zero,zero,9176
   8ed78:	0008f620 	cmpeqi	zero,zero,9176
   8ed7c:	0008f5c8 	cmpgei	zero,zero,9175
   8ed80:	0008f278 	rdprs	zero,zero,9161
   8ed84:	0008f620 	cmpeqi	zero,zero,9176
   8ed88:	0008f620 	cmpeqi	zero,zero,9176
   8ed8c:	0008f120 	cmpeqi	zero,zero,9156
   8ed90:	0008f620 	cmpeqi	zero,zero,9176
   8ed94:	0008f134 	movhi	zero,9156
   8ed98:	0008f16c 	andhi	zero,zero,9157
   8ed9c:	0008ee6c 	andhi	zero,zero,9145
   8eda0:	0008f114 	movui	zero,9156
   8eda4:	0008f620 	cmpeqi	zero,zero,9176
   8eda8:	0008f4e0 	cmpeqi	zero,zero,9171
   8edac:	0008f620 	cmpeqi	zero,zero,9176
   8edb0:	0008f52c 	andhi	zero,zero,9172
   8edb4:	0008f620 	cmpeqi	zero,zero,9176
   8edb8:	0008f620 	cmpeqi	zero,zero,9176
   8edbc:	0008f1f0 	cmpltui	zero,zero,9159
   8edc0:	42000204 	addi	r8,r8,8
   8edc4:	d8c02417 	ldw	r3,144(sp)
   8edc8:	1c07883a 	add	r3,r3,r16
   8edcc:	d8c02415 	stw	r3,144(sp)
   8edd0:	003f8c06 	br	8ec04 <__alt_data_end+0xfffb94d4>
   8edd4:	d9402017 	ldw	r5,128(sp)
   8edd8:	d9002117 	ldw	r4,132(sp)
   8eddc:	008ad000 	call	8ad00 <__swsetup_r>
   8ede0:	1003c11e 	bne	r2,zero,8fce8 <___vfiprintf_internal_r+0x1224>
   8ede4:	d9402017 	ldw	r5,128(sp)
   8ede8:	00c00284 	movi	r3,10
   8edec:	2880030b 	ldhu	r2,12(r5)
   8edf0:	1080068c 	andi	r2,r2,26
   8edf4:	10ff581e 	bne	r2,r3,8eb58 <__alt_data_end+0xfffb9428>
   8edf8:	d8c02017 	ldw	r3,128(sp)
   8edfc:	1880038f 	ldh	r2,14(r3)
   8ee00:	103f5516 	blt	r2,zero,8eb58 <__alt_data_end+0xfffb9428>
   8ee04:	d9c02217 	ldw	r7,136(sp)
   8ee08:	d9002117 	ldw	r4,132(sp)
   8ee0c:	a80d883a 	mov	r6,r21
   8ee10:	180b883a 	mov	r5,r3
   8ee14:	008ffec0 	call	8ffec <__sbprintf>
   8ee18:	dfc03517 	ldw	ra,212(sp)
   8ee1c:	df003417 	ldw	fp,208(sp)
   8ee20:	ddc03317 	ldw	r23,204(sp)
   8ee24:	dd803217 	ldw	r22,200(sp)
   8ee28:	dd403117 	ldw	r21,196(sp)
   8ee2c:	dd003017 	ldw	r20,192(sp)
   8ee30:	dcc02f17 	ldw	r19,188(sp)
   8ee34:	dc802e17 	ldw	r18,184(sp)
   8ee38:	dc402d17 	ldw	r17,180(sp)
   8ee3c:	dc002c17 	ldw	r16,176(sp)
   8ee40:	dec03604 	addi	sp,sp,216
   8ee44:	f800283a 	ret
   8ee48:	0086b400 	call	86b40 <__sinit>
   8ee4c:	003f2f06 	br	8eb0c <__alt_data_end+0xfffb93dc>
   8ee50:	d8c02517 	ldw	r3,148(sp)
   8ee54:	d8802215 	stw	r2,136(sp)
   8ee58:	00c7c83a 	sub	r3,zero,r3
   8ee5c:	d8c02515 	stw	r3,148(sp)
   8ee60:	8c400114 	ori	r17,r17,4
   8ee64:	b0c00007 	ldb	r3,0(r22)
   8ee68:	003f7306 	br	8ec38 <__alt_data_end+0xfffb9508>
   8ee6c:	00800c04 	movi	r2,48
   8ee70:	d9402217 	ldw	r5,136(sp)
   8ee74:	d8801d05 	stb	r2,116(sp)
   8ee78:	00801e04 	movi	r2,120
   8ee7c:	d8801d45 	stb	r2,117(sp)
   8ee80:	d8001d85 	stb	zero,118(sp)
   8ee84:	b811883a 	mov	r8,r23
   8ee88:	28c00104 	addi	r3,r5,4
   8ee8c:	2cc00017 	ldw	r19,0(r5)
   8ee90:	0029883a 	mov	r20,zero
   8ee94:	88800094 	ori	r2,r17,2
   8ee98:	80032516 	blt	r16,zero,8fb30 <___vfiprintf_internal_r+0x106c>
   8ee9c:	00bfdfc4 	movi	r2,-129
   8eea0:	88a2703a 	and	r17,r17,r2
   8eea4:	d8c02215 	stw	r3,136(sp)
   8eea8:	8c400094 	ori	r17,r17,2
   8eeac:	98032a1e 	bne	r19,zero,8fb58 <___vfiprintf_internal_r+0x1094>
   8eeb0:	00800274 	movhi	r2,9
   8eeb4:	10906d04 	addi	r2,r2,16820
   8eeb8:	d8802615 	stw	r2,152(sp)
   8eebc:	002b883a 	mov	r21,zero
   8eec0:	8001741e 	bne	r16,zero,8f494 <___vfiprintf_internal_r+0x9d0>
   8eec4:	0021883a 	mov	r16,zero
   8eec8:	0029883a 	mov	r20,zero
   8eecc:	ddc01a04 	addi	r23,sp,104
   8eed0:	8027883a 	mov	r19,r16
   8eed4:	8500010e 	bge	r16,r20,8eedc <___vfiprintf_internal_r+0x418>
   8eed8:	a027883a 	mov	r19,r20
   8eedc:	ad403fcc 	andi	r21,r21,255
   8eee0:	ad40201c 	xori	r21,r21,128
   8eee4:	ad7fe004 	addi	r21,r21,-128
   8eee8:	a8000126 	beq	r21,zero,8eef0 <___vfiprintf_internal_r+0x42c>
   8eeec:	9cc00044 	addi	r19,r19,1
   8eef0:	89c0008c 	andi	r7,r17,2
   8eef4:	38000126 	beq	r7,zero,8eefc <___vfiprintf_internal_r+0x438>
   8eef8:	9cc00084 	addi	r19,r19,2
   8eefc:	88c0210c 	andi	r3,r17,132
   8ef00:	1801dd1e 	bne	r3,zero,8f678 <___vfiprintf_internal_r+0xbb4>
   8ef04:	d9402517 	ldw	r5,148(sp)
   8ef08:	2cebc83a 	sub	r21,r5,r19
   8ef0c:	0541da0e 	bge	zero,r21,8f678 <___vfiprintf_internal_r+0xbb4>
   8ef10:	07000404 	movi	fp,16
   8ef14:	d8801c17 	ldw	r2,112(sp)
   8ef18:	e543be0e 	bge	fp,r21,8fe14 <___vfiprintf_internal_r+0x1350>
   8ef1c:	01400274 	movhi	r5,9
   8ef20:	2950d104 	addi	r5,r5,17220
   8ef24:	dc002715 	stw	r16,156(sp)
   8ef28:	d9801b17 	ldw	r6,108(sp)
   8ef2c:	a821883a 	mov	r16,r21
   8ef30:	d9402315 	stw	r5,140(sp)
   8ef34:	028001c4 	movi	r10,7
   8ef38:	d9c02915 	stw	r7,164(sp)
   8ef3c:	182b883a 	mov	r21,r3
   8ef40:	00000506 	br	8ef58 <___vfiprintf_internal_r+0x494>
   8ef44:	31000084 	addi	r4,r6,2
   8ef48:	42000204 	addi	r8,r8,8
   8ef4c:	180d883a 	mov	r6,r3
   8ef50:	843ffc04 	addi	r16,r16,-16
   8ef54:	e4000f0e 	bge	fp,r16,8ef94 <___vfiprintf_internal_r+0x4d0>
   8ef58:	01000274 	movhi	r4,9
   8ef5c:	10800404 	addi	r2,r2,16
   8ef60:	30c00044 	addi	r3,r6,1
   8ef64:	2110d104 	addi	r4,r4,17220
   8ef68:	41000015 	stw	r4,0(r8)
   8ef6c:	47000115 	stw	fp,4(r8)
   8ef70:	d8801c15 	stw	r2,112(sp)
   8ef74:	d8c01b15 	stw	r3,108(sp)
   8ef78:	50fff20e 	bge	r10,r3,8ef44 <__alt_data_end+0xfffb9814>
   8ef7c:	1001b21e 	bne	r2,zero,8f648 <___vfiprintf_internal_r+0xb84>
   8ef80:	843ffc04 	addi	r16,r16,-16
   8ef84:	000d883a 	mov	r6,zero
   8ef88:	01000044 	movi	r4,1
   8ef8c:	d811883a 	mov	r8,sp
   8ef90:	e43ff116 	blt	fp,r16,8ef58 <__alt_data_end+0xfffb9828>
   8ef94:	a807883a 	mov	r3,r21
   8ef98:	d9c02917 	ldw	r7,164(sp)
   8ef9c:	802b883a 	mov	r21,r16
   8efa0:	dc002717 	ldw	r16,156(sp)
   8efa4:	d9402317 	ldw	r5,140(sp)
   8efa8:	a885883a 	add	r2,r21,r2
   8efac:	45400115 	stw	r21,4(r8)
   8efb0:	41400015 	stw	r5,0(r8)
   8efb4:	d8801c15 	stw	r2,112(sp)
   8efb8:	d9001b15 	stw	r4,108(sp)
   8efbc:	014001c4 	movi	r5,7
   8efc0:	29026216 	blt	r5,r4,8f94c <___vfiprintf_internal_r+0xe88>
   8efc4:	d9801d87 	ldb	r6,118(sp)
   8efc8:	42000204 	addi	r8,r8,8
   8efcc:	21400044 	addi	r5,r4,1
   8efd0:	3001ae1e 	bne	r6,zero,8f68c <___vfiprintf_internal_r+0xbc8>
   8efd4:	3801bb26 	beq	r7,zero,8f6c4 <___vfiprintf_internal_r+0xc00>
   8efd8:	d9001d04 	addi	r4,sp,116
   8efdc:	10800084 	addi	r2,r2,2
   8efe0:	41000015 	stw	r4,0(r8)
   8efe4:	01000084 	movi	r4,2
   8efe8:	41000115 	stw	r4,4(r8)
   8efec:	d8801c15 	stw	r2,112(sp)
   8eff0:	d9401b15 	stw	r5,108(sp)
   8eff4:	010001c4 	movi	r4,7
   8eff8:	2142680e 	bge	r4,r5,8f99c <___vfiprintf_internal_r+0xed8>
   8effc:	1002b11e 	bne	r2,zero,8fac4 <___vfiprintf_internal_r+0x1000>
   8f000:	01802004 	movi	r6,128
   8f004:	01400044 	movi	r5,1
   8f008:	0009883a 	mov	r4,zero
   8f00c:	d811883a 	mov	r8,sp
   8f010:	1981ae1e 	bne	r3,r6,8f6cc <___vfiprintf_internal_r+0xc08>
   8f014:	d8c02517 	ldw	r3,148(sp)
   8f018:	1cf9c83a 	sub	fp,r3,r19
   8f01c:	0701ab0e 	bge	zero,fp,8f6cc <___vfiprintf_internal_r+0xc08>
   8f020:	05400404 	movi	r21,16
   8f024:	af03a90e 	bge	r21,fp,8fecc <___vfiprintf_internal_r+0x1408>
   8f028:	01400274 	movhi	r5,9
   8f02c:	2950cd04 	addi	r5,r5,17204
   8f030:	d9402315 	stw	r5,140(sp)
   8f034:	01c001c4 	movi	r7,7
   8f038:	00000506 	br	8f050 <___vfiprintf_internal_r+0x58c>
   8f03c:	21800084 	addi	r6,r4,2
   8f040:	42000204 	addi	r8,r8,8
   8f044:	1809883a 	mov	r4,r3
   8f048:	e73ffc04 	addi	fp,fp,-16
   8f04c:	af000d0e 	bge	r21,fp,8f084 <___vfiprintf_internal_r+0x5c0>
   8f050:	10800404 	addi	r2,r2,16
   8f054:	20c00044 	addi	r3,r4,1
   8f058:	44800015 	stw	r18,0(r8)
   8f05c:	45400115 	stw	r21,4(r8)
   8f060:	d8801c15 	stw	r2,112(sp)
   8f064:	d8c01b15 	stw	r3,108(sp)
   8f068:	38fff40e 	bge	r7,r3,8f03c <__alt_data_end+0xfffb990c>
   8f06c:	10022b1e 	bne	r2,zero,8f91c <___vfiprintf_internal_r+0xe58>
   8f070:	e73ffc04 	addi	fp,fp,-16
   8f074:	01800044 	movi	r6,1
   8f078:	0009883a 	mov	r4,zero
   8f07c:	d811883a 	mov	r8,sp
   8f080:	af3ff316 	blt	r21,fp,8f050 <__alt_data_end+0xfffb9920>
   8f084:	d8c02317 	ldw	r3,140(sp)
   8f088:	1705883a 	add	r2,r2,fp
   8f08c:	47000115 	stw	fp,4(r8)
   8f090:	40c00015 	stw	r3,0(r8)
   8f094:	d8801c15 	stw	r2,112(sp)
   8f098:	d9801b15 	stw	r6,108(sp)
   8f09c:	00c001c4 	movi	r3,7
   8f0a0:	19829416 	blt	r3,r6,8faf4 <___vfiprintf_internal_r+0x1030>
   8f0a4:	8521c83a 	sub	r16,r16,r20
   8f0a8:	42000204 	addi	r8,r8,8
   8f0ac:	31400044 	addi	r5,r6,1
   8f0b0:	3009883a 	mov	r4,r6
   8f0b4:	04018716 	blt	zero,r16,8f6d4 <___vfiprintf_internal_r+0xc10>
   8f0b8:	a085883a 	add	r2,r20,r2
   8f0bc:	45c00015 	stw	r23,0(r8)
   8f0c0:	45000115 	stw	r20,4(r8)
   8f0c4:	d8801c15 	stw	r2,112(sp)
   8f0c8:	d9401b15 	stw	r5,108(sp)
   8f0cc:	00c001c4 	movi	r3,7
   8f0d0:	1941c20e 	bge	r3,r5,8f7dc <___vfiprintf_internal_r+0xd18>
   8f0d4:	1002531e 	bne	r2,zero,8fa24 <___vfiprintf_internal_r+0xf60>
   8f0d8:	d8001b15 	stw	zero,108(sp)
   8f0dc:	8c40010c 	andi	r17,r17,4
   8f0e0:	88023226 	beq	r17,zero,8f9ac <___vfiprintf_internal_r+0xee8>
   8f0e4:	d9002517 	ldw	r4,148(sp)
   8f0e8:	24e3c83a 	sub	r17,r4,r19
   8f0ec:	04432916 	blt	zero,r17,8fd94 <___vfiprintf_internal_r+0x12d0>
   8f0f0:	d8802517 	ldw	r2,148(sp)
   8f0f4:	14c0010e 	bge	r2,r19,8f0fc <___vfiprintf_internal_r+0x638>
   8f0f8:	9805883a 	mov	r2,r19
   8f0fc:	d8c02417 	ldw	r3,144(sp)
   8f100:	1887883a 	add	r3,r3,r2
   8f104:	d8c02415 	stw	r3,144(sp)
   8f108:	d8001b15 	stw	zero,108(sp)
   8f10c:	d811883a 	mov	r8,sp
   8f110:	003ea006 	br	8eb94 <__alt_data_end+0xfffb9464>
   8f114:	8c400814 	ori	r17,r17,32
   8f118:	b0c00007 	ldb	r3,0(r22)
   8f11c:	003ec606 	br	8ec38 <__alt_data_end+0xfffb9508>
   8f120:	b0c00007 	ldb	r3,0(r22)
   8f124:	00801b04 	movi	r2,108
   8f128:	18832026 	beq	r3,r2,8fdac <___vfiprintf_internal_r+0x12e8>
   8f12c:	8c400414 	ori	r17,r17,16
   8f130:	003ec106 	br	8ec38 <__alt_data_end+0xfffb9508>
   8f134:	9cc03fcc 	andi	r19,r19,255
   8f138:	b811883a 	mov	r8,r23
   8f13c:	9803981e 	bne	r19,zero,8ffa0 <___vfiprintf_internal_r+0x14dc>
   8f140:	8880080c 	andi	r2,r17,32
   8f144:	1002be26 	beq	r2,zero,8fc40 <___vfiprintf_internal_r+0x117c>
   8f148:	d9002217 	ldw	r4,136(sp)
   8f14c:	d9402417 	ldw	r5,144(sp)
   8f150:	20800017 	ldw	r2,0(r4)
   8f154:	2807d7fa 	srai	r3,r5,31
   8f158:	21000104 	addi	r4,r4,4
   8f15c:	d9002215 	stw	r4,136(sp)
   8f160:	11400015 	stw	r5,0(r2)
   8f164:	10c00115 	stw	r3,4(r2)
   8f168:	003e8a06 	br	8eb94 <__alt_data_end+0xfffb9464>
   8f16c:	9cc03fcc 	andi	r19,r19,255
   8f170:	b811883a 	mov	r8,r23
   8f174:	9803871e 	bne	r19,zero,8ff94 <___vfiprintf_internal_r+0x14d0>
   8f178:	8880080c 	andi	r2,r17,32
   8f17c:	10009a26 	beq	r2,zero,8f3e8 <___vfiprintf_internal_r+0x924>
   8f180:	d9002217 	ldw	r4,136(sp)
   8f184:	d8001d85 	stb	zero,118(sp)
   8f188:	20800204 	addi	r2,r4,8
   8f18c:	24c00017 	ldw	r19,0(r4)
   8f190:	25000117 	ldw	r20,4(r4)
   8f194:	8002a416 	blt	r16,zero,8fc28 <___vfiprintf_internal_r+0x1164>
   8f198:	013fdfc4 	movi	r4,-129
   8f19c:	9d06b03a 	or	r3,r19,r20
   8f1a0:	d8802215 	stw	r2,136(sp)
   8f1a4:	8922703a 	and	r17,r17,r4
   8f1a8:	18009b26 	beq	r3,zero,8f418 <___vfiprintf_internal_r+0x954>
   8f1ac:	002b883a 	mov	r21,zero
   8f1b0:	ddc01a04 	addi	r23,sp,104
   8f1b4:	9806d0fa 	srli	r3,r19,3
   8f1b8:	a008977a 	slli	r4,r20,29
   8f1bc:	a028d0fa 	srli	r20,r20,3
   8f1c0:	9cc001cc 	andi	r19,r19,7
   8f1c4:	98800c04 	addi	r2,r19,48
   8f1c8:	bdffffc4 	addi	r23,r23,-1
   8f1cc:	20e6b03a 	or	r19,r4,r3
   8f1d0:	b8800005 	stb	r2,0(r23)
   8f1d4:	9d06b03a 	or	r3,r19,r20
   8f1d8:	183ff61e 	bne	r3,zero,8f1b4 <__alt_data_end+0xfffb9a84>
   8f1dc:	88c0004c 	andi	r3,r17,1
   8f1e0:	18021f1e 	bne	r3,zero,8fa60 <___vfiprintf_internal_r+0xf9c>
   8f1e4:	d9401e17 	ldw	r5,120(sp)
   8f1e8:	2de9c83a 	sub	r20,r5,r23
   8f1ec:	003f3806 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8f1f0:	9cc03fcc 	andi	r19,r19,255
   8f1f4:	b811883a 	mov	r8,r23
   8f1f8:	98034f1e 	bne	r19,zero,8ff38 <___vfiprintf_internal_r+0x1474>
   8f1fc:	00800274 	movhi	r2,9
   8f200:	10906d04 	addi	r2,r2,16820
   8f204:	d8802615 	stw	r2,152(sp)
   8f208:	8880080c 	andi	r2,r17,32
   8f20c:	1000ac26 	beq	r2,zero,8f4c0 <___vfiprintf_internal_r+0x9fc>
   8f210:	d9002217 	ldw	r4,136(sp)
   8f214:	24c00017 	ldw	r19,0(r4)
   8f218:	25000117 	ldw	r20,4(r4)
   8f21c:	21000204 	addi	r4,r4,8
   8f220:	d9002215 	stw	r4,136(sp)
   8f224:	8880004c 	andi	r2,r17,1
   8f228:	1001e726 	beq	r2,zero,8f9c8 <___vfiprintf_internal_r+0xf04>
   8f22c:	9d04b03a 	or	r2,r19,r20
   8f230:	10025c1e 	bne	r2,zero,8fba4 <___vfiprintf_internal_r+0x10e0>
   8f234:	d8001d85 	stb	zero,118(sp)
   8f238:	80024416 	blt	r16,zero,8fb4c <___vfiprintf_internal_r+0x1088>
   8f23c:	00bfdfc4 	movi	r2,-129
   8f240:	88a2703a 	and	r17,r17,r2
   8f244:	003f1d06 	br	8eebc <__alt_data_end+0xfffb978c>
   8f248:	d8c02217 	ldw	r3,136(sp)
   8f24c:	04c00044 	movi	r19,1
   8f250:	b811883a 	mov	r8,r23
   8f254:	18800017 	ldw	r2,0(r3)
   8f258:	18c00104 	addi	r3,r3,4
   8f25c:	d8001d85 	stb	zero,118(sp)
   8f260:	d8801005 	stb	r2,64(sp)
   8f264:	d8c02215 	stw	r3,136(sp)
   8f268:	9829883a 	mov	r20,r19
   8f26c:	ddc01004 	addi	r23,sp,64
   8f270:	0021883a 	mov	r16,zero
   8f274:	003f1e06 	br	8eef0 <__alt_data_end+0xfffb97c0>
   8f278:	9cc03fcc 	andi	r19,r19,255
   8f27c:	b811883a 	mov	r8,r23
   8f280:	9803331e 	bne	r19,zero,8ff50 <___vfiprintf_internal_r+0x148c>
   8f284:	8880080c 	andi	r2,r17,32
   8f288:	10004826 	beq	r2,zero,8f3ac <___vfiprintf_internal_r+0x8e8>
   8f28c:	d9002217 	ldw	r4,136(sp)
   8f290:	20800117 	ldw	r2,4(r4)
   8f294:	24c00017 	ldw	r19,0(r4)
   8f298:	21000204 	addi	r4,r4,8
   8f29c:	d9002215 	stw	r4,136(sp)
   8f2a0:	1029883a 	mov	r20,r2
   8f2a4:	10024c16 	blt	r2,zero,8fbd8 <___vfiprintf_internal_r+0x1114>
   8f2a8:	dd401d83 	ldbu	r21,118(sp)
   8f2ac:	80007116 	blt	r16,zero,8f474 <___vfiprintf_internal_r+0x9b0>
   8f2b0:	00ffdfc4 	movi	r3,-129
   8f2b4:	9d04b03a 	or	r2,r19,r20
   8f2b8:	88e2703a 	and	r17,r17,r3
   8f2bc:	1000d126 	beq	r2,zero,8f604 <___vfiprintf_internal_r+0xb40>
   8f2c0:	a0023526 	beq	r20,zero,8fb98 <___vfiprintf_internal_r+0x10d4>
   8f2c4:	ddc01a04 	addi	r23,sp,104
   8f2c8:	4039883a 	mov	fp,r8
   8f2cc:	9809883a 	mov	r4,r19
   8f2d0:	a00b883a 	mov	r5,r20
   8f2d4:	01800284 	movi	r6,10
   8f2d8:	000f883a 	mov	r7,zero
   8f2dc:	0090cc80 	call	90cc8 <__umoddi3>
   8f2e0:	10800c04 	addi	r2,r2,48
   8f2e4:	bdffffc4 	addi	r23,r23,-1
   8f2e8:	9809883a 	mov	r4,r19
   8f2ec:	a00b883a 	mov	r5,r20
   8f2f0:	b8800005 	stb	r2,0(r23)
   8f2f4:	01800284 	movi	r6,10
   8f2f8:	000f883a 	mov	r7,zero
   8f2fc:	00906cc0 	call	906cc <__udivdi3>
   8f300:	1027883a 	mov	r19,r2
   8f304:	10c4b03a 	or	r2,r2,r3
   8f308:	1829883a 	mov	r20,r3
   8f30c:	103fef1e 	bne	r2,zero,8f2cc <__alt_data_end+0xfffb9b9c>
   8f310:	d9001e17 	ldw	r4,120(sp)
   8f314:	e011883a 	mov	r8,fp
   8f318:	25e9c83a 	sub	r20,r4,r23
   8f31c:	003eec06 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8f320:	d8802307 	ldb	r2,140(sp)
   8f324:	1002361e 	bne	r2,zero,8fc00 <___vfiprintf_internal_r+0x113c>
   8f328:	00c00804 	movi	r3,32
   8f32c:	d8c02305 	stb	r3,140(sp)
   8f330:	04c00044 	movi	r19,1
   8f334:	b0c00007 	ldb	r3,0(r22)
   8f338:	003e3f06 	br	8ec38 <__alt_data_end+0xfffb9508>
   8f33c:	8c400054 	ori	r17,r17,1
   8f340:	b0c00007 	ldb	r3,0(r22)
   8f344:	003e3c06 	br	8ec38 <__alt_data_end+0xfffb9508>
   8f348:	8c402014 	ori	r17,r17,128
   8f34c:	b0c00007 	ldb	r3,0(r22)
   8f350:	003e3906 	br	8ec38 <__alt_data_end+0xfffb9508>
   8f354:	dc002715 	stw	r16,156(sp)
   8f358:	d8002515 	stw	zero,148(sp)
   8f35c:	1f3ff404 	addi	fp,r3,-48
   8f360:	0009883a 	mov	r4,zero
   8f364:	b021883a 	mov	r16,r22
   8f368:	01400284 	movi	r5,10
   8f36c:	0082a480 	call	82a48 <__mulsi3>
   8f370:	80c00007 	ldb	r3,0(r16)
   8f374:	e089883a 	add	r4,fp,r2
   8f378:	b5800044 	addi	r22,r22,1
   8f37c:	1f3ff404 	addi	fp,r3,-48
   8f380:	b021883a 	mov	r16,r22
   8f384:	af3ff82e 	bgeu	r21,fp,8f368 <__alt_data_end+0xfffb9c38>
   8f388:	d9002515 	stw	r4,148(sp)
   8f38c:	dc002717 	ldw	r16,156(sp)
   8f390:	003e2a06 	br	8ec3c <__alt_data_end+0xfffb950c>
   8f394:	9cc03fcc 	andi	r19,r19,255
   8f398:	b811883a 	mov	r8,r23
   8f39c:	9802e91e 	bne	r19,zero,8ff44 <___vfiprintf_internal_r+0x1480>
   8f3a0:	8c400414 	ori	r17,r17,16
   8f3a4:	8880080c 	andi	r2,r17,32
   8f3a8:	103fb81e 	bne	r2,zero,8f28c <__alt_data_end+0xfffb9b5c>
   8f3ac:	8880040c 	andi	r2,r17,16
   8f3b0:	10022e26 	beq	r2,zero,8fc6c <___vfiprintf_internal_r+0x11a8>
   8f3b4:	d9402217 	ldw	r5,136(sp)
   8f3b8:	2cc00017 	ldw	r19,0(r5)
   8f3bc:	29400104 	addi	r5,r5,4
   8f3c0:	d9402215 	stw	r5,136(sp)
   8f3c4:	9829d7fa 	srai	r20,r19,31
   8f3c8:	a005883a 	mov	r2,r20
   8f3cc:	003fb506 	br	8f2a4 <__alt_data_end+0xfffb9b74>
   8f3d0:	9cc03fcc 	andi	r19,r19,255
   8f3d4:	b811883a 	mov	r8,r23
   8f3d8:	9802fa1e 	bne	r19,zero,8ffc4 <___vfiprintf_internal_r+0x1500>
   8f3dc:	8c400414 	ori	r17,r17,16
   8f3e0:	8880080c 	andi	r2,r17,32
   8f3e4:	103f661e 	bne	r2,zero,8f180 <__alt_data_end+0xfffb9a50>
   8f3e8:	8880040c 	andi	r2,r17,16
   8f3ec:	10020626 	beq	r2,zero,8fc08 <___vfiprintf_internal_r+0x1144>
   8f3f0:	d9402217 	ldw	r5,136(sp)
   8f3f4:	d8001d85 	stb	zero,118(sp)
   8f3f8:	0029883a 	mov	r20,zero
   8f3fc:	28800104 	addi	r2,r5,4
   8f400:	2cc00017 	ldw	r19,0(r5)
   8f404:	80020816 	blt	r16,zero,8fc28 <___vfiprintf_internal_r+0x1164>
   8f408:	00ffdfc4 	movi	r3,-129
   8f40c:	d8802215 	stw	r2,136(sp)
   8f410:	88e2703a 	and	r17,r17,r3
   8f414:	983f651e 	bne	r19,zero,8f1ac <__alt_data_end+0xfffb9a7c>
   8f418:	002b883a 	mov	r21,zero
   8f41c:	8002cf26 	beq	r16,zero,8ff5c <___vfiprintf_internal_r+0x1498>
   8f420:	0027883a 	mov	r19,zero
   8f424:	0029883a 	mov	r20,zero
   8f428:	003f6106 	br	8f1b0 <__alt_data_end+0xfffb9a80>
   8f42c:	9cc03fcc 	andi	r19,r19,255
   8f430:	b811883a 	mov	r8,r23
   8f434:	9802e01e 	bne	r19,zero,8ffb8 <___vfiprintf_internal_r+0x14f4>
   8f438:	8c400414 	ori	r17,r17,16
   8f43c:	8880080c 	andi	r2,r17,32
   8f440:	1000641e 	bne	r2,zero,8f5d4 <___vfiprintf_internal_r+0xb10>
   8f444:	8880040c 	andi	r2,r17,16
   8f448:	1001c81e 	bne	r2,zero,8fb6c <___vfiprintf_internal_r+0x10a8>
   8f44c:	8880100c 	andi	r2,r17,64
   8f450:	d8001d85 	stb	zero,118(sp)
   8f454:	1002281e 	bne	r2,zero,8fcf8 <___vfiprintf_internal_r+0x1234>
   8f458:	d9002217 	ldw	r4,136(sp)
   8f45c:	0029883a 	mov	r20,zero
   8f460:	20800104 	addi	r2,r4,4
   8f464:	24c00017 	ldw	r19,0(r4)
   8f468:	8001c60e 	bge	r16,zero,8fb84 <___vfiprintf_internal_r+0x10c0>
   8f46c:	d8802215 	stw	r2,136(sp)
   8f470:	002b883a 	mov	r21,zero
   8f474:	9d04b03a 	or	r2,r19,r20
   8f478:	103f911e 	bne	r2,zero,8f2c0 <__alt_data_end+0xfffb9b90>
   8f47c:	00800044 	movi	r2,1
   8f480:	10803fcc 	andi	r2,r2,255
   8f484:	00c00044 	movi	r3,1
   8f488:	10c05f26 	beq	r2,r3,8f608 <___vfiprintf_internal_r+0xb44>
   8f48c:	00c00084 	movi	r3,2
   8f490:	10ffe31e 	bne	r2,r3,8f420 <__alt_data_end+0xfffb9cf0>
   8f494:	0027883a 	mov	r19,zero
   8f498:	0029883a 	mov	r20,zero
   8f49c:	00015106 	br	8f9e4 <___vfiprintf_internal_r+0xf20>
   8f4a0:	9cc03fcc 	andi	r19,r19,255
   8f4a4:	b811883a 	mov	r8,r23
   8f4a8:	9802c01e 	bne	r19,zero,8ffac <___vfiprintf_internal_r+0x14e8>
   8f4ac:	01400274 	movhi	r5,9
   8f4b0:	29506804 	addi	r5,r5,16800
   8f4b4:	d9402615 	stw	r5,152(sp)
   8f4b8:	8880080c 	andi	r2,r17,32
   8f4bc:	103f541e 	bne	r2,zero,8f210 <__alt_data_end+0xfffb9ae0>
   8f4c0:	8880040c 	andi	r2,r17,16
   8f4c4:	1001f226 	beq	r2,zero,8fc90 <___vfiprintf_internal_r+0x11cc>
   8f4c8:	d9402217 	ldw	r5,136(sp)
   8f4cc:	0029883a 	mov	r20,zero
   8f4d0:	2cc00017 	ldw	r19,0(r5)
   8f4d4:	29400104 	addi	r5,r5,4
   8f4d8:	d9402215 	stw	r5,136(sp)
   8f4dc:	003f5106 	br	8f224 <__alt_data_end+0xfffb9af4>
   8f4e0:	d8c02217 	ldw	r3,136(sp)
   8f4e4:	b811883a 	mov	r8,r23
   8f4e8:	d8001d85 	stb	zero,118(sp)
   8f4ec:	1dc00017 	ldw	r23,0(r3)
   8f4f0:	1f000104 	addi	fp,r3,4
   8f4f4:	b8025926 	beq	r23,zero,8fe5c <___vfiprintf_internal_r+0x1398>
   8f4f8:	80023316 	blt	r16,zero,8fdc8 <___vfiprintf_internal_r+0x1304>
   8f4fc:	800d883a 	mov	r6,r16
   8f500:	000b883a 	mov	r5,zero
   8f504:	b809883a 	mov	r4,r23
   8f508:	da002a15 	stw	r8,168(sp)
   8f50c:	008ce5c0 	call	8ce5c <memchr>
   8f510:	da002a17 	ldw	r8,168(sp)
   8f514:	10026826 	beq	r2,zero,8feb8 <___vfiprintf_internal_r+0x13f4>
   8f518:	15e9c83a 	sub	r20,r2,r23
   8f51c:	dd401d83 	ldbu	r21,118(sp)
   8f520:	df002215 	stw	fp,136(sp)
   8f524:	0021883a 	mov	r16,zero
   8f528:	003e6906 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8f52c:	9cc03fcc 	andi	r19,r19,255
   8f530:	b811883a 	mov	r8,r23
   8f534:	983fc126 	beq	r19,zero,8f43c <__alt_data_end+0xfffb9d0c>
   8f538:	d8c02303 	ldbu	r3,140(sp)
   8f53c:	d8c01d85 	stb	r3,118(sp)
   8f540:	003fbe06 	br	8f43c <__alt_data_end+0xfffb9d0c>
   8f544:	d9002217 	ldw	r4,136(sp)
   8f548:	d9402217 	ldw	r5,136(sp)
   8f54c:	21000017 	ldw	r4,0(r4)
   8f550:	28800104 	addi	r2,r5,4
   8f554:	d9002515 	stw	r4,148(sp)
   8f558:	203e3d16 	blt	r4,zero,8ee50 <__alt_data_end+0xfffb9720>
   8f55c:	d8802215 	stw	r2,136(sp)
   8f560:	b0c00007 	ldb	r3,0(r22)
   8f564:	003db406 	br	8ec38 <__alt_data_end+0xfffb9508>
   8f568:	00c00ac4 	movi	r3,43
   8f56c:	d8c02305 	stb	r3,140(sp)
   8f570:	04c00044 	movi	r19,1
   8f574:	b0c00007 	ldb	r3,0(r22)
   8f578:	003daf06 	br	8ec38 <__alt_data_end+0xfffb9508>
   8f57c:	b0c00007 	ldb	r3,0(r22)
   8f580:	01000a84 	movi	r4,42
   8f584:	b4000044 	addi	r16,r22,1
   8f588:	19025e26 	beq	r3,r4,8ff04 <___vfiprintf_internal_r+0x1440>
   8f58c:	1f3ff404 	addi	fp,r3,-48
   8f590:	0009883a 	mov	r4,zero
   8f594:	af025236 	bltu	r21,fp,8fee0 <___vfiprintf_internal_r+0x141c>
   8f598:	01400284 	movi	r5,10
   8f59c:	0082a480 	call	82a48 <__mulsi3>
   8f5a0:	80c00007 	ldb	r3,0(r16)
   8f5a4:	1709883a 	add	r4,r2,fp
   8f5a8:	85800044 	addi	r22,r16,1
   8f5ac:	1f3ff404 	addi	fp,r3,-48
   8f5b0:	b021883a 	mov	r16,r22
   8f5b4:	af3ff82e 	bgeu	r21,fp,8f598 <__alt_data_end+0xfffb9e68>
   8f5b8:	2021883a 	mov	r16,r4
   8f5bc:	203d9f0e 	bge	r4,zero,8ec3c <__alt_data_end+0xfffb950c>
   8f5c0:	043fffc4 	movi	r16,-1
   8f5c4:	003d9d06 	br	8ec3c <__alt_data_end+0xfffb950c>
   8f5c8:	8c401014 	ori	r17,r17,64
   8f5cc:	b0c00007 	ldb	r3,0(r22)
   8f5d0:	003d9906 	br	8ec38 <__alt_data_end+0xfffb9508>
   8f5d4:	d9002217 	ldw	r4,136(sp)
   8f5d8:	d8001d85 	stb	zero,118(sp)
   8f5dc:	20c00204 	addi	r3,r4,8
   8f5e0:	24c00017 	ldw	r19,0(r4)
   8f5e4:	25000117 	ldw	r20,4(r4)
   8f5e8:	8001e716 	blt	r16,zero,8fd88 <___vfiprintf_internal_r+0x12c4>
   8f5ec:	013fdfc4 	movi	r4,-129
   8f5f0:	9d04b03a 	or	r2,r19,r20
   8f5f4:	d8c02215 	stw	r3,136(sp)
   8f5f8:	8922703a 	and	r17,r17,r4
   8f5fc:	002b883a 	mov	r21,zero
   8f600:	103f2f1e 	bne	r2,zero,8f2c0 <__alt_data_end+0xfffb9b90>
   8f604:	803e2f26 	beq	r16,zero,8eec4 <__alt_data_end+0xfffb9794>
   8f608:	0027883a 	mov	r19,zero
   8f60c:	9cc00c04 	addi	r19,r19,48
   8f610:	dcc019c5 	stb	r19,103(sp)
   8f614:	dd002817 	ldw	r20,160(sp)
   8f618:	ddc019c4 	addi	r23,sp,103
   8f61c:	003e2c06 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8f620:	9cc03fcc 	andi	r19,r19,255
   8f624:	b811883a 	mov	r8,r23
   8f628:	9802571e 	bne	r19,zero,8ff88 <___vfiprintf_internal_r+0x14c4>
   8f62c:	18005726 	beq	r3,zero,8f78c <___vfiprintf_internal_r+0xcc8>
   8f630:	04c00044 	movi	r19,1
   8f634:	d8c01005 	stb	r3,64(sp)
   8f638:	d8001d85 	stb	zero,118(sp)
   8f63c:	9829883a 	mov	r20,r19
   8f640:	ddc01004 	addi	r23,sp,64
   8f644:	003f0a06 	br	8f270 <__alt_data_end+0xfffb9b40>
   8f648:	d9402017 	ldw	r5,128(sp)
   8f64c:	d9002117 	ldw	r4,132(sp)
   8f650:	d9801a04 	addi	r6,sp,104
   8f654:	da802a15 	stw	r10,168(sp)
   8f658:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8f65c:	da802a17 	ldw	r10,168(sp)
   8f660:	1000501e 	bne	r2,zero,8f7a4 <___vfiprintf_internal_r+0xce0>
   8f664:	d9801b17 	ldw	r6,108(sp)
   8f668:	d8801c17 	ldw	r2,112(sp)
   8f66c:	d811883a 	mov	r8,sp
   8f670:	31000044 	addi	r4,r6,1
   8f674:	003e3606 	br	8ef50 <__alt_data_end+0xfffb9820>
   8f678:	d9001b17 	ldw	r4,108(sp)
   8f67c:	d8801c17 	ldw	r2,112(sp)
   8f680:	21400044 	addi	r5,r4,1
   8f684:	d9801d87 	ldb	r6,118(sp)
   8f688:	303e5226 	beq	r6,zero,8efd4 <__alt_data_end+0xfffb98a4>
   8f68c:	01800044 	movi	r6,1
   8f690:	d9001d84 	addi	r4,sp,118
   8f694:	1185883a 	add	r2,r2,r6
   8f698:	41000015 	stw	r4,0(r8)
   8f69c:	41800115 	stw	r6,4(r8)
   8f6a0:	d8801c15 	stw	r2,112(sp)
   8f6a4:	d9401b15 	stw	r5,108(sp)
   8f6a8:	010001c4 	movi	r4,7
   8f6ac:	2140b00e 	bge	r4,r5,8f970 <___vfiprintf_internal_r+0xeac>
   8f6b0:	1000f61e 	bne	r2,zero,8fa8c <___vfiprintf_internal_r+0xfc8>
   8f6b4:	3800b31e 	bne	r7,zero,8f984 <___vfiprintf_internal_r+0xec0>
   8f6b8:	0009883a 	mov	r4,zero
   8f6bc:	300b883a 	mov	r5,r6
   8f6c0:	d811883a 	mov	r8,sp
   8f6c4:	01802004 	movi	r6,128
   8f6c8:	19be5226 	beq	r3,r6,8f014 <__alt_data_end+0xfffb98e4>
   8f6cc:	8521c83a 	sub	r16,r16,r20
   8f6d0:	043e790e 	bge	zero,r16,8f0b8 <__alt_data_end+0xfffb9988>
   8f6d4:	05400404 	movi	r21,16
   8f6d8:	ac01b00e 	bge	r21,r16,8fd9c <___vfiprintf_internal_r+0x12d8>
   8f6dc:	01400274 	movhi	r5,9
   8f6e0:	2950cd04 	addi	r5,r5,17204
   8f6e4:	d9402315 	stw	r5,140(sp)
   8f6e8:	070001c4 	movi	fp,7
   8f6ec:	00000506 	br	8f704 <___vfiprintf_internal_r+0xc40>
   8f6f0:	21400084 	addi	r5,r4,2
   8f6f4:	42000204 	addi	r8,r8,8
   8f6f8:	1809883a 	mov	r4,r3
   8f6fc:	843ffc04 	addi	r16,r16,-16
   8f700:	ac000d0e 	bge	r21,r16,8f738 <___vfiprintf_internal_r+0xc74>
   8f704:	10800404 	addi	r2,r2,16
   8f708:	20c00044 	addi	r3,r4,1
   8f70c:	44800015 	stw	r18,0(r8)
   8f710:	45400115 	stw	r21,4(r8)
   8f714:	d8801c15 	stw	r2,112(sp)
   8f718:	d8c01b15 	stw	r3,108(sp)
   8f71c:	e0fff40e 	bge	fp,r3,8f6f0 <__alt_data_end+0xfffb9fc0>
   8f720:	1000101e 	bne	r2,zero,8f764 <___vfiprintf_internal_r+0xca0>
   8f724:	843ffc04 	addi	r16,r16,-16
   8f728:	01400044 	movi	r5,1
   8f72c:	0009883a 	mov	r4,zero
   8f730:	d811883a 	mov	r8,sp
   8f734:	ac3ff316 	blt	r21,r16,8f704 <__alt_data_end+0xfffb9fd4>
   8f738:	d8c02317 	ldw	r3,140(sp)
   8f73c:	1405883a 	add	r2,r2,r16
   8f740:	44000115 	stw	r16,4(r8)
   8f744:	40c00015 	stw	r3,0(r8)
   8f748:	d8801c15 	stw	r2,112(sp)
   8f74c:	d9401b15 	stw	r5,108(sp)
   8f750:	00c001c4 	movi	r3,7
   8f754:	19401916 	blt	r3,r5,8f7bc <___vfiprintf_internal_r+0xcf8>
   8f758:	42000204 	addi	r8,r8,8
   8f75c:	29400044 	addi	r5,r5,1
   8f760:	003e5506 	br	8f0b8 <__alt_data_end+0xfffb9988>
   8f764:	d9402017 	ldw	r5,128(sp)
   8f768:	d9002117 	ldw	r4,132(sp)
   8f76c:	d9801a04 	addi	r6,sp,104
   8f770:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8f774:	10000b1e 	bne	r2,zero,8f7a4 <___vfiprintf_internal_r+0xce0>
   8f778:	d9001b17 	ldw	r4,108(sp)
   8f77c:	d8801c17 	ldw	r2,112(sp)
   8f780:	d811883a 	mov	r8,sp
   8f784:	21400044 	addi	r5,r4,1
   8f788:	003fdc06 	br	8f6fc <__alt_data_end+0xfffb9fcc>
   8f78c:	d8801c17 	ldw	r2,112(sp)
   8f790:	10000426 	beq	r2,zero,8f7a4 <___vfiprintf_internal_r+0xce0>
   8f794:	d9402017 	ldw	r5,128(sp)
   8f798:	d9002117 	ldw	r4,132(sp)
   8f79c:	d9801a04 	addi	r6,sp,104
   8f7a0:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8f7a4:	d9402017 	ldw	r5,128(sp)
   8f7a8:	2880030b 	ldhu	r2,12(r5)
   8f7ac:	1080100c 	andi	r2,r2,64
   8f7b0:	10014d1e 	bne	r2,zero,8fce8 <___vfiprintf_internal_r+0x1224>
   8f7b4:	d8802417 	ldw	r2,144(sp)
   8f7b8:	003d9706 	br	8ee18 <__alt_data_end+0xfffb96e8>
   8f7bc:	1000d21e 	bne	r2,zero,8fb08 <___vfiprintf_internal_r+0x1044>
   8f7c0:	00c00044 	movi	r3,1
   8f7c4:	a005883a 	mov	r2,r20
   8f7c8:	ddc00015 	stw	r23,0(sp)
   8f7cc:	dd000115 	stw	r20,4(sp)
   8f7d0:	dd001c15 	stw	r20,112(sp)
   8f7d4:	d8c01b15 	stw	r3,108(sp)
   8f7d8:	d811883a 	mov	r8,sp
   8f7dc:	42000204 	addi	r8,r8,8
   8f7e0:	8c40010c 	andi	r17,r17,4
   8f7e4:	88004026 	beq	r17,zero,8f8e8 <___vfiprintf_internal_r+0xe24>
   8f7e8:	d9002517 	ldw	r4,148(sp)
   8f7ec:	24e3c83a 	sub	r17,r4,r19
   8f7f0:	04403d0e 	bge	zero,r17,8f8e8 <___vfiprintf_internal_r+0xe24>
   8f7f4:	04000404 	movi	r16,16
   8f7f8:	8441a90e 	bge	r16,r17,8fea0 <___vfiprintf_internal_r+0x13dc>
   8f7fc:	00c00274 	movhi	r3,9
   8f800:	18d0d104 	addi	r3,r3,17220
   8f804:	d9001b17 	ldw	r4,108(sp)
   8f808:	d8c02315 	stw	r3,140(sp)
   8f80c:	050001c4 	movi	r20,7
   8f810:	dd402117 	ldw	r21,132(sp)
   8f814:	ddc02017 	ldw	r23,128(sp)
   8f818:	00000506 	br	8f830 <___vfiprintf_internal_r+0xd6c>
   8f81c:	21400084 	addi	r5,r4,2
   8f820:	42000204 	addi	r8,r8,8
   8f824:	1809883a 	mov	r4,r3
   8f828:	8c7ffc04 	addi	r17,r17,-16
   8f82c:	84400f0e 	bge	r16,r17,8f86c <___vfiprintf_internal_r+0xda8>
   8f830:	01400274 	movhi	r5,9
   8f834:	10800404 	addi	r2,r2,16
   8f838:	20c00044 	addi	r3,r4,1
   8f83c:	2950d104 	addi	r5,r5,17220
   8f840:	41400015 	stw	r5,0(r8)
   8f844:	44000115 	stw	r16,4(r8)
   8f848:	d8801c15 	stw	r2,112(sp)
   8f84c:	d8c01b15 	stw	r3,108(sp)
   8f850:	a0fff20e 	bge	r20,r3,8f81c <__alt_data_end+0xfffba0ec>
   8f854:	1000141e 	bne	r2,zero,8f8a8 <___vfiprintf_internal_r+0xde4>
   8f858:	8c7ffc04 	addi	r17,r17,-16
   8f85c:	01400044 	movi	r5,1
   8f860:	0009883a 	mov	r4,zero
   8f864:	d811883a 	mov	r8,sp
   8f868:	847ff116 	blt	r16,r17,8f830 <__alt_data_end+0xfffba100>
   8f86c:	d8c02317 	ldw	r3,140(sp)
   8f870:	1445883a 	add	r2,r2,r17
   8f874:	44400115 	stw	r17,4(r8)
   8f878:	40c00015 	stw	r3,0(r8)
   8f87c:	d8801c15 	stw	r2,112(sp)
   8f880:	d9401b15 	stw	r5,108(sp)
   8f884:	00c001c4 	movi	r3,7
   8f888:	1940170e 	bge	r3,r5,8f8e8 <___vfiprintf_internal_r+0xe24>
   8f88c:	1000101e 	bne	r2,zero,8f8d0 <___vfiprintf_internal_r+0xe0c>
   8f890:	d8802517 	ldw	r2,148(sp)
   8f894:	14c11616 	blt	r2,r19,8fcf0 <___vfiprintf_internal_r+0x122c>
   8f898:	d9002417 	ldw	r4,144(sp)
   8f89c:	2089883a 	add	r4,r4,r2
   8f8a0:	d9002415 	stw	r4,144(sp)
   8f8a4:	003e1806 	br	8f108 <__alt_data_end+0xfffb99d8>
   8f8a8:	d9801a04 	addi	r6,sp,104
   8f8ac:	b80b883a 	mov	r5,r23
   8f8b0:	a809883a 	mov	r4,r21
   8f8b4:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8f8b8:	103fba1e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8f8bc:	d9001b17 	ldw	r4,108(sp)
   8f8c0:	d8801c17 	ldw	r2,112(sp)
   8f8c4:	d811883a 	mov	r8,sp
   8f8c8:	21400044 	addi	r5,r4,1
   8f8cc:	003fd606 	br	8f828 <__alt_data_end+0xfffba0f8>
   8f8d0:	d9402017 	ldw	r5,128(sp)
   8f8d4:	d9002117 	ldw	r4,132(sp)
   8f8d8:	d9801a04 	addi	r6,sp,104
   8f8dc:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8f8e0:	103fb01e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8f8e4:	d8801c17 	ldw	r2,112(sp)
   8f8e8:	d8c02517 	ldw	r3,148(sp)
   8f8ec:	1cc0010e 	bge	r3,r19,8f8f4 <___vfiprintf_internal_r+0xe30>
   8f8f0:	9807883a 	mov	r3,r19
   8f8f4:	d9002417 	ldw	r4,144(sp)
   8f8f8:	20c9883a 	add	r4,r4,r3
   8f8fc:	d9002415 	stw	r4,144(sp)
   8f900:	103e0126 	beq	r2,zero,8f108 <__alt_data_end+0xfffb99d8>
   8f904:	d9402017 	ldw	r5,128(sp)
   8f908:	d9002117 	ldw	r4,132(sp)
   8f90c:	d9801a04 	addi	r6,sp,104
   8f910:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8f914:	103dfc26 	beq	r2,zero,8f108 <__alt_data_end+0xfffb99d8>
   8f918:	003fa206 	br	8f7a4 <__alt_data_end+0xfffba074>
   8f91c:	d9402017 	ldw	r5,128(sp)
   8f920:	d9002117 	ldw	r4,132(sp)
   8f924:	d9801a04 	addi	r6,sp,104
   8f928:	d9c02b15 	stw	r7,172(sp)
   8f92c:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8f930:	d9c02b17 	ldw	r7,172(sp)
   8f934:	103f9b1e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8f938:	d9001b17 	ldw	r4,108(sp)
   8f93c:	d8801c17 	ldw	r2,112(sp)
   8f940:	d811883a 	mov	r8,sp
   8f944:	21800044 	addi	r6,r4,1
   8f948:	003dbf06 	br	8f048 <__alt_data_end+0xfffb9918>
   8f94c:	1000d81e 	bne	r2,zero,8fcb0 <___vfiprintf_internal_r+0x11ec>
   8f950:	d9001d87 	ldb	r4,118(sp)
   8f954:	20000a26 	beq	r4,zero,8f980 <___vfiprintf_internal_r+0xebc>
   8f958:	00800044 	movi	r2,1
   8f95c:	d9001d84 	addi	r4,sp,118
   8f960:	100b883a 	mov	r5,r2
   8f964:	d9000015 	stw	r4,0(sp)
   8f968:	d8800115 	stw	r2,4(sp)
   8f96c:	d811883a 	mov	r8,sp
   8f970:	2809883a 	mov	r4,r5
   8f974:	42000204 	addi	r8,r8,8
   8f978:	29400044 	addi	r5,r5,1
   8f97c:	003d9506 	br	8efd4 <__alt_data_end+0xfffb98a4>
   8f980:	3800fd26 	beq	r7,zero,8fd78 <___vfiprintf_internal_r+0x12b4>
   8f984:	00800084 	movi	r2,2
   8f988:	d9001d04 	addi	r4,sp,116
   8f98c:	d9000015 	stw	r4,0(sp)
   8f990:	d8800115 	stw	r2,4(sp)
   8f994:	01400044 	movi	r5,1
   8f998:	d811883a 	mov	r8,sp
   8f99c:	2809883a 	mov	r4,r5
   8f9a0:	42000204 	addi	r8,r8,8
   8f9a4:	29400044 	addi	r5,r5,1
   8f9a8:	003f4606 	br	8f6c4 <__alt_data_end+0xfffb9f94>
   8f9ac:	d8802517 	ldw	r2,148(sp)
   8f9b0:	14c0010e 	bge	r2,r19,8f9b8 <___vfiprintf_internal_r+0xef4>
   8f9b4:	9805883a 	mov	r2,r19
   8f9b8:	d9402417 	ldw	r5,144(sp)
   8f9bc:	288b883a 	add	r5,r5,r2
   8f9c0:	d9402415 	stw	r5,144(sp)
   8f9c4:	003dd006 	br	8f108 <__alt_data_end+0xfffb99d8>
   8f9c8:	d8001d85 	stb	zero,118(sp)
   8f9cc:	80005d16 	blt	r16,zero,8fb44 <___vfiprintf_internal_r+0x1080>
   8f9d0:	00ffdfc4 	movi	r3,-129
   8f9d4:	9d04b03a 	or	r2,r19,r20
   8f9d8:	88e2703a 	and	r17,r17,r3
   8f9dc:	103d3726 	beq	r2,zero,8eebc <__alt_data_end+0xfffb978c>
   8f9e0:	002b883a 	mov	r21,zero
   8f9e4:	d9002617 	ldw	r4,152(sp)
   8f9e8:	ddc01a04 	addi	r23,sp,104
   8f9ec:	988003cc 	andi	r2,r19,15
   8f9f0:	a006973a 	slli	r3,r20,28
   8f9f4:	2085883a 	add	r2,r4,r2
   8f9f8:	9826d13a 	srli	r19,r19,4
   8f9fc:	10800003 	ldbu	r2,0(r2)
   8fa00:	a028d13a 	srli	r20,r20,4
   8fa04:	bdffffc4 	addi	r23,r23,-1
   8fa08:	1ce6b03a 	or	r19,r3,r19
   8fa0c:	b8800005 	stb	r2,0(r23)
   8fa10:	9d04b03a 	or	r2,r19,r20
   8fa14:	103ff51e 	bne	r2,zero,8f9ec <__alt_data_end+0xfffba2bc>
   8fa18:	d8801e17 	ldw	r2,120(sp)
   8fa1c:	15e9c83a 	sub	r20,r2,r23
   8fa20:	003d2b06 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8fa24:	d9402017 	ldw	r5,128(sp)
   8fa28:	d9002117 	ldw	r4,132(sp)
   8fa2c:	d9801a04 	addi	r6,sp,104
   8fa30:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8fa34:	103f5b1e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8fa38:	d8801c17 	ldw	r2,112(sp)
   8fa3c:	d811883a 	mov	r8,sp
   8fa40:	003f6706 	br	8f7e0 <__alt_data_end+0xfffba0b0>
   8fa44:	d9402017 	ldw	r5,128(sp)
   8fa48:	d9002117 	ldw	r4,132(sp)
   8fa4c:	d9801a04 	addi	r6,sp,104
   8fa50:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8fa54:	103f531e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8fa58:	d811883a 	mov	r8,sp
   8fa5c:	003cd906 	br	8edc4 <__alt_data_end+0xfffb9694>
   8fa60:	10803fcc 	andi	r2,r2,255
   8fa64:	1080201c 	xori	r2,r2,128
   8fa68:	10bfe004 	addi	r2,r2,-128
   8fa6c:	00c00c04 	movi	r3,48
   8fa70:	10ffe926 	beq	r2,r3,8fa18 <__alt_data_end+0xfffba2e8>
   8fa74:	b8ffffc5 	stb	r3,-1(r23)
   8fa78:	d8c01e17 	ldw	r3,120(sp)
   8fa7c:	b8bfffc4 	addi	r2,r23,-1
   8fa80:	102f883a 	mov	r23,r2
   8fa84:	18a9c83a 	sub	r20,r3,r2
   8fa88:	003d1106 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8fa8c:	d9402017 	ldw	r5,128(sp)
   8fa90:	d9002117 	ldw	r4,132(sp)
   8fa94:	d9801a04 	addi	r6,sp,104
   8fa98:	d8c02a15 	stw	r3,168(sp)
   8fa9c:	d9c02b15 	stw	r7,172(sp)
   8faa0:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8faa4:	d8c02a17 	ldw	r3,168(sp)
   8faa8:	d9c02b17 	ldw	r7,172(sp)
   8faac:	103f3d1e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8fab0:	d9001b17 	ldw	r4,108(sp)
   8fab4:	d8801c17 	ldw	r2,112(sp)
   8fab8:	d811883a 	mov	r8,sp
   8fabc:	21400044 	addi	r5,r4,1
   8fac0:	003d4406 	br	8efd4 <__alt_data_end+0xfffb98a4>
   8fac4:	d9402017 	ldw	r5,128(sp)
   8fac8:	d9002117 	ldw	r4,132(sp)
   8facc:	d9801a04 	addi	r6,sp,104
   8fad0:	d8c02a15 	stw	r3,168(sp)
   8fad4:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8fad8:	d8c02a17 	ldw	r3,168(sp)
   8fadc:	103f311e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8fae0:	d9001b17 	ldw	r4,108(sp)
   8fae4:	d8801c17 	ldw	r2,112(sp)
   8fae8:	d811883a 	mov	r8,sp
   8faec:	21400044 	addi	r5,r4,1
   8faf0:	003ef406 	br	8f6c4 <__alt_data_end+0xfffb9f94>
   8faf4:	1000bd1e 	bne	r2,zero,8fdec <___vfiprintf_internal_r+0x1328>
   8faf8:	01400044 	movi	r5,1
   8fafc:	0009883a 	mov	r4,zero
   8fb00:	d811883a 	mov	r8,sp
   8fb04:	003ef106 	br	8f6cc <__alt_data_end+0xfffb9f9c>
   8fb08:	d9402017 	ldw	r5,128(sp)
   8fb0c:	d9002117 	ldw	r4,132(sp)
   8fb10:	d9801a04 	addi	r6,sp,104
   8fb14:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8fb18:	103f221e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8fb1c:	d9401b17 	ldw	r5,108(sp)
   8fb20:	d8801c17 	ldw	r2,112(sp)
   8fb24:	d811883a 	mov	r8,sp
   8fb28:	29400044 	addi	r5,r5,1
   8fb2c:	003d6206 	br	8f0b8 <__alt_data_end+0xfffb9988>
   8fb30:	01400274 	movhi	r5,9
   8fb34:	29506d04 	addi	r5,r5,16820
   8fb38:	d9402615 	stw	r5,152(sp)
   8fb3c:	d8c02215 	stw	r3,136(sp)
   8fb40:	1023883a 	mov	r17,r2
   8fb44:	9d04b03a 	or	r2,r19,r20
   8fb48:	103fa51e 	bne	r2,zero,8f9e0 <__alt_data_end+0xfffba2b0>
   8fb4c:	002b883a 	mov	r21,zero
   8fb50:	00800084 	movi	r2,2
   8fb54:	003e4a06 	br	8f480 <__alt_data_end+0xfffb9d50>
   8fb58:	01400274 	movhi	r5,9
   8fb5c:	29506d04 	addi	r5,r5,16820
   8fb60:	002b883a 	mov	r21,zero
   8fb64:	d9402615 	stw	r5,152(sp)
   8fb68:	003f9e06 	br	8f9e4 <__alt_data_end+0xfffba2b4>
   8fb6c:	d9402217 	ldw	r5,136(sp)
   8fb70:	d8001d85 	stb	zero,118(sp)
   8fb74:	0029883a 	mov	r20,zero
   8fb78:	28800104 	addi	r2,r5,4
   8fb7c:	2cc00017 	ldw	r19,0(r5)
   8fb80:	803e3a16 	blt	r16,zero,8f46c <__alt_data_end+0xfffb9d3c>
   8fb84:	00ffdfc4 	movi	r3,-129
   8fb88:	d8802215 	stw	r2,136(sp)
   8fb8c:	88e2703a 	and	r17,r17,r3
   8fb90:	002b883a 	mov	r21,zero
   8fb94:	983e9b26 	beq	r19,zero,8f604 <__alt_data_end+0xfffb9ed4>
   8fb98:	00800244 	movi	r2,9
   8fb9c:	14fdc936 	bltu	r2,r19,8f2c4 <__alt_data_end+0xfffb9b94>
   8fba0:	003e9a06 	br	8f60c <__alt_data_end+0xfffb9edc>
   8fba4:	00800c04 	movi	r2,48
   8fba8:	d8c01d45 	stb	r3,117(sp)
   8fbac:	d8801d05 	stb	r2,116(sp)
   8fbb0:	d8001d85 	stb	zero,118(sp)
   8fbb4:	88c00094 	ori	r3,r17,2
   8fbb8:	80009c16 	blt	r16,zero,8fe2c <___vfiprintf_internal_r+0x1368>
   8fbbc:	00bfdfc4 	movi	r2,-129
   8fbc0:	88a2703a 	and	r17,r17,r2
   8fbc4:	8c400094 	ori	r17,r17,2
   8fbc8:	002b883a 	mov	r21,zero
   8fbcc:	003f8506 	br	8f9e4 <__alt_data_end+0xfffba2b4>
   8fbd0:	b029883a 	mov	r20,r22
   8fbd4:	003c0b06 	br	8ec04 <__alt_data_end+0xfffb94d4>
   8fbd8:	04e7c83a 	sub	r19,zero,r19
   8fbdc:	05400b44 	movi	r21,45
   8fbe0:	9804c03a 	cmpne	r2,r19,zero
   8fbe4:	0529c83a 	sub	r20,zero,r20
   8fbe8:	dd401d85 	stb	r21,118(sp)
   8fbec:	a0a9c83a 	sub	r20,r20,r2
   8fbf0:	80009716 	blt	r16,zero,8fe50 <___vfiprintf_internal_r+0x138c>
   8fbf4:	00bfdfc4 	movi	r2,-129
   8fbf8:	88a2703a 	and	r17,r17,r2
   8fbfc:	003db006 	br	8f2c0 <__alt_data_end+0xfffb9b90>
   8fc00:	b0c00007 	ldb	r3,0(r22)
   8fc04:	003c0c06 	br	8ec38 <__alt_data_end+0xfffb9508>
   8fc08:	8880100c 	andi	r2,r17,64
   8fc0c:	d8001d85 	stb	zero,118(sp)
   8fc10:	1000461e 	bne	r2,zero,8fd2c <___vfiprintf_internal_r+0x1268>
   8fc14:	d9002217 	ldw	r4,136(sp)
   8fc18:	0029883a 	mov	r20,zero
   8fc1c:	20800104 	addi	r2,r4,4
   8fc20:	24c00017 	ldw	r19,0(r4)
   8fc24:	803df80e 	bge	r16,zero,8f408 <__alt_data_end+0xfffb9cd8>
   8fc28:	9d06b03a 	or	r3,r19,r20
   8fc2c:	d8802215 	stw	r2,136(sp)
   8fc30:	183d5e1e 	bne	r3,zero,8f1ac <__alt_data_end+0xfffb9a7c>
   8fc34:	002b883a 	mov	r21,zero
   8fc38:	0005883a 	mov	r2,zero
   8fc3c:	003e1006 	br	8f480 <__alt_data_end+0xfffb9d50>
   8fc40:	8880040c 	andi	r2,r17,16
   8fc44:	1000321e 	bne	r2,zero,8fd10 <___vfiprintf_internal_r+0x124c>
   8fc48:	8c40100c 	andi	r17,r17,64
   8fc4c:	88008d26 	beq	r17,zero,8fe84 <___vfiprintf_internal_r+0x13c0>
   8fc50:	d9402217 	ldw	r5,136(sp)
   8fc54:	d8c02417 	ldw	r3,144(sp)
   8fc58:	28800017 	ldw	r2,0(r5)
   8fc5c:	29400104 	addi	r5,r5,4
   8fc60:	d9402215 	stw	r5,136(sp)
   8fc64:	10c0000d 	sth	r3,0(r2)
   8fc68:	003bca06 	br	8eb94 <__alt_data_end+0xfffb9464>
   8fc6c:	8880100c 	andi	r2,r17,64
   8fc70:	10003a26 	beq	r2,zero,8fd5c <___vfiprintf_internal_r+0x1298>
   8fc74:	d8802217 	ldw	r2,136(sp)
   8fc78:	14c0000f 	ldh	r19,0(r2)
   8fc7c:	10800104 	addi	r2,r2,4
   8fc80:	d8802215 	stw	r2,136(sp)
   8fc84:	9829d7fa 	srai	r20,r19,31
   8fc88:	a005883a 	mov	r2,r20
   8fc8c:	003d8506 	br	8f2a4 <__alt_data_end+0xfffb9b74>
   8fc90:	8880100c 	andi	r2,r17,64
   8fc94:	10002b26 	beq	r2,zero,8fd44 <___vfiprintf_internal_r+0x1280>
   8fc98:	d8802217 	ldw	r2,136(sp)
   8fc9c:	0029883a 	mov	r20,zero
   8fca0:	14c0000b 	ldhu	r19,0(r2)
   8fca4:	10800104 	addi	r2,r2,4
   8fca8:	d8802215 	stw	r2,136(sp)
   8fcac:	003d5d06 	br	8f224 <__alt_data_end+0xfffb9af4>
   8fcb0:	d9402017 	ldw	r5,128(sp)
   8fcb4:	d9002117 	ldw	r4,132(sp)
   8fcb8:	d9801a04 	addi	r6,sp,104
   8fcbc:	d8c02a15 	stw	r3,168(sp)
   8fcc0:	d9c02b15 	stw	r7,172(sp)
   8fcc4:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8fcc8:	d8c02a17 	ldw	r3,168(sp)
   8fccc:	d9c02b17 	ldw	r7,172(sp)
   8fcd0:	103eb41e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8fcd4:	d9001b17 	ldw	r4,108(sp)
   8fcd8:	d8801c17 	ldw	r2,112(sp)
   8fcdc:	d811883a 	mov	r8,sp
   8fce0:	21400044 	addi	r5,r4,1
   8fce4:	003e6706 	br	8f684 <__alt_data_end+0xfffb9f54>
   8fce8:	00bfffc4 	movi	r2,-1
   8fcec:	003c4a06 	br	8ee18 <__alt_data_end+0xfffb96e8>
   8fcf0:	9805883a 	mov	r2,r19
   8fcf4:	003ee806 	br	8f898 <__alt_data_end+0xfffba168>
   8fcf8:	d8c02217 	ldw	r3,136(sp)
   8fcfc:	0029883a 	mov	r20,zero
   8fd00:	18800104 	addi	r2,r3,4
   8fd04:	1cc0000b 	ldhu	r19,0(r3)
   8fd08:	803f9e0e 	bge	r16,zero,8fb84 <__alt_data_end+0xfffba454>
   8fd0c:	003dd706 	br	8f46c <__alt_data_end+0xfffb9d3c>
   8fd10:	d8c02217 	ldw	r3,136(sp)
   8fd14:	d9002417 	ldw	r4,144(sp)
   8fd18:	18800017 	ldw	r2,0(r3)
   8fd1c:	18c00104 	addi	r3,r3,4
   8fd20:	d8c02215 	stw	r3,136(sp)
   8fd24:	11000015 	stw	r4,0(r2)
   8fd28:	003b9a06 	br	8eb94 <__alt_data_end+0xfffb9464>
   8fd2c:	d8c02217 	ldw	r3,136(sp)
   8fd30:	0029883a 	mov	r20,zero
   8fd34:	18800104 	addi	r2,r3,4
   8fd38:	1cc0000b 	ldhu	r19,0(r3)
   8fd3c:	803db20e 	bge	r16,zero,8f408 <__alt_data_end+0xfffb9cd8>
   8fd40:	003fb906 	br	8fc28 <__alt_data_end+0xfffba4f8>
   8fd44:	d9002217 	ldw	r4,136(sp)
   8fd48:	0029883a 	mov	r20,zero
   8fd4c:	24c00017 	ldw	r19,0(r4)
   8fd50:	21000104 	addi	r4,r4,4
   8fd54:	d9002215 	stw	r4,136(sp)
   8fd58:	003d3206 	br	8f224 <__alt_data_end+0xfffb9af4>
   8fd5c:	d8c02217 	ldw	r3,136(sp)
   8fd60:	1cc00017 	ldw	r19,0(r3)
   8fd64:	18c00104 	addi	r3,r3,4
   8fd68:	d8c02215 	stw	r3,136(sp)
   8fd6c:	9829d7fa 	srai	r20,r19,31
   8fd70:	a005883a 	mov	r2,r20
   8fd74:	003d4b06 	br	8f2a4 <__alt_data_end+0xfffb9b74>
   8fd78:	0009883a 	mov	r4,zero
   8fd7c:	01400044 	movi	r5,1
   8fd80:	d811883a 	mov	r8,sp
   8fd84:	003e4f06 	br	8f6c4 <__alt_data_end+0xfffb9f94>
   8fd88:	d8c02215 	stw	r3,136(sp)
   8fd8c:	002b883a 	mov	r21,zero
   8fd90:	003db806 	br	8f474 <__alt_data_end+0xfffb9d44>
   8fd94:	d811883a 	mov	r8,sp
   8fd98:	003e9606 	br	8f7f4 <__alt_data_end+0xfffba0c4>
   8fd9c:	01000274 	movhi	r4,9
   8fda0:	2110cd04 	addi	r4,r4,17204
   8fda4:	d9002315 	stw	r4,140(sp)
   8fda8:	003e6306 	br	8f738 <__alt_data_end+0xfffba008>
   8fdac:	b0c00043 	ldbu	r3,1(r22)
   8fdb0:	8c400814 	ori	r17,r17,32
   8fdb4:	b5800044 	addi	r22,r22,1
   8fdb8:	18c03fcc 	andi	r3,r3,255
   8fdbc:	18c0201c 	xori	r3,r3,128
   8fdc0:	18ffe004 	addi	r3,r3,-128
   8fdc4:	003b9c06 	br	8ec38 <__alt_data_end+0xfffb9508>
   8fdc8:	b809883a 	mov	r4,r23
   8fdcc:	da002a15 	stw	r8,168(sp)
   8fdd0:	00888540 	call	88854 <strlen>
   8fdd4:	1029883a 	mov	r20,r2
   8fdd8:	dd401d83 	ldbu	r21,118(sp)
   8fddc:	df002215 	stw	fp,136(sp)
   8fde0:	0021883a 	mov	r16,zero
   8fde4:	da002a17 	ldw	r8,168(sp)
   8fde8:	003c3906 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8fdec:	d9402017 	ldw	r5,128(sp)
   8fdf0:	d9002117 	ldw	r4,132(sp)
   8fdf4:	d9801a04 	addi	r6,sp,104
   8fdf8:	008e9b00 	call	8e9b0 <__sprint_r.part.0>
   8fdfc:	103e691e 	bne	r2,zero,8f7a4 <__alt_data_end+0xfffba074>
   8fe00:	d9001b17 	ldw	r4,108(sp)
   8fe04:	d8801c17 	ldw	r2,112(sp)
   8fe08:	d811883a 	mov	r8,sp
   8fe0c:	21400044 	addi	r5,r4,1
   8fe10:	003e2e06 	br	8f6cc <__alt_data_end+0xfffb9f9c>
   8fe14:	01000274 	movhi	r4,9
   8fe18:	2110d104 	addi	r4,r4,17220
   8fe1c:	d9002315 	stw	r4,140(sp)
   8fe20:	d9001b17 	ldw	r4,108(sp)
   8fe24:	21000044 	addi	r4,r4,1
   8fe28:	003c5e06 	br	8efa4 <__alt_data_end+0xfffb9874>
   8fe2c:	002b883a 	mov	r21,zero
   8fe30:	00800084 	movi	r2,2
   8fe34:	10803fcc 	andi	r2,r2,255
   8fe38:	01000044 	movi	r4,1
   8fe3c:	11002b26 	beq	r2,r4,8feec <___vfiprintf_internal_r+0x1428>
   8fe40:	01000084 	movi	r4,2
   8fe44:	11002b1e 	bne	r2,r4,8fef4 <___vfiprintf_internal_r+0x1430>
   8fe48:	1823883a 	mov	r17,r3
   8fe4c:	003ee506 	br	8f9e4 <__alt_data_end+0xfffba2b4>
   8fe50:	8807883a 	mov	r3,r17
   8fe54:	00800044 	movi	r2,1
   8fe58:	003ff606 	br	8fe34 <__alt_data_end+0xfffba704>
   8fe5c:	00800184 	movi	r2,6
   8fe60:	1400012e 	bgeu	r2,r16,8fe68 <___vfiprintf_internal_r+0x13a4>
   8fe64:	1021883a 	mov	r16,r2
   8fe68:	8029883a 	mov	r20,r16
   8fe6c:	8027883a 	mov	r19,r16
   8fe70:	80002216 	blt	r16,zero,8fefc <___vfiprintf_internal_r+0x1438>
   8fe74:	05c00274 	movhi	r23,9
   8fe78:	df002215 	stw	fp,136(sp)
   8fe7c:	bdd07204 	addi	r23,r23,16840
   8fe80:	003cfb06 	br	8f270 <__alt_data_end+0xfffb9b40>
   8fe84:	d9002217 	ldw	r4,136(sp)
   8fe88:	d9402417 	ldw	r5,144(sp)
   8fe8c:	20800017 	ldw	r2,0(r4)
   8fe90:	21000104 	addi	r4,r4,4
   8fe94:	d9002215 	stw	r4,136(sp)
   8fe98:	11400015 	stw	r5,0(r2)
   8fe9c:	003b3d06 	br	8eb94 <__alt_data_end+0xfffb9464>
   8fea0:	01400274 	movhi	r5,9
   8fea4:	2950d104 	addi	r5,r5,17220
   8fea8:	d9402315 	stw	r5,140(sp)
   8feac:	d9401b17 	ldw	r5,108(sp)
   8feb0:	29400044 	addi	r5,r5,1
   8feb4:	003e6d06 	br	8f86c <__alt_data_end+0xfffba13c>
   8feb8:	8029883a 	mov	r20,r16
   8febc:	dd401d83 	ldbu	r21,118(sp)
   8fec0:	df002215 	stw	fp,136(sp)
   8fec4:	0021883a 	mov	r16,zero
   8fec8:	003c0106 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8fecc:	00c00274 	movhi	r3,9
   8fed0:	18d0cd04 	addi	r3,r3,17204
   8fed4:	d8c02315 	stw	r3,140(sp)
   8fed8:	280d883a 	mov	r6,r5
   8fedc:	003c6906 	br	8f084 <__alt_data_end+0xfffb9954>
   8fee0:	802d883a 	mov	r22,r16
   8fee4:	0021883a 	mov	r16,zero
   8fee8:	003b5406 	br	8ec3c <__alt_data_end+0xfffb950c>
   8feec:	1823883a 	mov	r17,r3
   8fef0:	003cf306 	br	8f2c0 <__alt_data_end+0xfffb9b90>
   8fef4:	1823883a 	mov	r17,r3
   8fef8:	003cad06 	br	8f1b0 <__alt_data_end+0xfffb9a80>
   8fefc:	0027883a 	mov	r19,zero
   8ff00:	003fdc06 	br	8fe74 <__alt_data_end+0xfffba744>
   8ff04:	d9402217 	ldw	r5,136(sp)
   8ff08:	8005883a 	mov	r2,r16
   8ff0c:	b0c00043 	ldbu	r3,1(r22)
   8ff10:	2c000017 	ldw	r16,0(r5)
   8ff14:	29000104 	addi	r4,r5,4
   8ff18:	d9002215 	stw	r4,136(sp)
   8ff1c:	102d883a 	mov	r22,r2
   8ff20:	803fa50e 	bge	r16,zero,8fdb8 <__alt_data_end+0xfffba688>
   8ff24:	18c03fcc 	andi	r3,r3,255
   8ff28:	18c0201c 	xori	r3,r3,128
   8ff2c:	043fffc4 	movi	r16,-1
   8ff30:	18ffe004 	addi	r3,r3,-128
   8ff34:	003b4006 	br	8ec38 <__alt_data_end+0xfffb9508>
   8ff38:	d9402303 	ldbu	r5,140(sp)
   8ff3c:	d9401d85 	stb	r5,118(sp)
   8ff40:	003cae06 	br	8f1fc <__alt_data_end+0xfffb9acc>
   8ff44:	d8c02303 	ldbu	r3,140(sp)
   8ff48:	d8c01d85 	stb	r3,118(sp)
   8ff4c:	003d1406 	br	8f3a0 <__alt_data_end+0xfffb9c70>
   8ff50:	d8c02303 	ldbu	r3,140(sp)
   8ff54:	d8c01d85 	stb	r3,118(sp)
   8ff58:	003cca06 	br	8f284 <__alt_data_end+0xfffb9b54>
   8ff5c:	8880004c 	andi	r2,r17,1
   8ff60:	002b883a 	mov	r21,zero
   8ff64:	10000526 	beq	r2,zero,8ff7c <___vfiprintf_internal_r+0x14b8>
   8ff68:	00800c04 	movi	r2,48
   8ff6c:	d88019c5 	stb	r2,103(sp)
   8ff70:	dd002817 	ldw	r20,160(sp)
   8ff74:	ddc019c4 	addi	r23,sp,103
   8ff78:	003bd506 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8ff7c:	0029883a 	mov	r20,zero
   8ff80:	ddc01a04 	addi	r23,sp,104
   8ff84:	003bd206 	br	8eed0 <__alt_data_end+0xfffb97a0>
   8ff88:	d9002303 	ldbu	r4,140(sp)
   8ff8c:	d9001d85 	stb	r4,118(sp)
   8ff90:	003da606 	br	8f62c <__alt_data_end+0xfffb9efc>
   8ff94:	d8c02303 	ldbu	r3,140(sp)
   8ff98:	d8c01d85 	stb	r3,118(sp)
   8ff9c:	003c7606 	br	8f178 <__alt_data_end+0xfffb9a48>
   8ffa0:	d8c02303 	ldbu	r3,140(sp)
   8ffa4:	d8c01d85 	stb	r3,118(sp)
   8ffa8:	003c6506 	br	8f140 <__alt_data_end+0xfffb9a10>
   8ffac:	d9002303 	ldbu	r4,140(sp)
   8ffb0:	d9001d85 	stb	r4,118(sp)
   8ffb4:	003d3d06 	br	8f4ac <__alt_data_end+0xfffb9d7c>
   8ffb8:	d8c02303 	ldbu	r3,140(sp)
   8ffbc:	d8c01d85 	stb	r3,118(sp)
   8ffc0:	003d1d06 	br	8f438 <__alt_data_end+0xfffb9d08>
   8ffc4:	d8c02303 	ldbu	r3,140(sp)
   8ffc8:	d8c01d85 	stb	r3,118(sp)
   8ffcc:	003d0306 	br	8f3dc <__alt_data_end+0xfffb9cac>

0008ffd0 <__vfiprintf_internal>:
   8ffd0:	008002b4 	movhi	r2,10
   8ffd4:	10b7b804 	addi	r2,r2,-8480
   8ffd8:	300f883a 	mov	r7,r6
   8ffdc:	280d883a 	mov	r6,r5
   8ffe0:	200b883a 	mov	r5,r4
   8ffe4:	11000017 	ldw	r4,0(r2)
   8ffe8:	008eac41 	jmpi	8eac4 <___vfiprintf_internal_r>

0008ffec <__sbprintf>:
   8ffec:	2880030b 	ldhu	r2,12(r5)
   8fff0:	2ac01917 	ldw	r11,100(r5)
   8fff4:	2a80038b 	ldhu	r10,14(r5)
   8fff8:	2a400717 	ldw	r9,28(r5)
   8fffc:	2a000917 	ldw	r8,36(r5)
   90000:	defee204 	addi	sp,sp,-1144
   90004:	00c10004 	movi	r3,1024
   90008:	dc011a15 	stw	r16,1128(sp)
   9000c:	10bfff4c 	andi	r2,r2,65533
   90010:	2821883a 	mov	r16,r5
   90014:	d8cb883a 	add	r5,sp,r3
   90018:	dc811c15 	stw	r18,1136(sp)
   9001c:	dc411b15 	stw	r17,1132(sp)
   90020:	dfc11d15 	stw	ra,1140(sp)
   90024:	2025883a 	mov	r18,r4
   90028:	d881030d 	sth	r2,1036(sp)
   9002c:	dac11915 	stw	r11,1124(sp)
   90030:	da81038d 	sth	r10,1038(sp)
   90034:	da410715 	stw	r9,1052(sp)
   90038:	da010915 	stw	r8,1060(sp)
   9003c:	dec10015 	stw	sp,1024(sp)
   90040:	dec10415 	stw	sp,1040(sp)
   90044:	d8c10215 	stw	r3,1032(sp)
   90048:	d8c10515 	stw	r3,1044(sp)
   9004c:	d8010615 	stw	zero,1048(sp)
   90050:	008eac40 	call	8eac4 <___vfiprintf_internal_r>
   90054:	1023883a 	mov	r17,r2
   90058:	10000416 	blt	r2,zero,9006c <__sbprintf+0x80>
   9005c:	d9410004 	addi	r5,sp,1024
   90060:	9009883a 	mov	r4,r18
   90064:	00867540 	call	86754 <_fflush_r>
   90068:	10000d1e 	bne	r2,zero,900a0 <__sbprintf+0xb4>
   9006c:	d881030b 	ldhu	r2,1036(sp)
   90070:	1080100c 	andi	r2,r2,64
   90074:	10000326 	beq	r2,zero,90084 <__sbprintf+0x98>
   90078:	8080030b 	ldhu	r2,12(r16)
   9007c:	10801014 	ori	r2,r2,64
   90080:	8080030d 	sth	r2,12(r16)
   90084:	8805883a 	mov	r2,r17
   90088:	dfc11d17 	ldw	ra,1140(sp)
   9008c:	dc811c17 	ldw	r18,1136(sp)
   90090:	dc411b17 	ldw	r17,1132(sp)
   90094:	dc011a17 	ldw	r16,1128(sp)
   90098:	dec11e04 	addi	sp,sp,1144
   9009c:	f800283a 	ret
   900a0:	047fffc4 	movi	r17,-1
   900a4:	003ff106 	br	9006c <__alt_data_end+0xfffba93c>

000900a8 <_calloc_r>:
   900a8:	defffe04 	addi	sp,sp,-8
   900ac:	2805883a 	mov	r2,r5
   900b0:	dc000015 	stw	r16,0(sp)
   900b4:	300b883a 	mov	r5,r6
   900b8:	2021883a 	mov	r16,r4
   900bc:	1009883a 	mov	r4,r2
   900c0:	dfc00115 	stw	ra,4(sp)
   900c4:	0082a480 	call	82a48 <__mulsi3>
   900c8:	100b883a 	mov	r5,r2
   900cc:	8009883a 	mov	r4,r16
   900d0:	0087a000 	call	87a00 <_malloc_r>
   900d4:	10002926 	beq	r2,zero,9017c <_calloc_r+0xd4>
   900d8:	11bfff17 	ldw	r6,-4(r2)
   900dc:	1021883a 	mov	r16,r2
   900e0:	00bfff04 	movi	r2,-4
   900e4:	308c703a 	and	r6,r6,r2
   900e8:	00c00904 	movi	r3,36
   900ec:	308d883a 	add	r6,r6,r2
   900f0:	19801636 	bltu	r3,r6,9014c <_calloc_r+0xa4>
   900f4:	008004c4 	movi	r2,19
   900f8:	11800b2e 	bgeu	r2,r6,90128 <_calloc_r+0x80>
   900fc:	80000015 	stw	zero,0(r16)
   90100:	80000115 	stw	zero,4(r16)
   90104:	008006c4 	movi	r2,27
   90108:	11801a2e 	bgeu	r2,r6,90174 <_calloc_r+0xcc>
   9010c:	80000215 	stw	zero,8(r16)
   90110:	80000315 	stw	zero,12(r16)
   90114:	30c0151e 	bne	r6,r3,9016c <_calloc_r+0xc4>
   90118:	80000415 	stw	zero,16(r16)
   9011c:	80800604 	addi	r2,r16,24
   90120:	80000515 	stw	zero,20(r16)
   90124:	00000106 	br	9012c <_calloc_r+0x84>
   90128:	8005883a 	mov	r2,r16
   9012c:	10000015 	stw	zero,0(r2)
   90130:	10000115 	stw	zero,4(r2)
   90134:	10000215 	stw	zero,8(r2)
   90138:	8005883a 	mov	r2,r16
   9013c:	dfc00117 	ldw	ra,4(sp)
   90140:	dc000017 	ldw	r16,0(sp)
   90144:	dec00204 	addi	sp,sp,8
   90148:	f800283a 	ret
   9014c:	000b883a 	mov	r5,zero
   90150:	8009883a 	mov	r4,r16
   90154:	008820c0 	call	8820c <memset>
   90158:	8005883a 	mov	r2,r16
   9015c:	dfc00117 	ldw	ra,4(sp)
   90160:	dc000017 	ldw	r16,0(sp)
   90164:	dec00204 	addi	sp,sp,8
   90168:	f800283a 	ret
   9016c:	80800404 	addi	r2,r16,16
   90170:	003fee06 	br	9012c <__alt_data_end+0xfffba9fc>
   90174:	80800204 	addi	r2,r16,8
   90178:	003fec06 	br	9012c <__alt_data_end+0xfffba9fc>
   9017c:	0005883a 	mov	r2,zero
   90180:	003fee06 	br	9013c <__alt_data_end+0xfffbaa0c>

00090184 <__fputwc>:
   90184:	defff804 	addi	sp,sp,-32
   90188:	dcc00415 	stw	r19,16(sp)
   9018c:	dc800315 	stw	r18,12(sp)
   90190:	dc000115 	stw	r16,4(sp)
   90194:	dfc00715 	stw	ra,28(sp)
   90198:	dd400615 	stw	r21,24(sp)
   9019c:	dd000515 	stw	r20,20(sp)
   901a0:	dc400215 	stw	r17,8(sp)
   901a4:	2027883a 	mov	r19,r4
   901a8:	2825883a 	mov	r18,r5
   901ac:	3021883a 	mov	r16,r6
   901b0:	008cda80 	call	8cda8 <__locale_mb_cur_max>
   901b4:	00c00044 	movi	r3,1
   901b8:	10c03e26 	beq	r2,r3,902b4 <__fputwc+0x130>
   901bc:	81c01704 	addi	r7,r16,92
   901c0:	900d883a 	mov	r6,r18
   901c4:	d80b883a 	mov	r5,sp
   901c8:	9809883a 	mov	r4,r19
   901cc:	00904e40 	call	904e4 <_wcrtomb_r>
   901d0:	1029883a 	mov	r20,r2
   901d4:	00bfffc4 	movi	r2,-1
   901d8:	a0802026 	beq	r20,r2,9025c <__fputwc+0xd8>
   901dc:	d9400003 	ldbu	r5,0(sp)
   901e0:	a0001c26 	beq	r20,zero,90254 <__fputwc+0xd0>
   901e4:	0023883a 	mov	r17,zero
   901e8:	05400284 	movi	r21,10
   901ec:	00000906 	br	90214 <__fputwc+0x90>
   901f0:	80800017 	ldw	r2,0(r16)
   901f4:	11400005 	stb	r5,0(r2)
   901f8:	80c00017 	ldw	r3,0(r16)
   901fc:	18c00044 	addi	r3,r3,1
   90200:	80c00015 	stw	r3,0(r16)
   90204:	8c400044 	addi	r17,r17,1
   90208:	dc45883a 	add	r2,sp,r17
   9020c:	8d00112e 	bgeu	r17,r20,90254 <__fputwc+0xd0>
   90210:	11400003 	ldbu	r5,0(r2)
   90214:	80c00217 	ldw	r3,8(r16)
   90218:	18ffffc4 	addi	r3,r3,-1
   9021c:	80c00215 	stw	r3,8(r16)
   90220:	183ff30e 	bge	r3,zero,901f0 <__alt_data_end+0xfffbaac0>
   90224:	80800617 	ldw	r2,24(r16)
   90228:	18801916 	blt	r3,r2,90290 <__fputwc+0x10c>
   9022c:	80800017 	ldw	r2,0(r16)
   90230:	11400005 	stb	r5,0(r2)
   90234:	80800017 	ldw	r2,0(r16)
   90238:	10c00003 	ldbu	r3,0(r2)
   9023c:	10800044 	addi	r2,r2,1
   90240:	1d402326 	beq	r3,r21,902d0 <__fputwc+0x14c>
   90244:	80800015 	stw	r2,0(r16)
   90248:	8c400044 	addi	r17,r17,1
   9024c:	dc45883a 	add	r2,sp,r17
   90250:	8d3fef36 	bltu	r17,r20,90210 <__alt_data_end+0xfffbaae0>
   90254:	9005883a 	mov	r2,r18
   90258:	00000406 	br	9026c <__fputwc+0xe8>
   9025c:	80c0030b 	ldhu	r3,12(r16)
   90260:	a005883a 	mov	r2,r20
   90264:	18c01014 	ori	r3,r3,64
   90268:	80c0030d 	sth	r3,12(r16)
   9026c:	dfc00717 	ldw	ra,28(sp)
   90270:	dd400617 	ldw	r21,24(sp)
   90274:	dd000517 	ldw	r20,20(sp)
   90278:	dcc00417 	ldw	r19,16(sp)
   9027c:	dc800317 	ldw	r18,12(sp)
   90280:	dc400217 	ldw	r17,8(sp)
   90284:	dc000117 	ldw	r16,4(sp)
   90288:	dec00804 	addi	sp,sp,32
   9028c:	f800283a 	ret
   90290:	800d883a 	mov	r6,r16
   90294:	29403fcc 	andi	r5,r5,255
   90298:	9809883a 	mov	r4,r19
   9029c:	009038c0 	call	9038c <__swbuf_r>
   902a0:	10bfffe0 	cmpeqi	r2,r2,-1
   902a4:	10803fcc 	andi	r2,r2,255
   902a8:	103fd626 	beq	r2,zero,90204 <__alt_data_end+0xfffbaad4>
   902ac:	00bfffc4 	movi	r2,-1
   902b0:	003fee06 	br	9026c <__alt_data_end+0xfffbab3c>
   902b4:	90ffffc4 	addi	r3,r18,-1
   902b8:	01003f84 	movi	r4,254
   902bc:	20ffbf36 	bltu	r4,r3,901bc <__alt_data_end+0xfffbaa8c>
   902c0:	900b883a 	mov	r5,r18
   902c4:	dc800005 	stb	r18,0(sp)
   902c8:	1029883a 	mov	r20,r2
   902cc:	003fc506 	br	901e4 <__alt_data_end+0xfffbaab4>
   902d0:	800d883a 	mov	r6,r16
   902d4:	a80b883a 	mov	r5,r21
   902d8:	9809883a 	mov	r4,r19
   902dc:	009038c0 	call	9038c <__swbuf_r>
   902e0:	10bfffe0 	cmpeqi	r2,r2,-1
   902e4:	003fef06 	br	902a4 <__alt_data_end+0xfffbab74>

000902e8 <_fputwc_r>:
   902e8:	3080030b 	ldhu	r2,12(r6)
   902ec:	10c8000c 	andi	r3,r2,8192
   902f0:	1800051e 	bne	r3,zero,90308 <_fputwc_r+0x20>
   902f4:	30c01917 	ldw	r3,100(r6)
   902f8:	10880014 	ori	r2,r2,8192
   902fc:	3080030d 	sth	r2,12(r6)
   90300:	18880014 	ori	r2,r3,8192
   90304:	30801915 	stw	r2,100(r6)
   90308:	00901841 	jmpi	90184 <__fputwc>

0009030c <fputwc>:
   9030c:	008002b4 	movhi	r2,10
   90310:	defffc04 	addi	sp,sp,-16
   90314:	10b7b804 	addi	r2,r2,-8480
   90318:	dc000115 	stw	r16,4(sp)
   9031c:	14000017 	ldw	r16,0(r2)
   90320:	dc400215 	stw	r17,8(sp)
   90324:	dfc00315 	stw	ra,12(sp)
   90328:	2023883a 	mov	r17,r4
   9032c:	80000226 	beq	r16,zero,90338 <fputwc+0x2c>
   90330:	80800e17 	ldw	r2,56(r16)
   90334:	10001026 	beq	r2,zero,90378 <fputwc+0x6c>
   90338:	2880030b 	ldhu	r2,12(r5)
   9033c:	10c8000c 	andi	r3,r2,8192
   90340:	1800051e 	bne	r3,zero,90358 <fputwc+0x4c>
   90344:	28c01917 	ldw	r3,100(r5)
   90348:	10880014 	ori	r2,r2,8192
   9034c:	2880030d 	sth	r2,12(r5)
   90350:	18880014 	ori	r2,r3,8192
   90354:	28801915 	stw	r2,100(r5)
   90358:	280d883a 	mov	r6,r5
   9035c:	8009883a 	mov	r4,r16
   90360:	880b883a 	mov	r5,r17
   90364:	dfc00317 	ldw	ra,12(sp)
   90368:	dc400217 	ldw	r17,8(sp)
   9036c:	dc000117 	ldw	r16,4(sp)
   90370:	dec00404 	addi	sp,sp,16
   90374:	00901841 	jmpi	90184 <__fputwc>
   90378:	8009883a 	mov	r4,r16
   9037c:	d9400015 	stw	r5,0(sp)
   90380:	0086b400 	call	86b40 <__sinit>
   90384:	d9400017 	ldw	r5,0(sp)
   90388:	003feb06 	br	90338 <__alt_data_end+0xfffbac08>

0009038c <__swbuf_r>:
   9038c:	defffb04 	addi	sp,sp,-20
   90390:	dcc00315 	stw	r19,12(sp)
   90394:	dc800215 	stw	r18,8(sp)
   90398:	dc000015 	stw	r16,0(sp)
   9039c:	dfc00415 	stw	ra,16(sp)
   903a0:	dc400115 	stw	r17,4(sp)
   903a4:	2025883a 	mov	r18,r4
   903a8:	2827883a 	mov	r19,r5
   903ac:	3021883a 	mov	r16,r6
   903b0:	20000226 	beq	r4,zero,903bc <__swbuf_r+0x30>
   903b4:	20800e17 	ldw	r2,56(r4)
   903b8:	10004226 	beq	r2,zero,904c4 <__swbuf_r+0x138>
   903bc:	80800617 	ldw	r2,24(r16)
   903c0:	8100030b 	ldhu	r4,12(r16)
   903c4:	80800215 	stw	r2,8(r16)
   903c8:	2080020c 	andi	r2,r4,8
   903cc:	10003626 	beq	r2,zero,904a8 <__swbuf_r+0x11c>
   903d0:	80c00417 	ldw	r3,16(r16)
   903d4:	18003426 	beq	r3,zero,904a8 <__swbuf_r+0x11c>
   903d8:	2088000c 	andi	r2,r4,8192
   903dc:	9c403fcc 	andi	r17,r19,255
   903e0:	10001a26 	beq	r2,zero,9044c <__swbuf_r+0xc0>
   903e4:	80800017 	ldw	r2,0(r16)
   903e8:	81000517 	ldw	r4,20(r16)
   903ec:	10c7c83a 	sub	r3,r2,r3
   903f0:	1900200e 	bge	r3,r4,90474 <__swbuf_r+0xe8>
   903f4:	18c00044 	addi	r3,r3,1
   903f8:	81000217 	ldw	r4,8(r16)
   903fc:	11400044 	addi	r5,r2,1
   90400:	81400015 	stw	r5,0(r16)
   90404:	213fffc4 	addi	r4,r4,-1
   90408:	81000215 	stw	r4,8(r16)
   9040c:	14c00005 	stb	r19,0(r2)
   90410:	80800517 	ldw	r2,20(r16)
   90414:	10c01e26 	beq	r2,r3,90490 <__swbuf_r+0x104>
   90418:	8080030b 	ldhu	r2,12(r16)
   9041c:	1080004c 	andi	r2,r2,1
   90420:	10000226 	beq	r2,zero,9042c <__swbuf_r+0xa0>
   90424:	00800284 	movi	r2,10
   90428:	88801926 	beq	r17,r2,90490 <__swbuf_r+0x104>
   9042c:	8805883a 	mov	r2,r17
   90430:	dfc00417 	ldw	ra,16(sp)
   90434:	dcc00317 	ldw	r19,12(sp)
   90438:	dc800217 	ldw	r18,8(sp)
   9043c:	dc400117 	ldw	r17,4(sp)
   90440:	dc000017 	ldw	r16,0(sp)
   90444:	dec00504 	addi	sp,sp,20
   90448:	f800283a 	ret
   9044c:	81401917 	ldw	r5,100(r16)
   90450:	00b7ffc4 	movi	r2,-8193
   90454:	21080014 	ori	r4,r4,8192
   90458:	2884703a 	and	r2,r5,r2
   9045c:	80801915 	stw	r2,100(r16)
   90460:	80800017 	ldw	r2,0(r16)
   90464:	8100030d 	sth	r4,12(r16)
   90468:	81000517 	ldw	r4,20(r16)
   9046c:	10c7c83a 	sub	r3,r2,r3
   90470:	193fe016 	blt	r3,r4,903f4 <__alt_data_end+0xfffbacc4>
   90474:	800b883a 	mov	r5,r16
   90478:	9009883a 	mov	r4,r18
   9047c:	00867540 	call	86754 <_fflush_r>
   90480:	1000071e 	bne	r2,zero,904a0 <__swbuf_r+0x114>
   90484:	80800017 	ldw	r2,0(r16)
   90488:	00c00044 	movi	r3,1
   9048c:	003fda06 	br	903f8 <__alt_data_end+0xfffbacc8>
   90490:	800b883a 	mov	r5,r16
   90494:	9009883a 	mov	r4,r18
   90498:	00867540 	call	86754 <_fflush_r>
   9049c:	103fe326 	beq	r2,zero,9042c <__alt_data_end+0xfffbacfc>
   904a0:	00bfffc4 	movi	r2,-1
   904a4:	003fe206 	br	90430 <__alt_data_end+0xfffbad00>
   904a8:	800b883a 	mov	r5,r16
   904ac:	9009883a 	mov	r4,r18
   904b0:	008ad000 	call	8ad00 <__swsetup_r>
   904b4:	103ffa1e 	bne	r2,zero,904a0 <__alt_data_end+0xfffbad70>
   904b8:	8100030b 	ldhu	r4,12(r16)
   904bc:	80c00417 	ldw	r3,16(r16)
   904c0:	003fc506 	br	903d8 <__alt_data_end+0xfffbaca8>
   904c4:	0086b400 	call	86b40 <__sinit>
   904c8:	003fbc06 	br	903bc <__alt_data_end+0xfffbac8c>

000904cc <__swbuf>:
   904cc:	008002b4 	movhi	r2,10
   904d0:	10b7b804 	addi	r2,r2,-8480
   904d4:	280d883a 	mov	r6,r5
   904d8:	200b883a 	mov	r5,r4
   904dc:	11000017 	ldw	r4,0(r2)
   904e0:	009038c1 	jmpi	9038c <__swbuf_r>

000904e4 <_wcrtomb_r>:
   904e4:	defff604 	addi	sp,sp,-40
   904e8:	008002b4 	movhi	r2,10
   904ec:	dc800815 	stw	r18,32(sp)
   904f0:	dc400715 	stw	r17,28(sp)
   904f4:	dc000615 	stw	r16,24(sp)
   904f8:	10b7bc04 	addi	r2,r2,-8464
   904fc:	dfc00915 	stw	ra,36(sp)
   90500:	2021883a 	mov	r16,r4
   90504:	3823883a 	mov	r17,r7
   90508:	14800017 	ldw	r18,0(r2)
   9050c:	28001426 	beq	r5,zero,90560 <_wcrtomb_r+0x7c>
   90510:	d9400415 	stw	r5,16(sp)
   90514:	d9800515 	stw	r6,20(sp)
   90518:	008cd9c0 	call	8cd9c <__locale_charset>
   9051c:	d9800517 	ldw	r6,20(sp)
   90520:	d9400417 	ldw	r5,16(sp)
   90524:	100f883a 	mov	r7,r2
   90528:	dc400015 	stw	r17,0(sp)
   9052c:	8009883a 	mov	r4,r16
   90530:	903ee83a 	callr	r18
   90534:	00ffffc4 	movi	r3,-1
   90538:	10c0031e 	bne	r2,r3,90548 <_wcrtomb_r+0x64>
   9053c:	88000015 	stw	zero,0(r17)
   90540:	00c02284 	movi	r3,138
   90544:	80c00015 	stw	r3,0(r16)
   90548:	dfc00917 	ldw	ra,36(sp)
   9054c:	dc800817 	ldw	r18,32(sp)
   90550:	dc400717 	ldw	r17,28(sp)
   90554:	dc000617 	ldw	r16,24(sp)
   90558:	dec00a04 	addi	sp,sp,40
   9055c:	f800283a 	ret
   90560:	008cd9c0 	call	8cd9c <__locale_charset>
   90564:	100f883a 	mov	r7,r2
   90568:	dc400015 	stw	r17,0(sp)
   9056c:	000d883a 	mov	r6,zero
   90570:	d9400104 	addi	r5,sp,4
   90574:	8009883a 	mov	r4,r16
   90578:	903ee83a 	callr	r18
   9057c:	003fed06 	br	90534 <__alt_data_end+0xfffbae04>

00090580 <wcrtomb>:
   90580:	defff604 	addi	sp,sp,-40
   90584:	008002b4 	movhi	r2,10
   90588:	dc800615 	stw	r18,24(sp)
   9058c:	dc400515 	stw	r17,20(sp)
   90590:	10b7b804 	addi	r2,r2,-8480
   90594:	dfc00915 	stw	ra,36(sp)
   90598:	dd000815 	stw	r20,32(sp)
   9059c:	dcc00715 	stw	r19,28(sp)
   905a0:	dc000415 	stw	r16,16(sp)
   905a4:	3025883a 	mov	r18,r6
   905a8:	14400017 	ldw	r17,0(r2)
   905ac:	20001926 	beq	r4,zero,90614 <wcrtomb+0x94>
   905b0:	008002b4 	movhi	r2,10
   905b4:	10b7bc04 	addi	r2,r2,-8464
   905b8:	15000017 	ldw	r20,0(r2)
   905bc:	2021883a 	mov	r16,r4
   905c0:	2827883a 	mov	r19,r5
   905c4:	008cd9c0 	call	8cd9c <__locale_charset>
   905c8:	100f883a 	mov	r7,r2
   905cc:	dc800015 	stw	r18,0(sp)
   905d0:	980d883a 	mov	r6,r19
   905d4:	800b883a 	mov	r5,r16
   905d8:	8809883a 	mov	r4,r17
   905dc:	a03ee83a 	callr	r20
   905e0:	00ffffc4 	movi	r3,-1
   905e4:	10c0031e 	bne	r2,r3,905f4 <wcrtomb+0x74>
   905e8:	90000015 	stw	zero,0(r18)
   905ec:	00c02284 	movi	r3,138
   905f0:	88c00015 	stw	r3,0(r17)
   905f4:	dfc00917 	ldw	ra,36(sp)
   905f8:	dd000817 	ldw	r20,32(sp)
   905fc:	dcc00717 	ldw	r19,28(sp)
   90600:	dc800617 	ldw	r18,24(sp)
   90604:	dc400517 	ldw	r17,20(sp)
   90608:	dc000417 	ldw	r16,16(sp)
   9060c:	dec00a04 	addi	sp,sp,40
   90610:	f800283a 	ret
   90614:	008002b4 	movhi	r2,10
   90618:	10b7bc04 	addi	r2,r2,-8464
   9061c:	14000017 	ldw	r16,0(r2)
   90620:	008cd9c0 	call	8cd9c <__locale_charset>
   90624:	100f883a 	mov	r7,r2
   90628:	dc800015 	stw	r18,0(sp)
   9062c:	000d883a 	mov	r6,zero
   90630:	d9400104 	addi	r5,sp,4
   90634:	8809883a 	mov	r4,r17
   90638:	803ee83a 	callr	r16
   9063c:	003fe806 	br	905e0 <__alt_data_end+0xfffbaeb0>

00090640 <__ascii_wctomb>:
   90640:	28000526 	beq	r5,zero,90658 <__ascii_wctomb+0x18>
   90644:	00803fc4 	movi	r2,255
   90648:	11800536 	bltu	r2,r6,90660 <__ascii_wctomb+0x20>
   9064c:	29800005 	stb	r6,0(r5)
   90650:	00800044 	movi	r2,1
   90654:	f800283a 	ret
   90658:	0005883a 	mov	r2,zero
   9065c:	f800283a 	ret
   90660:	00802284 	movi	r2,138
   90664:	20800015 	stw	r2,0(r4)
   90668:	00bfffc4 	movi	r2,-1
   9066c:	f800283a 	ret

00090670 <_wctomb_r>:
   90670:	008002b4 	movhi	r2,10
   90674:	defff904 	addi	sp,sp,-28
   90678:	10b7bc04 	addi	r2,r2,-8464
   9067c:	dfc00615 	stw	ra,24(sp)
   90680:	dc400515 	stw	r17,20(sp)
   90684:	dc000415 	stw	r16,16(sp)
   90688:	3823883a 	mov	r17,r7
   9068c:	14000017 	ldw	r16,0(r2)
   90690:	d9000115 	stw	r4,4(sp)
   90694:	d9400215 	stw	r5,8(sp)
   90698:	d9800315 	stw	r6,12(sp)
   9069c:	008cd9c0 	call	8cd9c <__locale_charset>
   906a0:	d9800317 	ldw	r6,12(sp)
   906a4:	d9400217 	ldw	r5,8(sp)
   906a8:	d9000117 	ldw	r4,4(sp)
   906ac:	100f883a 	mov	r7,r2
   906b0:	dc400015 	stw	r17,0(sp)
   906b4:	803ee83a 	callr	r16
   906b8:	dfc00617 	ldw	ra,24(sp)
   906bc:	dc400517 	ldw	r17,20(sp)
   906c0:	dc000417 	ldw	r16,16(sp)
   906c4:	dec00704 	addi	sp,sp,28
   906c8:	f800283a 	ret

000906cc <__udivdi3>:
   906cc:	defff404 	addi	sp,sp,-48
   906d0:	dcc00515 	stw	r19,20(sp)
   906d4:	dc000215 	stw	r16,8(sp)
   906d8:	dfc00b15 	stw	ra,44(sp)
   906dc:	df000a15 	stw	fp,40(sp)
   906e0:	ddc00915 	stw	r23,36(sp)
   906e4:	dd800815 	stw	r22,32(sp)
   906e8:	dd400715 	stw	r21,28(sp)
   906ec:	dd000615 	stw	r20,24(sp)
   906f0:	dc800415 	stw	r18,16(sp)
   906f4:	dc400315 	stw	r17,12(sp)
   906f8:	2027883a 	mov	r19,r4
   906fc:	2821883a 	mov	r16,r5
   90700:	3800461e 	bne	r7,zero,9081c <__udivdi3+0x150>
   90704:	3023883a 	mov	r17,r6
   90708:	2025883a 	mov	r18,r4
   9070c:	2980572e 	bgeu	r5,r6,9086c <__udivdi3+0x1a0>
   90710:	00bfffd4 	movui	r2,65535
   90714:	282d883a 	mov	r22,r5
   90718:	1180b236 	bltu	r2,r6,909e4 <__udivdi3+0x318>
   9071c:	00803fc4 	movi	r2,255
   90720:	1185803a 	cmpltu	r2,r2,r6
   90724:	100490fa 	slli	r2,r2,3
   90728:	3086d83a 	srl	r3,r6,r2
   9072c:	01000274 	movhi	r4,9
   90730:	21102204 	addi	r4,r4,16520
   90734:	20c7883a 	add	r3,r4,r3
   90738:	18c00003 	ldbu	r3,0(r3)
   9073c:	1885883a 	add	r2,r3,r2
   90740:	00c00804 	movi	r3,32
   90744:	1887c83a 	sub	r3,r3,r2
   90748:	18000526 	beq	r3,zero,90760 <__udivdi3+0x94>
   9074c:	80e0983a 	sll	r16,r16,r3
   90750:	9884d83a 	srl	r2,r19,r2
   90754:	30e2983a 	sll	r17,r6,r3
   90758:	98e4983a 	sll	r18,r19,r3
   9075c:	142cb03a 	or	r22,r2,r16
   90760:	882ad43a 	srli	r21,r17,16
   90764:	b009883a 	mov	r4,r22
   90768:	8d3fffcc 	andi	r20,r17,65535
   9076c:	a80b883a 	mov	r5,r21
   90770:	00829f00 	call	829f0 <__umodsi3>
   90774:	b009883a 	mov	r4,r22
   90778:	a80b883a 	mov	r5,r21
   9077c:	1027883a 	mov	r19,r2
   90780:	008298c0 	call	8298c <__udivsi3>
   90784:	100b883a 	mov	r5,r2
   90788:	a009883a 	mov	r4,r20
   9078c:	102d883a 	mov	r22,r2
   90790:	0082a480 	call	82a48 <__mulsi3>
   90794:	9826943a 	slli	r19,r19,16
   90798:	9006d43a 	srli	r3,r18,16
   9079c:	1cc6b03a 	or	r3,r3,r19
   907a0:	1880052e 	bgeu	r3,r2,907b8 <__udivdi3+0xec>
   907a4:	1c47883a 	add	r3,r3,r17
   907a8:	b13fffc4 	addi	r4,r22,-1
   907ac:	1c400136 	bltu	r3,r17,907b4 <__udivdi3+0xe8>
   907b0:	18814236 	bltu	r3,r2,90cbc <__udivdi3+0x5f0>
   907b4:	202d883a 	mov	r22,r4
   907b8:	18a1c83a 	sub	r16,r3,r2
   907bc:	8009883a 	mov	r4,r16
   907c0:	a80b883a 	mov	r5,r21
   907c4:	00829f00 	call	829f0 <__umodsi3>
   907c8:	1027883a 	mov	r19,r2
   907cc:	8009883a 	mov	r4,r16
   907d0:	a80b883a 	mov	r5,r21
   907d4:	9826943a 	slli	r19,r19,16
   907d8:	008298c0 	call	8298c <__udivsi3>
   907dc:	100b883a 	mov	r5,r2
   907e0:	a009883a 	mov	r4,r20
   907e4:	94bfffcc 	andi	r18,r18,65535
   907e8:	1021883a 	mov	r16,r2
   907ec:	94e4b03a 	or	r18,r18,r19
   907f0:	0082a480 	call	82a48 <__mulsi3>
   907f4:	9080052e 	bgeu	r18,r2,9080c <__udivdi3+0x140>
   907f8:	8ca5883a 	add	r18,r17,r18
   907fc:	80ffffc4 	addi	r3,r16,-1
   90800:	94410c36 	bltu	r18,r17,90c34 <__udivdi3+0x568>
   90804:	90810b2e 	bgeu	r18,r2,90c34 <__udivdi3+0x568>
   90808:	843fff84 	addi	r16,r16,-2
   9080c:	b004943a 	slli	r2,r22,16
   90810:	0007883a 	mov	r3,zero
   90814:	1404b03a 	or	r2,r2,r16
   90818:	00005e06 	br	90994 <__udivdi3+0x2c8>
   9081c:	29c05b36 	bltu	r5,r7,9098c <__udivdi3+0x2c0>
   90820:	00bfffd4 	movui	r2,65535
   90824:	11c0672e 	bgeu	r2,r7,909c4 <__udivdi3+0x2f8>
   90828:	00804034 	movhi	r2,256
   9082c:	10bfffc4 	addi	r2,r2,-1
   90830:	11c10a36 	bltu	r2,r7,90c5c <__udivdi3+0x590>
   90834:	00800404 	movi	r2,16
   90838:	3886d83a 	srl	r3,r7,r2
   9083c:	01000274 	movhi	r4,9
   90840:	21102204 	addi	r4,r4,16520
   90844:	20c7883a 	add	r3,r4,r3
   90848:	18c00003 	ldbu	r3,0(r3)
   9084c:	05c00804 	movi	r23,32
   90850:	1885883a 	add	r2,r3,r2
   90854:	b8afc83a 	sub	r23,r23,r2
   90858:	b800671e 	bne	r23,zero,909f8 <__udivdi3+0x32c>
   9085c:	3c010536 	bltu	r7,r16,90c74 <__udivdi3+0x5a8>
   90860:	9985403a 	cmpgeu	r2,r19,r6
   90864:	0007883a 	mov	r3,zero
   90868:	00004a06 	br	90994 <__udivdi3+0x2c8>
   9086c:	3000041e 	bne	r6,zero,90880 <__udivdi3+0x1b4>
   90870:	000b883a 	mov	r5,zero
   90874:	01000044 	movi	r4,1
   90878:	008298c0 	call	8298c <__udivsi3>
   9087c:	1023883a 	mov	r17,r2
   90880:	00bfffd4 	movui	r2,65535
   90884:	1440532e 	bgeu	r2,r17,909d4 <__udivdi3+0x308>
   90888:	00804034 	movhi	r2,256
   9088c:	10bfffc4 	addi	r2,r2,-1
   90890:	1440f436 	bltu	r2,r17,90c64 <__udivdi3+0x598>
   90894:	00800404 	movi	r2,16
   90898:	8886d83a 	srl	r3,r17,r2
   9089c:	01000274 	movhi	r4,9
   908a0:	21102204 	addi	r4,r4,16520
   908a4:	20c7883a 	add	r3,r4,r3
   908a8:	18c00003 	ldbu	r3,0(r3)
   908ac:	1885883a 	add	r2,r3,r2
   908b0:	00c00804 	movi	r3,32
   908b4:	1887c83a 	sub	r3,r3,r2
   908b8:	1800a51e 	bne	r3,zero,90b50 <__udivdi3+0x484>
   908bc:	882ad43a 	srli	r21,r17,16
   908c0:	8461c83a 	sub	r16,r16,r17
   908c4:	8d3fffcc 	andi	r20,r17,65535
   908c8:	00c00044 	movi	r3,1
   908cc:	a80b883a 	mov	r5,r21
   908d0:	8009883a 	mov	r4,r16
   908d4:	d8c00115 	stw	r3,4(sp)
   908d8:	00829f00 	call	829f0 <__umodsi3>
   908dc:	a80b883a 	mov	r5,r21
   908e0:	8009883a 	mov	r4,r16
   908e4:	1027883a 	mov	r19,r2
   908e8:	008298c0 	call	8298c <__udivsi3>
   908ec:	a00b883a 	mov	r5,r20
   908f0:	1009883a 	mov	r4,r2
   908f4:	102d883a 	mov	r22,r2
   908f8:	0082a480 	call	82a48 <__mulsi3>
   908fc:	9826943a 	slli	r19,r19,16
   90900:	900ed43a 	srli	r7,r18,16
   90904:	d8c00117 	ldw	r3,4(sp)
   90908:	3cceb03a 	or	r7,r7,r19
   9090c:	3880052e 	bgeu	r7,r2,90924 <__udivdi3+0x258>
   90910:	3c4f883a 	add	r7,r7,r17
   90914:	b13fffc4 	addi	r4,r22,-1
   90918:	3c400136 	bltu	r7,r17,90920 <__udivdi3+0x254>
   9091c:	3880e436 	bltu	r7,r2,90cb0 <__udivdi3+0x5e4>
   90920:	202d883a 	mov	r22,r4
   90924:	38a1c83a 	sub	r16,r7,r2
   90928:	8009883a 	mov	r4,r16
   9092c:	a80b883a 	mov	r5,r21
   90930:	d8c00115 	stw	r3,4(sp)
   90934:	00829f00 	call	829f0 <__umodsi3>
   90938:	1027883a 	mov	r19,r2
   9093c:	8009883a 	mov	r4,r16
   90940:	a80b883a 	mov	r5,r21
   90944:	9826943a 	slli	r19,r19,16
   90948:	008298c0 	call	8298c <__udivsi3>
   9094c:	a00b883a 	mov	r5,r20
   90950:	1009883a 	mov	r4,r2
   90954:	94bfffcc 	andi	r18,r18,65535
   90958:	1021883a 	mov	r16,r2
   9095c:	94e4b03a 	or	r18,r18,r19
   90960:	0082a480 	call	82a48 <__mulsi3>
   90964:	d8c00117 	ldw	r3,4(sp)
   90968:	9080052e 	bgeu	r18,r2,90980 <__udivdi3+0x2b4>
   9096c:	8ca5883a 	add	r18,r17,r18
   90970:	813fffc4 	addi	r4,r16,-1
   90974:	9440ad36 	bltu	r18,r17,90c2c <__udivdi3+0x560>
   90978:	9080ac2e 	bgeu	r18,r2,90c2c <__udivdi3+0x560>
   9097c:	843fff84 	addi	r16,r16,-2
   90980:	b004943a 	slli	r2,r22,16
   90984:	1404b03a 	or	r2,r2,r16
   90988:	00000206 	br	90994 <__udivdi3+0x2c8>
   9098c:	0007883a 	mov	r3,zero
   90990:	0005883a 	mov	r2,zero
   90994:	dfc00b17 	ldw	ra,44(sp)
   90998:	df000a17 	ldw	fp,40(sp)
   9099c:	ddc00917 	ldw	r23,36(sp)
   909a0:	dd800817 	ldw	r22,32(sp)
   909a4:	dd400717 	ldw	r21,28(sp)
   909a8:	dd000617 	ldw	r20,24(sp)
   909ac:	dcc00517 	ldw	r19,20(sp)
   909b0:	dc800417 	ldw	r18,16(sp)
   909b4:	dc400317 	ldw	r17,12(sp)
   909b8:	dc000217 	ldw	r16,8(sp)
   909bc:	dec00c04 	addi	sp,sp,48
   909c0:	f800283a 	ret
   909c4:	00803fc4 	movi	r2,255
   909c8:	11c5803a 	cmpltu	r2,r2,r7
   909cc:	100490fa 	slli	r2,r2,3
   909d0:	003f9906 	br	90838 <__alt_data_end+0xfffbb108>
   909d4:	00803fc4 	movi	r2,255
   909d8:	1445803a 	cmpltu	r2,r2,r17
   909dc:	100490fa 	slli	r2,r2,3
   909e0:	003fad06 	br	90898 <__alt_data_end+0xfffbb168>
   909e4:	00804034 	movhi	r2,256
   909e8:	10bfffc4 	addi	r2,r2,-1
   909ec:	11809f36 	bltu	r2,r6,90c6c <__udivdi3+0x5a0>
   909f0:	00800404 	movi	r2,16
   909f4:	003f4c06 	br	90728 <__alt_data_end+0xfffbaff8>
   909f8:	3dce983a 	sll	r7,r7,r23
   909fc:	30b8d83a 	srl	fp,r6,r2
   90a00:	80a2d83a 	srl	r17,r16,r2
   90a04:	35cc983a 	sll	r6,r6,r23
   90a08:	3f38b03a 	or	fp,r7,fp
   90a0c:	e024d43a 	srli	r18,fp,16
   90a10:	9884d83a 	srl	r2,r19,r2
   90a14:	85e0983a 	sll	r16,r16,r23
   90a18:	8809883a 	mov	r4,r17
   90a1c:	900b883a 	mov	r5,r18
   90a20:	d9800015 	stw	r6,0(sp)
   90a24:	1420b03a 	or	r16,r2,r16
   90a28:	00829f00 	call	829f0 <__umodsi3>
   90a2c:	900b883a 	mov	r5,r18
   90a30:	8809883a 	mov	r4,r17
   90a34:	1029883a 	mov	r20,r2
   90a38:	e5bfffcc 	andi	r22,fp,65535
   90a3c:	008298c0 	call	8298c <__udivsi3>
   90a40:	100b883a 	mov	r5,r2
   90a44:	b009883a 	mov	r4,r22
   90a48:	102b883a 	mov	r21,r2
   90a4c:	0082a480 	call	82a48 <__mulsi3>
   90a50:	a028943a 	slli	r20,r20,16
   90a54:	8006d43a 	srli	r3,r16,16
   90a58:	1d06b03a 	or	r3,r3,r20
   90a5c:	1880042e 	bgeu	r3,r2,90a70 <__udivdi3+0x3a4>
   90a60:	1f07883a 	add	r3,r3,fp
   90a64:	a93fffc4 	addi	r4,r21,-1
   90a68:	1f00892e 	bgeu	r3,fp,90c90 <__udivdi3+0x5c4>
   90a6c:	202b883a 	mov	r21,r4
   90a70:	18a3c83a 	sub	r17,r3,r2
   90a74:	8809883a 	mov	r4,r17
   90a78:	900b883a 	mov	r5,r18
   90a7c:	00829f00 	call	829f0 <__umodsi3>
   90a80:	1029883a 	mov	r20,r2
   90a84:	8809883a 	mov	r4,r17
   90a88:	900b883a 	mov	r5,r18
   90a8c:	a028943a 	slli	r20,r20,16
   90a90:	008298c0 	call	8298c <__udivsi3>
   90a94:	100b883a 	mov	r5,r2
   90a98:	b009883a 	mov	r4,r22
   90a9c:	843fffcc 	andi	r16,r16,65535
   90aa0:	1023883a 	mov	r17,r2
   90aa4:	8520b03a 	or	r16,r16,r20
   90aa8:	0082a480 	call	82a48 <__mulsi3>
   90aac:	8080042e 	bgeu	r16,r2,90ac0 <__udivdi3+0x3f4>
   90ab0:	8721883a 	add	r16,r16,fp
   90ab4:	88ffffc4 	addi	r3,r17,-1
   90ab8:	8700712e 	bgeu	r16,fp,90c80 <__udivdi3+0x5b4>
   90abc:	1823883a 	mov	r17,r3
   90ac0:	a80e943a 	slli	r7,r21,16
   90ac4:	d8c00017 	ldw	r3,0(sp)
   90ac8:	80a1c83a 	sub	r16,r16,r2
   90acc:	3c64b03a 	or	r18,r7,r17
   90ad0:	1d3fffcc 	andi	r20,r3,65535
   90ad4:	9022d43a 	srli	r17,r18,16
   90ad8:	95bfffcc 	andi	r22,r18,65535
   90adc:	a00b883a 	mov	r5,r20
   90ae0:	b009883a 	mov	r4,r22
   90ae4:	182ad43a 	srli	r21,r3,16
   90ae8:	0082a480 	call	82a48 <__mulsi3>
   90aec:	a00b883a 	mov	r5,r20
   90af0:	8809883a 	mov	r4,r17
   90af4:	1039883a 	mov	fp,r2
   90af8:	0082a480 	call	82a48 <__mulsi3>
   90afc:	8809883a 	mov	r4,r17
   90b00:	a80b883a 	mov	r5,r21
   90b04:	1029883a 	mov	r20,r2
   90b08:	0082a480 	call	82a48 <__mulsi3>
   90b0c:	a80b883a 	mov	r5,r21
   90b10:	b009883a 	mov	r4,r22
   90b14:	1023883a 	mov	r17,r2
   90b18:	0082a480 	call	82a48 <__mulsi3>
   90b1c:	e006d43a 	srli	r3,fp,16
   90b20:	1505883a 	add	r2,r2,r20
   90b24:	1887883a 	add	r3,r3,r2
   90b28:	1d00022e 	bgeu	r3,r20,90b34 <__udivdi3+0x468>
   90b2c:	00800074 	movhi	r2,1
   90b30:	88a3883a 	add	r17,r17,r2
   90b34:	1804d43a 	srli	r2,r3,16
   90b38:	1463883a 	add	r17,r2,r17
   90b3c:	84404436 	bltu	r16,r17,90c50 <__udivdi3+0x584>
   90b40:	84403e26 	beq	r16,r17,90c3c <__udivdi3+0x570>
   90b44:	9005883a 	mov	r2,r18
   90b48:	0007883a 	mov	r3,zero
   90b4c:	003f9106 	br	90994 <__alt_data_end+0xfffbb264>
   90b50:	88e2983a 	sll	r17,r17,r3
   90b54:	80aed83a 	srl	r23,r16,r2
   90b58:	80e0983a 	sll	r16,r16,r3
   90b5c:	882ad43a 	srli	r21,r17,16
   90b60:	9884d83a 	srl	r2,r19,r2
   90b64:	b809883a 	mov	r4,r23
   90b68:	a80b883a 	mov	r5,r21
   90b6c:	98e4983a 	sll	r18,r19,r3
   90b70:	142cb03a 	or	r22,r2,r16
   90b74:	00829f00 	call	829f0 <__umodsi3>
   90b78:	b809883a 	mov	r4,r23
   90b7c:	a80b883a 	mov	r5,r21
   90b80:	1027883a 	mov	r19,r2
   90b84:	8d3fffcc 	andi	r20,r17,65535
   90b88:	008298c0 	call	8298c <__udivsi3>
   90b8c:	a009883a 	mov	r4,r20
   90b90:	100b883a 	mov	r5,r2
   90b94:	102f883a 	mov	r23,r2
   90b98:	0082a480 	call	82a48 <__mulsi3>
   90b9c:	9826943a 	slli	r19,r19,16
   90ba0:	b008d43a 	srli	r4,r22,16
   90ba4:	24c8b03a 	or	r4,r4,r19
   90ba8:	2080062e 	bgeu	r4,r2,90bc4 <__udivdi3+0x4f8>
   90bac:	2449883a 	add	r4,r4,r17
   90bb0:	b8ffffc4 	addi	r3,r23,-1
   90bb4:	24403c36 	bltu	r4,r17,90ca8 <__udivdi3+0x5dc>
   90bb8:	20803b2e 	bgeu	r4,r2,90ca8 <__udivdi3+0x5dc>
   90bbc:	bdffff84 	addi	r23,r23,-2
   90bc0:	2449883a 	add	r4,r4,r17
   90bc4:	20a1c83a 	sub	r16,r4,r2
   90bc8:	a80b883a 	mov	r5,r21
   90bcc:	8009883a 	mov	r4,r16
   90bd0:	00829f00 	call	829f0 <__umodsi3>
   90bd4:	a80b883a 	mov	r5,r21
   90bd8:	8009883a 	mov	r4,r16
   90bdc:	1027883a 	mov	r19,r2
   90be0:	008298c0 	call	8298c <__udivsi3>
   90be4:	a009883a 	mov	r4,r20
   90be8:	100b883a 	mov	r5,r2
   90bec:	9826943a 	slli	r19,r19,16
   90bf0:	1039883a 	mov	fp,r2
   90bf4:	0082a480 	call	82a48 <__mulsi3>
   90bf8:	b13fffcc 	andi	r4,r22,65535
   90bfc:	24c8b03a 	or	r4,r4,r19
   90c00:	2080062e 	bgeu	r4,r2,90c1c <__udivdi3+0x550>
   90c04:	2449883a 	add	r4,r4,r17
   90c08:	e0ffffc4 	addi	r3,fp,-1
   90c0c:	24402436 	bltu	r4,r17,90ca0 <__udivdi3+0x5d4>
   90c10:	2080232e 	bgeu	r4,r2,90ca0 <__udivdi3+0x5d4>
   90c14:	e73fff84 	addi	fp,fp,-2
   90c18:	2449883a 	add	r4,r4,r17
   90c1c:	b82e943a 	slli	r23,r23,16
   90c20:	20a1c83a 	sub	r16,r4,r2
   90c24:	bf06b03a 	or	r3,r23,fp
   90c28:	003f2806 	br	908cc <__alt_data_end+0xfffbb19c>
   90c2c:	2021883a 	mov	r16,r4
   90c30:	003f5306 	br	90980 <__alt_data_end+0xfffbb250>
   90c34:	1821883a 	mov	r16,r3
   90c38:	003ef406 	br	9080c <__alt_data_end+0xfffbb0dc>
   90c3c:	1806943a 	slli	r3,r3,16
   90c40:	9de6983a 	sll	r19,r19,r23
   90c44:	e73fffcc 	andi	fp,fp,65535
   90c48:	1f07883a 	add	r3,r3,fp
   90c4c:	98ffbd2e 	bgeu	r19,r3,90b44 <__alt_data_end+0xfffbb414>
   90c50:	90bfffc4 	addi	r2,r18,-1
   90c54:	0007883a 	mov	r3,zero
   90c58:	003f4e06 	br	90994 <__alt_data_end+0xfffbb264>
   90c5c:	00800604 	movi	r2,24
   90c60:	003ef506 	br	90838 <__alt_data_end+0xfffbb108>
   90c64:	00800604 	movi	r2,24
   90c68:	003f0b06 	br	90898 <__alt_data_end+0xfffbb168>
   90c6c:	00800604 	movi	r2,24
   90c70:	003ead06 	br	90728 <__alt_data_end+0xfffbaff8>
   90c74:	0007883a 	mov	r3,zero
   90c78:	00800044 	movi	r2,1
   90c7c:	003f4506 	br	90994 <__alt_data_end+0xfffbb264>
   90c80:	80bf8e2e 	bgeu	r16,r2,90abc <__alt_data_end+0xfffbb38c>
   90c84:	8c7fff84 	addi	r17,r17,-2
   90c88:	8721883a 	add	r16,r16,fp
   90c8c:	003f8c06 	br	90ac0 <__alt_data_end+0xfffbb390>
   90c90:	18bf762e 	bgeu	r3,r2,90a6c <__alt_data_end+0xfffbb33c>
   90c94:	ad7fff84 	addi	r21,r21,-2
   90c98:	1f07883a 	add	r3,r3,fp
   90c9c:	003f7406 	br	90a70 <__alt_data_end+0xfffbb340>
   90ca0:	1839883a 	mov	fp,r3
   90ca4:	003fdd06 	br	90c1c <__alt_data_end+0xfffbb4ec>
   90ca8:	182f883a 	mov	r23,r3
   90cac:	003fc506 	br	90bc4 <__alt_data_end+0xfffbb494>
   90cb0:	b5bfff84 	addi	r22,r22,-2
   90cb4:	3c4f883a 	add	r7,r7,r17
   90cb8:	003f1a06 	br	90924 <__alt_data_end+0xfffbb1f4>
   90cbc:	b5bfff84 	addi	r22,r22,-2
   90cc0:	1c47883a 	add	r3,r3,r17
   90cc4:	003ebc06 	br	907b8 <__alt_data_end+0xfffbb088>

00090cc8 <__umoddi3>:
   90cc8:	defff304 	addi	sp,sp,-52
   90ccc:	df000b15 	stw	fp,44(sp)
   90cd0:	dc400415 	stw	r17,16(sp)
   90cd4:	dc000315 	stw	r16,12(sp)
   90cd8:	dfc00c15 	stw	ra,48(sp)
   90cdc:	ddc00a15 	stw	r23,40(sp)
   90ce0:	dd800915 	stw	r22,36(sp)
   90ce4:	dd400815 	stw	r21,32(sp)
   90ce8:	dd000715 	stw	r20,28(sp)
   90cec:	dcc00615 	stw	r19,24(sp)
   90cf0:	dc800515 	stw	r18,20(sp)
   90cf4:	2021883a 	mov	r16,r4
   90cf8:	2823883a 	mov	r17,r5
   90cfc:	2839883a 	mov	fp,r5
   90d00:	3800401e 	bne	r7,zero,90e04 <__umoddi3+0x13c>
   90d04:	3027883a 	mov	r19,r6
   90d08:	2029883a 	mov	r20,r4
   90d0c:	2980552e 	bgeu	r5,r6,90e64 <__umoddi3+0x19c>
   90d10:	00bfffd4 	movui	r2,65535
   90d14:	1180a236 	bltu	r2,r6,90fa0 <__umoddi3+0x2d8>
   90d18:	01003fc4 	movi	r4,255
   90d1c:	2189803a 	cmpltu	r4,r4,r6
   90d20:	200890fa 	slli	r4,r4,3
   90d24:	3104d83a 	srl	r2,r6,r4
   90d28:	00c00274 	movhi	r3,9
   90d2c:	18d02204 	addi	r3,r3,16520
   90d30:	1885883a 	add	r2,r3,r2
   90d34:	10c00003 	ldbu	r3,0(r2)
   90d38:	00800804 	movi	r2,32
   90d3c:	1909883a 	add	r4,r3,r4
   90d40:	1125c83a 	sub	r18,r2,r4
   90d44:	90000526 	beq	r18,zero,90d5c <__umoddi3+0x94>
   90d48:	8ca2983a 	sll	r17,r17,r18
   90d4c:	8108d83a 	srl	r4,r16,r4
   90d50:	34a6983a 	sll	r19,r6,r18
   90d54:	84a8983a 	sll	r20,r16,r18
   90d58:	2478b03a 	or	fp,r4,r17
   90d5c:	982cd43a 	srli	r22,r19,16
   90d60:	e009883a 	mov	r4,fp
   90d64:	9dffffcc 	andi	r23,r19,65535
   90d68:	b00b883a 	mov	r5,r22
   90d6c:	00829f00 	call	829f0 <__umodsi3>
   90d70:	b00b883a 	mov	r5,r22
   90d74:	e009883a 	mov	r4,fp
   90d78:	102b883a 	mov	r21,r2
   90d7c:	008298c0 	call	8298c <__udivsi3>
   90d80:	100b883a 	mov	r5,r2
   90d84:	b809883a 	mov	r4,r23
   90d88:	0082a480 	call	82a48 <__mulsi3>
   90d8c:	a82a943a 	slli	r21,r21,16
   90d90:	a006d43a 	srli	r3,r20,16
   90d94:	1d46b03a 	or	r3,r3,r21
   90d98:	1880032e 	bgeu	r3,r2,90da8 <__umoddi3+0xe0>
   90d9c:	1cc7883a 	add	r3,r3,r19
   90da0:	1cc00136 	bltu	r3,r19,90da8 <__umoddi3+0xe0>
   90da4:	18813136 	bltu	r3,r2,9126c <__umoddi3+0x5a4>
   90da8:	18a1c83a 	sub	r16,r3,r2
   90dac:	b00b883a 	mov	r5,r22
   90db0:	8009883a 	mov	r4,r16
   90db4:	00829f00 	call	829f0 <__umodsi3>
   90db8:	b00b883a 	mov	r5,r22
   90dbc:	8009883a 	mov	r4,r16
   90dc0:	1023883a 	mov	r17,r2
   90dc4:	008298c0 	call	8298c <__udivsi3>
   90dc8:	100b883a 	mov	r5,r2
   90dcc:	b809883a 	mov	r4,r23
   90dd0:	8822943a 	slli	r17,r17,16
   90dd4:	0082a480 	call	82a48 <__mulsi3>
   90dd8:	a0ffffcc 	andi	r3,r20,65535
   90ddc:	1c46b03a 	or	r3,r3,r17
   90de0:	1880042e 	bgeu	r3,r2,90df4 <__umoddi3+0x12c>
   90de4:	1cc7883a 	add	r3,r3,r19
   90de8:	1cc00236 	bltu	r3,r19,90df4 <__umoddi3+0x12c>
   90dec:	1880012e 	bgeu	r3,r2,90df4 <__umoddi3+0x12c>
   90df0:	1cc7883a 	add	r3,r3,r19
   90df4:	1885c83a 	sub	r2,r3,r2
   90df8:	1484d83a 	srl	r2,r2,r18
   90dfc:	0007883a 	mov	r3,zero
   90e00:	00005306 	br	90f50 <__umoddi3+0x288>
   90e04:	29c05036 	bltu	r5,r7,90f48 <__umoddi3+0x280>
   90e08:	00bfffd4 	movui	r2,65535
   90e0c:	11c05c2e 	bgeu	r2,r7,90f80 <__umoddi3+0x2b8>
   90e10:	00804034 	movhi	r2,256
   90e14:	10bfffc4 	addi	r2,r2,-1
   90e18:	11c10636 	bltu	r2,r7,91234 <__umoddi3+0x56c>
   90e1c:	01000404 	movi	r4,16
   90e20:	3904d83a 	srl	r2,r7,r4
   90e24:	00c00274 	movhi	r3,9
   90e28:	18d02204 	addi	r3,r3,16520
   90e2c:	1885883a 	add	r2,r3,r2
   90e30:	14c00003 	ldbu	r19,0(r2)
   90e34:	00c00804 	movi	r3,32
   90e38:	9927883a 	add	r19,r19,r4
   90e3c:	1ce9c83a 	sub	r20,r3,r19
   90e40:	a0005c1e 	bne	r20,zero,90fb4 <__umoddi3+0x2ec>
   90e44:	3c400136 	bltu	r7,r17,90e4c <__umoddi3+0x184>
   90e48:	81810a36 	bltu	r16,r6,91274 <__umoddi3+0x5ac>
   90e4c:	8185c83a 	sub	r2,r16,r6
   90e50:	89e3c83a 	sub	r17,r17,r7
   90e54:	8089803a 	cmpltu	r4,r16,r2
   90e58:	8939c83a 	sub	fp,r17,r4
   90e5c:	e007883a 	mov	r3,fp
   90e60:	00003b06 	br	90f50 <__umoddi3+0x288>
   90e64:	3000041e 	bne	r6,zero,90e78 <__umoddi3+0x1b0>
   90e68:	000b883a 	mov	r5,zero
   90e6c:	01000044 	movi	r4,1
   90e70:	008298c0 	call	8298c <__udivsi3>
   90e74:	1027883a 	mov	r19,r2
   90e78:	00bfffd4 	movui	r2,65535
   90e7c:	14c0442e 	bgeu	r2,r19,90f90 <__umoddi3+0x2c8>
   90e80:	00804034 	movhi	r2,256
   90e84:	10bfffc4 	addi	r2,r2,-1
   90e88:	14c0ec36 	bltu	r2,r19,9123c <__umoddi3+0x574>
   90e8c:	00800404 	movi	r2,16
   90e90:	9886d83a 	srl	r3,r19,r2
   90e94:	01000274 	movhi	r4,9
   90e98:	21102204 	addi	r4,r4,16520
   90e9c:	20c7883a 	add	r3,r4,r3
   90ea0:	18c00003 	ldbu	r3,0(r3)
   90ea4:	1887883a 	add	r3,r3,r2
   90ea8:	00800804 	movi	r2,32
   90eac:	10e5c83a 	sub	r18,r2,r3
   90eb0:	9000ab1e 	bne	r18,zero,91160 <__umoddi3+0x498>
   90eb4:	982cd43a 	srli	r22,r19,16
   90eb8:	8ce3c83a 	sub	r17,r17,r19
   90ebc:	9dffffcc 	andi	r23,r19,65535
   90ec0:	b00b883a 	mov	r5,r22
   90ec4:	8809883a 	mov	r4,r17
   90ec8:	00829f00 	call	829f0 <__umodsi3>
   90ecc:	b00b883a 	mov	r5,r22
   90ed0:	8809883a 	mov	r4,r17
   90ed4:	102b883a 	mov	r21,r2
   90ed8:	008298c0 	call	8298c <__udivsi3>
   90edc:	b80b883a 	mov	r5,r23
   90ee0:	1009883a 	mov	r4,r2
   90ee4:	0082a480 	call	82a48 <__mulsi3>
   90ee8:	a82a943a 	slli	r21,r21,16
   90eec:	a006d43a 	srli	r3,r20,16
   90ef0:	1d46b03a 	or	r3,r3,r21
   90ef4:	1880042e 	bgeu	r3,r2,90f08 <__umoddi3+0x240>
   90ef8:	1cc7883a 	add	r3,r3,r19
   90efc:	1cc00236 	bltu	r3,r19,90f08 <__umoddi3+0x240>
   90f00:	1880012e 	bgeu	r3,r2,90f08 <__umoddi3+0x240>
   90f04:	1cc7883a 	add	r3,r3,r19
   90f08:	18a1c83a 	sub	r16,r3,r2
   90f0c:	b00b883a 	mov	r5,r22
   90f10:	8009883a 	mov	r4,r16
   90f14:	00829f00 	call	829f0 <__umodsi3>
   90f18:	1023883a 	mov	r17,r2
   90f1c:	b00b883a 	mov	r5,r22
   90f20:	8009883a 	mov	r4,r16
   90f24:	008298c0 	call	8298c <__udivsi3>
   90f28:	8822943a 	slli	r17,r17,16
   90f2c:	b80b883a 	mov	r5,r23
   90f30:	1009883a 	mov	r4,r2
   90f34:	0082a480 	call	82a48 <__mulsi3>
   90f38:	a53fffcc 	andi	r20,r20,65535
   90f3c:	a446b03a 	or	r3,r20,r17
   90f40:	18bfac2e 	bgeu	r3,r2,90df4 <__alt_data_end+0xfffbb6c4>
   90f44:	003fa706 	br	90de4 <__alt_data_end+0xfffbb6b4>
   90f48:	2005883a 	mov	r2,r4
   90f4c:	2807883a 	mov	r3,r5
   90f50:	dfc00c17 	ldw	ra,48(sp)
   90f54:	df000b17 	ldw	fp,44(sp)
   90f58:	ddc00a17 	ldw	r23,40(sp)
   90f5c:	dd800917 	ldw	r22,36(sp)
   90f60:	dd400817 	ldw	r21,32(sp)
   90f64:	dd000717 	ldw	r20,28(sp)
   90f68:	dcc00617 	ldw	r19,24(sp)
   90f6c:	dc800517 	ldw	r18,20(sp)
   90f70:	dc400417 	ldw	r17,16(sp)
   90f74:	dc000317 	ldw	r16,12(sp)
   90f78:	dec00d04 	addi	sp,sp,52
   90f7c:	f800283a 	ret
   90f80:	04c03fc4 	movi	r19,255
   90f84:	99c9803a 	cmpltu	r4,r19,r7
   90f88:	200890fa 	slli	r4,r4,3
   90f8c:	003fa406 	br	90e20 <__alt_data_end+0xfffbb6f0>
   90f90:	00803fc4 	movi	r2,255
   90f94:	14c5803a 	cmpltu	r2,r2,r19
   90f98:	100490fa 	slli	r2,r2,3
   90f9c:	003fbc06 	br	90e90 <__alt_data_end+0xfffbb760>
   90fa0:	00804034 	movhi	r2,256
   90fa4:	10bfffc4 	addi	r2,r2,-1
   90fa8:	1180a636 	bltu	r2,r6,91244 <__umoddi3+0x57c>
   90fac:	01000404 	movi	r4,16
   90fb0:	003f5c06 	br	90d24 <__alt_data_end+0xfffbb5f4>
   90fb4:	3d0e983a 	sll	r7,r7,r20
   90fb8:	34ead83a 	srl	r21,r6,r19
   90fbc:	8cc6d83a 	srl	r3,r17,r19
   90fc0:	8d10983a 	sll	r8,r17,r20
   90fc4:	3d6ab03a 	or	r21,r7,r21
   90fc8:	a82cd43a 	srli	r22,r21,16
   90fcc:	84e2d83a 	srl	r17,r16,r19
   90fd0:	1809883a 	mov	r4,r3
   90fd4:	b00b883a 	mov	r5,r22
   90fd8:	8a22b03a 	or	r17,r17,r8
   90fdc:	3524983a 	sll	r18,r6,r20
   90fe0:	dc400015 	stw	r17,0(sp)
   90fe4:	d8c00115 	stw	r3,4(sp)
   90fe8:	00829f00 	call	829f0 <__umodsi3>
   90fec:	d8c00117 	ldw	r3,4(sp)
   90ff0:	b00b883a 	mov	r5,r22
   90ff4:	1039883a 	mov	fp,r2
   90ff8:	1809883a 	mov	r4,r3
   90ffc:	008298c0 	call	8298c <__udivsi3>
   91000:	adffffcc 	andi	r23,r21,65535
   91004:	100b883a 	mov	r5,r2
   91008:	b809883a 	mov	r4,r23
   9100c:	1023883a 	mov	r17,r2
   91010:	0082a480 	call	82a48 <__mulsi3>
   91014:	d9400017 	ldw	r5,0(sp)
   91018:	e008943a 	slli	r4,fp,16
   9101c:	8520983a 	sll	r16,r16,r20
   91020:	2806d43a 	srli	r3,r5,16
   91024:	1906b03a 	or	r3,r3,r4
   91028:	1880042e 	bgeu	r3,r2,9103c <__umoddi3+0x374>
   9102c:	1d47883a 	add	r3,r3,r21
   91030:	893fffc4 	addi	r4,r17,-1
   91034:	1d40892e 	bgeu	r3,r21,9125c <__umoddi3+0x594>
   91038:	2023883a 	mov	r17,r4
   9103c:	18b9c83a 	sub	fp,r3,r2
   91040:	b00b883a 	mov	r5,r22
   91044:	e009883a 	mov	r4,fp
   91048:	00829f00 	call	829f0 <__umodsi3>
   9104c:	b00b883a 	mov	r5,r22
   91050:	e009883a 	mov	r4,fp
   91054:	d8800215 	stw	r2,8(sp)
   91058:	008298c0 	call	8298c <__udivsi3>
   9105c:	100b883a 	mov	r5,r2
   91060:	b809883a 	mov	r4,r23
   91064:	102d883a 	mov	r22,r2
   91068:	0082a480 	call	82a48 <__mulsi3>
   9106c:	d9800217 	ldw	r6,8(sp)
   91070:	d8c00017 	ldw	r3,0(sp)
   91074:	300c943a 	slli	r6,r6,16
   91078:	1a3fffcc 	andi	r8,r3,65535
   9107c:	4190b03a 	or	r8,r8,r6
   91080:	4080042e 	bgeu	r8,r2,91094 <__umoddi3+0x3cc>
   91084:	4551883a 	add	r8,r8,r21
   91088:	b0ffffc4 	addi	r3,r22,-1
   9108c:	45406f2e 	bgeu	r8,r21,9124c <__umoddi3+0x584>
   91090:	182d883a 	mov	r22,r3
   91094:	880e943a 	slli	r7,r17,16
   91098:	9006d43a 	srli	r3,r18,16
   9109c:	91bfffcc 	andi	r6,r18,65535
   910a0:	3dacb03a 	or	r22,r7,r22
   910a4:	b02ed43a 	srli	r23,r22,16
   910a8:	b5bfffcc 	andi	r22,r22,65535
   910ac:	300b883a 	mov	r5,r6
   910b0:	b009883a 	mov	r4,r22
   910b4:	40a3c83a 	sub	r17,r8,r2
   910b8:	d8c00115 	stw	r3,4(sp)
   910bc:	d9800215 	stw	r6,8(sp)
   910c0:	0082a480 	call	82a48 <__mulsi3>
   910c4:	d9800217 	ldw	r6,8(sp)
   910c8:	b809883a 	mov	r4,r23
   910cc:	1039883a 	mov	fp,r2
   910d0:	300b883a 	mov	r5,r6
   910d4:	0082a480 	call	82a48 <__mulsi3>
   910d8:	d8c00117 	ldw	r3,4(sp)
   910dc:	b809883a 	mov	r4,r23
   910e0:	d8800215 	stw	r2,8(sp)
   910e4:	180b883a 	mov	r5,r3
   910e8:	0082a480 	call	82a48 <__mulsi3>
   910ec:	d8c00117 	ldw	r3,4(sp)
   910f0:	b009883a 	mov	r4,r22
   910f4:	102f883a 	mov	r23,r2
   910f8:	180b883a 	mov	r5,r3
   910fc:	0082a480 	call	82a48 <__mulsi3>
   91100:	d9800217 	ldw	r6,8(sp)
   91104:	e006d43a 	srli	r3,fp,16
   91108:	1185883a 	add	r2,r2,r6
   9110c:	1885883a 	add	r2,r3,r2
   91110:	1180022e 	bgeu	r2,r6,9111c <__umoddi3+0x454>
   91114:	00c00074 	movhi	r3,1
   91118:	b8ef883a 	add	r23,r23,r3
   9111c:	1006d43a 	srli	r3,r2,16
   91120:	1004943a 	slli	r2,r2,16
   91124:	e73fffcc 	andi	fp,fp,65535
   91128:	1dc7883a 	add	r3,r3,r23
   9112c:	1739883a 	add	fp,r2,fp
   91130:	88c03a36 	bltu	r17,r3,9121c <__umoddi3+0x554>
   91134:	88c05126 	beq	r17,r3,9127c <__umoddi3+0x5b4>
   91138:	88c9c83a 	sub	r4,r17,r3
   9113c:	e00f883a 	mov	r7,fp
   91140:	81cfc83a 	sub	r7,r16,r7
   91144:	81c7803a 	cmpltu	r3,r16,r7
   91148:	20c7c83a 	sub	r3,r4,r3
   9114c:	1cc4983a 	sll	r2,r3,r19
   91150:	3d0ed83a 	srl	r7,r7,r20
   91154:	1d06d83a 	srl	r3,r3,r20
   91158:	11c4b03a 	or	r2,r2,r7
   9115c:	003f7c06 	br	90f50 <__alt_data_end+0xfffbb820>
   91160:	9ca6983a 	sll	r19,r19,r18
   91164:	88f8d83a 	srl	fp,r17,r3
   91168:	80c4d83a 	srl	r2,r16,r3
   9116c:	982cd43a 	srli	r22,r19,16
   91170:	8ca2983a 	sll	r17,r17,r18
   91174:	e009883a 	mov	r4,fp
   91178:	b00b883a 	mov	r5,r22
   9117c:	146ab03a 	or	r21,r2,r17
   91180:	00829f00 	call	829f0 <__umodsi3>
   91184:	b00b883a 	mov	r5,r22
   91188:	e009883a 	mov	r4,fp
   9118c:	1029883a 	mov	r20,r2
   91190:	9dffffcc 	andi	r23,r19,65535
   91194:	008298c0 	call	8298c <__udivsi3>
   91198:	b809883a 	mov	r4,r23
   9119c:	100b883a 	mov	r5,r2
   911a0:	0082a480 	call	82a48 <__mulsi3>
   911a4:	a008943a 	slli	r4,r20,16
   911a8:	a806d43a 	srli	r3,r21,16
   911ac:	84a8983a 	sll	r20,r16,r18
   911b0:	1906b03a 	or	r3,r3,r4
   911b4:	1880042e 	bgeu	r3,r2,911c8 <__umoddi3+0x500>
   911b8:	1cc7883a 	add	r3,r3,r19
   911bc:	1cc00236 	bltu	r3,r19,911c8 <__umoddi3+0x500>
   911c0:	1880012e 	bgeu	r3,r2,911c8 <__umoddi3+0x500>
   911c4:	1cc7883a 	add	r3,r3,r19
   911c8:	18a3c83a 	sub	r17,r3,r2
   911cc:	b00b883a 	mov	r5,r22
   911d0:	8809883a 	mov	r4,r17
   911d4:	00829f00 	call	829f0 <__umodsi3>
   911d8:	b00b883a 	mov	r5,r22
   911dc:	8809883a 	mov	r4,r17
   911e0:	1021883a 	mov	r16,r2
   911e4:	008298c0 	call	8298c <__udivsi3>
   911e8:	100b883a 	mov	r5,r2
   911ec:	b809883a 	mov	r4,r23
   911f0:	8020943a 	slli	r16,r16,16
   911f4:	0082a480 	call	82a48 <__mulsi3>
   911f8:	a8ffffcc 	andi	r3,r21,65535
   911fc:	1c06b03a 	or	r3,r3,r16
   91200:	1880042e 	bgeu	r3,r2,91214 <__umoddi3+0x54c>
   91204:	1cc7883a 	add	r3,r3,r19
   91208:	1cc00236 	bltu	r3,r19,91214 <__umoddi3+0x54c>
   9120c:	1880012e 	bgeu	r3,r2,91214 <__umoddi3+0x54c>
   91210:	1cc7883a 	add	r3,r3,r19
   91214:	18a3c83a 	sub	r17,r3,r2
   91218:	003f2906 	br	90ec0 <__alt_data_end+0xfffbb790>
   9121c:	e48fc83a 	sub	r7,fp,r18
   91220:	1d49c83a 	sub	r4,r3,r21
   91224:	e1f9803a 	cmpltu	fp,fp,r7
   91228:	2739c83a 	sub	fp,r4,fp
   9122c:	8f09c83a 	sub	r4,r17,fp
   91230:	003fc306 	br	91140 <__alt_data_end+0xfffbba10>
   91234:	01000604 	movi	r4,24
   91238:	003ef906 	br	90e20 <__alt_data_end+0xfffbb6f0>
   9123c:	00800604 	movi	r2,24
   91240:	003f1306 	br	90e90 <__alt_data_end+0xfffbb760>
   91244:	01000604 	movi	r4,24
   91248:	003eb606 	br	90d24 <__alt_data_end+0xfffbb5f4>
   9124c:	40bf902e 	bgeu	r8,r2,91090 <__alt_data_end+0xfffbb960>
   91250:	b5bfff84 	addi	r22,r22,-2
   91254:	4551883a 	add	r8,r8,r21
   91258:	003f8e06 	br	91094 <__alt_data_end+0xfffbb964>
   9125c:	18bf762e 	bgeu	r3,r2,91038 <__alt_data_end+0xfffbb908>
   91260:	8c7fff84 	addi	r17,r17,-2
   91264:	1d47883a 	add	r3,r3,r21
   91268:	003f7406 	br	9103c <__alt_data_end+0xfffbb90c>
   9126c:	1cc7883a 	add	r3,r3,r19
   91270:	003ecd06 	br	90da8 <__alt_data_end+0xfffbb678>
   91274:	8005883a 	mov	r2,r16
   91278:	003ef806 	br	90e5c <__alt_data_end+0xfffbb72c>
   9127c:	873fe736 	bltu	r16,fp,9121c <__alt_data_end+0xfffbbaec>
   91280:	e00f883a 	mov	r7,fp
   91284:	0009883a 	mov	r4,zero
   91288:	003fad06 	br	91140 <__alt_data_end+0xfffbba10>

0009128c <__eqdf2>:
   9128c:	2804d53a 	srli	r2,r5,20
   91290:	3806d53a 	srli	r3,r7,20
   91294:	02000434 	movhi	r8,16
   91298:	423fffc4 	addi	r8,r8,-1
   9129c:	1081ffcc 	andi	r2,r2,2047
   912a0:	0281ffc4 	movi	r10,2047
   912a4:	2a12703a 	and	r9,r5,r8
   912a8:	18c1ffcc 	andi	r3,r3,2047
   912ac:	3a10703a 	and	r8,r7,r8
   912b0:	280ad7fa 	srli	r5,r5,31
   912b4:	380ed7fa 	srli	r7,r7,31
   912b8:	12801026 	beq	r2,r10,912fc <__eqdf2+0x70>
   912bc:	0281ffc4 	movi	r10,2047
   912c0:	1a800a26 	beq	r3,r10,912ec <__eqdf2+0x60>
   912c4:	10c00226 	beq	r2,r3,912d0 <__eqdf2+0x44>
   912c8:	00800044 	movi	r2,1
   912cc:	f800283a 	ret
   912d0:	4a3ffd1e 	bne	r9,r8,912c8 <__alt_data_end+0xfffbbb98>
   912d4:	21bffc1e 	bne	r4,r6,912c8 <__alt_data_end+0xfffbbb98>
   912d8:	29c00c26 	beq	r5,r7,9130c <__eqdf2+0x80>
   912dc:	103ffa1e 	bne	r2,zero,912c8 <__alt_data_end+0xfffbbb98>
   912e0:	2244b03a 	or	r2,r4,r9
   912e4:	1004c03a 	cmpne	r2,r2,zero
   912e8:	f800283a 	ret
   912ec:	3214b03a 	or	r10,r6,r8
   912f0:	503ff426 	beq	r10,zero,912c4 <__alt_data_end+0xfffbbb94>
   912f4:	00800044 	movi	r2,1
   912f8:	f800283a 	ret
   912fc:	2254b03a 	or	r10,r4,r9
   91300:	503fee26 	beq	r10,zero,912bc <__alt_data_end+0xfffbbb8c>
   91304:	00800044 	movi	r2,1
   91308:	f800283a 	ret
   9130c:	0005883a 	mov	r2,zero
   91310:	f800283a 	ret

00091314 <__floatunsidf>:
   91314:	defffe04 	addi	sp,sp,-8
   91318:	dc000015 	stw	r16,0(sp)
   9131c:	dfc00115 	stw	ra,4(sp)
   91320:	2021883a 	mov	r16,r4
   91324:	20002226 	beq	r4,zero,913b0 <__floatunsidf+0x9c>
   91328:	00863c00 	call	863c0 <__clzsi2>
   9132c:	01010784 	movi	r4,1054
   91330:	2089c83a 	sub	r4,r4,r2
   91334:	01810cc4 	movi	r6,1075
   91338:	310dc83a 	sub	r6,r6,r4
   9133c:	00c007c4 	movi	r3,31
   91340:	1980120e 	bge	r3,r6,9138c <__floatunsidf+0x78>
   91344:	00c104c4 	movi	r3,1043
   91348:	1907c83a 	sub	r3,r3,r4
   9134c:	80ca983a 	sll	r5,r16,r3
   91350:	00800434 	movhi	r2,16
   91354:	10bfffc4 	addi	r2,r2,-1
   91358:	2101ffcc 	andi	r4,r4,2047
   9135c:	0021883a 	mov	r16,zero
   91360:	288a703a 	and	r5,r5,r2
   91364:	2008953a 	slli	r4,r4,20
   91368:	00c00434 	movhi	r3,16
   9136c:	18ffffc4 	addi	r3,r3,-1
   91370:	28c6703a 	and	r3,r5,r3
   91374:	8005883a 	mov	r2,r16
   91378:	1906b03a 	or	r3,r3,r4
   9137c:	dfc00117 	ldw	ra,4(sp)
   91380:	dc000017 	ldw	r16,0(sp)
   91384:	dec00204 	addi	sp,sp,8
   91388:	f800283a 	ret
   9138c:	00c002c4 	movi	r3,11
   91390:	188bc83a 	sub	r5,r3,r2
   91394:	814ad83a 	srl	r5,r16,r5
   91398:	00c00434 	movhi	r3,16
   9139c:	18ffffc4 	addi	r3,r3,-1
   913a0:	81a0983a 	sll	r16,r16,r6
   913a4:	2101ffcc 	andi	r4,r4,2047
   913a8:	28ca703a 	and	r5,r5,r3
   913ac:	003fed06 	br	91364 <__alt_data_end+0xfffbbc34>
   913b0:	0009883a 	mov	r4,zero
   913b4:	000b883a 	mov	r5,zero
   913b8:	003fea06 	br	91364 <__alt_data_end+0xfffbbc34>

000913bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   913bc:	defffe04 	addi	sp,sp,-8
   913c0:	dfc00115 	stw	ra,4(sp)
   913c4:	df000015 	stw	fp,0(sp)
   913c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   913cc:	d0a00d17 	ldw	r2,-32716(gp)
   913d0:	10000326 	beq	r2,zero,913e0 <alt_get_errno+0x24>
   913d4:	d0a00d17 	ldw	r2,-32716(gp)
   913d8:	103ee83a 	callr	r2
   913dc:	00000106 	br	913e4 <alt_get_errno+0x28>
   913e0:	d086f704 	addi	r2,gp,7132
}
   913e4:	e037883a 	mov	sp,fp
   913e8:	dfc00117 	ldw	ra,4(sp)
   913ec:	df000017 	ldw	fp,0(sp)
   913f0:	dec00204 	addi	sp,sp,8
   913f4:	f800283a 	ret

000913f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   913f8:	defffb04 	addi	sp,sp,-20
   913fc:	dfc00415 	stw	ra,16(sp)
   91400:	df000315 	stw	fp,12(sp)
   91404:	df000304 	addi	fp,sp,12
   91408:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   9140c:	e0bfff17 	ldw	r2,-4(fp)
   91410:	10000816 	blt	r2,zero,91434 <close+0x3c>
   91414:	01400304 	movi	r5,12
   91418:	e13fff17 	ldw	r4,-4(fp)
   9141c:	0082a480 	call	82a48 <__mulsi3>
   91420:	1007883a 	mov	r3,r2
   91424:	008002b4 	movhi	r2,10
   91428:	10b33204 	addi	r2,r2,-13112
   9142c:	1885883a 	add	r2,r3,r2
   91430:	00000106 	br	91438 <close+0x40>
   91434:	0005883a 	mov	r2,zero
   91438:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   9143c:	e0bffd17 	ldw	r2,-12(fp)
   91440:	10001926 	beq	r2,zero,914a8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   91444:	e0bffd17 	ldw	r2,-12(fp)
   91448:	10800017 	ldw	r2,0(r2)
   9144c:	10800417 	ldw	r2,16(r2)
   91450:	10000626 	beq	r2,zero,9146c <close+0x74>
   91454:	e0bffd17 	ldw	r2,-12(fp)
   91458:	10800017 	ldw	r2,0(r2)
   9145c:	10800417 	ldw	r2,16(r2)
   91460:	e13ffd17 	ldw	r4,-12(fp)
   91464:	103ee83a 	callr	r2
   91468:	00000106 	br	91470 <close+0x78>
   9146c:	0005883a 	mov	r2,zero
   91470:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   91474:	e13fff17 	ldw	r4,-4(fp)
   91478:	0091d640 	call	91d64 <alt_release_fd>
    if (rval < 0)
   9147c:	e0bffe17 	ldw	r2,-8(fp)
   91480:	1000070e 	bge	r2,zero,914a0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   91484:	00913bc0 	call	913bc <alt_get_errno>
   91488:	1007883a 	mov	r3,r2
   9148c:	e0bffe17 	ldw	r2,-8(fp)
   91490:	0085c83a 	sub	r2,zero,r2
   91494:	18800015 	stw	r2,0(r3)
      return -1;
   91498:	00bfffc4 	movi	r2,-1
   9149c:	00000706 	br	914bc <close+0xc4>
    }
    return 0;
   914a0:	0005883a 	mov	r2,zero
   914a4:	00000506 	br	914bc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   914a8:	00913bc0 	call	913bc <alt_get_errno>
   914ac:	1007883a 	mov	r3,r2
   914b0:	00801444 	movi	r2,81
   914b4:	18800015 	stw	r2,0(r3)
    return -1;
   914b8:	00bfffc4 	movi	r2,-1
  }
}
   914bc:	e037883a 	mov	sp,fp
   914c0:	dfc00117 	ldw	ra,4(sp)
   914c4:	df000017 	ldw	fp,0(sp)
   914c8:	dec00204 	addi	sp,sp,8
   914cc:	f800283a 	ret

000914d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   914d0:	defffc04 	addi	sp,sp,-16
   914d4:	df000315 	stw	fp,12(sp)
   914d8:	df000304 	addi	fp,sp,12
   914dc:	e13ffd15 	stw	r4,-12(fp)
   914e0:	e17ffe15 	stw	r5,-8(fp)
   914e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   914e8:	e0bfff17 	ldw	r2,-4(fp)
}
   914ec:	e037883a 	mov	sp,fp
   914f0:	df000017 	ldw	fp,0(sp)
   914f4:	dec00104 	addi	sp,sp,4
   914f8:	f800283a 	ret

000914fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   914fc:	defffe04 	addi	sp,sp,-8
   91500:	dfc00115 	stw	ra,4(sp)
   91504:	df000015 	stw	fp,0(sp)
   91508:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9150c:	d0a00d17 	ldw	r2,-32716(gp)
   91510:	10000326 	beq	r2,zero,91520 <alt_get_errno+0x24>
   91514:	d0a00d17 	ldw	r2,-32716(gp)
   91518:	103ee83a 	callr	r2
   9151c:	00000106 	br	91524 <alt_get_errno+0x28>
   91520:	d086f704 	addi	r2,gp,7132
}
   91524:	e037883a 	mov	sp,fp
   91528:	dfc00117 	ldw	ra,4(sp)
   9152c:	df000017 	ldw	fp,0(sp)
   91530:	dec00204 	addi	sp,sp,8
   91534:	f800283a 	ret

00091538 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   91538:	defffb04 	addi	sp,sp,-20
   9153c:	dfc00415 	stw	ra,16(sp)
   91540:	df000315 	stw	fp,12(sp)
   91544:	df000304 	addi	fp,sp,12
   91548:	e13ffe15 	stw	r4,-8(fp)
   9154c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91550:	e0bffe17 	ldw	r2,-8(fp)
   91554:	10000816 	blt	r2,zero,91578 <fstat+0x40>
   91558:	01400304 	movi	r5,12
   9155c:	e13ffe17 	ldw	r4,-8(fp)
   91560:	0082a480 	call	82a48 <__mulsi3>
   91564:	1007883a 	mov	r3,r2
   91568:	008002b4 	movhi	r2,10
   9156c:	10b33204 	addi	r2,r2,-13112
   91570:	1885883a 	add	r2,r3,r2
   91574:	00000106 	br	9157c <fstat+0x44>
   91578:	0005883a 	mov	r2,zero
   9157c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   91580:	e0bffd17 	ldw	r2,-12(fp)
   91584:	10001026 	beq	r2,zero,915c8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   91588:	e0bffd17 	ldw	r2,-12(fp)
   9158c:	10800017 	ldw	r2,0(r2)
   91590:	10800817 	ldw	r2,32(r2)
   91594:	10000726 	beq	r2,zero,915b4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   91598:	e0bffd17 	ldw	r2,-12(fp)
   9159c:	10800017 	ldw	r2,0(r2)
   915a0:	10800817 	ldw	r2,32(r2)
   915a4:	e17fff17 	ldw	r5,-4(fp)
   915a8:	e13ffd17 	ldw	r4,-12(fp)
   915ac:	103ee83a 	callr	r2
   915b0:	00000a06 	br	915dc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   915b4:	e0bfff17 	ldw	r2,-4(fp)
   915b8:	00c80004 	movi	r3,8192
   915bc:	10c00115 	stw	r3,4(r2)
      return 0;
   915c0:	0005883a 	mov	r2,zero
   915c4:	00000506 	br	915dc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   915c8:	00914fc0 	call	914fc <alt_get_errno>
   915cc:	1007883a 	mov	r3,r2
   915d0:	00801444 	movi	r2,81
   915d4:	18800015 	stw	r2,0(r3)
    return -1;
   915d8:	00bfffc4 	movi	r2,-1
  }
}
   915dc:	e037883a 	mov	sp,fp
   915e0:	dfc00117 	ldw	ra,4(sp)
   915e4:	df000017 	ldw	fp,0(sp)
   915e8:	dec00204 	addi	sp,sp,8
   915ec:	f800283a 	ret

000915f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   915f0:	defffe04 	addi	sp,sp,-8
   915f4:	dfc00115 	stw	ra,4(sp)
   915f8:	df000015 	stw	fp,0(sp)
   915fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   91600:	d0a00d17 	ldw	r2,-32716(gp)
   91604:	10000326 	beq	r2,zero,91614 <alt_get_errno+0x24>
   91608:	d0a00d17 	ldw	r2,-32716(gp)
   9160c:	103ee83a 	callr	r2
   91610:	00000106 	br	91618 <alt_get_errno+0x28>
   91614:	d086f704 	addi	r2,gp,7132
}
   91618:	e037883a 	mov	sp,fp
   9161c:	dfc00117 	ldw	ra,4(sp)
   91620:	df000017 	ldw	fp,0(sp)
   91624:	dec00204 	addi	sp,sp,8
   91628:	f800283a 	ret

0009162c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   9162c:	deffed04 	addi	sp,sp,-76
   91630:	dfc01215 	stw	ra,72(sp)
   91634:	df001115 	stw	fp,68(sp)
   91638:	df001104 	addi	fp,sp,68
   9163c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91640:	e0bfff17 	ldw	r2,-4(fp)
   91644:	10000816 	blt	r2,zero,91668 <isatty+0x3c>
   91648:	01400304 	movi	r5,12
   9164c:	e13fff17 	ldw	r4,-4(fp)
   91650:	0082a480 	call	82a48 <__mulsi3>
   91654:	1007883a 	mov	r3,r2
   91658:	008002b4 	movhi	r2,10
   9165c:	10b33204 	addi	r2,r2,-13112
   91660:	1885883a 	add	r2,r3,r2
   91664:	00000106 	br	9166c <isatty+0x40>
   91668:	0005883a 	mov	r2,zero
   9166c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   91670:	e0bfef17 	ldw	r2,-68(fp)
   91674:	10000e26 	beq	r2,zero,916b0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   91678:	e0bfef17 	ldw	r2,-68(fp)
   9167c:	10800017 	ldw	r2,0(r2)
   91680:	10800817 	ldw	r2,32(r2)
   91684:	1000021e 	bne	r2,zero,91690 <isatty+0x64>
    {
      return 1;
   91688:	00800044 	movi	r2,1
   9168c:	00000d06 	br	916c4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   91690:	e0bff004 	addi	r2,fp,-64
   91694:	100b883a 	mov	r5,r2
   91698:	e13fff17 	ldw	r4,-4(fp)
   9169c:	00915380 	call	91538 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   916a0:	e0bff117 	ldw	r2,-60(fp)
   916a4:	10880020 	cmpeqi	r2,r2,8192
   916a8:	10803fcc 	andi	r2,r2,255
   916ac:	00000506 	br	916c4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   916b0:	00915f00 	call	915f0 <alt_get_errno>
   916b4:	1007883a 	mov	r3,r2
   916b8:	00801444 	movi	r2,81
   916bc:	18800015 	stw	r2,0(r3)
    return 0;
   916c0:	0005883a 	mov	r2,zero
  }
}
   916c4:	e037883a 	mov	sp,fp
   916c8:	dfc00117 	ldw	ra,4(sp)
   916cc:	df000017 	ldw	fp,0(sp)
   916d0:	dec00204 	addi	sp,sp,8
   916d4:	f800283a 	ret

000916d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   916d8:	defffc04 	addi	sp,sp,-16
   916dc:	df000315 	stw	fp,12(sp)
   916e0:	df000304 	addi	fp,sp,12
   916e4:	e13ffd15 	stw	r4,-12(fp)
   916e8:	e17ffe15 	stw	r5,-8(fp)
   916ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   916f0:	e0fffe17 	ldw	r3,-8(fp)
   916f4:	e0bffd17 	ldw	r2,-12(fp)
   916f8:	18800c26 	beq	r3,r2,9172c <alt_load_section+0x54>
  {
    while( to != end )
   916fc:	00000806 	br	91720 <alt_load_section+0x48>
    {
      *to++ = *from++;
   91700:	e0bffe17 	ldw	r2,-8(fp)
   91704:	10c00104 	addi	r3,r2,4
   91708:	e0fffe15 	stw	r3,-8(fp)
   9170c:	e0fffd17 	ldw	r3,-12(fp)
   91710:	19000104 	addi	r4,r3,4
   91714:	e13ffd15 	stw	r4,-12(fp)
   91718:	18c00017 	ldw	r3,0(r3)
   9171c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   91720:	e0fffe17 	ldw	r3,-8(fp)
   91724:	e0bfff17 	ldw	r2,-4(fp)
   91728:	18bff51e 	bne	r3,r2,91700 <__alt_data_end+0xfffbbfd0>
    {
      *to++ = *from++;
    }
  }
}
   9172c:	0001883a 	nop
   91730:	e037883a 	mov	sp,fp
   91734:	df000017 	ldw	fp,0(sp)
   91738:	dec00104 	addi	sp,sp,4
   9173c:	f800283a 	ret

00091740 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   91740:	defffe04 	addi	sp,sp,-8
   91744:	dfc00115 	stw	ra,4(sp)
   91748:	df000015 	stw	fp,0(sp)
   9174c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   91750:	018002b4 	movhi	r6,10
   91754:	31b7c704 	addi	r6,r6,-8420
   91758:	01400274 	movhi	r5,9
   9175c:	2950e504 	addi	r5,r5,17300
   91760:	010002b4 	movhi	r4,10
   91764:	2137c704 	addi	r4,r4,-8420
   91768:	00916d80 	call	916d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   9176c:	01800234 	movhi	r6,8
   91770:	31808c04 	addi	r6,r6,560
   91774:	01400234 	movhi	r5,8
   91778:	29400804 	addi	r5,r5,32
   9177c:	01000234 	movhi	r4,8
   91780:	21000804 	addi	r4,r4,32
   91784:	00916d80 	call	916d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   91788:	01800274 	movhi	r6,9
   9178c:	3190e504 	addi	r6,r6,17300
   91790:	01400274 	movhi	r5,9
   91794:	294fd704 	addi	r5,r5,16220
   91798:	01000274 	movhi	r4,9
   9179c:	210fd704 	addi	r4,r4,16220
   917a0:	00916d80 	call	916d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   917a4:	00931280 	call	93128 <alt_dcache_flush_all>
  alt_icache_flush_all();
   917a8:	00935440 	call	93544 <alt_icache_flush_all>
}
   917ac:	0001883a 	nop
   917b0:	e037883a 	mov	sp,fp
   917b4:	dfc00117 	ldw	ra,4(sp)
   917b8:	df000017 	ldw	fp,0(sp)
   917bc:	dec00204 	addi	sp,sp,8
   917c0:	f800283a 	ret

000917c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   917c4:	defffe04 	addi	sp,sp,-8
   917c8:	dfc00115 	stw	ra,4(sp)
   917cc:	df000015 	stw	fp,0(sp)
   917d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   917d4:	d0a00d17 	ldw	r2,-32716(gp)
   917d8:	10000326 	beq	r2,zero,917e8 <alt_get_errno+0x24>
   917dc:	d0a00d17 	ldw	r2,-32716(gp)
   917e0:	103ee83a 	callr	r2
   917e4:	00000106 	br	917ec <alt_get_errno+0x28>
   917e8:	d086f704 	addi	r2,gp,7132
}
   917ec:	e037883a 	mov	sp,fp
   917f0:	dfc00117 	ldw	ra,4(sp)
   917f4:	df000017 	ldw	fp,0(sp)
   917f8:	dec00204 	addi	sp,sp,8
   917fc:	f800283a 	ret

00091800 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   91800:	defff904 	addi	sp,sp,-28
   91804:	dfc00615 	stw	ra,24(sp)
   91808:	df000515 	stw	fp,20(sp)
   9180c:	df000504 	addi	fp,sp,20
   91810:	e13ffd15 	stw	r4,-12(fp)
   91814:	e17ffe15 	stw	r5,-8(fp)
   91818:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   9181c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91820:	e0bffd17 	ldw	r2,-12(fp)
   91824:	10000816 	blt	r2,zero,91848 <lseek+0x48>
   91828:	01400304 	movi	r5,12
   9182c:	e13ffd17 	ldw	r4,-12(fp)
   91830:	0082a480 	call	82a48 <__mulsi3>
   91834:	1007883a 	mov	r3,r2
   91838:	008002b4 	movhi	r2,10
   9183c:	10b33204 	addi	r2,r2,-13112
   91840:	1885883a 	add	r2,r3,r2
   91844:	00000106 	br	9184c <lseek+0x4c>
   91848:	0005883a 	mov	r2,zero
   9184c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   91850:	e0bffc17 	ldw	r2,-16(fp)
   91854:	10001026 	beq	r2,zero,91898 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   91858:	e0bffc17 	ldw	r2,-16(fp)
   9185c:	10800017 	ldw	r2,0(r2)
   91860:	10800717 	ldw	r2,28(r2)
   91864:	10000926 	beq	r2,zero,9188c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   91868:	e0bffc17 	ldw	r2,-16(fp)
   9186c:	10800017 	ldw	r2,0(r2)
   91870:	10800717 	ldw	r2,28(r2)
   91874:	e1bfff17 	ldw	r6,-4(fp)
   91878:	e17ffe17 	ldw	r5,-8(fp)
   9187c:	e13ffc17 	ldw	r4,-16(fp)
   91880:	103ee83a 	callr	r2
   91884:	e0bffb15 	stw	r2,-20(fp)
   91888:	00000506 	br	918a0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   9188c:	00bfde84 	movi	r2,-134
   91890:	e0bffb15 	stw	r2,-20(fp)
   91894:	00000206 	br	918a0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   91898:	00bfebc4 	movi	r2,-81
   9189c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   918a0:	e0bffb17 	ldw	r2,-20(fp)
   918a4:	1000070e 	bge	r2,zero,918c4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   918a8:	00917c40 	call	917c4 <alt_get_errno>
   918ac:	1007883a 	mov	r3,r2
   918b0:	e0bffb17 	ldw	r2,-20(fp)
   918b4:	0085c83a 	sub	r2,zero,r2
   918b8:	18800015 	stw	r2,0(r3)
    rc = -1;
   918bc:	00bfffc4 	movi	r2,-1
   918c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   918c4:	e0bffb17 	ldw	r2,-20(fp)
}
   918c8:	e037883a 	mov	sp,fp
   918cc:	dfc00117 	ldw	ra,4(sp)
   918d0:	df000017 	ldw	fp,0(sp)
   918d4:	dec00204 	addi	sp,sp,8
   918d8:	f800283a 	ret

000918dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   918dc:	defffd04 	addi	sp,sp,-12
   918e0:	dfc00215 	stw	ra,8(sp)
   918e4:	df000115 	stw	fp,4(sp)
   918e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   918ec:	0009883a 	mov	r4,zero
   918f0:	00920080 	call	92008 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   918f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   918f8:	00920400 	call	92040 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   918fc:	01800274 	movhi	r6,9
   91900:	3190d804 	addi	r6,r6,17248
   91904:	01400274 	movhi	r5,9
   91908:	2950d804 	addi	r5,r5,17248
   9190c:	01000274 	movhi	r4,9
   91910:	2110d804 	addi	r4,r4,17248
   91914:	00938e80 	call	938e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   91918:	00932280 	call	93228 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   9191c:	01000274 	movhi	r4,9
   91920:	210ca204 	addi	r4,r4,12936
   91924:	0093bc80 	call	93bc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   91928:	d086fe17 	ldw	r2,7160(gp)
   9192c:	d0c6ff17 	ldw	r3,7164(gp)
   91930:	d1070017 	ldw	r4,7168(gp)
   91934:	200d883a 	mov	r6,r4
   91938:	180b883a 	mov	r5,r3
   9193c:	1009883a 	mov	r4,r2
   91940:	008200c0 	call	8200c <main>
   91944:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   91948:	01000044 	movi	r4,1
   9194c:	00913f80 	call	913f8 <close>
  exit (result);
   91950:	e13fff17 	ldw	r4,-4(fp)
   91954:	0093bdc0 	call	93bdc <exit>

00091958 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   91958:	defffe04 	addi	sp,sp,-8
   9195c:	df000115 	stw	fp,4(sp)
   91960:	df000104 	addi	fp,sp,4
   91964:	e13fff15 	stw	r4,-4(fp)
}
   91968:	0001883a 	nop
   9196c:	e037883a 	mov	sp,fp
   91970:	df000017 	ldw	fp,0(sp)
   91974:	dec00104 	addi	sp,sp,4
   91978:	f800283a 	ret

0009197c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   9197c:	defffe04 	addi	sp,sp,-8
   91980:	df000115 	stw	fp,4(sp)
   91984:	df000104 	addi	fp,sp,4
   91988:	e13fff15 	stw	r4,-4(fp)
}
   9198c:	0001883a 	nop
   91990:	e037883a 	mov	sp,fp
   91994:	df000017 	ldw	fp,0(sp)
   91998:	dec00104 	addi	sp,sp,4
   9199c:	f800283a 	ret

000919a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   919a0:	defffe04 	addi	sp,sp,-8
   919a4:	dfc00115 	stw	ra,4(sp)
   919a8:	df000015 	stw	fp,0(sp)
   919ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   919b0:	d0a00d17 	ldw	r2,-32716(gp)
   919b4:	10000326 	beq	r2,zero,919c4 <alt_get_errno+0x24>
   919b8:	d0a00d17 	ldw	r2,-32716(gp)
   919bc:	103ee83a 	callr	r2
   919c0:	00000106 	br	919c8 <alt_get_errno+0x28>
   919c4:	d086f704 	addi	r2,gp,7132
}
   919c8:	e037883a 	mov	sp,fp
   919cc:	dfc00117 	ldw	ra,4(sp)
   919d0:	df000017 	ldw	fp,0(sp)
   919d4:	dec00204 	addi	sp,sp,8
   919d8:	f800283a 	ret

000919dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   919dc:	defffb04 	addi	sp,sp,-20
   919e0:	dfc00415 	stw	ra,16(sp)
   919e4:	df000315 	stw	fp,12(sp)
   919e8:	dc000215 	stw	r16,8(sp)
   919ec:	df000304 	addi	fp,sp,12
   919f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   919f4:	e0bffe17 	ldw	r2,-8(fp)
   919f8:	10800217 	ldw	r2,8(r2)
   919fc:	10d00034 	orhi	r3,r2,16384
   91a00:	e0bffe17 	ldw	r2,-8(fp)
   91a04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   91a08:	e03ffd15 	stw	zero,-12(fp)
   91a0c:	00002306 	br	91a9c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   91a10:	040002b4 	movhi	r16,10
   91a14:	84333204 	addi	r16,r16,-13112
   91a18:	e0bffd17 	ldw	r2,-12(fp)
   91a1c:	01400304 	movi	r5,12
   91a20:	1009883a 	mov	r4,r2
   91a24:	0082a480 	call	82a48 <__mulsi3>
   91a28:	8085883a 	add	r2,r16,r2
   91a2c:	10c00017 	ldw	r3,0(r2)
   91a30:	e0bffe17 	ldw	r2,-8(fp)
   91a34:	10800017 	ldw	r2,0(r2)
   91a38:	1880151e 	bne	r3,r2,91a90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   91a3c:	040002b4 	movhi	r16,10
   91a40:	84333204 	addi	r16,r16,-13112
   91a44:	e0bffd17 	ldw	r2,-12(fp)
   91a48:	01400304 	movi	r5,12
   91a4c:	1009883a 	mov	r4,r2
   91a50:	0082a480 	call	82a48 <__mulsi3>
   91a54:	8085883a 	add	r2,r16,r2
   91a58:	10800204 	addi	r2,r2,8
   91a5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   91a60:	10000b0e 	bge	r2,zero,91a90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   91a64:	01400304 	movi	r5,12
   91a68:	e13ffd17 	ldw	r4,-12(fp)
   91a6c:	0082a480 	call	82a48 <__mulsi3>
   91a70:	1007883a 	mov	r3,r2
   91a74:	008002b4 	movhi	r2,10
   91a78:	10b33204 	addi	r2,r2,-13112
   91a7c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   91a80:	e0bffe17 	ldw	r2,-8(fp)
   91a84:	18800226 	beq	r3,r2,91a90 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   91a88:	00bffcc4 	movi	r2,-13
   91a8c:	00000806 	br	91ab0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   91a90:	e0bffd17 	ldw	r2,-12(fp)
   91a94:	10800044 	addi	r2,r2,1
   91a98:	e0bffd15 	stw	r2,-12(fp)
   91a9c:	d0a00c17 	ldw	r2,-32720(gp)
   91aa0:	1007883a 	mov	r3,r2
   91aa4:	e0bffd17 	ldw	r2,-12(fp)
   91aa8:	18bfd92e 	bgeu	r3,r2,91a10 <__alt_data_end+0xfffbc2e0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   91aac:	0005883a 	mov	r2,zero
}
   91ab0:	e6ffff04 	addi	sp,fp,-4
   91ab4:	dfc00217 	ldw	ra,8(sp)
   91ab8:	df000117 	ldw	fp,4(sp)
   91abc:	dc000017 	ldw	r16,0(sp)
   91ac0:	dec00304 	addi	sp,sp,12
   91ac4:	f800283a 	ret

00091ac8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   91ac8:	defff604 	addi	sp,sp,-40
   91acc:	dfc00915 	stw	ra,36(sp)
   91ad0:	df000815 	stw	fp,32(sp)
   91ad4:	df000804 	addi	fp,sp,32
   91ad8:	e13ffd15 	stw	r4,-12(fp)
   91adc:	e17ffe15 	stw	r5,-8(fp)
   91ae0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   91ae4:	00bfffc4 	movi	r2,-1
   91ae8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   91aec:	00bffb44 	movi	r2,-19
   91af0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   91af4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   91af8:	d1600a04 	addi	r5,gp,-32728
   91afc:	e13ffd17 	ldw	r4,-12(fp)
   91b00:	00932e80 	call	932e8 <alt_find_dev>
   91b04:	e0bff815 	stw	r2,-32(fp)
   91b08:	e0bff817 	ldw	r2,-32(fp)
   91b0c:	1000051e 	bne	r2,zero,91b24 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   91b10:	e13ffd17 	ldw	r4,-12(fp)
   91b14:	00933780 	call	93378 <alt_find_file>
   91b18:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   91b1c:	00800044 	movi	r2,1
   91b20:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   91b24:	e0bff817 	ldw	r2,-32(fp)
   91b28:	10002b26 	beq	r2,zero,91bd8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   91b2c:	e13ff817 	ldw	r4,-32(fp)
   91b30:	00934800 	call	93480 <alt_get_fd>
   91b34:	e0bff915 	stw	r2,-28(fp)
   91b38:	e0bff917 	ldw	r2,-28(fp)
   91b3c:	1000030e 	bge	r2,zero,91b4c <open+0x84>
    {
      status = index;
   91b40:	e0bff917 	ldw	r2,-28(fp)
   91b44:	e0bffa15 	stw	r2,-24(fp)
   91b48:	00002506 	br	91be0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   91b4c:	01400304 	movi	r5,12
   91b50:	e13ff917 	ldw	r4,-28(fp)
   91b54:	0082a480 	call	82a48 <__mulsi3>
   91b58:	1007883a 	mov	r3,r2
   91b5c:	008002b4 	movhi	r2,10
   91b60:	10b33204 	addi	r2,r2,-13112
   91b64:	1885883a 	add	r2,r3,r2
   91b68:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   91b6c:	e0fffe17 	ldw	r3,-8(fp)
   91b70:	00900034 	movhi	r2,16384
   91b74:	10bfffc4 	addi	r2,r2,-1
   91b78:	1886703a 	and	r3,r3,r2
   91b7c:	e0bffc17 	ldw	r2,-16(fp)
   91b80:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   91b84:	e0bffb17 	ldw	r2,-20(fp)
   91b88:	1000051e 	bne	r2,zero,91ba0 <open+0xd8>
   91b8c:	e13ffc17 	ldw	r4,-16(fp)
   91b90:	00919dc0 	call	919dc <alt_file_locked>
   91b94:	e0bffa15 	stw	r2,-24(fp)
   91b98:	e0bffa17 	ldw	r2,-24(fp)
   91b9c:	10001016 	blt	r2,zero,91be0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   91ba0:	e0bff817 	ldw	r2,-32(fp)
   91ba4:	10800317 	ldw	r2,12(r2)
   91ba8:	10000826 	beq	r2,zero,91bcc <open+0x104>
   91bac:	e0bff817 	ldw	r2,-32(fp)
   91bb0:	10800317 	ldw	r2,12(r2)
   91bb4:	e1ffff17 	ldw	r7,-4(fp)
   91bb8:	e1bffe17 	ldw	r6,-8(fp)
   91bbc:	e17ffd17 	ldw	r5,-12(fp)
   91bc0:	e13ffc17 	ldw	r4,-16(fp)
   91bc4:	103ee83a 	callr	r2
   91bc8:	00000106 	br	91bd0 <open+0x108>
   91bcc:	0005883a 	mov	r2,zero
   91bd0:	e0bffa15 	stw	r2,-24(fp)
   91bd4:	00000206 	br	91be0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   91bd8:	00bffb44 	movi	r2,-19
   91bdc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   91be0:	e0bffa17 	ldw	r2,-24(fp)
   91be4:	1000090e 	bge	r2,zero,91c0c <open+0x144>
  {
    alt_release_fd (index);  
   91be8:	e13ff917 	ldw	r4,-28(fp)
   91bec:	0091d640 	call	91d64 <alt_release_fd>
    ALT_ERRNO = -status;
   91bf0:	00919a00 	call	919a0 <alt_get_errno>
   91bf4:	1007883a 	mov	r3,r2
   91bf8:	e0bffa17 	ldw	r2,-24(fp)
   91bfc:	0085c83a 	sub	r2,zero,r2
   91c00:	18800015 	stw	r2,0(r3)
    return -1;
   91c04:	00bfffc4 	movi	r2,-1
   91c08:	00000106 	br	91c10 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   91c0c:	e0bff917 	ldw	r2,-28(fp)
}
   91c10:	e037883a 	mov	sp,fp
   91c14:	dfc00117 	ldw	ra,4(sp)
   91c18:	df000017 	ldw	fp,0(sp)
   91c1c:	dec00204 	addi	sp,sp,8
   91c20:	f800283a 	ret

00091c24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91c24:	defffe04 	addi	sp,sp,-8
   91c28:	dfc00115 	stw	ra,4(sp)
   91c2c:	df000015 	stw	fp,0(sp)
   91c30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   91c34:	d0a00d17 	ldw	r2,-32716(gp)
   91c38:	10000326 	beq	r2,zero,91c48 <alt_get_errno+0x24>
   91c3c:	d0a00d17 	ldw	r2,-32716(gp)
   91c40:	103ee83a 	callr	r2
   91c44:	00000106 	br	91c4c <alt_get_errno+0x28>
   91c48:	d086f704 	addi	r2,gp,7132
}
   91c4c:	e037883a 	mov	sp,fp
   91c50:	dfc00117 	ldw	ra,4(sp)
   91c54:	df000017 	ldw	fp,0(sp)
   91c58:	dec00204 	addi	sp,sp,8
   91c5c:	f800283a 	ret

00091c60 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   91c60:	defff904 	addi	sp,sp,-28
   91c64:	dfc00615 	stw	ra,24(sp)
   91c68:	df000515 	stw	fp,20(sp)
   91c6c:	df000504 	addi	fp,sp,20
   91c70:	e13ffd15 	stw	r4,-12(fp)
   91c74:	e17ffe15 	stw	r5,-8(fp)
   91c78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91c7c:	e0bffd17 	ldw	r2,-12(fp)
   91c80:	10000816 	blt	r2,zero,91ca4 <read+0x44>
   91c84:	01400304 	movi	r5,12
   91c88:	e13ffd17 	ldw	r4,-12(fp)
   91c8c:	0082a480 	call	82a48 <__mulsi3>
   91c90:	1007883a 	mov	r3,r2
   91c94:	008002b4 	movhi	r2,10
   91c98:	10b33204 	addi	r2,r2,-13112
   91c9c:	1885883a 	add	r2,r3,r2
   91ca0:	00000106 	br	91ca8 <read+0x48>
   91ca4:	0005883a 	mov	r2,zero
   91ca8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   91cac:	e0bffb17 	ldw	r2,-20(fp)
   91cb0:	10002226 	beq	r2,zero,91d3c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   91cb4:	e0bffb17 	ldw	r2,-20(fp)
   91cb8:	10800217 	ldw	r2,8(r2)
   91cbc:	108000cc 	andi	r2,r2,3
   91cc0:	10800060 	cmpeqi	r2,r2,1
   91cc4:	1000181e 	bne	r2,zero,91d28 <read+0xc8>
        (fd->dev->read))
   91cc8:	e0bffb17 	ldw	r2,-20(fp)
   91ccc:	10800017 	ldw	r2,0(r2)
   91cd0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   91cd4:	10001426 	beq	r2,zero,91d28 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   91cd8:	e0bffb17 	ldw	r2,-20(fp)
   91cdc:	10800017 	ldw	r2,0(r2)
   91ce0:	10800517 	ldw	r2,20(r2)
   91ce4:	e0ffff17 	ldw	r3,-4(fp)
   91ce8:	180d883a 	mov	r6,r3
   91cec:	e17ffe17 	ldw	r5,-8(fp)
   91cf0:	e13ffb17 	ldw	r4,-20(fp)
   91cf4:	103ee83a 	callr	r2
   91cf8:	e0bffc15 	stw	r2,-16(fp)
   91cfc:	e0bffc17 	ldw	r2,-16(fp)
   91d00:	1000070e 	bge	r2,zero,91d20 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   91d04:	0091c240 	call	91c24 <alt_get_errno>
   91d08:	1007883a 	mov	r3,r2
   91d0c:	e0bffc17 	ldw	r2,-16(fp)
   91d10:	0085c83a 	sub	r2,zero,r2
   91d14:	18800015 	stw	r2,0(r3)
          return -1;
   91d18:	00bfffc4 	movi	r2,-1
   91d1c:	00000c06 	br	91d50 <read+0xf0>
        }
        return rval;
   91d20:	e0bffc17 	ldw	r2,-16(fp)
   91d24:	00000a06 	br	91d50 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   91d28:	0091c240 	call	91c24 <alt_get_errno>
   91d2c:	1007883a 	mov	r3,r2
   91d30:	00800344 	movi	r2,13
   91d34:	18800015 	stw	r2,0(r3)
   91d38:	00000406 	br	91d4c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   91d3c:	0091c240 	call	91c24 <alt_get_errno>
   91d40:	1007883a 	mov	r3,r2
   91d44:	00801444 	movi	r2,81
   91d48:	18800015 	stw	r2,0(r3)
  }
  return -1;
   91d4c:	00bfffc4 	movi	r2,-1
}
   91d50:	e037883a 	mov	sp,fp
   91d54:	dfc00117 	ldw	ra,4(sp)
   91d58:	df000017 	ldw	fp,0(sp)
   91d5c:	dec00204 	addi	sp,sp,8
   91d60:	f800283a 	ret

00091d64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   91d64:	defffc04 	addi	sp,sp,-16
   91d68:	dfc00315 	stw	ra,12(sp)
   91d6c:	df000215 	stw	fp,8(sp)
   91d70:	dc000115 	stw	r16,4(sp)
   91d74:	df000204 	addi	fp,sp,8
   91d78:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   91d7c:	e0bffe17 	ldw	r2,-8(fp)
   91d80:	108000d0 	cmplti	r2,r2,3
   91d84:	1000111e 	bne	r2,zero,91dcc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   91d88:	040002b4 	movhi	r16,10
   91d8c:	84333204 	addi	r16,r16,-13112
   91d90:	e0bffe17 	ldw	r2,-8(fp)
   91d94:	01400304 	movi	r5,12
   91d98:	1009883a 	mov	r4,r2
   91d9c:	0082a480 	call	82a48 <__mulsi3>
   91da0:	8085883a 	add	r2,r16,r2
   91da4:	10800204 	addi	r2,r2,8
   91da8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   91dac:	040002b4 	movhi	r16,10
   91db0:	84333204 	addi	r16,r16,-13112
   91db4:	e0bffe17 	ldw	r2,-8(fp)
   91db8:	01400304 	movi	r5,12
   91dbc:	1009883a 	mov	r4,r2
   91dc0:	0082a480 	call	82a48 <__mulsi3>
   91dc4:	8085883a 	add	r2,r16,r2
   91dc8:	10000015 	stw	zero,0(r2)
  }
}
   91dcc:	0001883a 	nop
   91dd0:	e6ffff04 	addi	sp,fp,-4
   91dd4:	dfc00217 	ldw	ra,8(sp)
   91dd8:	df000117 	ldw	fp,4(sp)
   91ddc:	dc000017 	ldw	r16,0(sp)
   91de0:	dec00304 	addi	sp,sp,12
   91de4:	f800283a 	ret

00091de8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   91de8:	defff904 	addi	sp,sp,-28
   91dec:	df000615 	stw	fp,24(sp)
   91df0:	df000604 	addi	fp,sp,24
   91df4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91df8:	0005303a 	rdctl	r2,status
   91dfc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91e00:	e0fffe17 	ldw	r3,-8(fp)
   91e04:	00bfff84 	movi	r2,-2
   91e08:	1884703a 	and	r2,r3,r2
   91e0c:	1001703a 	wrctl	status,r2
  
  return context;
   91e10:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   91e14:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   91e18:	d0a00e17 	ldw	r2,-32712(gp)
   91e1c:	10c000c4 	addi	r3,r2,3
   91e20:	00bfff04 	movi	r2,-4
   91e24:	1884703a 	and	r2,r3,r2
   91e28:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   91e2c:	d0e00e17 	ldw	r3,-32712(gp)
   91e30:	e0bfff17 	ldw	r2,-4(fp)
   91e34:	1887883a 	add	r3,r3,r2
   91e38:	00800374 	movhi	r2,13
   91e3c:	1095cc04 	addi	r2,r2,22320
   91e40:	10c0062e 	bgeu	r2,r3,91e5c <sbrk+0x74>
   91e44:	e0bffb17 	ldw	r2,-20(fp)
   91e48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91e4c:	e0bffa17 	ldw	r2,-24(fp)
   91e50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   91e54:	00bfffc4 	movi	r2,-1
   91e58:	00000b06 	br	91e88 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   91e5c:	d0a00e17 	ldw	r2,-32712(gp)
   91e60:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   91e64:	d0e00e17 	ldw	r3,-32712(gp)
   91e68:	e0bfff17 	ldw	r2,-4(fp)
   91e6c:	1885883a 	add	r2,r3,r2
   91e70:	d0a00e15 	stw	r2,-32712(gp)
   91e74:	e0bffb17 	ldw	r2,-20(fp)
   91e78:	e0bffc15 	stw	r2,-16(fp)
   91e7c:	e0bffc17 	ldw	r2,-16(fp)
   91e80:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   91e84:	e0bffd17 	ldw	r2,-12(fp)
} 
   91e88:	e037883a 	mov	sp,fp
   91e8c:	df000017 	ldw	fp,0(sp)
   91e90:	dec00104 	addi	sp,sp,4
   91e94:	f800283a 	ret

00091e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91e98:	defffe04 	addi	sp,sp,-8
   91e9c:	dfc00115 	stw	ra,4(sp)
   91ea0:	df000015 	stw	fp,0(sp)
   91ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   91ea8:	d0a00d17 	ldw	r2,-32716(gp)
   91eac:	10000326 	beq	r2,zero,91ebc <alt_get_errno+0x24>
   91eb0:	d0a00d17 	ldw	r2,-32716(gp)
   91eb4:	103ee83a 	callr	r2
   91eb8:	00000106 	br	91ec0 <alt_get_errno+0x28>
   91ebc:	d086f704 	addi	r2,gp,7132
}
   91ec0:	e037883a 	mov	sp,fp
   91ec4:	dfc00117 	ldw	ra,4(sp)
   91ec8:	df000017 	ldw	fp,0(sp)
   91ecc:	dec00204 	addi	sp,sp,8
   91ed0:	f800283a 	ret

00091ed4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   91ed4:	defff904 	addi	sp,sp,-28
   91ed8:	dfc00615 	stw	ra,24(sp)
   91edc:	df000515 	stw	fp,20(sp)
   91ee0:	df000504 	addi	fp,sp,20
   91ee4:	e13ffd15 	stw	r4,-12(fp)
   91ee8:	e17ffe15 	stw	r5,-8(fp)
   91eec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91ef0:	e0bffd17 	ldw	r2,-12(fp)
   91ef4:	10000816 	blt	r2,zero,91f18 <write+0x44>
   91ef8:	01400304 	movi	r5,12
   91efc:	e13ffd17 	ldw	r4,-12(fp)
   91f00:	0082a480 	call	82a48 <__mulsi3>
   91f04:	1007883a 	mov	r3,r2
   91f08:	008002b4 	movhi	r2,10
   91f0c:	10b33204 	addi	r2,r2,-13112
   91f10:	1885883a 	add	r2,r3,r2
   91f14:	00000106 	br	91f1c <write+0x48>
   91f18:	0005883a 	mov	r2,zero
   91f1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   91f20:	e0bffb17 	ldw	r2,-20(fp)
   91f24:	10002126 	beq	r2,zero,91fac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   91f28:	e0bffb17 	ldw	r2,-20(fp)
   91f2c:	10800217 	ldw	r2,8(r2)
   91f30:	108000cc 	andi	r2,r2,3
   91f34:	10001826 	beq	r2,zero,91f98 <write+0xc4>
   91f38:	e0bffb17 	ldw	r2,-20(fp)
   91f3c:	10800017 	ldw	r2,0(r2)
   91f40:	10800617 	ldw	r2,24(r2)
   91f44:	10001426 	beq	r2,zero,91f98 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   91f48:	e0bffb17 	ldw	r2,-20(fp)
   91f4c:	10800017 	ldw	r2,0(r2)
   91f50:	10800617 	ldw	r2,24(r2)
   91f54:	e0ffff17 	ldw	r3,-4(fp)
   91f58:	180d883a 	mov	r6,r3
   91f5c:	e17ffe17 	ldw	r5,-8(fp)
   91f60:	e13ffb17 	ldw	r4,-20(fp)
   91f64:	103ee83a 	callr	r2
   91f68:	e0bffc15 	stw	r2,-16(fp)
   91f6c:	e0bffc17 	ldw	r2,-16(fp)
   91f70:	1000070e 	bge	r2,zero,91f90 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   91f74:	0091e980 	call	91e98 <alt_get_errno>
   91f78:	1007883a 	mov	r3,r2
   91f7c:	e0bffc17 	ldw	r2,-16(fp)
   91f80:	0085c83a 	sub	r2,zero,r2
   91f84:	18800015 	stw	r2,0(r3)
        return -1;
   91f88:	00bfffc4 	movi	r2,-1
   91f8c:	00000c06 	br	91fc0 <write+0xec>
      }
      return rval;
   91f90:	e0bffc17 	ldw	r2,-16(fp)
   91f94:	00000a06 	br	91fc0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   91f98:	0091e980 	call	91e98 <alt_get_errno>
   91f9c:	1007883a 	mov	r3,r2
   91fa0:	00800344 	movi	r2,13
   91fa4:	18800015 	stw	r2,0(r3)
   91fa8:	00000406 	br	91fbc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   91fac:	0091e980 	call	91e98 <alt_get_errno>
   91fb0:	1007883a 	mov	r3,r2
   91fb4:	00801444 	movi	r2,81
   91fb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   91fbc:	00bfffc4 	movi	r2,-1
}
   91fc0:	e037883a 	mov	sp,fp
   91fc4:	dfc00117 	ldw	ra,4(sp)
   91fc8:	df000017 	ldw	fp,0(sp)
   91fcc:	dec00204 	addi	sp,sp,8
   91fd0:	f800283a 	ret

00091fd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   91fd4:	defffd04 	addi	sp,sp,-12
   91fd8:	dfc00215 	stw	ra,8(sp)
   91fdc:	df000115 	stw	fp,4(sp)
   91fe0:	df000104 	addi	fp,sp,4
   91fe4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   91fe8:	d1600a04 	addi	r5,gp,-32728
   91fec:	e13fff17 	ldw	r4,-4(fp)
   91ff0:	00931840 	call	93184 <alt_dev_llist_insert>
}
   91ff4:	e037883a 	mov	sp,fp
   91ff8:	dfc00117 	ldw	ra,4(sp)
   91ffc:	df000017 	ldw	fp,0(sp)
   92000:	dec00204 	addi	sp,sp,8
   92004:	f800283a 	ret

00092008 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   92008:	defffd04 	addi	sp,sp,-12
   9200c:	dfc00215 	stw	ra,8(sp)
   92010:	df000115 	stw	fp,4(sp)
   92014:	df000104 	addi	fp,sp,4
   92018:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   9201c:	0093b080 	call	93b08 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   92020:	00800044 	movi	r2,1
   92024:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   92028:	0001883a 	nop
   9202c:	e037883a 	mov	sp,fp
   92030:	dfc00117 	ldw	ra,4(sp)
   92034:	df000017 	ldw	fp,0(sp)
   92038:	dec00204 	addi	sp,sp,8
   9203c:	f800283a 	ret

00092040 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   92040:	defffe04 	addi	sp,sp,-8
   92044:	dfc00115 	stw	ra,4(sp)
   92048:	df000015 	stw	fp,0(sp)
   9204c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   92050:	000d883a 	mov	r6,zero
   92054:	000b883a 	mov	r5,zero
   92058:	010002b4 	movhi	r4,10
   9205c:	21339c04 	addi	r4,r4,-12688
   92060:	00922040 	call	92204 <altera_avalon_jtag_uart_init>
   92064:	010002b4 	movhi	r4,10
   92068:	21339204 	addi	r4,r4,-12728
   9206c:	0091fd40 	call	91fd4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD_0, lcd_0);
   92070:	010002b4 	movhi	r4,10
   92074:	2137aa04 	addi	r4,r4,-8536
   92078:	0092bbc0 	call	92bbc <alt_up_character_lcd_init>
   9207c:	010002b4 	movhi	r4,10
   92080:	2137aa04 	addi	r4,r4,-8536
   92084:	0091fd40 	call	91fd4 <alt_dev_reg>
}
   92088:	0001883a 	nop
   9208c:	e037883a 	mov	sp,fp
   92090:	dfc00117 	ldw	ra,4(sp)
   92094:	df000017 	ldw	fp,0(sp)
   92098:	dec00204 	addi	sp,sp,8
   9209c:	f800283a 	ret

000920a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   920a0:	defffa04 	addi	sp,sp,-24
   920a4:	dfc00515 	stw	ra,20(sp)
   920a8:	df000415 	stw	fp,16(sp)
   920ac:	df000404 	addi	fp,sp,16
   920b0:	e13ffd15 	stw	r4,-12(fp)
   920b4:	e17ffe15 	stw	r5,-8(fp)
   920b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   920bc:	e0bffd17 	ldw	r2,-12(fp)
   920c0:	10800017 	ldw	r2,0(r2)
   920c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   920c8:	e0bffc17 	ldw	r2,-16(fp)
   920cc:	10c00a04 	addi	r3,r2,40
   920d0:	e0bffd17 	ldw	r2,-12(fp)
   920d4:	10800217 	ldw	r2,8(r2)
   920d8:	100f883a 	mov	r7,r2
   920dc:	e1bfff17 	ldw	r6,-4(fp)
   920e0:	e17ffe17 	ldw	r5,-8(fp)
   920e4:	1809883a 	mov	r4,r3
   920e8:	00926c80 	call	926c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   920ec:	e037883a 	mov	sp,fp
   920f0:	dfc00117 	ldw	ra,4(sp)
   920f4:	df000017 	ldw	fp,0(sp)
   920f8:	dec00204 	addi	sp,sp,8
   920fc:	f800283a 	ret

00092100 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   92100:	defffa04 	addi	sp,sp,-24
   92104:	dfc00515 	stw	ra,20(sp)
   92108:	df000415 	stw	fp,16(sp)
   9210c:	df000404 	addi	fp,sp,16
   92110:	e13ffd15 	stw	r4,-12(fp)
   92114:	e17ffe15 	stw	r5,-8(fp)
   92118:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9211c:	e0bffd17 	ldw	r2,-12(fp)
   92120:	10800017 	ldw	r2,0(r2)
   92124:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   92128:	e0bffc17 	ldw	r2,-16(fp)
   9212c:	10c00a04 	addi	r3,r2,40
   92130:	e0bffd17 	ldw	r2,-12(fp)
   92134:	10800217 	ldw	r2,8(r2)
   92138:	100f883a 	mov	r7,r2
   9213c:	e1bfff17 	ldw	r6,-4(fp)
   92140:	e17ffe17 	ldw	r5,-8(fp)
   92144:	1809883a 	mov	r4,r3
   92148:	00928e40 	call	928e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   9214c:	e037883a 	mov	sp,fp
   92150:	dfc00117 	ldw	ra,4(sp)
   92154:	df000017 	ldw	fp,0(sp)
   92158:	dec00204 	addi	sp,sp,8
   9215c:	f800283a 	ret

00092160 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   92160:	defffc04 	addi	sp,sp,-16
   92164:	dfc00315 	stw	ra,12(sp)
   92168:	df000215 	stw	fp,8(sp)
   9216c:	df000204 	addi	fp,sp,8
   92170:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   92174:	e0bfff17 	ldw	r2,-4(fp)
   92178:	10800017 	ldw	r2,0(r2)
   9217c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   92180:	e0bffe17 	ldw	r2,-8(fp)
   92184:	10c00a04 	addi	r3,r2,40
   92188:	e0bfff17 	ldw	r2,-4(fp)
   9218c:	10800217 	ldw	r2,8(r2)
   92190:	100b883a 	mov	r5,r2
   92194:	1809883a 	mov	r4,r3
   92198:	00925700 	call	92570 <altera_avalon_jtag_uart_close>
}
   9219c:	e037883a 	mov	sp,fp
   921a0:	dfc00117 	ldw	ra,4(sp)
   921a4:	df000017 	ldw	fp,0(sp)
   921a8:	dec00204 	addi	sp,sp,8
   921ac:	f800283a 	ret

000921b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   921b0:	defffa04 	addi	sp,sp,-24
   921b4:	dfc00515 	stw	ra,20(sp)
   921b8:	df000415 	stw	fp,16(sp)
   921bc:	df000404 	addi	fp,sp,16
   921c0:	e13ffd15 	stw	r4,-12(fp)
   921c4:	e17ffe15 	stw	r5,-8(fp)
   921c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   921cc:	e0bffd17 	ldw	r2,-12(fp)
   921d0:	10800017 	ldw	r2,0(r2)
   921d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   921d8:	e0bffc17 	ldw	r2,-16(fp)
   921dc:	10800a04 	addi	r2,r2,40
   921e0:	e1bfff17 	ldw	r6,-4(fp)
   921e4:	e17ffe17 	ldw	r5,-8(fp)
   921e8:	1009883a 	mov	r4,r2
   921ec:	00925d80 	call	925d8 <altera_avalon_jtag_uart_ioctl>
}
   921f0:	e037883a 	mov	sp,fp
   921f4:	dfc00117 	ldw	ra,4(sp)
   921f8:	df000017 	ldw	fp,0(sp)
   921fc:	dec00204 	addi	sp,sp,8
   92200:	f800283a 	ret

00092204 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   92204:	defffa04 	addi	sp,sp,-24
   92208:	dfc00515 	stw	ra,20(sp)
   9220c:	df000415 	stw	fp,16(sp)
   92210:	df000404 	addi	fp,sp,16
   92214:	e13ffd15 	stw	r4,-12(fp)
   92218:	e17ffe15 	stw	r5,-8(fp)
   9221c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   92220:	e0bffd17 	ldw	r2,-12(fp)
   92224:	00c00044 	movi	r3,1
   92228:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   9222c:	e0bffd17 	ldw	r2,-12(fp)
   92230:	10800017 	ldw	r2,0(r2)
   92234:	10800104 	addi	r2,r2,4
   92238:	1007883a 	mov	r3,r2
   9223c:	e0bffd17 	ldw	r2,-12(fp)
   92240:	10800817 	ldw	r2,32(r2)
   92244:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   92248:	e0bffe17 	ldw	r2,-8(fp)
   9224c:	e0ffff17 	ldw	r3,-4(fp)
   92250:	d8000015 	stw	zero,0(sp)
   92254:	e1fffd17 	ldw	r7,-12(fp)
   92258:	01800274 	movhi	r6,9
   9225c:	3188b104 	addi	r6,r6,8900
   92260:	180b883a 	mov	r5,r3
   92264:	1009883a 	mov	r4,r2
   92268:	00935640 	call	93564 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   9226c:	e0bffd17 	ldw	r2,-12(fp)
   92270:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   92274:	e0bffd17 	ldw	r2,-12(fp)
   92278:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9227c:	d0c70217 	ldw	r3,7176(gp)
   92280:	e1fffd17 	ldw	r7,-12(fp)
   92284:	01800274 	movhi	r6,9
   92288:	31893404 	addi	r6,r6,9424
   9228c:	180b883a 	mov	r5,r3
   92290:	1009883a 	mov	r4,r2
   92294:	0092ffc0 	call	92ffc <alt_alarm_start>
   92298:	1000040e 	bge	r2,zero,922ac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   9229c:	e0fffd17 	ldw	r3,-12(fp)
   922a0:	00a00034 	movhi	r2,32768
   922a4:	10bfffc4 	addi	r2,r2,-1
   922a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   922ac:	0001883a 	nop
   922b0:	e037883a 	mov	sp,fp
   922b4:	dfc00117 	ldw	ra,4(sp)
   922b8:	df000017 	ldw	fp,0(sp)
   922bc:	dec00204 	addi	sp,sp,8
   922c0:	f800283a 	ret

000922c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   922c4:	defff804 	addi	sp,sp,-32
   922c8:	df000715 	stw	fp,28(sp)
   922cc:	df000704 	addi	fp,sp,28
   922d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   922d4:	e0bfff17 	ldw	r2,-4(fp)
   922d8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   922dc:	e0bffb17 	ldw	r2,-20(fp)
   922e0:	10800017 	ldw	r2,0(r2)
   922e4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   922e8:	e0bffc17 	ldw	r2,-16(fp)
   922ec:	10800104 	addi	r2,r2,4
   922f0:	10800037 	ldwio	r2,0(r2)
   922f4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   922f8:	e0bffd17 	ldw	r2,-12(fp)
   922fc:	1080c00c 	andi	r2,r2,768
   92300:	10006d26 	beq	r2,zero,924b8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   92304:	e0bffd17 	ldw	r2,-12(fp)
   92308:	1080400c 	andi	r2,r2,256
   9230c:	10003526 	beq	r2,zero,923e4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   92310:	00800074 	movhi	r2,1
   92314:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   92318:	e0bffb17 	ldw	r2,-20(fp)
   9231c:	10800a17 	ldw	r2,40(r2)
   92320:	10800044 	addi	r2,r2,1
   92324:	1081ffcc 	andi	r2,r2,2047
   92328:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   9232c:	e0bffb17 	ldw	r2,-20(fp)
   92330:	10c00b17 	ldw	r3,44(r2)
   92334:	e0bffe17 	ldw	r2,-8(fp)
   92338:	18801526 	beq	r3,r2,92390 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   9233c:	e0bffc17 	ldw	r2,-16(fp)
   92340:	10800037 	ldwio	r2,0(r2)
   92344:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   92348:	e0bff917 	ldw	r2,-28(fp)
   9234c:	10a0000c 	andi	r2,r2,32768
   92350:	10001126 	beq	r2,zero,92398 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   92354:	e0bffb17 	ldw	r2,-20(fp)
   92358:	10800a17 	ldw	r2,40(r2)
   9235c:	e0fff917 	ldw	r3,-28(fp)
   92360:	1809883a 	mov	r4,r3
   92364:	e0fffb17 	ldw	r3,-20(fp)
   92368:	1885883a 	add	r2,r3,r2
   9236c:	10800e04 	addi	r2,r2,56
   92370:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   92374:	e0bffb17 	ldw	r2,-20(fp)
   92378:	10800a17 	ldw	r2,40(r2)
   9237c:	10800044 	addi	r2,r2,1
   92380:	10c1ffcc 	andi	r3,r2,2047
   92384:	e0bffb17 	ldw	r2,-20(fp)
   92388:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   9238c:	003fe206 	br	92318 <__alt_data_end+0xfffbcbe8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   92390:	0001883a 	nop
   92394:	00000106 	br	9239c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   92398:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   9239c:	e0bff917 	ldw	r2,-28(fp)
   923a0:	10bfffec 	andhi	r2,r2,65535
   923a4:	10000f26 	beq	r2,zero,923e4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   923a8:	e0bffb17 	ldw	r2,-20(fp)
   923ac:	10c00817 	ldw	r3,32(r2)
   923b0:	00bfff84 	movi	r2,-2
   923b4:	1886703a 	and	r3,r3,r2
   923b8:	e0bffb17 	ldw	r2,-20(fp)
   923bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   923c0:	e0bffc17 	ldw	r2,-16(fp)
   923c4:	10800104 	addi	r2,r2,4
   923c8:	1007883a 	mov	r3,r2
   923cc:	e0bffb17 	ldw	r2,-20(fp)
   923d0:	10800817 	ldw	r2,32(r2)
   923d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   923d8:	e0bffc17 	ldw	r2,-16(fp)
   923dc:	10800104 	addi	r2,r2,4
   923e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   923e4:	e0bffd17 	ldw	r2,-12(fp)
   923e8:	1080800c 	andi	r2,r2,512
   923ec:	103fbe26 	beq	r2,zero,922e8 <__alt_data_end+0xfffbcbb8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   923f0:	e0bffd17 	ldw	r2,-12(fp)
   923f4:	1004d43a 	srli	r2,r2,16
   923f8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   923fc:	00001406 	br	92450 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   92400:	e0bffc17 	ldw	r2,-16(fp)
   92404:	e0fffb17 	ldw	r3,-20(fp)
   92408:	18c00d17 	ldw	r3,52(r3)
   9240c:	e13ffb17 	ldw	r4,-20(fp)
   92410:	20c7883a 	add	r3,r4,r3
   92414:	18c20e04 	addi	r3,r3,2104
   92418:	18c00003 	ldbu	r3,0(r3)
   9241c:	18c03fcc 	andi	r3,r3,255
   92420:	18c0201c 	xori	r3,r3,128
   92424:	18ffe004 	addi	r3,r3,-128
   92428:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9242c:	e0bffb17 	ldw	r2,-20(fp)
   92430:	10800d17 	ldw	r2,52(r2)
   92434:	10800044 	addi	r2,r2,1
   92438:	10c1ffcc 	andi	r3,r2,2047
   9243c:	e0bffb17 	ldw	r2,-20(fp)
   92440:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   92444:	e0bffa17 	ldw	r2,-24(fp)
   92448:	10bfffc4 	addi	r2,r2,-1
   9244c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   92450:	e0bffa17 	ldw	r2,-24(fp)
   92454:	10000526 	beq	r2,zero,9246c <altera_avalon_jtag_uart_irq+0x1a8>
   92458:	e0bffb17 	ldw	r2,-20(fp)
   9245c:	10c00d17 	ldw	r3,52(r2)
   92460:	e0bffb17 	ldw	r2,-20(fp)
   92464:	10800c17 	ldw	r2,48(r2)
   92468:	18bfe51e 	bne	r3,r2,92400 <__alt_data_end+0xfffbccd0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   9246c:	e0bffa17 	ldw	r2,-24(fp)
   92470:	103f9d26 	beq	r2,zero,922e8 <__alt_data_end+0xfffbcbb8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   92474:	e0bffb17 	ldw	r2,-20(fp)
   92478:	10c00817 	ldw	r3,32(r2)
   9247c:	00bfff44 	movi	r2,-3
   92480:	1886703a 	and	r3,r3,r2
   92484:	e0bffb17 	ldw	r2,-20(fp)
   92488:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9248c:	e0bffb17 	ldw	r2,-20(fp)
   92490:	10800017 	ldw	r2,0(r2)
   92494:	10800104 	addi	r2,r2,4
   92498:	1007883a 	mov	r3,r2
   9249c:	e0bffb17 	ldw	r2,-20(fp)
   924a0:	10800817 	ldw	r2,32(r2)
   924a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   924a8:	e0bffc17 	ldw	r2,-16(fp)
   924ac:	10800104 	addi	r2,r2,4
   924b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   924b4:	003f8c06 	br	922e8 <__alt_data_end+0xfffbcbb8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   924b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   924bc:	0001883a 	nop
   924c0:	e037883a 	mov	sp,fp
   924c4:	df000017 	ldw	fp,0(sp)
   924c8:	dec00104 	addi	sp,sp,4
   924cc:	f800283a 	ret

000924d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   924d0:	defff804 	addi	sp,sp,-32
   924d4:	df000715 	stw	fp,28(sp)
   924d8:	df000704 	addi	fp,sp,28
   924dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   924e0:	e0bffb17 	ldw	r2,-20(fp)
   924e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   924e8:	e0bff917 	ldw	r2,-28(fp)
   924ec:	10800017 	ldw	r2,0(r2)
   924f0:	10800104 	addi	r2,r2,4
   924f4:	10800037 	ldwio	r2,0(r2)
   924f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   924fc:	e0bffa17 	ldw	r2,-24(fp)
   92500:	1081000c 	andi	r2,r2,1024
   92504:	10000b26 	beq	r2,zero,92534 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   92508:	e0bff917 	ldw	r2,-28(fp)
   9250c:	10800017 	ldw	r2,0(r2)
   92510:	10800104 	addi	r2,r2,4
   92514:	1007883a 	mov	r3,r2
   92518:	e0bff917 	ldw	r2,-28(fp)
   9251c:	10800817 	ldw	r2,32(r2)
   92520:	10810014 	ori	r2,r2,1024
   92524:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   92528:	e0bff917 	ldw	r2,-28(fp)
   9252c:	10000915 	stw	zero,36(r2)
   92530:	00000a06 	br	9255c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   92534:	e0bff917 	ldw	r2,-28(fp)
   92538:	10c00917 	ldw	r3,36(r2)
   9253c:	00a00034 	movhi	r2,32768
   92540:	10bfff04 	addi	r2,r2,-4
   92544:	10c00536 	bltu	r2,r3,9255c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   92548:	e0bff917 	ldw	r2,-28(fp)
   9254c:	10800917 	ldw	r2,36(r2)
   92550:	10c00044 	addi	r3,r2,1
   92554:	e0bff917 	ldw	r2,-28(fp)
   92558:	10c00915 	stw	r3,36(r2)
   9255c:	d0870217 	ldw	r2,7176(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   92560:	e037883a 	mov	sp,fp
   92564:	df000017 	ldw	fp,0(sp)
   92568:	dec00104 	addi	sp,sp,4
   9256c:	f800283a 	ret

00092570 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   92570:	defffd04 	addi	sp,sp,-12
   92574:	df000215 	stw	fp,8(sp)
   92578:	df000204 	addi	fp,sp,8
   9257c:	e13ffe15 	stw	r4,-8(fp)
   92580:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   92584:	00000506 	br	9259c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   92588:	e0bfff17 	ldw	r2,-4(fp)
   9258c:	1090000c 	andi	r2,r2,16384
   92590:	10000226 	beq	r2,zero,9259c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   92594:	00bffd44 	movi	r2,-11
   92598:	00000b06 	br	925c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9259c:	e0bffe17 	ldw	r2,-8(fp)
   925a0:	10c00d17 	ldw	r3,52(r2)
   925a4:	e0bffe17 	ldw	r2,-8(fp)
   925a8:	10800c17 	ldw	r2,48(r2)
   925ac:	18800526 	beq	r3,r2,925c4 <altera_avalon_jtag_uart_close+0x54>
   925b0:	e0bffe17 	ldw	r2,-8(fp)
   925b4:	10c00917 	ldw	r3,36(r2)
   925b8:	e0bffe17 	ldw	r2,-8(fp)
   925bc:	10800117 	ldw	r2,4(r2)
   925c0:	18bff136 	bltu	r3,r2,92588 <__alt_data_end+0xfffbce58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   925c4:	0005883a 	mov	r2,zero
}
   925c8:	e037883a 	mov	sp,fp
   925cc:	df000017 	ldw	fp,0(sp)
   925d0:	dec00104 	addi	sp,sp,4
   925d4:	f800283a 	ret

000925d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   925d8:	defffa04 	addi	sp,sp,-24
   925dc:	df000515 	stw	fp,20(sp)
   925e0:	df000504 	addi	fp,sp,20
   925e4:	e13ffd15 	stw	r4,-12(fp)
   925e8:	e17ffe15 	stw	r5,-8(fp)
   925ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   925f0:	00bff9c4 	movi	r2,-25
   925f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   925f8:	e0bffe17 	ldw	r2,-8(fp)
   925fc:	10da8060 	cmpeqi	r3,r2,27137
   92600:	1800031e 	bne	r3,zero,92610 <altera_avalon_jtag_uart_ioctl+0x38>
   92604:	109a80a0 	cmpeqi	r2,r2,27138
   92608:	1000181e 	bne	r2,zero,9266c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   9260c:	00002906 	br	926b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   92610:	e0bffd17 	ldw	r2,-12(fp)
   92614:	10c00117 	ldw	r3,4(r2)
   92618:	00a00034 	movhi	r2,32768
   9261c:	10bfffc4 	addi	r2,r2,-1
   92620:	18802126 	beq	r3,r2,926a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   92624:	e0bfff17 	ldw	r2,-4(fp)
   92628:	10800017 	ldw	r2,0(r2)
   9262c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   92630:	e0bffc17 	ldw	r2,-16(fp)
   92634:	10800090 	cmplti	r2,r2,2
   92638:	1000061e 	bne	r2,zero,92654 <altera_avalon_jtag_uart_ioctl+0x7c>
   9263c:	e0fffc17 	ldw	r3,-16(fp)
   92640:	00a00034 	movhi	r2,32768
   92644:	10bfffc4 	addi	r2,r2,-1
   92648:	18800226 	beq	r3,r2,92654 <altera_avalon_jtag_uart_ioctl+0x7c>
   9264c:	e0bffc17 	ldw	r2,-16(fp)
   92650:	00000206 	br	9265c <altera_avalon_jtag_uart_ioctl+0x84>
   92654:	00a00034 	movhi	r2,32768
   92658:	10bfff84 	addi	r2,r2,-2
   9265c:	e0fffd17 	ldw	r3,-12(fp)
   92660:	18800115 	stw	r2,4(r3)
      rc = 0;
   92664:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   92668:	00000f06 	br	926a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   9266c:	e0bffd17 	ldw	r2,-12(fp)
   92670:	10c00117 	ldw	r3,4(r2)
   92674:	00a00034 	movhi	r2,32768
   92678:	10bfffc4 	addi	r2,r2,-1
   9267c:	18800c26 	beq	r3,r2,926b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   92680:	e0bffd17 	ldw	r2,-12(fp)
   92684:	10c00917 	ldw	r3,36(r2)
   92688:	e0bffd17 	ldw	r2,-12(fp)
   9268c:	10800117 	ldw	r2,4(r2)
   92690:	1885803a 	cmpltu	r2,r3,r2
   92694:	10c03fcc 	andi	r3,r2,255
   92698:	e0bfff17 	ldw	r2,-4(fp)
   9269c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   926a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   926a4:	00000206 	br	926b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   926a8:	0001883a 	nop
   926ac:	00000106 	br	926b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   926b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   926b4:	e0bffb17 	ldw	r2,-20(fp)
}
   926b8:	e037883a 	mov	sp,fp
   926bc:	df000017 	ldw	fp,0(sp)
   926c0:	dec00104 	addi	sp,sp,4
   926c4:	f800283a 	ret

000926c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   926c8:	defff304 	addi	sp,sp,-52
   926cc:	dfc00c15 	stw	ra,48(sp)
   926d0:	df000b15 	stw	fp,44(sp)
   926d4:	df000b04 	addi	fp,sp,44
   926d8:	e13ffc15 	stw	r4,-16(fp)
   926dc:	e17ffd15 	stw	r5,-12(fp)
   926e0:	e1bffe15 	stw	r6,-8(fp)
   926e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   926e8:	e0bffd17 	ldw	r2,-12(fp)
   926ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   926f0:	00004706 	br	92810 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   926f4:	e0bffc17 	ldw	r2,-16(fp)
   926f8:	10800a17 	ldw	r2,40(r2)
   926fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   92700:	e0bffc17 	ldw	r2,-16(fp)
   92704:	10800b17 	ldw	r2,44(r2)
   92708:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   9270c:	e0fff717 	ldw	r3,-36(fp)
   92710:	e0bff817 	ldw	r2,-32(fp)
   92714:	18800536 	bltu	r3,r2,9272c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   92718:	e0fff717 	ldw	r3,-36(fp)
   9271c:	e0bff817 	ldw	r2,-32(fp)
   92720:	1885c83a 	sub	r2,r3,r2
   92724:	e0bff615 	stw	r2,-40(fp)
   92728:	00000406 	br	9273c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   9272c:	00c20004 	movi	r3,2048
   92730:	e0bff817 	ldw	r2,-32(fp)
   92734:	1885c83a 	sub	r2,r3,r2
   92738:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9273c:	e0bff617 	ldw	r2,-40(fp)
   92740:	10001e26 	beq	r2,zero,927bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   92744:	e0fffe17 	ldw	r3,-8(fp)
   92748:	e0bff617 	ldw	r2,-40(fp)
   9274c:	1880022e 	bgeu	r3,r2,92758 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   92750:	e0bffe17 	ldw	r2,-8(fp)
   92754:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   92758:	e0bffc17 	ldw	r2,-16(fp)
   9275c:	10c00e04 	addi	r3,r2,56
   92760:	e0bff817 	ldw	r2,-32(fp)
   92764:	1885883a 	add	r2,r3,r2
   92768:	e1bff617 	ldw	r6,-40(fp)
   9276c:	100b883a 	mov	r5,r2
   92770:	e13ff517 	ldw	r4,-44(fp)
   92774:	008cf400 	call	8cf40 <memcpy>
      ptr   += n;
   92778:	e0fff517 	ldw	r3,-44(fp)
   9277c:	e0bff617 	ldw	r2,-40(fp)
   92780:	1885883a 	add	r2,r3,r2
   92784:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   92788:	e0fffe17 	ldw	r3,-8(fp)
   9278c:	e0bff617 	ldw	r2,-40(fp)
   92790:	1885c83a 	sub	r2,r3,r2
   92794:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   92798:	e0fff817 	ldw	r3,-32(fp)
   9279c:	e0bff617 	ldw	r2,-40(fp)
   927a0:	1885883a 	add	r2,r3,r2
   927a4:	10c1ffcc 	andi	r3,r2,2047
   927a8:	e0bffc17 	ldw	r2,-16(fp)
   927ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   927b0:	e0bffe17 	ldw	r2,-8(fp)
   927b4:	00bfcf16 	blt	zero,r2,926f4 <__alt_data_end+0xfffbcfc4>
   927b8:	00000106 	br	927c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   927bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   927c0:	e0fff517 	ldw	r3,-44(fp)
   927c4:	e0bffd17 	ldw	r2,-12(fp)
   927c8:	1880141e 	bne	r3,r2,9281c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   927cc:	e0bfff17 	ldw	r2,-4(fp)
   927d0:	1090000c 	andi	r2,r2,16384
   927d4:	1000131e 	bne	r2,zero,92824 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   927d8:	0001883a 	nop
   927dc:	e0bffc17 	ldw	r2,-16(fp)
   927e0:	10c00a17 	ldw	r3,40(r2)
   927e4:	e0bff717 	ldw	r2,-36(fp)
   927e8:	1880051e 	bne	r3,r2,92800 <altera_avalon_jtag_uart_read+0x138>
   927ec:	e0bffc17 	ldw	r2,-16(fp)
   927f0:	10c00917 	ldw	r3,36(r2)
   927f4:	e0bffc17 	ldw	r2,-16(fp)
   927f8:	10800117 	ldw	r2,4(r2)
   927fc:	18bff736 	bltu	r3,r2,927dc <__alt_data_end+0xfffbd0ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   92800:	e0bffc17 	ldw	r2,-16(fp)
   92804:	10c00a17 	ldw	r3,40(r2)
   92808:	e0bff717 	ldw	r2,-36(fp)
   9280c:	18800726 	beq	r3,r2,9282c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   92810:	e0bffe17 	ldw	r2,-8(fp)
   92814:	00bfb716 	blt	zero,r2,926f4 <__alt_data_end+0xfffbcfc4>
   92818:	00000506 	br	92830 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   9281c:	0001883a 	nop
   92820:	00000306 	br	92830 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   92824:	0001883a 	nop
   92828:	00000106 	br	92830 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   9282c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   92830:	e0fff517 	ldw	r3,-44(fp)
   92834:	e0bffd17 	ldw	r2,-12(fp)
   92838:	18801826 	beq	r3,r2,9289c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9283c:	0005303a 	rdctl	r2,status
   92840:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92844:	e0fffb17 	ldw	r3,-20(fp)
   92848:	00bfff84 	movi	r2,-2
   9284c:	1884703a 	and	r2,r3,r2
   92850:	1001703a 	wrctl	status,r2
  
  return context;
   92854:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   92858:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9285c:	e0bffc17 	ldw	r2,-16(fp)
   92860:	10800817 	ldw	r2,32(r2)
   92864:	10c00054 	ori	r3,r2,1
   92868:	e0bffc17 	ldw	r2,-16(fp)
   9286c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   92870:	e0bffc17 	ldw	r2,-16(fp)
   92874:	10800017 	ldw	r2,0(r2)
   92878:	10800104 	addi	r2,r2,4
   9287c:	1007883a 	mov	r3,r2
   92880:	e0bffc17 	ldw	r2,-16(fp)
   92884:	10800817 	ldw	r2,32(r2)
   92888:	18800035 	stwio	r2,0(r3)
   9288c:	e0bffa17 	ldw	r2,-24(fp)
   92890:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92894:	e0bff917 	ldw	r2,-28(fp)
   92898:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   9289c:	e0fff517 	ldw	r3,-44(fp)
   928a0:	e0bffd17 	ldw	r2,-12(fp)
   928a4:	18800426 	beq	r3,r2,928b8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   928a8:	e0fff517 	ldw	r3,-44(fp)
   928ac:	e0bffd17 	ldw	r2,-12(fp)
   928b0:	1885c83a 	sub	r2,r3,r2
   928b4:	00000606 	br	928d0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   928b8:	e0bfff17 	ldw	r2,-4(fp)
   928bc:	1090000c 	andi	r2,r2,16384
   928c0:	10000226 	beq	r2,zero,928cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   928c4:	00bffd44 	movi	r2,-11
   928c8:	00000106 	br	928d0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   928cc:	00bffec4 	movi	r2,-5
}
   928d0:	e037883a 	mov	sp,fp
   928d4:	dfc00117 	ldw	ra,4(sp)
   928d8:	df000017 	ldw	fp,0(sp)
   928dc:	dec00204 	addi	sp,sp,8
   928e0:	f800283a 	ret

000928e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   928e4:	defff304 	addi	sp,sp,-52
   928e8:	dfc00c15 	stw	ra,48(sp)
   928ec:	df000b15 	stw	fp,44(sp)
   928f0:	df000b04 	addi	fp,sp,44
   928f4:	e13ffc15 	stw	r4,-16(fp)
   928f8:	e17ffd15 	stw	r5,-12(fp)
   928fc:	e1bffe15 	stw	r6,-8(fp)
   92900:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   92904:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   92908:	e0bffd17 	ldw	r2,-12(fp)
   9290c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   92910:	00003706 	br	929f0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   92914:	e0bffc17 	ldw	r2,-16(fp)
   92918:	10800c17 	ldw	r2,48(r2)
   9291c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   92920:	e0bffc17 	ldw	r2,-16(fp)
   92924:	10800d17 	ldw	r2,52(r2)
   92928:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   9292c:	e0fff917 	ldw	r3,-28(fp)
   92930:	e0bff517 	ldw	r2,-44(fp)
   92934:	1880062e 	bgeu	r3,r2,92950 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   92938:	e0fff517 	ldw	r3,-44(fp)
   9293c:	e0bff917 	ldw	r2,-28(fp)
   92940:	1885c83a 	sub	r2,r3,r2
   92944:	10bfffc4 	addi	r2,r2,-1
   92948:	e0bff615 	stw	r2,-40(fp)
   9294c:	00000b06 	br	9297c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   92950:	e0bff517 	ldw	r2,-44(fp)
   92954:	10000526 	beq	r2,zero,9296c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   92958:	00c20004 	movi	r3,2048
   9295c:	e0bff917 	ldw	r2,-28(fp)
   92960:	1885c83a 	sub	r2,r3,r2
   92964:	e0bff615 	stw	r2,-40(fp)
   92968:	00000406 	br	9297c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   9296c:	00c1ffc4 	movi	r3,2047
   92970:	e0bff917 	ldw	r2,-28(fp)
   92974:	1885c83a 	sub	r2,r3,r2
   92978:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9297c:	e0bff617 	ldw	r2,-40(fp)
   92980:	10001e26 	beq	r2,zero,929fc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   92984:	e0fffe17 	ldw	r3,-8(fp)
   92988:	e0bff617 	ldw	r2,-40(fp)
   9298c:	1880022e 	bgeu	r3,r2,92998 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   92990:	e0bffe17 	ldw	r2,-8(fp)
   92994:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   92998:	e0bffc17 	ldw	r2,-16(fp)
   9299c:	10c20e04 	addi	r3,r2,2104
   929a0:	e0bff917 	ldw	r2,-28(fp)
   929a4:	1885883a 	add	r2,r3,r2
   929a8:	e1bff617 	ldw	r6,-40(fp)
   929ac:	e17ffd17 	ldw	r5,-12(fp)
   929b0:	1009883a 	mov	r4,r2
   929b4:	008cf400 	call	8cf40 <memcpy>
      ptr   += n;
   929b8:	e0fffd17 	ldw	r3,-12(fp)
   929bc:	e0bff617 	ldw	r2,-40(fp)
   929c0:	1885883a 	add	r2,r3,r2
   929c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   929c8:	e0fffe17 	ldw	r3,-8(fp)
   929cc:	e0bff617 	ldw	r2,-40(fp)
   929d0:	1885c83a 	sub	r2,r3,r2
   929d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   929d8:	e0fff917 	ldw	r3,-28(fp)
   929dc:	e0bff617 	ldw	r2,-40(fp)
   929e0:	1885883a 	add	r2,r3,r2
   929e4:	10c1ffcc 	andi	r3,r2,2047
   929e8:	e0bffc17 	ldw	r2,-16(fp)
   929ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   929f0:	e0bffe17 	ldw	r2,-8(fp)
   929f4:	00bfc716 	blt	zero,r2,92914 <__alt_data_end+0xfffbd1e4>
   929f8:	00000106 	br	92a00 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   929fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92a00:	0005303a 	rdctl	r2,status
   92a04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92a08:	e0fffb17 	ldw	r3,-20(fp)
   92a0c:	00bfff84 	movi	r2,-2
   92a10:	1884703a 	and	r2,r3,r2
   92a14:	1001703a 	wrctl	status,r2
  
  return context;
   92a18:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   92a1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   92a20:	e0bffc17 	ldw	r2,-16(fp)
   92a24:	10800817 	ldw	r2,32(r2)
   92a28:	10c00094 	ori	r3,r2,2
   92a2c:	e0bffc17 	ldw	r2,-16(fp)
   92a30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   92a34:	e0bffc17 	ldw	r2,-16(fp)
   92a38:	10800017 	ldw	r2,0(r2)
   92a3c:	10800104 	addi	r2,r2,4
   92a40:	1007883a 	mov	r3,r2
   92a44:	e0bffc17 	ldw	r2,-16(fp)
   92a48:	10800817 	ldw	r2,32(r2)
   92a4c:	18800035 	stwio	r2,0(r3)
   92a50:	e0bffa17 	ldw	r2,-24(fp)
   92a54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92a58:	e0bff817 	ldw	r2,-32(fp)
   92a5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   92a60:	e0bffe17 	ldw	r2,-8(fp)
   92a64:	0080100e 	bge	zero,r2,92aa8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   92a68:	e0bfff17 	ldw	r2,-4(fp)
   92a6c:	1090000c 	andi	r2,r2,16384
   92a70:	1000101e 	bne	r2,zero,92ab4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   92a74:	0001883a 	nop
   92a78:	e0bffc17 	ldw	r2,-16(fp)
   92a7c:	10c00d17 	ldw	r3,52(r2)
   92a80:	e0bff517 	ldw	r2,-44(fp)
   92a84:	1880051e 	bne	r3,r2,92a9c <altera_avalon_jtag_uart_write+0x1b8>
   92a88:	e0bffc17 	ldw	r2,-16(fp)
   92a8c:	10c00917 	ldw	r3,36(r2)
   92a90:	e0bffc17 	ldw	r2,-16(fp)
   92a94:	10800117 	ldw	r2,4(r2)
   92a98:	18bff736 	bltu	r3,r2,92a78 <__alt_data_end+0xfffbd348>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   92a9c:	e0bffc17 	ldw	r2,-16(fp)
   92aa0:	10800917 	ldw	r2,36(r2)
   92aa4:	1000051e 	bne	r2,zero,92abc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   92aa8:	e0bffe17 	ldw	r2,-8(fp)
   92aac:	00bfd016 	blt	zero,r2,929f0 <__alt_data_end+0xfffbd2c0>
   92ab0:	00000306 	br	92ac0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   92ab4:	0001883a 	nop
   92ab8:	00000106 	br	92ac0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   92abc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   92ac0:	e0fffd17 	ldw	r3,-12(fp)
   92ac4:	e0bff717 	ldw	r2,-36(fp)
   92ac8:	18800426 	beq	r3,r2,92adc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   92acc:	e0fffd17 	ldw	r3,-12(fp)
   92ad0:	e0bff717 	ldw	r2,-36(fp)
   92ad4:	1885c83a 	sub	r2,r3,r2
   92ad8:	00000606 	br	92af4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   92adc:	e0bfff17 	ldw	r2,-4(fp)
   92ae0:	1090000c 	andi	r2,r2,16384
   92ae4:	10000226 	beq	r2,zero,92af0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   92ae8:	00bffd44 	movi	r2,-11
   92aec:	00000106 	br	92af4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   92af0:	00bffec4 	movi	r2,-5
}
   92af4:	e037883a 	mov	sp,fp
   92af8:	dfc00117 	ldw	ra,4(sp)
   92afc:	df000017 	ldw	fp,0(sp)
   92b00:	dec00204 	addi	sp,sp,8
   92b04:	f800283a 	ret

00092b08 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   92b08:	defffc04 	addi	sp,sp,-16
   92b0c:	df000315 	stw	fp,12(sp)
   92b10:	df000304 	addi	fp,sp,12
   92b14:	e13ffe15 	stw	r4,-8(fp)
   92b18:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   92b1c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   92b20:	e0bfff17 	ldw	r2,-4(fp)
   92b24:	1000061e 	bne	r2,zero,92b40 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   92b28:	e0bffe17 	ldw	r2,-8(fp)
   92b2c:	1007883a 	mov	r3,r2
   92b30:	e0bffd03 	ldbu	r2,-12(fp)
   92b34:	1884b03a 	or	r2,r3,r2
   92b38:	e0bffd05 	stb	r2,-12(fp)
   92b3c:	00000806 	br	92b60 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   92b40:	e0bffe17 	ldw	r2,-8(fp)
   92b44:	1007883a 	mov	r3,r2
   92b48:	e0bffd03 	ldbu	r2,-12(fp)
   92b4c:	1884b03a 	or	r2,r3,r2
   92b50:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   92b54:	e0bffd03 	ldbu	r2,-12(fp)
   92b58:	10801014 	ori	r2,r2,64
   92b5c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   92b60:	e0fffd03 	ldbu	r3,-12(fp)
   92b64:	00bfe004 	movi	r2,-128
   92b68:	1884b03a 	or	r2,r3,r2
}
   92b6c:	e037883a 	mov	sp,fp
   92b70:	df000017 	ldw	fp,0(sp)
   92b74:	dec00104 	addi	sp,sp,4
   92b78:	f800283a 	ret

00092b7c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   92b7c:	defffd04 	addi	sp,sp,-12
   92b80:	df000215 	stw	fp,8(sp)
   92b84:	df000204 	addi	fp,sp,8
   92b88:	e13ffe15 	stw	r4,-8(fp)
   92b8c:	2805883a 	mov	r2,r5
   92b90:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   92b94:	e0bffe17 	ldw	r2,-8(fp)
   92b98:	10800a17 	ldw	r2,40(r2)
   92b9c:	1007883a 	mov	r3,r2
   92ba0:	e0bfff03 	ldbu	r2,-4(fp)
   92ba4:	18800025 	stbio	r2,0(r3)
}
   92ba8:	0001883a 	nop
   92bac:	e037883a 	mov	sp,fp
   92bb0:	df000017 	ldw	fp,0(sp)
   92bb4:	dec00104 	addi	sp,sp,4
   92bb8:	f800283a 	ret

00092bbc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   92bbc:	defffe04 	addi	sp,sp,-8
   92bc0:	df000115 	stw	fp,4(sp)
   92bc4:	df000104 	addi	fp,sp,4
   92bc8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   92bcc:	e0bfff17 	ldw	r2,-4(fp)
   92bd0:	10800a17 	ldw	r2,40(r2)
   92bd4:	1007883a 	mov	r3,r2
   92bd8:	00800044 	movi	r2,1
   92bdc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   92be0:	0001883a 	nop
   92be4:	e037883a 	mov	sp,fp
   92be8:	df000017 	ldw	fp,0(sp)
   92bec:	dec00104 	addi	sp,sp,4
   92bf0:	f800283a 	ret

00092bf4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   92bf4:	defffc04 	addi	sp,sp,-16
   92bf8:	dfc00315 	stw	ra,12(sp)
   92bfc:	df000215 	stw	fp,8(sp)
   92c00:	df000204 	addi	fp,sp,8
   92c04:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   92c08:	d1600a04 	addi	r5,gp,-32728
   92c0c:	e13fff17 	ldw	r4,-4(fp)
   92c10:	00932e80 	call	932e8 <alt_find_dev>
   92c14:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   92c18:	e0bffe17 	ldw	r2,-8(fp)
}
   92c1c:	e037883a 	mov	sp,fp
   92c20:	dfc00117 	ldw	ra,4(sp)
   92c24:	df000017 	ldw	fp,0(sp)
   92c28:	dec00204 	addi	sp,sp,8
   92c2c:	f800283a 	ret

00092c30 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   92c30:	defffb04 	addi	sp,sp,-20
   92c34:	df000415 	stw	fp,16(sp)
   92c38:	df000404 	addi	fp,sp,16
   92c3c:	e13ffd15 	stw	r4,-12(fp)
   92c40:	e17ffe15 	stw	r5,-8(fp)
   92c44:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   92c48:	e03ffc15 	stw	zero,-16(fp)
   92c4c:	00000f06 	br	92c8c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   92c50:	e0bffd17 	ldw	r2,-12(fp)
   92c54:	10800a17 	ldw	r2,40(r2)
   92c58:	10800044 	addi	r2,r2,1
   92c5c:	1009883a 	mov	r4,r2
   92c60:	e0fffe17 	ldw	r3,-8(fp)
   92c64:	e0bffc17 	ldw	r2,-16(fp)
   92c68:	1885883a 	add	r2,r3,r2
   92c6c:	10800003 	ldbu	r2,0(r2)
   92c70:	10803fcc 	andi	r2,r2,255
   92c74:	1080201c 	xori	r2,r2,128
   92c78:	10bfe004 	addi	r2,r2,-128
   92c7c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   92c80:	e0bffc17 	ldw	r2,-16(fp)
   92c84:	10800044 	addi	r2,r2,1
   92c88:	e0bffc15 	stw	r2,-16(fp)
   92c8c:	e0fffc17 	ldw	r3,-16(fp)
   92c90:	e0bfff17 	ldw	r2,-4(fp)
   92c94:	18bfee36 	bltu	r3,r2,92c50 <__alt_data_end+0xfffbd520>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   92c98:	0001883a 	nop
   92c9c:	e037883a 	mov	sp,fp
   92ca0:	df000017 	ldw	fp,0(sp)
   92ca4:	dec00104 	addi	sp,sp,4
   92ca8:	f800283a 	ret

00092cac <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   92cac:	defffd04 	addi	sp,sp,-12
   92cb0:	df000215 	stw	fp,8(sp)
   92cb4:	df000204 	addi	fp,sp,8
   92cb8:	e13ffe15 	stw	r4,-8(fp)
   92cbc:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   92cc0:	00000d06 	br	92cf8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   92cc4:	e0bffe17 	ldw	r2,-8(fp)
   92cc8:	10800a17 	ldw	r2,40(r2)
   92ccc:	10800044 	addi	r2,r2,1
   92cd0:	1007883a 	mov	r3,r2
   92cd4:	e0bfff17 	ldw	r2,-4(fp)
   92cd8:	10800003 	ldbu	r2,0(r2)
   92cdc:	10803fcc 	andi	r2,r2,255
   92ce0:	1080201c 	xori	r2,r2,128
   92ce4:	10bfe004 	addi	r2,r2,-128
   92ce8:	18800025 	stbio	r2,0(r3)
		++ptr;
   92cec:	e0bfff17 	ldw	r2,-4(fp)
   92cf0:	10800044 	addi	r2,r2,1
   92cf4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   92cf8:	e0bfff17 	ldw	r2,-4(fp)
   92cfc:	10800003 	ldbu	r2,0(r2)
   92d00:	10803fcc 	andi	r2,r2,255
   92d04:	1080201c 	xori	r2,r2,128
   92d08:	10bfe004 	addi	r2,r2,-128
   92d0c:	103fed1e 	bne	r2,zero,92cc4 <__alt_data_end+0xfffbd594>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   92d10:	0001883a 	nop
   92d14:	e037883a 	mov	sp,fp
   92d18:	df000017 	ldw	fp,0(sp)
   92d1c:	dec00104 	addi	sp,sp,4
   92d20:	f800283a 	ret

00092d24 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   92d24:	defffb04 	addi	sp,sp,-20
   92d28:	dfc00415 	stw	ra,16(sp)
   92d2c:	df000315 	stw	fp,12(sp)
   92d30:	df000304 	addi	fp,sp,12
   92d34:	e13ffd15 	stw	r4,-12(fp)
   92d38:	e17ffe15 	stw	r5,-8(fp)
   92d3c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   92d40:	e0bffd17 	ldw	r2,-12(fp)
   92d44:	10800017 	ldw	r2,0(r2)
   92d48:	e0ffff17 	ldw	r3,-4(fp)
   92d4c:	180d883a 	mov	r6,r3
   92d50:	e17ffe17 	ldw	r5,-8(fp)
   92d54:	1009883a 	mov	r4,r2
   92d58:	0092c300 	call	92c30 <alt_up_character_lcd_write>
	return 0;
   92d5c:	0005883a 	mov	r2,zero
}
   92d60:	e037883a 	mov	sp,fp
   92d64:	dfc00117 	ldw	ra,4(sp)
   92d68:	df000017 	ldw	fp,0(sp)
   92d6c:	dec00204 	addi	sp,sp,8
   92d70:	f800283a 	ret

00092d74 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   92d74:	defffa04 	addi	sp,sp,-24
   92d78:	dfc00515 	stw	ra,20(sp)
   92d7c:	df000415 	stw	fp,16(sp)
   92d80:	df000404 	addi	fp,sp,16
   92d84:	e13ffd15 	stw	r4,-12(fp)
   92d88:	e17ffe15 	stw	r5,-8(fp)
   92d8c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   92d90:	e0bffe17 	ldw	r2,-8(fp)
   92d94:	10800a28 	cmpgeui	r2,r2,40
   92d98:	1000031e 	bne	r2,zero,92da8 <alt_up_character_lcd_set_cursor_pos+0x34>
   92d9c:	e0bfff17 	ldw	r2,-4(fp)
   92da0:	108000b0 	cmpltui	r2,r2,2
   92da4:	1000021e 	bne	r2,zero,92db0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   92da8:	00bfffc4 	movi	r2,-1
   92dac:	00000906 	br	92dd4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   92db0:	e17fff17 	ldw	r5,-4(fp)
   92db4:	e13ffe17 	ldw	r4,-8(fp)
   92db8:	0092b080 	call	92b08 <get_DDRAM_addr>
   92dbc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   92dc0:	e0bffc03 	ldbu	r2,-16(fp)
   92dc4:	100b883a 	mov	r5,r2
   92dc8:	e13ffd17 	ldw	r4,-12(fp)
   92dcc:	0092b7c0 	call	92b7c <alt_up_character_lcd_send_cmd>
	return 0;
   92dd0:	0005883a 	mov	r2,zero
}
   92dd4:	e037883a 	mov	sp,fp
   92dd8:	dfc00117 	ldw	ra,4(sp)
   92ddc:	df000017 	ldw	fp,0(sp)
   92de0:	dec00204 	addi	sp,sp,8
   92de4:	f800283a 	ret

00092de8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   92de8:	defffb04 	addi	sp,sp,-20
   92dec:	dfc00415 	stw	ra,16(sp)
   92df0:	df000315 	stw	fp,12(sp)
   92df4:	df000304 	addi	fp,sp,12
   92df8:	e13ffe15 	stw	r4,-8(fp)
   92dfc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   92e00:	e0bfff17 	ldw	r2,-4(fp)
   92e04:	10001526 	beq	r2,zero,92e5c <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   92e08:	e0bfff17 	ldw	r2,-4(fp)
   92e0c:	0080020e 	bge	zero,r2,92e18 <alt_up_character_lcd_shift_cursor+0x30>
   92e10:	00800504 	movi	r2,20
   92e14:	00000106 	br	92e1c <alt_up_character_lcd_shift_cursor+0x34>
   92e18:	00800404 	movi	r2,16
   92e1c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   92e20:	e0bfff17 	ldw	r2,-4(fp)
   92e24:	1000010e 	bge	r2,zero,92e2c <alt_up_character_lcd_shift_cursor+0x44>
   92e28:	0085c83a 	sub	r2,zero,r2
   92e2c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   92e30:	00000406 	br	92e44 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   92e34:	e0bffd43 	ldbu	r2,-11(fp)
   92e38:	100b883a 	mov	r5,r2
   92e3c:	e13ffe17 	ldw	r4,-8(fp)
   92e40:	0092b7c0 	call	92b7c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   92e44:	e0bffd03 	ldbu	r2,-12(fp)
   92e48:	10ffffc4 	addi	r3,r2,-1
   92e4c:	e0fffd05 	stb	r3,-12(fp)
   92e50:	10803fcc 	andi	r2,r2,255
   92e54:	103ff71e 	bne	r2,zero,92e34 <__alt_data_end+0xfffbd704>
   92e58:	00000106 	br	92e60 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   92e5c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   92e60:	e037883a 	mov	sp,fp
   92e64:	dfc00117 	ldw	ra,4(sp)
   92e68:	df000017 	ldw	fp,0(sp)
   92e6c:	dec00204 	addi	sp,sp,8
   92e70:	f800283a 	ret

00092e74 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   92e74:	defffb04 	addi	sp,sp,-20
   92e78:	dfc00415 	stw	ra,16(sp)
   92e7c:	df000315 	stw	fp,12(sp)
   92e80:	df000304 	addi	fp,sp,12
   92e84:	e13ffe15 	stw	r4,-8(fp)
   92e88:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   92e8c:	e0bfff17 	ldw	r2,-4(fp)
   92e90:	10001526 	beq	r2,zero,92ee8 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   92e94:	e0bfff17 	ldw	r2,-4(fp)
   92e98:	0080020e 	bge	zero,r2,92ea4 <alt_up_character_lcd_shift_display+0x30>
   92e9c:	00800704 	movi	r2,28
   92ea0:	00000106 	br	92ea8 <alt_up_character_lcd_shift_display+0x34>
   92ea4:	00800604 	movi	r2,24
   92ea8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   92eac:	e0bfff17 	ldw	r2,-4(fp)
   92eb0:	1000010e 	bge	r2,zero,92eb8 <alt_up_character_lcd_shift_display+0x44>
   92eb4:	0085c83a 	sub	r2,zero,r2
   92eb8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   92ebc:	00000406 	br	92ed0 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   92ec0:	e0bffd43 	ldbu	r2,-11(fp)
   92ec4:	100b883a 	mov	r5,r2
   92ec8:	e13ffe17 	ldw	r4,-8(fp)
   92ecc:	0092b7c0 	call	92b7c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   92ed0:	e0bffd03 	ldbu	r2,-12(fp)
   92ed4:	10ffffc4 	addi	r3,r2,-1
   92ed8:	e0fffd05 	stb	r3,-12(fp)
   92edc:	10803fcc 	andi	r2,r2,255
   92ee0:	103ff71e 	bne	r2,zero,92ec0 <__alt_data_end+0xfffbd790>
   92ee4:	00000106 	br	92eec <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   92ee8:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   92eec:	e037883a 	mov	sp,fp
   92ef0:	dfc00117 	ldw	ra,4(sp)
   92ef4:	df000017 	ldw	fp,0(sp)
   92ef8:	dec00204 	addi	sp,sp,8
   92efc:	f800283a 	ret

00092f00 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   92f00:	defffa04 	addi	sp,sp,-24
   92f04:	dfc00515 	stw	ra,20(sp)
   92f08:	df000415 	stw	fp,16(sp)
   92f0c:	df000404 	addi	fp,sp,16
   92f10:	e13ffd15 	stw	r4,-12(fp)
   92f14:	e17ffe15 	stw	r5,-8(fp)
   92f18:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   92f1c:	e0bffe17 	ldw	r2,-8(fp)
   92f20:	10800a28 	cmpgeui	r2,r2,40
   92f24:	1000031e 	bne	r2,zero,92f34 <alt_up_character_lcd_erase_pos+0x34>
   92f28:	e0bfff17 	ldw	r2,-4(fp)
   92f2c:	108000b0 	cmpltui	r2,r2,2
   92f30:	1000021e 	bne	r2,zero,92f3c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   92f34:	00bfffc4 	movi	r2,-1
   92f38:	00000f06 	br	92f78 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   92f3c:	e17fff17 	ldw	r5,-4(fp)
   92f40:	e13ffe17 	ldw	r4,-8(fp)
   92f44:	0092b080 	call	92b08 <get_DDRAM_addr>
   92f48:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   92f4c:	e0bffc03 	ldbu	r2,-16(fp)
   92f50:	100b883a 	mov	r5,r2
   92f54:	e13ffd17 	ldw	r4,-12(fp)
   92f58:	0092b7c0 	call	92b7c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   92f5c:	e0bffd17 	ldw	r2,-12(fp)
   92f60:	10800a17 	ldw	r2,40(r2)
   92f64:	10800044 	addi	r2,r2,1
   92f68:	1007883a 	mov	r3,r2
   92f6c:	00800084 	movi	r2,2
   92f70:	18800025 	stbio	r2,0(r3)
	return 0;
   92f74:	0005883a 	mov	r2,zero
}
   92f78:	e037883a 	mov	sp,fp
   92f7c:	dfc00117 	ldw	ra,4(sp)
   92f80:	df000017 	ldw	fp,0(sp)
   92f84:	dec00204 	addi	sp,sp,8
   92f88:	f800283a 	ret

00092f8c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   92f8c:	defffd04 	addi	sp,sp,-12
   92f90:	dfc00215 	stw	ra,8(sp)
   92f94:	df000115 	stw	fp,4(sp)
   92f98:	df000104 	addi	fp,sp,4
   92f9c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   92fa0:	01400304 	movi	r5,12
   92fa4:	e13fff17 	ldw	r4,-4(fp)
   92fa8:	0092b7c0 	call	92b7c <alt_up_character_lcd_send_cmd>
}
   92fac:	0001883a 	nop
   92fb0:	e037883a 	mov	sp,fp
   92fb4:	dfc00117 	ldw	ra,4(sp)
   92fb8:	df000017 	ldw	fp,0(sp)
   92fbc:	dec00204 	addi	sp,sp,8
   92fc0:	f800283a 	ret

00092fc4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   92fc4:	defffd04 	addi	sp,sp,-12
   92fc8:	dfc00215 	stw	ra,8(sp)
   92fcc:	df000115 	stw	fp,4(sp)
   92fd0:	df000104 	addi	fp,sp,4
   92fd4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   92fd8:	014003c4 	movi	r5,15
   92fdc:	e13fff17 	ldw	r4,-4(fp)
   92fe0:	0092b7c0 	call	92b7c <alt_up_character_lcd_send_cmd>
}
   92fe4:	0001883a 	nop
   92fe8:	e037883a 	mov	sp,fp
   92fec:	dfc00117 	ldw	ra,4(sp)
   92ff0:	df000017 	ldw	fp,0(sp)
   92ff4:	dec00204 	addi	sp,sp,8
   92ff8:	f800283a 	ret

00092ffc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   92ffc:	defff504 	addi	sp,sp,-44
   93000:	df000a15 	stw	fp,40(sp)
   93004:	df000a04 	addi	fp,sp,40
   93008:	e13ffc15 	stw	r4,-16(fp)
   9300c:	e17ffd15 	stw	r5,-12(fp)
   93010:	e1bffe15 	stw	r6,-8(fp)
   93014:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   93018:	e03ff615 	stw	zero,-40(fp)
   9301c:	d0870217 	ldw	r2,7176(gp)
  
  if (alt_ticks_per_second ())
   93020:	10003c26 	beq	r2,zero,93114 <alt_alarm_start+0x118>
  {
    if (alarm)
   93024:	e0bffc17 	ldw	r2,-16(fp)
   93028:	10003826 	beq	r2,zero,9310c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   9302c:	e0bffc17 	ldw	r2,-16(fp)
   93030:	e0fffe17 	ldw	r3,-8(fp)
   93034:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   93038:	e0bffc17 	ldw	r2,-16(fp)
   9303c:	e0ffff17 	ldw	r3,-4(fp)
   93040:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93044:	0005303a 	rdctl	r2,status
   93048:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9304c:	e0fff917 	ldw	r3,-28(fp)
   93050:	00bfff84 	movi	r2,-2
   93054:	1884703a 	and	r2,r3,r2
   93058:	1001703a 	wrctl	status,r2
  
  return context;
   9305c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   93060:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   93064:	d0870317 	ldw	r2,7180(gp)
      
      current_nticks = alt_nticks();
   93068:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   9306c:	e0fffd17 	ldw	r3,-12(fp)
   93070:	e0bff617 	ldw	r2,-40(fp)
   93074:	1885883a 	add	r2,r3,r2
   93078:	10c00044 	addi	r3,r2,1
   9307c:	e0bffc17 	ldw	r2,-16(fp)
   93080:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   93084:	e0bffc17 	ldw	r2,-16(fp)
   93088:	10c00217 	ldw	r3,8(r2)
   9308c:	e0bff617 	ldw	r2,-40(fp)
   93090:	1880042e 	bgeu	r3,r2,930a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   93094:	e0bffc17 	ldw	r2,-16(fp)
   93098:	00c00044 	movi	r3,1
   9309c:	10c00405 	stb	r3,16(r2)
   930a0:	00000206 	br	930ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   930a4:	e0bffc17 	ldw	r2,-16(fp)
   930a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   930ac:	e0bffc17 	ldw	r2,-16(fp)
   930b0:	d0e01004 	addi	r3,gp,-32704
   930b4:	e0fffa15 	stw	r3,-24(fp)
   930b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   930bc:	e0bffb17 	ldw	r2,-20(fp)
   930c0:	e0fffa17 	ldw	r3,-24(fp)
   930c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   930c8:	e0bffa17 	ldw	r2,-24(fp)
   930cc:	10c00017 	ldw	r3,0(r2)
   930d0:	e0bffb17 	ldw	r2,-20(fp)
   930d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   930d8:	e0bffa17 	ldw	r2,-24(fp)
   930dc:	10800017 	ldw	r2,0(r2)
   930e0:	e0fffb17 	ldw	r3,-20(fp)
   930e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   930e8:	e0bffa17 	ldw	r2,-24(fp)
   930ec:	e0fffb17 	ldw	r3,-20(fp)
   930f0:	10c00015 	stw	r3,0(r2)
   930f4:	e0bff817 	ldw	r2,-32(fp)
   930f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   930fc:	e0bff717 	ldw	r2,-36(fp)
   93100:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   93104:	0005883a 	mov	r2,zero
   93108:	00000306 	br	93118 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   9310c:	00bffa84 	movi	r2,-22
   93110:	00000106 	br	93118 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   93114:	00bfde84 	movi	r2,-134
  }
}
   93118:	e037883a 	mov	sp,fp
   9311c:	df000017 	ldw	fp,0(sp)
   93120:	dec00104 	addi	sp,sp,4
   93124:	f800283a 	ret

00093128 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   93128:	deffff04 	addi	sp,sp,-4
   9312c:	df000015 	stw	fp,0(sp)
   93130:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   93134:	0001883a 	nop
   93138:	e037883a 	mov	sp,fp
   9313c:	df000017 	ldw	fp,0(sp)
   93140:	dec00104 	addi	sp,sp,4
   93144:	f800283a 	ret

00093148 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   93148:	defffe04 	addi	sp,sp,-8
   9314c:	dfc00115 	stw	ra,4(sp)
   93150:	df000015 	stw	fp,0(sp)
   93154:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   93158:	d0a00d17 	ldw	r2,-32716(gp)
   9315c:	10000326 	beq	r2,zero,9316c <alt_get_errno+0x24>
   93160:	d0a00d17 	ldw	r2,-32716(gp)
   93164:	103ee83a 	callr	r2
   93168:	00000106 	br	93170 <alt_get_errno+0x28>
   9316c:	d086f704 	addi	r2,gp,7132
}
   93170:	e037883a 	mov	sp,fp
   93174:	dfc00117 	ldw	ra,4(sp)
   93178:	df000017 	ldw	fp,0(sp)
   9317c:	dec00204 	addi	sp,sp,8
   93180:	f800283a 	ret

00093184 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   93184:	defffa04 	addi	sp,sp,-24
   93188:	dfc00515 	stw	ra,20(sp)
   9318c:	df000415 	stw	fp,16(sp)
   93190:	df000404 	addi	fp,sp,16
   93194:	e13ffe15 	stw	r4,-8(fp)
   93198:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   9319c:	e0bffe17 	ldw	r2,-8(fp)
   931a0:	10000326 	beq	r2,zero,931b0 <alt_dev_llist_insert+0x2c>
   931a4:	e0bffe17 	ldw	r2,-8(fp)
   931a8:	10800217 	ldw	r2,8(r2)
   931ac:	1000061e 	bne	r2,zero,931c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   931b0:	00931480 	call	93148 <alt_get_errno>
   931b4:	1007883a 	mov	r3,r2
   931b8:	00800584 	movi	r2,22
   931bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   931c0:	00bffa84 	movi	r2,-22
   931c4:	00001306 	br	93214 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   931c8:	e0bffe17 	ldw	r2,-8(fp)
   931cc:	e0ffff17 	ldw	r3,-4(fp)
   931d0:	e0fffc15 	stw	r3,-16(fp)
   931d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   931d8:	e0bffd17 	ldw	r2,-12(fp)
   931dc:	e0fffc17 	ldw	r3,-16(fp)
   931e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   931e4:	e0bffc17 	ldw	r2,-16(fp)
   931e8:	10c00017 	ldw	r3,0(r2)
   931ec:	e0bffd17 	ldw	r2,-12(fp)
   931f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   931f4:	e0bffc17 	ldw	r2,-16(fp)
   931f8:	10800017 	ldw	r2,0(r2)
   931fc:	e0fffd17 	ldw	r3,-12(fp)
   93200:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   93204:	e0bffc17 	ldw	r2,-16(fp)
   93208:	e0fffd17 	ldw	r3,-12(fp)
   9320c:	10c00015 	stw	r3,0(r2)

  return 0;  
   93210:	0005883a 	mov	r2,zero
}
   93214:	e037883a 	mov	sp,fp
   93218:	dfc00117 	ldw	ra,4(sp)
   9321c:	df000017 	ldw	fp,0(sp)
   93220:	dec00204 	addi	sp,sp,8
   93224:	f800283a 	ret

00093228 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   93228:	defffd04 	addi	sp,sp,-12
   9322c:	dfc00215 	stw	ra,8(sp)
   93230:	df000115 	stw	fp,4(sp)
   93234:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   93238:	00800274 	movhi	r2,9
   9323c:	108fd604 	addi	r2,r2,16216
   93240:	e0bfff15 	stw	r2,-4(fp)
   93244:	00000606 	br	93260 <_do_ctors+0x38>
        (*ctor) (); 
   93248:	e0bfff17 	ldw	r2,-4(fp)
   9324c:	10800017 	ldw	r2,0(r2)
   93250:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   93254:	e0bfff17 	ldw	r2,-4(fp)
   93258:	10bfff04 	addi	r2,r2,-4
   9325c:	e0bfff15 	stw	r2,-4(fp)
   93260:	e0ffff17 	ldw	r3,-4(fp)
   93264:	00800274 	movhi	r2,9
   93268:	108fd704 	addi	r2,r2,16220
   9326c:	18bff62e 	bgeu	r3,r2,93248 <__alt_data_end+0xfffbdb18>
        (*ctor) (); 
}
   93270:	0001883a 	nop
   93274:	e037883a 	mov	sp,fp
   93278:	dfc00117 	ldw	ra,4(sp)
   9327c:	df000017 	ldw	fp,0(sp)
   93280:	dec00204 	addi	sp,sp,8
   93284:	f800283a 	ret

00093288 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   93288:	defffd04 	addi	sp,sp,-12
   9328c:	dfc00215 	stw	ra,8(sp)
   93290:	df000115 	stw	fp,4(sp)
   93294:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   93298:	00800274 	movhi	r2,9
   9329c:	108fd604 	addi	r2,r2,16216
   932a0:	e0bfff15 	stw	r2,-4(fp)
   932a4:	00000606 	br	932c0 <_do_dtors+0x38>
        (*dtor) (); 
   932a8:	e0bfff17 	ldw	r2,-4(fp)
   932ac:	10800017 	ldw	r2,0(r2)
   932b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   932b4:	e0bfff17 	ldw	r2,-4(fp)
   932b8:	10bfff04 	addi	r2,r2,-4
   932bc:	e0bfff15 	stw	r2,-4(fp)
   932c0:	e0ffff17 	ldw	r3,-4(fp)
   932c4:	00800274 	movhi	r2,9
   932c8:	108fd704 	addi	r2,r2,16220
   932cc:	18bff62e 	bgeu	r3,r2,932a8 <__alt_data_end+0xfffbdb78>
        (*dtor) (); 
}
   932d0:	0001883a 	nop
   932d4:	e037883a 	mov	sp,fp
   932d8:	dfc00117 	ldw	ra,4(sp)
   932dc:	df000017 	ldw	fp,0(sp)
   932e0:	dec00204 	addi	sp,sp,8
   932e4:	f800283a 	ret

000932e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   932e8:	defffa04 	addi	sp,sp,-24
   932ec:	dfc00515 	stw	ra,20(sp)
   932f0:	df000415 	stw	fp,16(sp)
   932f4:	df000404 	addi	fp,sp,16
   932f8:	e13ffe15 	stw	r4,-8(fp)
   932fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   93300:	e0bfff17 	ldw	r2,-4(fp)
   93304:	10800017 	ldw	r2,0(r2)
   93308:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   9330c:	e13ffe17 	ldw	r4,-8(fp)
   93310:	00888540 	call	88854 <strlen>
   93314:	10800044 	addi	r2,r2,1
   93318:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9331c:	00000d06 	br	93354 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   93320:	e0bffc17 	ldw	r2,-16(fp)
   93324:	10800217 	ldw	r2,8(r2)
   93328:	e0fffd17 	ldw	r3,-12(fp)
   9332c:	180d883a 	mov	r6,r3
   93330:	e17ffe17 	ldw	r5,-8(fp)
   93334:	1009883a 	mov	r4,r2
   93338:	0093c140 	call	93c14 <memcmp>
   9333c:	1000021e 	bne	r2,zero,93348 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   93340:	e0bffc17 	ldw	r2,-16(fp)
   93344:	00000706 	br	93364 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   93348:	e0bffc17 	ldw	r2,-16(fp)
   9334c:	10800017 	ldw	r2,0(r2)
   93350:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   93354:	e0fffc17 	ldw	r3,-16(fp)
   93358:	e0bfff17 	ldw	r2,-4(fp)
   9335c:	18bff01e 	bne	r3,r2,93320 <__alt_data_end+0xfffbdbf0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   93360:	0005883a 	mov	r2,zero
}
   93364:	e037883a 	mov	sp,fp
   93368:	dfc00117 	ldw	ra,4(sp)
   9336c:	df000017 	ldw	fp,0(sp)
   93370:	dec00204 	addi	sp,sp,8
   93374:	f800283a 	ret

00093378 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   93378:	defffb04 	addi	sp,sp,-20
   9337c:	dfc00415 	stw	ra,16(sp)
   93380:	df000315 	stw	fp,12(sp)
   93384:	df000304 	addi	fp,sp,12
   93388:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9338c:	d0a00817 	ldw	r2,-32736(gp)
   93390:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   93394:	00003106 	br	9345c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   93398:	e0bffd17 	ldw	r2,-12(fp)
   9339c:	10800217 	ldw	r2,8(r2)
   933a0:	1009883a 	mov	r4,r2
   933a4:	00888540 	call	88854 <strlen>
   933a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   933ac:	e0bffd17 	ldw	r2,-12(fp)
   933b0:	10c00217 	ldw	r3,8(r2)
   933b4:	e0bffe17 	ldw	r2,-8(fp)
   933b8:	10bfffc4 	addi	r2,r2,-1
   933bc:	1885883a 	add	r2,r3,r2
   933c0:	10800003 	ldbu	r2,0(r2)
   933c4:	10803fcc 	andi	r2,r2,255
   933c8:	1080201c 	xori	r2,r2,128
   933cc:	10bfe004 	addi	r2,r2,-128
   933d0:	10800bd8 	cmpnei	r2,r2,47
   933d4:	1000031e 	bne	r2,zero,933e4 <alt_find_file+0x6c>
    {
      len -= 1;
   933d8:	e0bffe17 	ldw	r2,-8(fp)
   933dc:	10bfffc4 	addi	r2,r2,-1
   933e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   933e4:	e0bffe17 	ldw	r2,-8(fp)
   933e8:	e0ffff17 	ldw	r3,-4(fp)
   933ec:	1885883a 	add	r2,r3,r2
   933f0:	10800003 	ldbu	r2,0(r2)
   933f4:	10803fcc 	andi	r2,r2,255
   933f8:	1080201c 	xori	r2,r2,128
   933fc:	10bfe004 	addi	r2,r2,-128
   93400:	10800be0 	cmpeqi	r2,r2,47
   93404:	1000081e 	bne	r2,zero,93428 <alt_find_file+0xb0>
   93408:	e0bffe17 	ldw	r2,-8(fp)
   9340c:	e0ffff17 	ldw	r3,-4(fp)
   93410:	1885883a 	add	r2,r3,r2
   93414:	10800003 	ldbu	r2,0(r2)
   93418:	10803fcc 	andi	r2,r2,255
   9341c:	1080201c 	xori	r2,r2,128
   93420:	10bfe004 	addi	r2,r2,-128
   93424:	10000a1e 	bne	r2,zero,93450 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   93428:	e0bffd17 	ldw	r2,-12(fp)
   9342c:	10800217 	ldw	r2,8(r2)
   93430:	e0fffe17 	ldw	r3,-8(fp)
   93434:	180d883a 	mov	r6,r3
   93438:	e17fff17 	ldw	r5,-4(fp)
   9343c:	1009883a 	mov	r4,r2
   93440:	0093c140 	call	93c14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   93444:	1000021e 	bne	r2,zero,93450 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   93448:	e0bffd17 	ldw	r2,-12(fp)
   9344c:	00000706 	br	9346c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   93450:	e0bffd17 	ldw	r2,-12(fp)
   93454:	10800017 	ldw	r2,0(r2)
   93458:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9345c:	e0fffd17 	ldw	r3,-12(fp)
   93460:	d0a00804 	addi	r2,gp,-32736
   93464:	18bfcc1e 	bne	r3,r2,93398 <__alt_data_end+0xfffbdc68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   93468:	0005883a 	mov	r2,zero
}
   9346c:	e037883a 	mov	sp,fp
   93470:	dfc00117 	ldw	ra,4(sp)
   93474:	df000017 	ldw	fp,0(sp)
   93478:	dec00204 	addi	sp,sp,8
   9347c:	f800283a 	ret

00093480 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   93480:	defffa04 	addi	sp,sp,-24
   93484:	dfc00515 	stw	ra,20(sp)
   93488:	df000415 	stw	fp,16(sp)
   9348c:	dc000315 	stw	r16,12(sp)
   93490:	df000404 	addi	fp,sp,16
   93494:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   93498:	00bffa04 	movi	r2,-24
   9349c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   934a0:	e03ffc15 	stw	zero,-16(fp)
   934a4:	00001d06 	br	9351c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   934a8:	040002b4 	movhi	r16,10
   934ac:	84333204 	addi	r16,r16,-13112
   934b0:	e0bffc17 	ldw	r2,-16(fp)
   934b4:	01400304 	movi	r5,12
   934b8:	1009883a 	mov	r4,r2
   934bc:	0082a480 	call	82a48 <__mulsi3>
   934c0:	8085883a 	add	r2,r16,r2
   934c4:	10800017 	ldw	r2,0(r2)
   934c8:	1000111e 	bne	r2,zero,93510 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   934cc:	040002b4 	movhi	r16,10
   934d0:	84333204 	addi	r16,r16,-13112
   934d4:	e0bffc17 	ldw	r2,-16(fp)
   934d8:	01400304 	movi	r5,12
   934dc:	1009883a 	mov	r4,r2
   934e0:	0082a480 	call	82a48 <__mulsi3>
   934e4:	8085883a 	add	r2,r16,r2
   934e8:	e0fffe17 	ldw	r3,-8(fp)
   934ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   934f0:	d0e00c17 	ldw	r3,-32720(gp)
   934f4:	e0bffc17 	ldw	r2,-16(fp)
   934f8:	1880020e 	bge	r3,r2,93504 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   934fc:	e0bffc17 	ldw	r2,-16(fp)
   93500:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   93504:	e0bffc17 	ldw	r2,-16(fp)
   93508:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   9350c:	00000606 	br	93528 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   93510:	e0bffc17 	ldw	r2,-16(fp)
   93514:	10800044 	addi	r2,r2,1
   93518:	e0bffc15 	stw	r2,-16(fp)
   9351c:	e0bffc17 	ldw	r2,-16(fp)
   93520:	10800810 	cmplti	r2,r2,32
   93524:	103fe01e 	bne	r2,zero,934a8 <__alt_data_end+0xfffbdd78>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   93528:	e0bffd17 	ldw	r2,-12(fp)
}
   9352c:	e6ffff04 	addi	sp,fp,-4
   93530:	dfc00217 	ldw	ra,8(sp)
   93534:	df000117 	ldw	fp,4(sp)
   93538:	dc000017 	ldw	r16,0(sp)
   9353c:	dec00304 	addi	sp,sp,12
   93540:	f800283a 	ret

00093544 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   93544:	deffff04 	addi	sp,sp,-4
   93548:	df000015 	stw	fp,0(sp)
   9354c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   93550:	0001883a 	nop
   93554:	e037883a 	mov	sp,fp
   93558:	df000017 	ldw	fp,0(sp)
   9355c:	dec00104 	addi	sp,sp,4
   93560:	f800283a 	ret

00093564 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   93564:	defff904 	addi	sp,sp,-28
   93568:	dfc00615 	stw	ra,24(sp)
   9356c:	df000515 	stw	fp,20(sp)
   93570:	df000504 	addi	fp,sp,20
   93574:	e13ffc15 	stw	r4,-16(fp)
   93578:	e17ffd15 	stw	r5,-12(fp)
   9357c:	e1bffe15 	stw	r6,-8(fp)
   93580:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   93584:	e0800217 	ldw	r2,8(fp)
   93588:	d8800015 	stw	r2,0(sp)
   9358c:	e1ffff17 	ldw	r7,-4(fp)
   93590:	e1bffe17 	ldw	r6,-8(fp)
   93594:	e17ffd17 	ldw	r5,-12(fp)
   93598:	e13ffc17 	ldw	r4,-16(fp)
   9359c:	00937140 	call	93714 <alt_iic_isr_register>
}  
   935a0:	e037883a 	mov	sp,fp
   935a4:	dfc00117 	ldw	ra,4(sp)
   935a8:	df000017 	ldw	fp,0(sp)
   935ac:	dec00204 	addi	sp,sp,8
   935b0:	f800283a 	ret

000935b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   935b4:	defff904 	addi	sp,sp,-28
   935b8:	df000615 	stw	fp,24(sp)
   935bc:	df000604 	addi	fp,sp,24
   935c0:	e13ffe15 	stw	r4,-8(fp)
   935c4:	e17fff15 	stw	r5,-4(fp)
   935c8:	e0bfff17 	ldw	r2,-4(fp)
   935cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   935d0:	0005303a 	rdctl	r2,status
   935d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   935d8:	e0fffb17 	ldw	r3,-20(fp)
   935dc:	00bfff84 	movi	r2,-2
   935e0:	1884703a 	and	r2,r3,r2
   935e4:	1001703a 	wrctl	status,r2
  
  return context;
   935e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   935ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   935f0:	00c00044 	movi	r3,1
   935f4:	e0bffa17 	ldw	r2,-24(fp)
   935f8:	1884983a 	sll	r2,r3,r2
   935fc:	1007883a 	mov	r3,r2
   93600:	d0870117 	ldw	r2,7172(gp)
   93604:	1884b03a 	or	r2,r3,r2
   93608:	d0870115 	stw	r2,7172(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9360c:	d0870117 	ldw	r2,7172(gp)
   93610:	100170fa 	wrctl	ienable,r2
   93614:	e0bffc17 	ldw	r2,-16(fp)
   93618:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9361c:	e0bffd17 	ldw	r2,-12(fp)
   93620:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   93624:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   93628:	0001883a 	nop
}
   9362c:	e037883a 	mov	sp,fp
   93630:	df000017 	ldw	fp,0(sp)
   93634:	dec00104 	addi	sp,sp,4
   93638:	f800283a 	ret

0009363c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   9363c:	defff904 	addi	sp,sp,-28
   93640:	df000615 	stw	fp,24(sp)
   93644:	df000604 	addi	fp,sp,24
   93648:	e13ffe15 	stw	r4,-8(fp)
   9364c:	e17fff15 	stw	r5,-4(fp)
   93650:	e0bfff17 	ldw	r2,-4(fp)
   93654:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93658:	0005303a 	rdctl	r2,status
   9365c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93660:	e0fffb17 	ldw	r3,-20(fp)
   93664:	00bfff84 	movi	r2,-2
   93668:	1884703a 	and	r2,r3,r2
   9366c:	1001703a 	wrctl	status,r2
  
  return context;
   93670:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   93674:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   93678:	00c00044 	movi	r3,1
   9367c:	e0bffa17 	ldw	r2,-24(fp)
   93680:	1884983a 	sll	r2,r3,r2
   93684:	0084303a 	nor	r2,zero,r2
   93688:	1007883a 	mov	r3,r2
   9368c:	d0870117 	ldw	r2,7172(gp)
   93690:	1884703a 	and	r2,r3,r2
   93694:	d0870115 	stw	r2,7172(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   93698:	d0870117 	ldw	r2,7172(gp)
   9369c:	100170fa 	wrctl	ienable,r2
   936a0:	e0bffc17 	ldw	r2,-16(fp)
   936a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   936a8:	e0bffd17 	ldw	r2,-12(fp)
   936ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   936b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   936b4:	0001883a 	nop
}
   936b8:	e037883a 	mov	sp,fp
   936bc:	df000017 	ldw	fp,0(sp)
   936c0:	dec00104 	addi	sp,sp,4
   936c4:	f800283a 	ret

000936c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   936c8:	defffc04 	addi	sp,sp,-16
   936cc:	df000315 	stw	fp,12(sp)
   936d0:	df000304 	addi	fp,sp,12
   936d4:	e13ffe15 	stw	r4,-8(fp)
   936d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   936dc:	000530fa 	rdctl	r2,ienable
   936e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   936e4:	00c00044 	movi	r3,1
   936e8:	e0bfff17 	ldw	r2,-4(fp)
   936ec:	1884983a 	sll	r2,r3,r2
   936f0:	1007883a 	mov	r3,r2
   936f4:	e0bffd17 	ldw	r2,-12(fp)
   936f8:	1884703a 	and	r2,r3,r2
   936fc:	1004c03a 	cmpne	r2,r2,zero
   93700:	10803fcc 	andi	r2,r2,255
}
   93704:	e037883a 	mov	sp,fp
   93708:	df000017 	ldw	fp,0(sp)
   9370c:	dec00104 	addi	sp,sp,4
   93710:	f800283a 	ret

00093714 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   93714:	defff504 	addi	sp,sp,-44
   93718:	dfc00a15 	stw	ra,40(sp)
   9371c:	df000915 	stw	fp,36(sp)
   93720:	df000904 	addi	fp,sp,36
   93724:	e13ffc15 	stw	r4,-16(fp)
   93728:	e17ffd15 	stw	r5,-12(fp)
   9372c:	e1bffe15 	stw	r6,-8(fp)
   93730:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   93734:	00bffa84 	movi	r2,-22
   93738:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   9373c:	e0bffd17 	ldw	r2,-12(fp)
   93740:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   93744:	e0bff817 	ldw	r2,-32(fp)
   93748:	10800808 	cmpgei	r2,r2,32
   9374c:	1000271e 	bne	r2,zero,937ec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93750:	0005303a 	rdctl	r2,status
   93754:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93758:	e0fffb17 	ldw	r3,-20(fp)
   9375c:	00bfff84 	movi	r2,-2
   93760:	1884703a 	and	r2,r3,r2
   93764:	1001703a 	wrctl	status,r2
  
  return context;
   93768:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   9376c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   93770:	00800334 	movhi	r2,12
   93774:	10aa8804 	addi	r2,r2,-21984
   93778:	e0fff817 	ldw	r3,-32(fp)
   9377c:	180690fa 	slli	r3,r3,3
   93780:	10c5883a 	add	r2,r2,r3
   93784:	e0fffe17 	ldw	r3,-8(fp)
   93788:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   9378c:	00800334 	movhi	r2,12
   93790:	10aa8804 	addi	r2,r2,-21984
   93794:	e0fff817 	ldw	r3,-32(fp)
   93798:	180690fa 	slli	r3,r3,3
   9379c:	10c5883a 	add	r2,r2,r3
   937a0:	10800104 	addi	r2,r2,4
   937a4:	e0ffff17 	ldw	r3,-4(fp)
   937a8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   937ac:	e0bffe17 	ldw	r2,-8(fp)
   937b0:	10000526 	beq	r2,zero,937c8 <alt_iic_isr_register+0xb4>
   937b4:	e0bff817 	ldw	r2,-32(fp)
   937b8:	100b883a 	mov	r5,r2
   937bc:	e13ffc17 	ldw	r4,-16(fp)
   937c0:	00935b40 	call	935b4 <alt_ic_irq_enable>
   937c4:	00000406 	br	937d8 <alt_iic_isr_register+0xc4>
   937c8:	e0bff817 	ldw	r2,-32(fp)
   937cc:	100b883a 	mov	r5,r2
   937d0:	e13ffc17 	ldw	r4,-16(fp)
   937d4:	009363c0 	call	9363c <alt_ic_irq_disable>
   937d8:	e0bff715 	stw	r2,-36(fp)
   937dc:	e0bffa17 	ldw	r2,-24(fp)
   937e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   937e4:	e0bff917 	ldw	r2,-28(fp)
   937e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   937ec:	e0bff717 	ldw	r2,-36(fp)
}
   937f0:	e037883a 	mov	sp,fp
   937f4:	dfc00117 	ldw	ra,4(sp)
   937f8:	df000017 	ldw	fp,0(sp)
   937fc:	dec00204 	addi	sp,sp,8
   93800:	f800283a 	ret

00093804 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   93804:	defff804 	addi	sp,sp,-32
   93808:	dfc00715 	stw	ra,28(sp)
   9380c:	df000615 	stw	fp,24(sp)
   93810:	dc000515 	stw	r16,20(sp)
   93814:	df000604 	addi	fp,sp,24
   93818:	e13ffb15 	stw	r4,-20(fp)
   9381c:	e17ffc15 	stw	r5,-16(fp)
   93820:	e1bffd15 	stw	r6,-12(fp)
   93824:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   93828:	e1bffe17 	ldw	r6,-8(fp)
   9382c:	e17ffd17 	ldw	r5,-12(fp)
   93830:	e13ffc17 	ldw	r4,-16(fp)
   93834:	0091ac80 	call	91ac8 <open>
   93838:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   9383c:	e0bffa17 	ldw	r2,-24(fp)
   93840:	10002216 	blt	r2,zero,938cc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   93844:	040002b4 	movhi	r16,10
   93848:	84333204 	addi	r16,r16,-13112
   9384c:	e0bffa17 	ldw	r2,-24(fp)
   93850:	01400304 	movi	r5,12
   93854:	1009883a 	mov	r4,r2
   93858:	0082a480 	call	82a48 <__mulsi3>
   9385c:	8085883a 	add	r2,r16,r2
   93860:	10c00017 	ldw	r3,0(r2)
   93864:	e0bffb17 	ldw	r2,-20(fp)
   93868:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   9386c:	040002b4 	movhi	r16,10
   93870:	84333204 	addi	r16,r16,-13112
   93874:	e0bffa17 	ldw	r2,-24(fp)
   93878:	01400304 	movi	r5,12
   9387c:	1009883a 	mov	r4,r2
   93880:	0082a480 	call	82a48 <__mulsi3>
   93884:	8085883a 	add	r2,r16,r2
   93888:	10800104 	addi	r2,r2,4
   9388c:	10c00017 	ldw	r3,0(r2)
   93890:	e0bffb17 	ldw	r2,-20(fp)
   93894:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   93898:	040002b4 	movhi	r16,10
   9389c:	84333204 	addi	r16,r16,-13112
   938a0:	e0bffa17 	ldw	r2,-24(fp)
   938a4:	01400304 	movi	r5,12
   938a8:	1009883a 	mov	r4,r2
   938ac:	0082a480 	call	82a48 <__mulsi3>
   938b0:	8085883a 	add	r2,r16,r2
   938b4:	10800204 	addi	r2,r2,8
   938b8:	10c00017 	ldw	r3,0(r2)
   938bc:	e0bffb17 	ldw	r2,-20(fp)
   938c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   938c4:	e13ffa17 	ldw	r4,-24(fp)
   938c8:	0091d640 	call	91d64 <alt_release_fd>
  }
} 
   938cc:	0001883a 	nop
   938d0:	e6ffff04 	addi	sp,fp,-4
   938d4:	dfc00217 	ldw	ra,8(sp)
   938d8:	df000117 	ldw	fp,4(sp)
   938dc:	dc000017 	ldw	r16,0(sp)
   938e0:	dec00304 	addi	sp,sp,12
   938e4:	f800283a 	ret

000938e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   938e8:	defffb04 	addi	sp,sp,-20
   938ec:	dfc00415 	stw	ra,16(sp)
   938f0:	df000315 	stw	fp,12(sp)
   938f4:	df000304 	addi	fp,sp,12
   938f8:	e13ffd15 	stw	r4,-12(fp)
   938fc:	e17ffe15 	stw	r5,-8(fp)
   93900:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   93904:	01c07fc4 	movi	r7,511
   93908:	01800044 	movi	r6,1
   9390c:	e17ffd17 	ldw	r5,-12(fp)
   93910:	010002b4 	movhi	r4,10
   93914:	21333504 	addi	r4,r4,-13100
   93918:	00938040 	call	93804 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   9391c:	01c07fc4 	movi	r7,511
   93920:	000d883a 	mov	r6,zero
   93924:	e17ffe17 	ldw	r5,-8(fp)
   93928:	010002b4 	movhi	r4,10
   9392c:	21333204 	addi	r4,r4,-13112
   93930:	00938040 	call	93804 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   93934:	01c07fc4 	movi	r7,511
   93938:	01800044 	movi	r6,1
   9393c:	e17fff17 	ldw	r5,-4(fp)
   93940:	010002b4 	movhi	r4,10
   93944:	21333804 	addi	r4,r4,-13088
   93948:	00938040 	call	93804 <alt_open_fd>
}  
   9394c:	0001883a 	nop
   93950:	e037883a 	mov	sp,fp
   93954:	dfc00117 	ldw	ra,4(sp)
   93958:	df000017 	ldw	fp,0(sp)
   9395c:	dec00204 	addi	sp,sp,8
   93960:	f800283a 	ret

00093964 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   93964:	defffa04 	addi	sp,sp,-24
   93968:	df000515 	stw	fp,20(sp)
   9396c:	df000504 	addi	fp,sp,20
   93970:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93974:	0005303a 	rdctl	r2,status
   93978:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9397c:	e0fffc17 	ldw	r3,-16(fp)
   93980:	00bfff84 	movi	r2,-2
   93984:	1884703a 	and	r2,r3,r2
   93988:	1001703a 	wrctl	status,r2
  
  return context;
   9398c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   93990:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   93994:	e0bfff17 	ldw	r2,-4(fp)
   93998:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   9399c:	e0bffd17 	ldw	r2,-12(fp)
   939a0:	10800017 	ldw	r2,0(r2)
   939a4:	e0fffd17 	ldw	r3,-12(fp)
   939a8:	18c00117 	ldw	r3,4(r3)
   939ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   939b0:	e0bffd17 	ldw	r2,-12(fp)
   939b4:	10800117 	ldw	r2,4(r2)
   939b8:	e0fffd17 	ldw	r3,-12(fp)
   939bc:	18c00017 	ldw	r3,0(r3)
   939c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   939c4:	e0bffd17 	ldw	r2,-12(fp)
   939c8:	e0fffd17 	ldw	r3,-12(fp)
   939cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   939d0:	e0bffd17 	ldw	r2,-12(fp)
   939d4:	e0fffd17 	ldw	r3,-12(fp)
   939d8:	10c00015 	stw	r3,0(r2)
   939dc:	e0bffb17 	ldw	r2,-20(fp)
   939e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   939e4:	e0bffe17 	ldw	r2,-8(fp)
   939e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   939ec:	0001883a 	nop
   939f0:	e037883a 	mov	sp,fp
   939f4:	df000017 	ldw	fp,0(sp)
   939f8:	dec00104 	addi	sp,sp,4
   939fc:	f800283a 	ret

00093a00 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   93a00:	defffb04 	addi	sp,sp,-20
   93a04:	dfc00415 	stw	ra,16(sp)
   93a08:	df000315 	stw	fp,12(sp)
   93a0c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   93a10:	d0a01017 	ldw	r2,-32704(gp)
   93a14:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   93a18:	d0870317 	ldw	r2,7180(gp)
   93a1c:	10800044 	addi	r2,r2,1
   93a20:	d0870315 	stw	r2,7180(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   93a24:	00002e06 	br	93ae0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   93a28:	e0bffd17 	ldw	r2,-12(fp)
   93a2c:	10800017 	ldw	r2,0(r2)
   93a30:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   93a34:	e0bffd17 	ldw	r2,-12(fp)
   93a38:	10800403 	ldbu	r2,16(r2)
   93a3c:	10803fcc 	andi	r2,r2,255
   93a40:	10000426 	beq	r2,zero,93a54 <alt_tick+0x54>
   93a44:	d0870317 	ldw	r2,7180(gp)
   93a48:	1000021e 	bne	r2,zero,93a54 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   93a4c:	e0bffd17 	ldw	r2,-12(fp)
   93a50:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   93a54:	e0bffd17 	ldw	r2,-12(fp)
   93a58:	10800217 	ldw	r2,8(r2)
   93a5c:	d0c70317 	ldw	r3,7180(gp)
   93a60:	18801d36 	bltu	r3,r2,93ad8 <alt_tick+0xd8>
   93a64:	e0bffd17 	ldw	r2,-12(fp)
   93a68:	10800403 	ldbu	r2,16(r2)
   93a6c:	10803fcc 	andi	r2,r2,255
   93a70:	1000191e 	bne	r2,zero,93ad8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   93a74:	e0bffd17 	ldw	r2,-12(fp)
   93a78:	10800317 	ldw	r2,12(r2)
   93a7c:	e0fffd17 	ldw	r3,-12(fp)
   93a80:	18c00517 	ldw	r3,20(r3)
   93a84:	1809883a 	mov	r4,r3
   93a88:	103ee83a 	callr	r2
   93a8c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   93a90:	e0bfff17 	ldw	r2,-4(fp)
   93a94:	1000031e 	bne	r2,zero,93aa4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   93a98:	e13ffd17 	ldw	r4,-12(fp)
   93a9c:	00939640 	call	93964 <alt_alarm_stop>
   93aa0:	00000d06 	br	93ad8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   93aa4:	e0bffd17 	ldw	r2,-12(fp)
   93aa8:	10c00217 	ldw	r3,8(r2)
   93aac:	e0bfff17 	ldw	r2,-4(fp)
   93ab0:	1887883a 	add	r3,r3,r2
   93ab4:	e0bffd17 	ldw	r2,-12(fp)
   93ab8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   93abc:	e0bffd17 	ldw	r2,-12(fp)
   93ac0:	10c00217 	ldw	r3,8(r2)
   93ac4:	d0870317 	ldw	r2,7180(gp)
   93ac8:	1880032e 	bgeu	r3,r2,93ad8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   93acc:	e0bffd17 	ldw	r2,-12(fp)
   93ad0:	00c00044 	movi	r3,1
   93ad4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   93ad8:	e0bffe17 	ldw	r2,-8(fp)
   93adc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   93ae0:	e0fffd17 	ldw	r3,-12(fp)
   93ae4:	d0a01004 	addi	r2,gp,-32704
   93ae8:	18bfcf1e 	bne	r3,r2,93a28 <__alt_data_end+0xfffbe2f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   93aec:	0001883a 	nop
}
   93af0:	0001883a 	nop
   93af4:	e037883a 	mov	sp,fp
   93af8:	dfc00117 	ldw	ra,4(sp)
   93afc:	df000017 	ldw	fp,0(sp)
   93b00:	dec00204 	addi	sp,sp,8
   93b04:	f800283a 	ret

00093b08 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   93b08:	deffff04 	addi	sp,sp,-4
   93b0c:	df000015 	stw	fp,0(sp)
   93b10:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   93b14:	000170fa 	wrctl	ienable,zero
}
   93b18:	0001883a 	nop
   93b1c:	e037883a 	mov	sp,fp
   93b20:	df000017 	ldw	fp,0(sp)
   93b24:	dec00104 	addi	sp,sp,4
   93b28:	f800283a 	ret

00093b2c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   93b2c:	defffe04 	addi	sp,sp,-8
   93b30:	df000115 	stw	fp,4(sp)
   93b34:	df000104 	addi	fp,sp,4
   93b38:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   93b3c:	e0bfff17 	ldw	r2,-4(fp)
   93b40:	10bffe84 	addi	r2,r2,-6
   93b44:	10c00428 	cmpgeui	r3,r2,16
   93b48:	18001a1e 	bne	r3,zero,93bb4 <alt_exception_cause_generated_bad_addr+0x88>
   93b4c:	100690ba 	slli	r3,r2,2
   93b50:	00800274 	movhi	r2,9
   93b54:	108ed904 	addi	r2,r2,15204
   93b58:	1885883a 	add	r2,r3,r2
   93b5c:	10800017 	ldw	r2,0(r2)
   93b60:	1000683a 	jmp	r2
   93b64:	00093ba4 	muli	zero,zero,9454
   93b68:	00093ba4 	muli	zero,zero,9454
   93b6c:	00093bb4 	movhi	zero,9454
   93b70:	00093bb4 	movhi	zero,9454
   93b74:	00093bb4 	movhi	zero,9454
   93b78:	00093ba4 	muli	zero,zero,9454
   93b7c:	00093bac 	andhi	zero,zero,9454
   93b80:	00093bb4 	movhi	zero,9454
   93b84:	00093ba4 	muli	zero,zero,9454
   93b88:	00093ba4 	muli	zero,zero,9454
   93b8c:	00093bb4 	movhi	zero,9454
   93b90:	00093ba4 	muli	zero,zero,9454
   93b94:	00093bac 	andhi	zero,zero,9454
   93b98:	00093bb4 	movhi	zero,9454
   93b9c:	00093bb4 	movhi	zero,9454
   93ba0:	00093ba4 	muli	zero,zero,9454
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   93ba4:	00800044 	movi	r2,1
   93ba8:	00000306 	br	93bb8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   93bac:	0005883a 	mov	r2,zero
   93bb0:	00000106 	br	93bb8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   93bb4:	0005883a 	mov	r2,zero
  }
}
   93bb8:	e037883a 	mov	sp,fp
   93bbc:	df000017 	ldw	fp,0(sp)
   93bc0:	dec00104 	addi	sp,sp,4
   93bc4:	f800283a 	ret

00093bc8 <atexit>:
   93bc8:	200b883a 	mov	r5,r4
   93bcc:	000f883a 	mov	r7,zero
   93bd0:	000d883a 	mov	r6,zero
   93bd4:	0009883a 	mov	r4,zero
   93bd8:	0093c901 	jmpi	93c90 <__register_exitproc>

00093bdc <exit>:
   93bdc:	defffe04 	addi	sp,sp,-8
   93be0:	000b883a 	mov	r5,zero
   93be4:	dc000015 	stw	r16,0(sp)
   93be8:	dfc00115 	stw	ra,4(sp)
   93bec:	2021883a 	mov	r16,r4
   93bf0:	0093da80 	call	93da8 <__call_exitprocs>
   93bf4:	008002b4 	movhi	r2,10
   93bf8:	10b7b704 	addi	r2,r2,-8484
   93bfc:	11000017 	ldw	r4,0(r2)
   93c00:	20800f17 	ldw	r2,60(r4)
   93c04:	10000126 	beq	r2,zero,93c0c <exit+0x30>
   93c08:	103ee83a 	callr	r2
   93c0c:	8009883a 	mov	r4,r16
   93c10:	0093f280 	call	93f28 <_exit>

00093c14 <memcmp>:
   93c14:	01c000c4 	movi	r7,3
   93c18:	3980192e 	bgeu	r7,r6,93c80 <memcmp+0x6c>
   93c1c:	2144b03a 	or	r2,r4,r5
   93c20:	11c4703a 	and	r2,r2,r7
   93c24:	10000f26 	beq	r2,zero,93c64 <memcmp+0x50>
   93c28:	20800003 	ldbu	r2,0(r4)
   93c2c:	28c00003 	ldbu	r3,0(r5)
   93c30:	10c0151e 	bne	r2,r3,93c88 <memcmp+0x74>
   93c34:	31bfff84 	addi	r6,r6,-2
   93c38:	01ffffc4 	movi	r7,-1
   93c3c:	00000406 	br	93c50 <memcmp+0x3c>
   93c40:	20800003 	ldbu	r2,0(r4)
   93c44:	28c00003 	ldbu	r3,0(r5)
   93c48:	31bfffc4 	addi	r6,r6,-1
   93c4c:	10c00e1e 	bne	r2,r3,93c88 <memcmp+0x74>
   93c50:	21000044 	addi	r4,r4,1
   93c54:	29400044 	addi	r5,r5,1
   93c58:	31fff91e 	bne	r6,r7,93c40 <__alt_data_end+0xfffbe510>
   93c5c:	0005883a 	mov	r2,zero
   93c60:	f800283a 	ret
   93c64:	20c00017 	ldw	r3,0(r4)
   93c68:	28800017 	ldw	r2,0(r5)
   93c6c:	18bfee1e 	bne	r3,r2,93c28 <__alt_data_end+0xfffbe4f8>
   93c70:	31bfff04 	addi	r6,r6,-4
   93c74:	21000104 	addi	r4,r4,4
   93c78:	29400104 	addi	r5,r5,4
   93c7c:	39bff936 	bltu	r7,r6,93c64 <__alt_data_end+0xfffbe534>
   93c80:	303fe91e 	bne	r6,zero,93c28 <__alt_data_end+0xfffbe4f8>
   93c84:	003ff506 	br	93c5c <__alt_data_end+0xfffbe52c>
   93c88:	10c5c83a 	sub	r2,r2,r3
   93c8c:	f800283a 	ret

00093c90 <__register_exitproc>:
   93c90:	defffa04 	addi	sp,sp,-24
   93c94:	dc000315 	stw	r16,12(sp)
   93c98:	040002b4 	movhi	r16,10
   93c9c:	8437b704 	addi	r16,r16,-8484
   93ca0:	80c00017 	ldw	r3,0(r16)
   93ca4:	dc400415 	stw	r17,16(sp)
   93ca8:	dfc00515 	stw	ra,20(sp)
   93cac:	18805217 	ldw	r2,328(r3)
   93cb0:	2023883a 	mov	r17,r4
   93cb4:	10003726 	beq	r2,zero,93d94 <__register_exitproc+0x104>
   93cb8:	10c00117 	ldw	r3,4(r2)
   93cbc:	010007c4 	movi	r4,31
   93cc0:	20c00e16 	blt	r4,r3,93cfc <__register_exitproc+0x6c>
   93cc4:	1a000044 	addi	r8,r3,1
   93cc8:	8800221e 	bne	r17,zero,93d54 <__register_exitproc+0xc4>
   93ccc:	18c00084 	addi	r3,r3,2
   93cd0:	18c7883a 	add	r3,r3,r3
   93cd4:	18c7883a 	add	r3,r3,r3
   93cd8:	12000115 	stw	r8,4(r2)
   93cdc:	10c7883a 	add	r3,r2,r3
   93ce0:	19400015 	stw	r5,0(r3)
   93ce4:	0005883a 	mov	r2,zero
   93ce8:	dfc00517 	ldw	ra,20(sp)
   93cec:	dc400417 	ldw	r17,16(sp)
   93cf0:	dc000317 	ldw	r16,12(sp)
   93cf4:	dec00604 	addi	sp,sp,24
   93cf8:	f800283a 	ret
   93cfc:	00800034 	movhi	r2,0
   93d00:	10800004 	addi	r2,r2,0
   93d04:	10002626 	beq	r2,zero,93da0 <__register_exitproc+0x110>
   93d08:	01006404 	movi	r4,400
   93d0c:	d9400015 	stw	r5,0(sp)
   93d10:	d9800115 	stw	r6,4(sp)
   93d14:	d9c00215 	stw	r7,8(sp)
   93d18:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   93d1c:	d9400017 	ldw	r5,0(sp)
   93d20:	d9800117 	ldw	r6,4(sp)
   93d24:	d9c00217 	ldw	r7,8(sp)
   93d28:	10001d26 	beq	r2,zero,93da0 <__register_exitproc+0x110>
   93d2c:	81000017 	ldw	r4,0(r16)
   93d30:	10000115 	stw	zero,4(r2)
   93d34:	02000044 	movi	r8,1
   93d38:	22405217 	ldw	r9,328(r4)
   93d3c:	0007883a 	mov	r3,zero
   93d40:	12400015 	stw	r9,0(r2)
   93d44:	20805215 	stw	r2,328(r4)
   93d48:	10006215 	stw	zero,392(r2)
   93d4c:	10006315 	stw	zero,396(r2)
   93d50:	883fde26 	beq	r17,zero,93ccc <__alt_data_end+0xfffbe59c>
   93d54:	18c9883a 	add	r4,r3,r3
   93d58:	2109883a 	add	r4,r4,r4
   93d5c:	1109883a 	add	r4,r2,r4
   93d60:	21802215 	stw	r6,136(r4)
   93d64:	01800044 	movi	r6,1
   93d68:	12406217 	ldw	r9,392(r2)
   93d6c:	30cc983a 	sll	r6,r6,r3
   93d70:	4992b03a 	or	r9,r9,r6
   93d74:	12406215 	stw	r9,392(r2)
   93d78:	21c04215 	stw	r7,264(r4)
   93d7c:	01000084 	movi	r4,2
   93d80:	893fd21e 	bne	r17,r4,93ccc <__alt_data_end+0xfffbe59c>
   93d84:	11006317 	ldw	r4,396(r2)
   93d88:	218cb03a 	or	r6,r4,r6
   93d8c:	11806315 	stw	r6,396(r2)
   93d90:	003fce06 	br	93ccc <__alt_data_end+0xfffbe59c>
   93d94:	18805304 	addi	r2,r3,332
   93d98:	18805215 	stw	r2,328(r3)
   93d9c:	003fc606 	br	93cb8 <__alt_data_end+0xfffbe588>
   93da0:	00bfffc4 	movi	r2,-1
   93da4:	003fd006 	br	93ce8 <__alt_data_end+0xfffbe5b8>

00093da8 <__call_exitprocs>:
   93da8:	defff504 	addi	sp,sp,-44
   93dac:	df000915 	stw	fp,36(sp)
   93db0:	dd400615 	stw	r21,24(sp)
   93db4:	dc800315 	stw	r18,12(sp)
   93db8:	dfc00a15 	stw	ra,40(sp)
   93dbc:	ddc00815 	stw	r23,32(sp)
   93dc0:	dd800715 	stw	r22,28(sp)
   93dc4:	dd000515 	stw	r20,20(sp)
   93dc8:	dcc00415 	stw	r19,16(sp)
   93dcc:	dc400215 	stw	r17,8(sp)
   93dd0:	dc000115 	stw	r16,4(sp)
   93dd4:	d9000015 	stw	r4,0(sp)
   93dd8:	2839883a 	mov	fp,r5
   93ddc:	04800044 	movi	r18,1
   93de0:	057fffc4 	movi	r21,-1
   93de4:	008002b4 	movhi	r2,10
   93de8:	10b7b704 	addi	r2,r2,-8484
   93dec:	12000017 	ldw	r8,0(r2)
   93df0:	45005217 	ldw	r20,328(r8)
   93df4:	44c05204 	addi	r19,r8,328
   93df8:	a0001c26 	beq	r20,zero,93e6c <__call_exitprocs+0xc4>
   93dfc:	a0800117 	ldw	r2,4(r20)
   93e00:	15ffffc4 	addi	r23,r2,-1
   93e04:	b8000d16 	blt	r23,zero,93e3c <__call_exitprocs+0x94>
   93e08:	14000044 	addi	r16,r2,1
   93e0c:	8421883a 	add	r16,r16,r16
   93e10:	8421883a 	add	r16,r16,r16
   93e14:	84402004 	addi	r17,r16,128
   93e18:	a463883a 	add	r17,r20,r17
   93e1c:	a421883a 	add	r16,r20,r16
   93e20:	e0001e26 	beq	fp,zero,93e9c <__call_exitprocs+0xf4>
   93e24:	80804017 	ldw	r2,256(r16)
   93e28:	e0801c26 	beq	fp,r2,93e9c <__call_exitprocs+0xf4>
   93e2c:	bdffffc4 	addi	r23,r23,-1
   93e30:	843fff04 	addi	r16,r16,-4
   93e34:	8c7fff04 	addi	r17,r17,-4
   93e38:	bd7ff91e 	bne	r23,r21,93e20 <__alt_data_end+0xfffbe6f0>
   93e3c:	00800034 	movhi	r2,0
   93e40:	10800004 	addi	r2,r2,0
   93e44:	10000926 	beq	r2,zero,93e6c <__call_exitprocs+0xc4>
   93e48:	a0800117 	ldw	r2,4(r20)
   93e4c:	1000301e 	bne	r2,zero,93f10 <__call_exitprocs+0x168>
   93e50:	a0800017 	ldw	r2,0(r20)
   93e54:	10003226 	beq	r2,zero,93f20 <__call_exitprocs+0x178>
   93e58:	a009883a 	mov	r4,r20
   93e5c:	98800015 	stw	r2,0(r19)
   93e60:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   93e64:	9d000017 	ldw	r20,0(r19)
   93e68:	a03fe41e 	bne	r20,zero,93dfc <__alt_data_end+0xfffbe6cc>
   93e6c:	dfc00a17 	ldw	ra,40(sp)
   93e70:	df000917 	ldw	fp,36(sp)
   93e74:	ddc00817 	ldw	r23,32(sp)
   93e78:	dd800717 	ldw	r22,28(sp)
   93e7c:	dd400617 	ldw	r21,24(sp)
   93e80:	dd000517 	ldw	r20,20(sp)
   93e84:	dcc00417 	ldw	r19,16(sp)
   93e88:	dc800317 	ldw	r18,12(sp)
   93e8c:	dc400217 	ldw	r17,8(sp)
   93e90:	dc000117 	ldw	r16,4(sp)
   93e94:	dec00b04 	addi	sp,sp,44
   93e98:	f800283a 	ret
   93e9c:	a0800117 	ldw	r2,4(r20)
   93ea0:	80c00017 	ldw	r3,0(r16)
   93ea4:	10bfffc4 	addi	r2,r2,-1
   93ea8:	15c01426 	beq	r2,r23,93efc <__call_exitprocs+0x154>
   93eac:	80000015 	stw	zero,0(r16)
   93eb0:	183fde26 	beq	r3,zero,93e2c <__alt_data_end+0xfffbe6fc>
   93eb4:	95c8983a 	sll	r4,r18,r23
   93eb8:	a0806217 	ldw	r2,392(r20)
   93ebc:	a5800117 	ldw	r22,4(r20)
   93ec0:	2084703a 	and	r2,r4,r2
   93ec4:	10000b26 	beq	r2,zero,93ef4 <__call_exitprocs+0x14c>
   93ec8:	a0806317 	ldw	r2,396(r20)
   93ecc:	2088703a 	and	r4,r4,r2
   93ed0:	20000c1e 	bne	r4,zero,93f04 <__call_exitprocs+0x15c>
   93ed4:	89400017 	ldw	r5,0(r17)
   93ed8:	d9000017 	ldw	r4,0(sp)
   93edc:	183ee83a 	callr	r3
   93ee0:	a0800117 	ldw	r2,4(r20)
   93ee4:	15bfbf1e 	bne	r2,r22,93de4 <__alt_data_end+0xfffbe6b4>
   93ee8:	98800017 	ldw	r2,0(r19)
   93eec:	153fcf26 	beq	r2,r20,93e2c <__alt_data_end+0xfffbe6fc>
   93ef0:	003fbc06 	br	93de4 <__alt_data_end+0xfffbe6b4>
   93ef4:	183ee83a 	callr	r3
   93ef8:	003ff906 	br	93ee0 <__alt_data_end+0xfffbe7b0>
   93efc:	a5c00115 	stw	r23,4(r20)
   93f00:	003feb06 	br	93eb0 <__alt_data_end+0xfffbe780>
   93f04:	89000017 	ldw	r4,0(r17)
   93f08:	183ee83a 	callr	r3
   93f0c:	003ff406 	br	93ee0 <__alt_data_end+0xfffbe7b0>
   93f10:	a0800017 	ldw	r2,0(r20)
   93f14:	a027883a 	mov	r19,r20
   93f18:	1029883a 	mov	r20,r2
   93f1c:	003fb606 	br	93df8 <__alt_data_end+0xfffbe6c8>
   93f20:	0005883a 	mov	r2,zero
   93f24:	003ffb06 	br	93f14 <__alt_data_end+0xfffbe7e4>

00093f28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   93f28:	defffd04 	addi	sp,sp,-12
   93f2c:	df000215 	stw	fp,8(sp)
   93f30:	df000204 	addi	fp,sp,8
   93f34:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   93f38:	0001883a 	nop
   93f3c:	e0bfff17 	ldw	r2,-4(fp)
   93f40:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   93f44:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   93f48:	10000226 	beq	r2,zero,93f54 <_exit+0x2c>
    ALT_SIM_FAIL();
   93f4c:	002af070 	cmpltui	zero,zero,43969
   93f50:	00000106 	br	93f58 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   93f54:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   93f58:	003fff06 	br	93f58 <__alt_data_end+0xfffbe828>
